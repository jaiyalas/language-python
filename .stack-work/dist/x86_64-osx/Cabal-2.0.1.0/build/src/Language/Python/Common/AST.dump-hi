
==================== FINAL INTERFACE ====================
2018-06-23 07:27:35.469855 UTC

interface language-python-0.5.5-551ZWmiBNZ181NDEMfok7Y:Language.Python.Common.AST 8022
  interface hash: 5886f58a6c15e66e4577d5c71414b25d
  ABI hash: 33488c541ff242f5692911095cbd1198
  export-list hash: f399fd5201b5af1a1d98fd75d096fbc1
  orphan hash: 784466052d874ef81a78f7f40fbecac3
  flag hash: 55985da10d3b9a611032810307d8c532
  sig of: Nothing
  used TH splices: False
  where
exports:
  Language.Python.Common.AST.Annotated{Language.Python.Common.AST.annot}
  Language.Python.Common.AST.Argument{Language.Python.Common.AST.ArgExpr Language.Python.Common.AST.ArgKeyword Language.Python.Common.AST.ArgVarArgsKeyword Language.Python.Common.AST.ArgVarArgsPos arg_annot arg_expr arg_keyword}
  Language.Python.Common.AST.ArgumentSpan
  Language.Python.Common.AST.AssignOp{Language.Python.Common.AST.BinAndAssign Language.Python.Common.AST.BinOrAssign Language.Python.Common.AST.BinXorAssign Language.Python.Common.AST.DivAssign Language.Python.Common.AST.FloorDivAssign Language.Python.Common.AST.LeftShiftAssign Language.Python.Common.AST.MatrixMultAssign Language.Python.Common.AST.MinusAssign Language.Python.Common.AST.ModAssign Language.Python.Common.AST.MultAssign Language.Python.Common.AST.PlusAssign Language.Python.Common.AST.PowAssign Language.Python.Common.AST.RightShiftAssign assignOp_annot}
  Language.Python.Common.AST.AssignOpSpan
  Language.Python.Common.AST.CompFor{Language.Python.Common.AST.CompFor comp_for_annot comp_for_async comp_for_exprs comp_for_iter comp_in_expr}
  Language.Python.Common.AST.CompForSpan
  Language.Python.Common.AST.CompIf{Language.Python.Common.AST.CompIf comp_if comp_if_annot comp_if_iter}
  Language.Python.Common.AST.CompIfSpan
  Language.Python.Common.AST.CompIter{Language.Python.Common.AST.IterFor Language.Python.Common.AST.IterIf comp_iter_annot comp_iter_for comp_iter_if}
  Language.Python.Common.AST.CompIterSpan
  Language.Python.Common.AST.Comprehension{Language.Python.Common.AST.Comprehension comprehension_annot comprehension_expr comprehension_for}
  Language.Python.Common.AST.ComprehensionExpr{Language.Python.Common.AST.ComprehensionDict Language.Python.Common.AST.ComprehensionExpr}
  Language.Python.Common.AST.ComprehensionExprSpan
  Language.Python.Common.AST.ComprehensionSpan
  Language.Python.Common.AST.Decorator{Language.Python.Common.AST.Decorator decorator_annot decorator_args decorator_name}
  Language.Python.Common.AST.DecoratorSpan
  Language.Python.Common.AST.DictKeyDatumList{Language.Python.Common.AST.DictMappingPair Language.Python.Common.AST.DictUnpacking}
  Language.Python.Common.AST.DictKeyDatumListSpan
  Language.Python.Common.AST.DottedName
  Language.Python.Common.AST.DottedNameSpan
  Language.Python.Common.AST.ExceptClause{Language.Python.Common.AST.ExceptClause except_clause except_clause_annot}
  Language.Python.Common.AST.ExceptClauseSpan
  Language.Python.Common.AST.Expr{Language.Python.Common.AST.Await Language.Python.Common.AST.BinaryOp Language.Python.Common.AST.Bool Language.Python.Common.AST.ByteStrings Language.Python.Common.AST.Call Language.Python.Common.AST.CondExpr Language.Python.Common.AST.DictComp Language.Python.Common.AST.Dictionary Language.Python.Common.AST.Dot Language.Python.Common.AST.Ellipsis Language.Python.Common.AST.Float Language.Python.Common.AST.Generator Language.Python.Common.AST.Imaginary Language.Python.Common.AST.Int Language.Python.Common.AST.Lambda Language.Python.Common.AST.List Language.Python.Common.AST.ListComp Language.Python.Common.AST.LongInt Language.Python.Common.AST.None Language.Python.Common.AST.Paren Language.Python.Common.AST.Set Language.Python.Common.AST.SetComp Language.Python.Common.AST.SlicedExpr Language.Python.Common.AST.Starred Language.Python.Common.AST.StringConversion Language.Python.Common.AST.Strings Language.Python.Common.AST.Subscript Language.Python.Common.AST.Tuple Language.Python.Common.AST.UnaryOp Language.Python.Common.AST.UnicodeStrings Language.Python.Common.AST.Var Language.Python.Common.AST.Yield await_expr backquoted_expr bool_value byte_string_strings call_args call_fun ce_condition ce_false_branch ce_true_branch dict_comprehension dict_mappings dot_attribute dot_expr expr_annot expr_anot expr_literal float_value gen_comprehension imaginary_value int_value lambda_args lambda_body left_op_arg list_comprehension list_exprs op_arg operator paren_expr right_op_arg set_comprehension set_exprs slicee slices starred_expr strings_strings subscript_expr subscriptee tuple_exprs unicodestrings_strings var_ident yield_arg}
  Language.Python.Common.AST.ExprSpan
  Language.Python.Common.AST.FromItem{Language.Python.Common.AST.FromItem from_as_name from_item_annot from_item_name}
  Language.Python.Common.AST.FromItemSpan
  Language.Python.Common.AST.FromItems{Language.Python.Common.AST.FromItems Language.Python.Common.AST.ImportEverything from_items_annot from_items_items}
  Language.Python.Common.AST.FromItemsSpan
  Language.Python.Common.AST.Handler{Language.Python.Common.AST.Handler handler_annot handler_clause handler_suite}
  Language.Python.Common.AST.HandlerSpan
  Language.Python.Common.AST.Ident{Language.Python.Common.AST.Ident ident_annot ident_string}
  Language.Python.Common.AST.IdentSpan
  Language.Python.Common.AST.ImportItem{Language.Python.Common.AST.ImportItem import_as_name import_item_annot import_item_name}
  Language.Python.Common.AST.ImportItemSpan
  Language.Python.Common.AST.ImportRelative{Language.Python.Common.AST.ImportRelative import_relative_annot import_relative_dots import_relative_module}
  Language.Python.Common.AST.ImportRelativeSpan
  Language.Python.Common.AST.Module{Language.Python.Common.AST.Module}
  Language.Python.Common.AST.ModuleSpan
  Language.Python.Common.AST.Op{Language.Python.Common.AST.And Language.Python.Common.AST.BinaryAnd Language.Python.Common.AST.BinaryOr Language.Python.Common.AST.Divide Language.Python.Common.AST.Equality Language.Python.Common.AST.Exponent Language.Python.Common.AST.FloorDivide Language.Python.Common.AST.GreaterThan Language.Python.Common.AST.GreaterThanEquals Language.Python.Common.AST.In Language.Python.Common.AST.Invert Language.Python.Common.AST.Is Language.Python.Common.AST.IsNot Language.Python.Common.AST.LessThan Language.Python.Common.AST.LessThanEquals Language.Python.Common.AST.MatrixMult Language.Python.Common.AST.Minus Language.Python.Common.AST.Modulo Language.Python.Common.AST.Multiply Language.Python.Common.AST.Not Language.Python.Common.AST.NotEquals Language.Python.Common.AST.NotEqualsV2 Language.Python.Common.AST.NotIn Language.Python.Common.AST.Or Language.Python.Common.AST.Plus Language.Python.Common.AST.ShiftLeft Language.Python.Common.AST.ShiftRight Language.Python.Common.AST.Xor op_annot}
  Language.Python.Common.AST.OpSpan
  Language.Python.Common.AST.ParamTuple{Language.Python.Common.AST.ParamTuple Language.Python.Common.AST.ParamTupleName param_tuple param_tuple_annot param_tuple_name}
  Language.Python.Common.AST.ParamTupleSpan
  Language.Python.Common.AST.Parameter{Language.Python.Common.AST.EndPositional Language.Python.Common.AST.Param Language.Python.Common.AST.UnPackTuple Language.Python.Common.AST.VarArgsKeyword Language.Python.Common.AST.VarArgsPos param_annot param_default param_name param_py_annotation param_unpack_tuple}
  Language.Python.Common.AST.ParameterSpan
  Language.Python.Common.AST.RaiseExpr{Language.Python.Common.AST.RaiseV2 Language.Python.Common.AST.RaiseV3}
  Language.Python.Common.AST.RaiseExprSpan
  Language.Python.Common.AST.Slice{Language.Python.Common.AST.SliceEllipsis Language.Python.Common.AST.SliceExpr Language.Python.Common.AST.SliceProper slice_annot slice_expr slice_lower slice_stride slice_upper}
  Language.Python.Common.AST.SliceSpan
  Language.Python.Common.AST.Statement{Language.Python.Common.AST.AnnotatedAssign Language.Python.Common.AST.Assert Language.Python.Common.AST.Assign Language.Python.Common.AST.AsyncFor Language.Python.Common.AST.AsyncFun Language.Python.Common.AST.AsyncWith Language.Python.Common.AST.AugmentedAssign Language.Python.Common.AST.Break Language.Python.Common.AST.Class Language.Python.Common.AST.Conditional Language.Python.Common.AST.Continue Language.Python.Common.AST.Decorated Language.Python.Common.AST.Delete Language.Python.Common.AST.Exec Language.Python.Common.AST.For Language.Python.Common.AST.FromImport Language.Python.Common.AST.Fun Language.Python.Common.AST.Global Language.Python.Common.AST.Import Language.Python.Common.AST.NonLocal Language.Python.Common.AST.Pass Language.Python.Common.AST.Print Language.Python.Common.AST.Raise Language.Python.Common.AST.Return Language.Python.Common.AST.StmtExpr Language.Python.Common.AST.Try Language.Python.Common.AST.While Language.Python.Common.AST.With ann_assign_annotation ann_assign_expr ann_assign_to assert_exprs assign_expr assign_to aug_assign_expr aug_assign_op aug_assign_to class_args class_body class_name cond_else cond_guards decorated_decorators decorated_def del_exprs exec_expr exec_globals_locals for_body for_else for_generator for_stmt for_targets from_items from_module fun_args fun_body fun_def fun_name fun_result_annotation global_vars import_items nonLocal_vars print_chevron print_exprs print_trailing_comma raise_expr return_expr stmt_annot stmt_expr try_body try_else try_excepts try_finally while_body while_cond while_else with_body with_context with_stmt}
  Language.Python.Common.AST.StatementSpan
  Language.Python.Common.AST.Suite
  Language.Python.Common.AST.SuiteSpan
  Language.Python.Common.AST.YieldArg{Language.Python.Common.AST.YieldExpr Language.Python.Common.AST.YieldFrom}
  Language.Python.Common.AST.YieldArgSpan
module dependencies: Language.Python.Common.Pretty
                     Language.Python.Common.SrcLocation
package dependencies: array-0.5.2.0 base-4.10.1.0* deepseq-1.4.3.0
                      ghc-prim-0.5.1.1 integer-gmp-1.0.1.0 pretty-1.1.3.3
orphans: base-4.10.1.0:GHC.Float base-4.10.1.0:GHC.Base
family instance modules: base-4.10.1.0:Control.Applicative
                         base-4.10.1.0:Data.Complex base-4.10.1.0:Data.Either
                         base-4.10.1.0:Data.Functor.Compose base-4.10.1.0:Data.Functor.Const
                         base-4.10.1.0:Data.Functor.Identity
                         base-4.10.1.0:Data.Functor.Product base-4.10.1.0:Data.Functor.Sum
                         base-4.10.1.0:Data.List.NonEmpty base-4.10.1.0:Data.Monoid
                         base-4.10.1.0:Data.Semigroup base-4.10.1.0:Data.Type.Equality
                         base-4.10.1.0:Data.Version base-4.10.1.0:Data.Void
                         base-4.10.1.0:GHC.Exts base-4.10.1.0:GHC.Generics
                         base-4.10.1.0:GHC.IO.Exception base-4.10.1.0:GHC.TypeLits
                         base-4.10.1.0:GHC.TypeNats
                         pretty-1.1.3.3:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.3:Text.PrettyPrint.HughesPJ
import  -/  base-4.10.1.0:Data.Data c16c1b59ecdb12037d0296eaec32afef
import  -/  base-4.10.1.0:Data.Typeable 3291e9b95e37ffc276f1f4c39c7b8372
import  -/  base-4.10.1.0:Data.Typeable.Internal b31684019ac02e3213b270a8482ac844
import  -/  base-4.10.1.0:GHC.Base 782fd99b5e36f3698a26179a49afca64
import  -/  base-4.10.1.0:GHC.Show 0a8ce2b5e533d1c2cfb7954e6736be45
import  -/  base-4.10.1.0:Prelude 31945b7d0084063347fc52506d3a4020
import  -/  ghc-prim-0.5.1.1:GHC.Classes 93e2660065dce9329577e83d76d8f0d4
import  -/  ghc-prim-0.5.1.1:GHC.Types b1fd0716441595db508c1a74387bf394
import  -/  integer-gmp-1.0.1.0:GHC.Integer.Type 5fa81108482c33b62ec3ac7464eece96
import  -/  Language.Python.Common.SrcLocation 8f143931064eb388f1f2a6dd7f644740
  exports: 53449eeea761b903564548d6dcb5e6f4
  Span 6745f4d7f5c89ca40c260953253bdbce
  SrcSpan 7855650ba5477745c617b1d6a2c60117
  getSpan 705afb86514220eddda721f71e34f0d3
  spanning 6745f4d7f5c89ca40c260953253bdbce
addDependentFile "/Users/jaiyalas/.stack/programs/x86_64-osx/ghc-8.2.2/lib/ghc-8.2.2/include/ghcversion.h"
addDependentFile ".stack-work/dist/x86_64-osx/Cabal-2.0.1.0/build/autogen/cabal_macros.h"
c85057ad0c458472b094ce8de34dde46
  $cAnd :: Data.Data.Constr
  {- Strictness: m -}
d2fc3b7ebde071488218e2533e4206f2
  $cAnnotatedAssign :: Data.Data.Constr
  {- Strictness: m -}
75ec83c2864d1972d0bdb4f080ee210a
  $cArgExpr :: Data.Data.Constr
  {- Strictness: m -}
164a0412df120ad40aacca1a07455266
  $cArgKeyword :: Data.Data.Constr
  {- Strictness: m -}
785c5223263ddae902d31031007face9
  $cArgVarArgsKeyword :: Data.Data.Constr
  {- Strictness: m -}
25486b73913accbf14a46d44cda40cc0
  $cArgVarArgsPos :: Data.Data.Constr
  {- Strictness: m -}
c76252cfe752522186b623945e1fac14
  $cAssert :: Data.Data.Constr
  {- Strictness: m -}
8af6563a25ca0bd7a43b7d9bb9191f55
  $cAssign :: Data.Data.Constr
  {- Strictness: m -}
c35821d161be5cebf5996b9ca6125313
  $cAsyncFor :: Data.Data.Constr
  {- Strictness: m -}
791f55fd487f34e4c27cceb0c8b48db7
  $cAsyncFun :: Data.Data.Constr
  {- Strictness: m -}
564f0a6ffa3aba6d6a254ffc4aeff366
  $cAsyncWith :: Data.Data.Constr
  {- Strictness: m -}
97cac4a2c9fa0b5c354e5f6fe6892186
  $cAugmentedAssign :: Data.Data.Constr
  {- Strictness: m -}
ffdc2dba9b1f05494978d35df2ff37fd
  $cAwait :: Data.Data.Constr
  {- Strictness: m -}
c8b2af8b3b25f3b3a8c7991d8cf47306
  $cBinAndAssign :: Data.Data.Constr
  {- Strictness: m -}
1e7ab902d125b4b886ecd92656ddfcdc
  $cBinOrAssign :: Data.Data.Constr
  {- Strictness: m -}
64d84cce34bd2a76c31183cc60491e22
  $cBinXorAssign :: Data.Data.Constr
  {- Strictness: m -}
b923803ea073ff4e621616276e455ab6
  $cBinaryAnd :: Data.Data.Constr
  {- Strictness: m -}
faf13ffdfabd4b17376af47f8ddab59c
  $cBinaryOp :: Data.Data.Constr
  {- Strictness: m -}
c3fe7833850c0febe7694ac1d1528a09
  $cBinaryOr :: Data.Data.Constr
  {- Strictness: m -}
a627c17abdc2da1fff1e4e5e89680baf
  $cBool :: Data.Data.Constr
  {- Strictness: m -}
98e1e2703be262a6970196ec37df4fe1
  $cBreak :: Data.Data.Constr
  {- Strictness: m -}
a15e6e04a01074b2ab41cfa4d0446b17
  $cByteStrings :: Data.Data.Constr
  {- Strictness: m -}
5b4bcaa03d485da13602addbfb09624c
  $cCall :: Data.Data.Constr
  {- Strictness: m -}
b06a75eb7e0d6a1a48771f8e6780123c
  $cClass :: Data.Data.Constr
  {- Strictness: m -}
896747612e3bcc2f35c47678f2cd2aae
  $cCompFor :: Data.Data.Constr
  {- Strictness: m -}
ed57acb1dbc617bbc2cf4ac08ec59533
  $cCompIf :: Data.Data.Constr
  {- Strictness: m -}
5ef7058be9296661052508acc720bd66
  $cComprehension :: Data.Data.Constr
  {- Strictness: m -}
46cf2befb749663f13aa599b0961cfda
  $cComprehensionDict :: Data.Data.Constr
  {- Strictness: m -}
6cc77dcedd41ba00447324ab4a028def
  $cComprehensionExpr :: Data.Data.Constr
  {- Strictness: m -}
b5d175e5741d3d4bd6593d052a2742d3
  $cCondExpr :: Data.Data.Constr
  {- Strictness: m -}
5962017c924f5cd81dac0f5cd8f1f706
  $cConditional :: Data.Data.Constr
  {- Strictness: m -}
da41f6ad622748b302168c98fc138f90
  $cContinue :: Data.Data.Constr
  {- Strictness: m -}
22bffb38958e49fdf8b09a3767670bb9
  $cDecorated :: Data.Data.Constr
  {- Strictness: m -}
3f01a2269d33c57a5484e460ff810709
  $cDecorator :: Data.Data.Constr
  {- Strictness: m -}
f8cac36c29935760f65fcf444f19b50f
  $cDelete :: Data.Data.Constr
  {- Strictness: m -}
3a7e43b69f2b5f8003c977b507434576
  $cDictComp :: Data.Data.Constr
  {- Strictness: m -}
35f63788f892d646c7cd146e445df2b5
  $cDictMappingPair :: Data.Data.Constr
  {- Strictness: m -}
f0fd19709c7d2e28f9da2d714db276bb
  $cDictUnpacking :: Data.Data.Constr
  {- Strictness: m -}
ee9095d7b9b1630d6d01df387a9a56b7
  $cDictionary :: Data.Data.Constr
  {- Strictness: m -}
a6f45d88cb74ffd69975e3ee36daeac6
  $cDivAssign :: Data.Data.Constr
  {- Strictness: m -}
62d9f3f825467c73fe756f1845d7c56f
  $cDivide :: Data.Data.Constr
  {- Strictness: m -}
c90a74b5914231c54d35089134112e65
  $cDot :: Data.Data.Constr
  {- Strictness: m -}
7d344f6b0d4895fe41f84500949ac186
  $cEllipsis :: Data.Data.Constr
  {- Strictness: m -}
610c70e600620a1d9a1b3416b17f780a
  $cEndPositional :: Data.Data.Constr
  {- Strictness: m -}
4798e58a4ca9c82c11df7e7b42277061
  $cEquality :: Data.Data.Constr
  {- Strictness: m -}
51847218b302469cad6710133e7eec1c
  $cExceptClause :: Data.Data.Constr
  {- Strictness: m -}
a42d1e2a57ea15834e26ba8991c93c87
  $cExec :: Data.Data.Constr
  {- Strictness: m -}
478dc9001590fc333e93c170ce6fc31b
  $cExponent :: Data.Data.Constr
  {- Strictness: m -}
2096d2ce53f414ffe87e58e7be16b3a5
  $cFloat :: Data.Data.Constr
  {- Strictness: m -}
e960536717c02eb51e26daf5387ca680
  $cFloorDivAssign :: Data.Data.Constr
  {- Strictness: m -}
cd3fcb48e7934da94cffffb594783816
  $cFloorDivide :: Data.Data.Constr
  {- Strictness: m -}
7a59f8253d72a31deecb31ee118b0d4a
  $cFor :: Data.Data.Constr
  {- Strictness: m -}
0bb70030ed1f8240471f2b480c7cf40c
  $cFromImport :: Data.Data.Constr
  {- Strictness: m -}
212436269c5c69565ca6805a3d5147b8
  $cFromItem :: Data.Data.Constr
  {- Strictness: m -}
4ba51ebc53bde88f8cf35c5c334fc2b9
  $cFromItems :: Data.Data.Constr
  {- Strictness: m -}
80247d3eb0d1ef0d79a9ef290e6a5f86
  $cFun :: Data.Data.Constr
  {- Strictness: m -}
c1287a2d37c0fb6329a5bbdf9d811e75
  $cGenerator :: Data.Data.Constr
  {- Strictness: m -}
609a227ca20665ec8c77c7e46f318a9f
  $cGlobal :: Data.Data.Constr
  {- Strictness: m -}
d2a9f7e6aa92671e34ac12935dc99596
  $cGreaterThan :: Data.Data.Constr
  {- Strictness: m -}
c4bebfed1b7ecc457c7c307f5e70ce84
  $cGreaterThanEquals :: Data.Data.Constr
  {- Strictness: m -}
49d6e4eadcaa371c6d93e95eb2115abf
  $cHandler :: Data.Data.Constr
  {- Strictness: m -}
d571ffeec63a3f4b8f00d33118b2cb3f
  $cIdent :: Data.Data.Constr
  {- Strictness: m -}
aae068aeb836bb7b35df2077e702d9f7
  $cImaginary :: Data.Data.Constr
  {- Strictness: m -}
c0501fa3577cd9bce8f0967ebef54ec5
  $cImport :: Data.Data.Constr
  {- Strictness: m -}
2aa7314e64f5a506c1a8fe718868a1fe
  $cImportEverything :: Data.Data.Constr
  {- Strictness: m -}
6fecaf9f9b9b53c2e4c108d59eb97b06
  $cImportItem :: Data.Data.Constr
  {- Strictness: m -}
b1bce64ccb942f9256b83930eb5367ba
  $cImportRelative :: Data.Data.Constr
  {- Strictness: m -}
299e7c18f51b44b761ebda7ac8d6a967
  $cIn :: Data.Data.Constr
  {- Strictness: m -}
5a5fa69f330f63f8899b6dfb6f5ed940
  $cInt :: Data.Data.Constr
  {- Strictness: m -}
064bb8238399cf063cc97b46f8eb595d
  $cInvert :: Data.Data.Constr
  {- Strictness: m -}
30ec0e31124d47c3c68a5db079859755
  $cIs :: Data.Data.Constr
  {- Strictness: m -}
9485d80c586454f61e78b30864936c43
  $cIsNot :: Data.Data.Constr
  {- Strictness: m -}
0a9b9ec7429e9d48e344da2cdced280d
  $cIterFor :: Data.Data.Constr
  {- Strictness: m -}
65f6bfaae15d1e4a3e851bb209326188
  $cIterIf :: Data.Data.Constr
  {- Strictness: m -}
382d1c2a78214f82a9a3167de826af98
  $cLambda :: Data.Data.Constr
  {- Strictness: m -}
01466acb956676983fc9a0cdc9ce3f8e
  $cLeftShiftAssign :: Data.Data.Constr
  {- Strictness: m -}
d168d5819533e74c7ecf3f7923431e8c
  $cLessThan :: Data.Data.Constr
  {- Strictness: m -}
be3ded5c176627896e20744dcc89eb00
  $cLessThanEquals :: Data.Data.Constr
  {- Strictness: m -}
54a9ffd6bd1acfb988bf553e0643b8e2
  $cList :: Data.Data.Constr
  {- Strictness: m -}
54b0a5969be15209ee66bc8bf2f4a8be
  $cListComp :: Data.Data.Constr
  {- Strictness: m -}
ef9f17af195f3ecd9313aa69987280d1
  $cLongInt :: Data.Data.Constr
  {- Strictness: m -}
35c2acfa52727922b00e4f39d890bcec
  $cMatrixMult :: Data.Data.Constr
  {- Strictness: m -}
1f7d76eeb6811512d38f836718e2038b
  $cMatrixMultAssign :: Data.Data.Constr
  {- Strictness: m -}
e838a802eb69abfa0ef67efb6f12191f
  $cMinus :: Data.Data.Constr
  {- Strictness: m -}
a8499c8de49c27072ec38c928de493b2
  $cMinusAssign :: Data.Data.Constr
  {- Strictness: m -}
f0ee0405ea020e202fea11ff6bec6465
  $cModAssign :: Data.Data.Constr
  {- Strictness: m -}
140dcd03b6755e64718ffd0a2a6bcd17
  $cModule :: Data.Data.Constr
  {- Strictness: m -}
3d60c9bc1a04b24c56ffbecf6fed7ebf
  $cModulo :: Data.Data.Constr
  {- Strictness: m -}
b71ef5d281e855b16c2de795d1747990
  $cMultAssign :: Data.Data.Constr
  {- Strictness: m -}
fe1dc7b10d5230c60afb30c67fb06e01
  $cMultiply :: Data.Data.Constr
  {- Strictness: m -}
e5155347f552a1da352becff8091b599
  $cNonLocal :: Data.Data.Constr
  {- Strictness: m -}
cf2b7cdc12ad7ee5f843b5f0040e928e
  $cNone :: Data.Data.Constr
  {- Strictness: m -}
832689e61d6123cb118142f5da633632
  $cNot :: Data.Data.Constr
  {- Strictness: m -}
86e707953a68560774ba6a434faef543
  $cNotEquals :: Data.Data.Constr
  {- Strictness: m -}
fe6b94dc94e3aa2e165f5c19a2221420
  $cNotEqualsV2 :: Data.Data.Constr
  {- Strictness: m -}
60951c09167ce9ee255ad3754c3fdf77
  $cNotIn :: Data.Data.Constr
  {- Strictness: m -}
292c5d11cb9d99d31ec09697c9057509
  $cOr :: Data.Data.Constr
  {- Strictness: m -}
d3a00fd0092dfbb73539269e5fe9b084
  $cParam :: Data.Data.Constr
  {- Strictness: m -}
37e7e39c8c4c03fae502ad4ac95390eb
  $cParamTuple :: Data.Data.Constr
  {- Strictness: m -}
6094643fe34d701ba88a79e95372df98
  $cParamTupleName :: Data.Data.Constr
  {- Strictness: m -}
1f7f961c5f32d57746b373bff080169f
  $cParen :: Data.Data.Constr
  {- Strictness: m -}
e947c6d6203e466ef552c47ea220fbe1
  $cPass :: Data.Data.Constr
  {- Strictness: m -}
6737fbbd283efebe8eac7008e10c3842
  $cPlus :: Data.Data.Constr
  {- Strictness: m -}
d6e2f180c3dc6fe503f3dacfc7741fde
  $cPlusAssign :: Data.Data.Constr
  {- Strictness: m -}
1d2db9c603b24f0eabed56eac1dda59d
  $cPowAssign :: Data.Data.Constr
  {- Strictness: m -}
8bdb1231bff339522cdad780006c61d1
  $cPrint :: Data.Data.Constr
  {- Strictness: m -}
59057f47da08499ae0c7276f960c351a
  $cRaise :: Data.Data.Constr
  {- Strictness: m -}
586b4e45e4932349042a09732e6cd5a2
  $cRaiseV2 :: Data.Data.Constr
  {- Strictness: m -}
e0afaef094fa2c9d00a1a14364b7558b
  $cRaiseV3 :: Data.Data.Constr
  {- Strictness: m -}
d9a3a30804fd5c9a922c4f8ff963b2cc
  $cReturn :: Data.Data.Constr
  {- Strictness: m -}
8a59059b421885ebacd5d02a92900497
  $cRightShiftAssign :: Data.Data.Constr
  {- Strictness: m -}
89cbc449ada041859677b8040c7a2354
  $cSet :: Data.Data.Constr
  {- Strictness: m -}
666aa9023af72aba5d66fe11be6287d6
  $cSetComp :: Data.Data.Constr
  {- Strictness: m -}
f9e7d2673404566ba4f60b7e74481f37
  $cShiftLeft :: Data.Data.Constr
  {- Strictness: m -}
f634b2d6f0eecea6089634952e266bcc
  $cShiftRight :: Data.Data.Constr
  {- Strictness: m -}
c0e8e9566374cd95d051a4d34e89587d
  $cSliceEllipsis :: Data.Data.Constr
  {- Strictness: m -}
5904ef4400b6e20b3de034b3f84f13e5
  $cSliceExpr :: Data.Data.Constr
  {- Strictness: m -}
f93daed442f0ec520628d48857c9a361
  $cSliceProper :: Data.Data.Constr
  {- Strictness: m -}
4f3ff7f5bf3fe2123eaee96d0bf3167e
  $cSlicedExpr :: Data.Data.Constr
  {- Strictness: m -}
498761dc097ef4721f931d0df2711c8b
  $cStarred :: Data.Data.Constr
  {- Strictness: m -}
8b724c19cb84cbb0ea55209e9b5d46bc
  $cStmtExpr :: Data.Data.Constr
  {- Strictness: m -}
e533b518f34ed4d092bc86154c4dfc9a
  $cStringConversion :: Data.Data.Constr
  {- Strictness: m -}
5c1b4b07f15119e0aba8feb4304c4fbc
  $cStrings :: Data.Data.Constr
  {- Strictness: m -}
23a8b6fc981ae3ad300a7be3c1398c72
  $cSubscript :: Data.Data.Constr
  {- Strictness: m -}
bef2c1a523ded3b33140e4911315e8eb
  $cTry :: Data.Data.Constr
  {- Strictness: m -}
e78cd341b14b3ed297941e1bd4a67015
  $cTuple :: Data.Data.Constr
  {- Strictness: m -}
dd9f009d3aee904b518f056809a8d9c1
  $cUnPackTuple :: Data.Data.Constr
  {- Strictness: m -}
a97251ade3a1f56e243864f99ffa20bf
  $cUnaryOp :: Data.Data.Constr
  {- Strictness: m -}
d72510284d71565bc2bdee789000c449
  $cUnicodeStrings :: Data.Data.Constr
  {- Strictness: m -}
ff30b956ab0a289632b6b56b6b6027d2
  $cVar :: Data.Data.Constr
  {- Strictness: m -}
ccbe0438878d54b87b01c2996a8f90a8
  $cVarArgsKeyword :: Data.Data.Constr
  {- Strictness: m -}
04635de3595a4f968289f86281b8bc86
  $cVarArgsPos :: Data.Data.Constr
  {- Strictness: m -}
5416bbaac663de950128d6f8d53834ac
  $cWhile :: Data.Data.Constr
  {- Strictness: m -}
ffe6b6383ba9e449d715a892e4d54fce
  $cWith :: Data.Data.Constr
  {- Strictness: m -}
01c1260930ace7e096bbafa6ce1b60ff
  $cXor :: Data.Data.Constr
  {- Strictness: m -}
60eac5f3de04a4e60430df1146e6ee8d
  $cYield :: Data.Data.Constr
  {- Strictness: m -}
a2734b4d0d498fce9a4cefe0df26a2ba
  $cYieldExpr :: Data.Data.Constr
  {- Strictness: m -}
0a949d3fbb92de2aeae95680c2b547b6
  $cYieldFrom :: Data.Data.Constr
  {- Strictness: m -}
ca5b475912faba16480ea09a8091760b
  $fAnnotatedArgument ::
    Language.Python.Common.AST.Annotated
      Language.Python.Common.AST.Argument
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Language.Python.Common.AST.arg_annot
                  `cast`
                (Sym (Language.Python.Common.AST.N:Annotated[0]
                          <Language.Python.Common.AST.Argument>_N)) -}
ca5b475912faba16480ea09a8091760b
  $fAnnotatedAssignOp ::
    Language.Python.Common.AST.Annotated
      Language.Python.Common.AST.AssignOp
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Language.Python.Common.AST.assignOp_annot
                  `cast`
                (Sym (Language.Python.Common.AST.N:Annotated[0]
                          <Language.Python.Common.AST.AssignOp>_N)) -}
ca5b475912faba16480ea09a8091760b
  $fAnnotatedCompFor ::
    Language.Python.Common.AST.Annotated
      Language.Python.Common.AST.CompFor
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLLLS),1*U(A,A,A,A,1*U)>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Language.Python.Common.AST.comp_for_annot
                  `cast`
                (Sym (Language.Python.Common.AST.N:Annotated[0]
                          <Language.Python.Common.AST.CompFor>_N)) -}
ca5b475912faba16480ea09a8091760b
  $fAnnotatedCompIf ::
    Language.Python.Common.AST.Annotated
      Language.Python.Common.AST.CompIf
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLS),1*U(A,A,1*U)>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Language.Python.Common.AST.comp_if_annot
                  `cast`
                (Sym (Language.Python.Common.AST.N:Annotated[0]
                          <Language.Python.Common.AST.CompIf>_N)) -}
ca5b475912faba16480ea09a8091760b
  $fAnnotatedCompIter ::
    Language.Python.Common.AST.Annotated
      Language.Python.Common.AST.CompIter
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Language.Python.Common.AST.comp_iter_annot
                  `cast`
                (Sym (Language.Python.Common.AST.N:Annotated[0]
                          <Language.Python.Common.AST.CompIter>_N)) -}
ca5b475912faba16480ea09a8091760b
  $fAnnotatedComprehension ::
    Language.Python.Common.AST.Annotated
      Language.Python.Common.AST.Comprehension
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLS),1*U(A,A,1*U)>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Language.Python.Common.AST.comprehension_annot
                  `cast`
                (Sym (Language.Python.Common.AST.N:Annotated[0]
                          <Language.Python.Common.AST.Comprehension>_N)) -}
ca5b475912faba16480ea09a8091760b
  $fAnnotatedDecorator ::
    Language.Python.Common.AST.Annotated
      Language.Python.Common.AST.Decorator
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLS),1*U(A,A,1*U)>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Language.Python.Common.AST.decorator_annot
                  `cast`
                (Sym (Language.Python.Common.AST.N:Annotated[0]
                          <Language.Python.Common.AST.Decorator>_N)) -}
ca5b475912faba16480ea09a8091760b
  $fAnnotatedExceptClause ::
    Language.Python.Common.AST.Annotated
      Language.Python.Common.AST.ExceptClause
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LS),1*U(A,1*U)>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Language.Python.Common.AST.except_clause_annot
                  `cast`
                (Sym (Language.Python.Common.AST.N:Annotated[0]
                          <Language.Python.Common.AST.ExceptClause>_N)) -}
ca5b475912faba16480ea09a8091760b
  $fAnnotatedExpr ::
    Language.Python.Common.AST.Annotated
      Language.Python.Common.AST.Expr
  DFunId
  {- Arity: 1, Strictness: <S,1*U>, Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Language.Python.Common.AST.expr_annot
                  `cast`
                (Sym (Language.Python.Common.AST.N:Annotated[0]
                          <Language.Python.Common.AST.Expr>_N)) -}
ca5b475912faba16480ea09a8091760b
  $fAnnotatedFromItem ::
    Language.Python.Common.AST.Annotated
      Language.Python.Common.AST.FromItem
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLS),1*U(A,A,1*U)>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Language.Python.Common.AST.from_item_annot
                  `cast`
                (Sym (Language.Python.Common.AST.N:Annotated[0]
                          <Language.Python.Common.AST.FromItem>_N)) -}
ca5b475912faba16480ea09a8091760b
  $fAnnotatedFromItems ::
    Language.Python.Common.AST.Annotated
      Language.Python.Common.AST.FromItems
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Language.Python.Common.AST.from_items_annot
                  `cast`
                (Sym (Language.Python.Common.AST.N:Annotated[0]
                          <Language.Python.Common.AST.FromItems>_N)) -}
ca5b475912faba16480ea09a8091760b
  $fAnnotatedHandler ::
    Language.Python.Common.AST.Annotated
      Language.Python.Common.AST.Handler
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLS),1*U(A,A,1*U)>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Language.Python.Common.AST.handler_annot
                  `cast`
                (Sym (Language.Python.Common.AST.N:Annotated[0]
                          <Language.Python.Common.AST.Handler>_N)) -}
ca5b475912faba16480ea09a8091760b
  $fAnnotatedIdent ::
    Language.Python.Common.AST.Annotated
      Language.Python.Common.AST.Ident
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LS),1*U(A,1*U)>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Language.Python.Common.AST.ident_annot
                  `cast`
                (Sym (Language.Python.Common.AST.N:Annotated[0]
                          <Language.Python.Common.AST.Ident>_N)) -}
ca5b475912faba16480ea09a8091760b
  $fAnnotatedImportItem ::
    Language.Python.Common.AST.Annotated
      Language.Python.Common.AST.ImportItem
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLS),1*U(A,A,1*U)>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Language.Python.Common.AST.import_item_annot
                  `cast`
                (Sym (Language.Python.Common.AST.N:Annotated[0]
                          <Language.Python.Common.AST.ImportItem>_N)) -}
ca5b475912faba16480ea09a8091760b
  $fAnnotatedImportRelative ::
    Language.Python.Common.AST.Annotated
      Language.Python.Common.AST.ImportRelative
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLS),1*U(A,A,1*U)>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Language.Python.Common.AST.import_relative_annot
                  `cast`
                (Sym (Language.Python.Common.AST.N:Annotated[0]
                          <Language.Python.Common.AST.ImportRelative>_N)) -}
ca5b475912faba16480ea09a8091760b
  $fAnnotatedOp ::
    Language.Python.Common.AST.Annotated Language.Python.Common.AST.Op
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Language.Python.Common.AST.op_annot
                  `cast`
                (Sym (Language.Python.Common.AST.N:Annotated[0]
                          <Language.Python.Common.AST.Op>_N)) -}
ca5b475912faba16480ea09a8091760b
  $fAnnotatedParamTuple ::
    Language.Python.Common.AST.Annotated
      Language.Python.Common.AST.ParamTuple
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Language.Python.Common.AST.param_tuple_annot
                  `cast`
                (Sym (Language.Python.Common.AST.N:Annotated[0]
                          <Language.Python.Common.AST.ParamTuple>_N)) -}
ca5b475912faba16480ea09a8091760b
  $fAnnotatedParameter ::
    Language.Python.Common.AST.Annotated
      Language.Python.Common.AST.Parameter
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Language.Python.Common.AST.param_annot
                  `cast`
                (Sym (Language.Python.Common.AST.N:Annotated[0]
                          <Language.Python.Common.AST.Parameter>_N)) -}
ca5b475912faba16480ea09a8091760b
  $fAnnotatedSlice ::
    Language.Python.Common.AST.Annotated
      Language.Python.Common.AST.Slice
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Language.Python.Common.AST.slice_annot
                  `cast`
                (Sym (Language.Python.Common.AST.N:Annotated[0]
                          <Language.Python.Common.AST.Slice>_N)) -}
ca5b475912faba16480ea09a8091760b
  $fAnnotatedStatement ::
    Language.Python.Common.AST.Annotated
      Language.Python.Common.AST.Statement
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Language.Python.Common.AST.stmt_annot
                  `cast`
                (Sym (Language.Python.Common.AST.N:Annotated[0]
                          <Language.Python.Common.AST.Statement>_N)) -}
94dde4ffceed0a2a13daed020b6576e1
  $fDataArgument ::
    Data.Data.Data annot =>
    Data.Data.Data (Language.Python.Common.AST.Argument annot)
  DFunId
  {- Arity: 1, Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)>,
     Inline: CONLIKE,
     Unfolding: DFun: @ annot1 (v :: Data.Data.Data annot1).
                  @ (Language.Python.Common.AST.Argument annot1)
                  (Language.Python.Common.AST.$fDataArgument_$cp1Data @ annot1 v)
                  (Language.Python.Common.AST.$fDataArgument_$cgfoldl @ annot1 v)
                  (Language.Python.Common.AST.$fDataArgument_$cgunfold @ annot1 v)
                  (Language.Python.Common.AST.$fDataArgument_$ctoConstr @ annot1 v)
                  (\ (ds :: Language.Python.Common.AST.Argument annot1) ->
                   Language.Python.Common.AST.$tArgument)
                  (Language.Python.Common.AST.$fDataArgument_$cdataCast1 @ annot1 v)
                  (\ @ t :: * -> * -> *
                     @ c :: * -> *
                     ($dTypeable :: Data.Typeable.Internal.Typeable t)
                     (ds :: forall d e.
                            (Data.Data.Data d, Data.Data.Data e) =>
                            c (t d e)) ->
                   GHC.Base.Nothing
                     @ (c (Language.Python.Common.AST.Argument annot1)))
                  (Language.Python.Common.AST.$fDataArgument1 @ annot1 v)
                    `cast`
                  (<forall b. Data.Data.Data b => b -> b>_R
                   ->_R <Language.Python.Common.AST.Argument annot1>_R
                   ->_R Data.Functor.Identity.N:Identity[0]
                            <Language.Python.Common.AST.Argument annot1>_R)
                  (Language.Python.Common.AST.$fDataArgument_$cgmapQl @ annot1 v)
                  (Language.Python.Common.AST.$fDataArgument_$cgmapQr @ annot1 v)
                  (Language.Python.Common.AST.$fDataArgument_$cgmapQ @ annot1 v)
                  (Language.Python.Common.AST.$fDataArgument_$cgmapQi @ annot1 v)
                  (Language.Python.Common.AST.$fDataArgument_$cgmapM @ annot1 v)
                  (Language.Python.Common.AST.$fDataArgument_$cgmapMp @ annot1 v)
                  (Language.Python.Common.AST.$fDataArgument_$cgmapMo @ annot1 v) -}
94dde4ffceed0a2a13daed020b6576e1
  $fDataArgument1 ::
    Data.Data.Data annot =>
    (forall b. Data.Data.Data b => b -> b)
    -> Language.Python.Common.AST.Argument annot
    -> Data.Functor.Identity.Identity
         (Language.Python.Common.AST.Argument annot)
  {- Arity: 3,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,C(C1(U))><L,U>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   (ds :: forall b. Data.Data.Data b => b -> b)
                   (x0 :: Language.Python.Common.AST.Argument annot1) ->
                 Language.Python.Common.AST.$fDataArgument_$cgfoldl
                   @ annot1
                   $dData
                   @ Data.Functor.Identity.Identity
                   (\ @ d
                      @ b
                      ($dData1 :: Data.Data.Data d)
                      (ds1 :: Data.Functor.Identity.Identity (d -> b))
                      (x :: d) ->
                    ds1 `cast` (Data.Functor.Identity.N:Identity[0] <d -> b>_R)
                      (ds @ d $dData1 x))
                     `cast`
                   (forall (d :: <*>_N) (b :: <*>_N).
                    <Data.Data.Data d>_R
                    ->_R <Data.Functor.Identity.Identity (d -> b)>_R
                    ->_R <d>_R
                    ->_R Sym (Data.Functor.Identity.N:Identity[0] <b>_R))
                   Language.Python.Common.AST.$fDataExpr7
                     `cast`
                   (forall (g :: <*>_N).
                    <g>_R ->_R Sym (Data.Functor.Identity.N:Identity[0] <g>_R))
                   x0) -}
5ba43de502c2cb4a54e18bfa37114d10
  $fDataArgument2 :: [GHC.Fingerprint.Type.Fingerprint]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Fingerprint.Type.Fingerprint
                   Language.Python.Common.AST.$fDataArgument3
                   Language.Python.Common.AST.$fDataExpr9) -}
3f84a4d6d67edcf3d86808e1520777e7
  $fDataArgument3 :: GHC.Fingerprint.Type.Fingerprint
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Fingerprint.Type.Fingerprint
                   12122609781692249436##
                   11889333535317683462##) -}
94dde4ffceed0a2a13daed020b6576e1
  $fDataArgument4 :: GHC.Fingerprint.Type.Fingerprint
  {- Unfolding: (case Language.Python.Common.AST.$fDataArgument_a3 of wild { Data.Typeable.Internal.TrTyCon dt dt1 ds1 ds2 ->
                 GHC.Fingerprint.Type.Fingerprint dt dt1 }) -}
94dde4ffceed0a2a13daed020b6576e1
  $fDataArgument_$cdataCast1 ::
    Data.Data.Data annot =>
    forall (t :: * -> *) (c :: * -> *).
    Data.Typeable.Internal.Typeable t =>
    (forall d. Data.Data.Data d => c (t d))
    -> GHC.Base.Maybe (c (Language.Python.Common.AST.Argument annot))
  {- Arity: 2, Strictness: <L,U><L,1*U>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   @ t :: * -> *
                   @ c :: * -> *
                   ($dTypeable :: Data.Typeable.Internal.Typeable t) ->
                 let {
                   lvl447 :: GHC.Base.Maybe
                               (t Data.Type.Equality.:~~: Language.Python.Common.AST.Argument)
                   = Data.Typeable.Internal.eqTypeRep
                       @ (* -> *)
                       @ (* -> *)
                       @ t
                       @ Language.Python.Common.AST.Argument
                       $dTypeable
                         `cast`
                       (Data.Typeable.Internal.N:Typeable[0] <* -> *>_N <t>_N)
                       Language.Python.Common.AST.$fDataArgument_a3
                 } in
                 \ (f12 :: forall d. Data.Data.Data d => c (t d)) ->
                 case lvl447 of wild {
                   GHC.Base.Nothing
                   -> GHC.Base.Nothing
                        @ (c (Language.Python.Common.AST.Argument annot1))
                   GHC.Base.Just ds
                   -> case ds of wild1 { Data.Type.Equality.HRefl cobox cobox1 ->
                      GHC.Base.Just
                        @ (c (Language.Python.Common.AST.Argument annot1))
                        (f12 @ annot1 $dData)
                          `cast`
                        (<c>_R (Sym cobox1 <annot1>_N)) } }) -}
94dde4ffceed0a2a13daed020b6576e1
  $fDataArgument_$cgfoldl ::
    Data.Data.Data annot =>
    forall (c :: * -> *).
    (forall d b. Data.Data.Data d => c (d -> b) -> d -> c b)
    -> (forall g. g -> c g)
    -> Language.Python.Common.AST.Argument annot
    -> c (Language.Python.Common.AST.Argument annot)
  {- Arity: 1, Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   @ c :: * -> * ->
                 let {
                   $dData1 :: Data.Data.Data (Language.Python.Common.AST.Ident annot1)
                   = Language.Python.Common.AST.$fDataIdent @ annot1 $dData
                 } in
                 let {
                   $dData2 :: Data.Data.Data (Language.Python.Common.AST.Expr annot1)
                   = Language.Python.Common.AST.$fDataExpr @ annot1 $dData
                 } in
                 \ (k :: forall d b. Data.Data.Data d => c (d -> b) -> d -> c b)
                   (z :: forall g. g -> c g)
                   (ds :: Language.Python.Common.AST.Argument annot1) ->
                 case ds of wild {
                   Language.Python.Common.AST.ArgExpr a1 a2
                   -> k @ annot1
                        @ (Language.Python.Common.AST.Argument annot1)
                        $dData
                        (k @ (Language.Python.Common.AST.Expr annot1)
                           @ (annot1 -> Language.Python.Common.AST.Argument annot1)
                           $dData2
                           (z @ (Language.Python.Common.AST.Expr annot1
                                 -> annot1 -> Language.Python.Common.AST.Argument annot1)
                              (Language.Python.Common.AST.ArgExpr @ annot1))
                           a1)
                        a2
                   Language.Python.Common.AST.ArgVarArgsPos a1 a2
                   -> k @ annot1
                        @ (Language.Python.Common.AST.Argument annot1)
                        $dData
                        (k @ (Language.Python.Common.AST.Expr annot1)
                           @ (annot1 -> Language.Python.Common.AST.Argument annot1)
                           $dData2
                           (z @ (Language.Python.Common.AST.Expr annot1
                                 -> annot1 -> Language.Python.Common.AST.Argument annot1)
                              (Language.Python.Common.AST.ArgVarArgsPos @ annot1))
                           a1)
                        a2
                   Language.Python.Common.AST.ArgVarArgsKeyword a1 a2
                   -> k @ annot1
                        @ (Language.Python.Common.AST.Argument annot1)
                        $dData
                        (k @ (Language.Python.Common.AST.Expr annot1)
                           @ (annot1 -> Language.Python.Common.AST.Argument annot1)
                           $dData2
                           (z @ (Language.Python.Common.AST.Expr annot1
                                 -> annot1 -> Language.Python.Common.AST.Argument annot1)
                              (Language.Python.Common.AST.ArgVarArgsKeyword @ annot1))
                           a1)
                        a2
                   Language.Python.Common.AST.ArgKeyword a1 a2 a3
                   -> k @ annot1
                        @ (Language.Python.Common.AST.Argument annot1)
                        $dData
                        (k @ (Language.Python.Common.AST.Expr annot1)
                           @ (annot1 -> Language.Python.Common.AST.Argument annot1)
                           $dData2
                           (k @ (Language.Python.Common.AST.Ident annot1)
                              @ (Language.Python.Common.AST.Expr annot1
                                 -> annot1 -> Language.Python.Common.AST.Argument annot1)
                              $dData1
                              (z @ (Language.Python.Common.AST.Ident annot1
                                    -> Language.Python.Common.AST.Expr annot1
                                    -> annot1
                                    -> Language.Python.Common.AST.Argument annot1)
                                 (Language.Python.Common.AST.ArgKeyword @ annot1))
                              a1)
                           a2)
                        a3 }) -}
94dde4ffceed0a2a13daed020b6576e1
  $fDataArgument_$cgmapM ::
    Data.Data.Data annot =>
    forall (m :: * -> *).
    GHC.Base.Monad m =>
    (forall d. Data.Data.Data d => d -> m d)
    -> Language.Python.Common.AST.Argument annot
    -> m (Language.Python.Common.AST.Argument annot)
  {- Arity: 3,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,U(A,C(C1(U)),A,U,A)><L,C(C1(U))>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   @ m :: * -> *
                   ($dMonad :: GHC.Base.Monad m)
                   (ds :: forall d. Data.Data.Data d => d -> m d) ->
                 Language.Python.Common.AST.$fDataArgument_$cgfoldl
                   @ annot1
                   $dData
                   @ m
                   (\ @ d
                      @ b
                      ($dData1 :: Data.Data.Data d)
                      (c :: m (d -> b))
                      (x :: d) ->
                    let {
                      lvl447 :: m d = ds @ d $dData1 x
                    } in
                    GHC.Base.>>=
                      @ m
                      $dMonad
                      @ (d -> b)
                      @ b
                      c
                      (\ (c' :: d -> b) ->
                       GHC.Base.>>=
                         @ m
                         $dMonad
                         @ d
                         @ b
                         lvl447
                         (\ (x' :: d) -> GHC.Base.return @ m $dMonad @ b (c' x'))))
                   (\ @ g -> GHC.Base.return @ m $dMonad @ g)) -}
94dde4ffceed0a2a13daed020b6576e1
  $fDataArgument_$cgmapMo ::
    Data.Data.Data annot =>
    forall (m :: * -> *).
    GHC.Base.MonadPlus m =>
    (forall d. Data.Data.Data d => d -> m d)
    -> Language.Python.Common.AST.Argument annot
    -> m (Language.Python.Common.AST.Argument annot)
  {- Arity: 4,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><S(LS(LC(C(S))LLL)LL),U(A,1*U(A,C(C1(U)),A,C(U),A),1*U,C(C1(U)))><L,C(C1(U))><L,U>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   @ m :: * -> *
                   ($dMonadPlus :: GHC.Base.MonadPlus m)
                   (ds :: forall d. Data.Data.Data d => d -> m d)
                   (eta :: Language.Python.Common.AST.Argument annot1) ->
                 let {
                   $dMonad :: GHC.Base.Monad m = GHC.Base.$p2MonadPlus @ m $dMonadPlus
                 } in
                 let {
                   lvl447 :: m (Language.Python.Common.AST.Argument annot1)
                   = GHC.Base.mzero
                       @ m
                       $dMonadPlus
                       @ (Language.Python.Common.AST.Argument annot1)
                 } in
                 GHC.Base.>>=
                   @ m
                   $dMonad
                   @ (Language.Python.Common.AST.Argument annot1, GHC.Types.Bool)
                   @ (Language.Python.Common.AST.Argument annot1)
                   (Language.Python.Common.AST.$fDataArgument_$cgfoldl
                      @ annot1
                      $dData
                      @ (Data.Data.Mp m)
                      (\ @ d
                         @ b
                         ($dData1 :: Data.Data.Data d)
                         (ds1 :: Data.Data.Mp m (d -> b))
                         (y :: d) ->
                       let {
                         lvl448 :: m d = ds @ d $dData1 y
                       } in
                       GHC.Base.>>=
                         @ m
                         $dMonad
                         @ (d -> b, GHC.Types.Bool)
                         @ (b, GHC.Types.Bool)
                         ds1 `cast` (Data.Data.N:Mp[0] <m>_R <d -> b>_N)
                         (\ (ds2 :: (d -> b, GHC.Types.Bool)) ->
                          case ds2 of wild { (,) h b1 ->
                          case b1 of wild1 {
                            GHC.Types.False
                            -> GHC.Base.mplus
                                 @ m
                                 $dMonadPlus
                                 @ (b, GHC.Types.Bool)
                                 (GHC.Base.>>=
                                    @ m
                                    $dMonad
                                    @ d
                                    @ (b, GHC.Types.Bool)
                                    lvl448
                                    (\ (y' :: d) ->
                                     GHC.Base.return
                                       @ m
                                       $dMonad
                                       @ (b, GHC.Types.Bool)
                                       (h y', GHC.Types.True)))
                                 (GHC.Base.return
                                    @ m
                                    $dMonad
                                    @ (b, GHC.Types.Bool)
                                    (h y, GHC.Types.False))
                            GHC.Types.True
                            -> GHC.Base.return
                                 @ m
                                 $dMonad
                                 @ (b, GHC.Types.Bool)
                                 (h y, GHC.Types.True) } }))
                        `cast`
                      (forall (d :: <*>_N) (b :: <*>_N).
                       <Data.Data.Data d>_R
                       ->_R <Data.Data.Mp m (d -> b)>_R
                       ->_R <d>_R
                       ->_R Sym (Data.Data.N:Mp[0] <m>_R <b>_N))
                      (\ @ g (g1 :: g) ->
                       GHC.Base.return
                         @ m
                         $dMonad
                         @ (g, GHC.Types.Bool)
                         (g1, GHC.Types.False))
                        `cast`
                      (forall (g :: <*>_N).
                       <g>_R ->_R Sym (Data.Data.N:Mp[0] <m>_R <g>_N))
                      eta)
                     `cast`
                   (Data.Data.N:Mp[0]
                        <m>_R <Language.Python.Common.AST.Argument annot1>_N)
                   (\ (ds1 :: (Language.Python.Common.AST.Argument annot1,
                               GHC.Types.Bool)) ->
                    case ds1 of wild { (,) x' b ->
                    case b of wild1 {
                      GHC.Types.False -> lvl447
                      GHC.Types.True
                      -> GHC.Base.return
                           @ m
                           $dMonad
                           @ (Language.Python.Common.AST.Argument annot1)
                           x' } })) -}
94dde4ffceed0a2a13daed020b6576e1
  $fDataArgument_$cgmapMp ::
    Data.Data.Data annot =>
    forall (m :: * -> *).
    GHC.Base.MonadPlus m =>
    (forall d. Data.Data.Data d => d -> m d)
    -> Language.Python.Common.AST.Argument annot
    -> m (Language.Python.Common.AST.Argument annot)
  {- Arity: 4,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><S(LS(LC(C(S))LLL)LL),U(A,1*U(A,C(C1(U)),A,C(U),A),1*U,C(C1(U)))><L,C(C1(U))><L,U>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   @ m :: * -> *
                   ($dMonadPlus :: GHC.Base.MonadPlus m)
                   (ds :: forall d. Data.Data.Data d => d -> m d)
                   (eta :: Language.Python.Common.AST.Argument annot1) ->
                 let {
                   $dMonad :: GHC.Base.Monad m = GHC.Base.$p2MonadPlus @ m $dMonadPlus
                 } in
                 let {
                   lvl447 :: m (Language.Python.Common.AST.Argument annot1)
                   = GHC.Base.mzero
                       @ m
                       $dMonadPlus
                       @ (Language.Python.Common.AST.Argument annot1)
                 } in
                 GHC.Base.>>=
                   @ m
                   $dMonad
                   @ (Language.Python.Common.AST.Argument annot1, GHC.Types.Bool)
                   @ (Language.Python.Common.AST.Argument annot1)
                   (Language.Python.Common.AST.$fDataArgument_$cgfoldl
                      @ annot1
                      $dData
                      @ (Data.Data.Mp m)
                      (\ @ d
                         @ b
                         ($dData1 :: Data.Data.Data d)
                         (ds1 :: Data.Data.Mp m (d -> b))
                         (y :: d) ->
                       let {
                         lvl448 :: m d = ds @ d $dData1 y
                       } in
                       GHC.Base.>>=
                         @ m
                         $dMonad
                         @ (d -> b, GHC.Types.Bool)
                         @ (b, GHC.Types.Bool)
                         ds1 `cast` (Data.Data.N:Mp[0] <m>_R <d -> b>_N)
                         (\ (ds2 :: (d -> b, GHC.Types.Bool)) ->
                          case ds2 of wild { (,) h b1 ->
                          GHC.Base.mplus
                            @ m
                            $dMonadPlus
                            @ (b, GHC.Types.Bool)
                            (GHC.Base.>>=
                               @ m
                               $dMonad
                               @ d
                               @ (b, GHC.Types.Bool)
                               lvl448
                               (\ (y' :: d) ->
                                GHC.Base.return
                                  @ m
                                  $dMonad
                                  @ (b, GHC.Types.Bool)
                                  (h y', GHC.Types.True)))
                            (GHC.Base.return @ m $dMonad @ (b, GHC.Types.Bool) (h y, b1)) }))
                        `cast`
                      (forall (d :: <*>_N) (b :: <*>_N).
                       <Data.Data.Data d>_R
                       ->_R <Data.Data.Mp m (d -> b)>_R
                       ->_R <d>_R
                       ->_R Sym (Data.Data.N:Mp[0] <m>_R <b>_N))
                      (\ @ g (g1 :: g) ->
                       GHC.Base.return
                         @ m
                         $dMonad
                         @ (g, GHC.Types.Bool)
                         (g1, GHC.Types.False))
                        `cast`
                      (forall (g :: <*>_N).
                       <g>_R ->_R Sym (Data.Data.N:Mp[0] <m>_R <g>_N))
                      eta)
                     `cast`
                   (Data.Data.N:Mp[0]
                        <m>_R <Language.Python.Common.AST.Argument annot1>_N)
                   (\ (ds1 :: (Language.Python.Common.AST.Argument annot1,
                               GHC.Types.Bool)) ->
                    case ds1 of wild { (,) x' b ->
                    case b of wild1 {
                      GHC.Types.False -> lvl447
                      GHC.Types.True
                      -> GHC.Base.return
                           @ m
                           $dMonad
                           @ (Language.Python.Common.AST.Argument annot1)
                           x' } })) -}
94dde4ffceed0a2a13daed020b6576e1
  $fDataArgument_$cgmapQ ::
    Data.Data.Data annot =>
    forall u.
    (forall d. Data.Data.Data d => d -> u)
    -> Language.Python.Common.AST.Argument annot -> [u]
  {- Arity: 3,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,C(C1(U))><L,U>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   @ u
                   (ds :: forall d. Data.Data.Data d => d -> u)
                   (x0 :: Language.Python.Common.AST.Argument annot1) ->
                 (Language.Python.Common.AST.$fDataArgument_$cgfoldl
                    @ annot1
                    $dData
                    @ (Data.Data.Qr [u])
                    (\ @ d
                       @ b
                       ($dData1 :: Data.Data.Data d)
                       (ds1 :: Data.Data.Qr [u] (d -> b))
                       (x :: d)
                       (r1 :: [u]) ->
                     ds1 `cast` (Data.Data.N:Qr[0] <*>_N <[u]>_R <d -> b>_P)
                       (GHC.Types.: @ u (ds @ d $dData1 x) r1))
                      `cast`
                    (forall (d :: <*>_N) (b :: <*>_N).
                     <Data.Data.Data d>_R
                     ->_R <Data.Data.Qr [u] (d -> b)>_R
                     ->_R <d>_R
                     ->_R Sym (Data.Data.N:Qr[0] <*>_N <[u]>_R <b>_P))
                    (Language.Python.Common.AST.$fDataExpr4 @ u)
                      `cast`
                    (forall (g :: <*>_N).
                     <g>_R ->_R Sym (Data.Data.N:Qr[0] <*>_N <[u]>_R <g>_P))
                    x0)
                   `cast`
                 (Data.Data.N:Qr[0]
                      <*>_N <[u]>_R <Language.Python.Common.AST.Argument annot1>_P)
                   (GHC.Types.[] @ u)) -}
94dde4ffceed0a2a13daed020b6576e1
  $fDataArgument_$cgmapQi ::
    Data.Data.Data annot =>
    forall u.
    GHC.Types.Int
    -> (forall d. Data.Data.Data d => d -> u)
    -> Language.Python.Common.AST.Argument annot
    -> u
  {- Arity: 4,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,U(U)><L,C(C1(U))><L,U>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   @ u
                   (ds :: GHC.Types.Int)
                   (ds1 :: forall d. Data.Data.Data d => d -> u)
                   (x :: Language.Python.Common.AST.Argument annot1) ->
                 case Language.Python.Common.AST.$fDataArgument_$cgfoldl
                        @ annot1
                        $dData
                        @ (Data.Data.Qi u)
                        (\ @ d
                           @ b
                           ($dData1 :: Data.Data.Data d)
                           (ds2 :: Data.Data.Qi u (d -> b))
                           (a2 :: d) ->
                         case ds2 of wild { Data.Data.Qi i' q ->
                         Data.Data.Qi
                           @ *
                           @ u
                           @ b
                           (case i' of wild1 { GHC.Types.I# x1 ->
                            GHC.Types.I# (GHC.Prim.+# x1 1#) })
                           (case ds of wild1 { GHC.Types.I# x1 ->
                            case i' of wild2 { GHC.Types.I# y ->
                            case GHC.Prim.tagToEnum#
                                   @ GHC.Types.Bool
                                   (GHC.Prim.==# x1 y) of wild3 {
                              GHC.Types.False -> q
                              GHC.Types.True -> GHC.Base.Just @ u (ds1 @ d $dData1 a2) } } }) })
                        (Language.Python.Common.AST.$fDataExpr1 @ u)
                        x of wild { Data.Data.Qi ds2 q ->
                 Data.Maybe.fromJust @ u q }) -}
94dde4ffceed0a2a13daed020b6576e1
  $fDataArgument_$cgmapQl ::
    Data.Data.Data annot =>
    forall r r'.
    (r -> r' -> r)
    -> r
    -> (forall d. Data.Data.Data d => d -> r')
    -> Language.Python.Common.AST.Argument annot
    -> r
  {- Arity: 4,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,C(C1(U))><L,U><L,C(C1(U))>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   @ r
                   @ r'
                   (ds :: r -> r' -> r)
                   (ds1 :: r)
                   (ds2 :: forall d. Data.Data.Data d => d -> r') ->
                 let {
                   g :: Language.Python.Common.AST.Argument annot1
                        -> Data.Functor.Const.Const
                             r (Language.Python.Common.AST.Argument annot1)
                   = Language.Python.Common.AST.$fDataArgument_$cgfoldl
                       @ annot1
                       $dData
                       @ (Data.Functor.Const.Const r)
                       (\ @ d
                          @ b
                          ($dData1 :: Data.Data.Data d)
                          (c :: Data.Functor.Const.Const r (d -> b))
                          (x :: d) ->
                        ds
                          c `cast` (Data.Functor.Const.N:Const[0] <*>_N <r>_R <d -> b>_P)
                          (ds2 @ d $dData1 x))
                         `cast`
                       (forall (d :: <*>_N) (b :: <*>_N).
                        <Data.Data.Data d>_R
                        ->_R <Data.Functor.Const.Const r (d -> b)>_R
                        ->_R <d>_R
                        ->_R Sym (Data.Functor.Const.N:Const[0] <*>_N <r>_R <b>_P))
                       (\ @ g1 (ds3 :: g1) -> ds1)
                         `cast`
                       (forall (g1 :: <*>_N).
                        <g1>_R ->_R Sym (Data.Functor.Const.N:Const[0] <*>_N <r>_R <g1>_P))
                 } in
                 (\ (x :: Language.Python.Common.AST.Argument annot1) -> g x)
                   `cast`
                 (<Language.Python.Common.AST.Argument annot1>_R
                  ->_R Data.Functor.Const.N:Const[0]
                           <*>_N <r>_R <Language.Python.Common.AST.Argument annot1>_P)) -}
94dde4ffceed0a2a13daed020b6576e1
  $fDataArgument_$cgmapQr ::
    Data.Data.Data annot =>
    forall r r'.
    (r' -> r -> r)
    -> r
    -> (forall d. Data.Data.Data d => d -> r')
    -> Language.Python.Common.AST.Argument annot
    -> r
  {- Arity: 5,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,C(C1(U))><L,U><L,C(C1(U))><L,U>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   @ r
                   @ r'
                   (ds :: r' -> r -> r)
                   (ds1 :: r)
                   (ds2 :: forall d. Data.Data.Data d => d -> r')
                   (x0 :: Language.Python.Common.AST.Argument annot1) ->
                 (Language.Python.Common.AST.$fDataArgument_$cgfoldl
                    @ annot1
                    $dData
                    @ (Data.Data.Qr r)
                    (\ @ d
                       @ b
                       ($dData1 :: Data.Data.Data d)
                       (ds3 :: Data.Data.Qr r (d -> b))
                       (x :: d)
                       (r1 :: r) ->
                     ds3 `cast` (Data.Data.N:Qr[0] <*>_N <r>_R <d -> b>_P)
                       (ds (ds2 @ d $dData1 x) r1))
                      `cast`
                    (forall (d :: <*>_N) (b :: <*>_N).
                     <Data.Data.Data d>_R
                     ->_R <Data.Data.Qr r (d -> b)>_R
                     ->_R <d>_R
                     ->_R Sym (Data.Data.N:Qr[0] <*>_N <r>_R <b>_P))
                    (Language.Python.Common.AST.$fDataExpr5 @ r)
                      `cast`
                    (forall (g :: <*>_N).
                     <g>_R ->_R Sym (Data.Data.N:Qr[0] <*>_N <r>_R <g>_P))
                    x0)
                   `cast`
                 (Data.Data.N:Qr[0]
                      <*>_N <r>_R <Language.Python.Common.AST.Argument annot1>_P)
                   ds1) -}
94dde4ffceed0a2a13daed020b6576e1
  $fDataArgument_$cgunfold ::
    Data.Data.Data annot =>
    forall (c :: * -> *).
    (forall b r. Data.Data.Data b => c (b -> r) -> c r)
    -> (forall r. r -> c r)
    -> Data.Data.Constr
    -> c (Language.Python.Common.AST.Argument annot)
  {- Arity: 1, Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   @ c :: * -> * ->
                 let {
                   $dData1 :: Data.Data.Data (Language.Python.Common.AST.Ident annot1)
                   = Language.Python.Common.AST.$fDataIdent @ annot1 $dData
                 } in
                 let {
                   $dData2 :: Data.Data.Data (Language.Python.Common.AST.Expr annot1)
                   = Language.Python.Common.AST.$fDataExpr @ annot1 $dData
                 } in
                 \ (k :: forall b r. Data.Data.Data b => c (b -> r) -> c r)
                   (z :: forall r. r -> c r)
                   (c1 :: Data.Data.Constr) ->
                 case c1 of wild { Data.Data.Constr ds ds1 ds2 ds3 ds4 ->
                 case ds of wild1 {
                   DEFAULT
                   -> case ds4 of ww6 { Data.Data.DataType ww7 ww8 ->
                      case Data.Data.$wlvl ww7
                      ret_ty (c (Language.Python.Common.AST.Argument annot1))
                      of {} }
                   Data.Data.AlgConstr idx
                   -> case idx of wild2 { GHC.Types.I# ds7 ->
                      case ds7 of ds8 {
                        DEFAULT
                        -> k @ annot1
                             @ (Language.Python.Common.AST.Argument annot1)
                             $dData
                             (k @ (Language.Python.Common.AST.Expr annot1)
                                @ (annot1 -> Language.Python.Common.AST.Argument annot1)
                                $dData2
                                (k @ (Language.Python.Common.AST.Ident annot1)
                                   @ (Language.Python.Common.AST.Expr annot1
                                      -> annot1 -> Language.Python.Common.AST.Argument annot1)
                                   $dData1
                                   (z @ (Language.Python.Common.AST.Ident annot1
                                         -> Language.Python.Common.AST.Expr annot1
                                         -> annot1
                                         -> Language.Python.Common.AST.Argument annot1)
                                      (Language.Python.Common.AST.ArgKeyword @ annot1))))
                        1#
                        -> k @ annot1
                             @ (Language.Python.Common.AST.Argument annot1)
                             $dData
                             (k @ (Language.Python.Common.AST.Expr annot1)
                                @ (annot1 -> Language.Python.Common.AST.Argument annot1)
                                $dData2
                                (z @ (Language.Python.Common.AST.Expr annot1
                                      -> annot1 -> Language.Python.Common.AST.Argument annot1)
                                   (Language.Python.Common.AST.ArgExpr @ annot1)))
                        2#
                        -> k @ annot1
                             @ (Language.Python.Common.AST.Argument annot1)
                             $dData
                             (k @ (Language.Python.Common.AST.Expr annot1)
                                @ (annot1 -> Language.Python.Common.AST.Argument annot1)
                                $dData2
                                (z @ (Language.Python.Common.AST.Expr annot1
                                      -> annot1 -> Language.Python.Common.AST.Argument annot1)
                                   (Language.Python.Common.AST.ArgVarArgsPos @ annot1)))
                        3#
                        -> k @ annot1
                             @ (Language.Python.Common.AST.Argument annot1)
                             $dData
                             (k @ (Language.Python.Common.AST.Expr annot1)
                                @ (annot1 -> Language.Python.Common.AST.Argument annot1)
                                $dData2
                                (z @ (Language.Python.Common.AST.Expr annot1
                                      -> annot1 -> Language.Python.Common.AST.Argument annot1)
                                   (Language.Python.Common.AST.ArgVarArgsKeyword
                                      @ annot1))) } } } }) -}
94dde4ffceed0a2a13daed020b6576e1
  $fDataArgument_$cp1Data ::
    Data.Data.Data annot =>
    Data.Typeable.Internal.Typeable
      (Language.Python.Common.AST.Argument annot)
  {- Arity: 1, Strictness: <L,1*U(1*U,A,A,A,A,A,A,A,A,A,A,A,A,A,A)>,
     Unfolding: (\ @ annot1 ($dData :: Data.Data.Data annot1) ->
                 let {
                   b1 :: Data.Typeable.Internal.Typeable annot1
                   = Data.Data.$p1Data @ annot1 $dData
                 } in
                 case GHC.Magic.noinline
                        @ ([GHC.Fingerprint.Type.Fingerprint]
                           -> GHC.Fingerprint.Type.Fingerprint)
                        GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           Language.Python.Common.AST.$fDataArgument4
                           (GHC.Types.:
                              @ GHC.Fingerprint.Type.Fingerprint
                              (Data.Typeable.Internal.typeRepFingerprint
                                 @ *
                                 @ annot1
                                 b1 `cast` (Data.Typeable.Internal.N:Typeable[0] <*>_N <annot1>_N))
                              (GHC.Types.[]
                                 @ GHC.Fingerprint.Type.Fingerprint))) of dt { GHC.Fingerprint.Type.Fingerprint dt1 dt2 ->
                 (Data.Typeable.Internal.TrApp
                    @ *
                    @ (Language.Python.Common.AST.Argument annot1)
                    @ *
                    @ Language.Python.Common.AST.Argument
                    @ annot1
                    @~ <Language.Python.Common.AST.Argument annot1>_N
                    dt1
                    dt2
                    Language.Python.Common.AST.$fDataArgument_a3
                    b1 `cast` (Data.Typeable.Internal.N:Typeable[0] <*>_N <annot1>_N))
                   `cast`
                 (Sym (Data.Typeable.Internal.N:Typeable[0]) <*>_N <Language.Python.Common.AST.Argument
                                                                      annot1>_N) }) -}
94dde4ffceed0a2a13daed020b6576e1
  $fDataArgument_$ctoConstr ::
    Data.Data.Data annot =>
    Language.Python.Common.AST.Argument annot -> Data.Data.Constr
  {- Arity: 2, Strictness: <L,A><S,1*U>m,
     Unfolding: InlineRule (2, True, False)
                (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   (ds :: Language.Python.Common.AST.Argument annot1) ->
                 case ds of wild {
                   Language.Python.Common.AST.ArgExpr ds1 ds2
                   -> Language.Python.Common.AST.$cArgExpr
                   Language.Python.Common.AST.ArgVarArgsPos ds1 ds2
                   -> Language.Python.Common.AST.$cArgVarArgsPos
                   Language.Python.Common.AST.ArgVarArgsKeyword ds1 ds2
                   -> Language.Python.Common.AST.$cArgVarArgsKeyword
                   Language.Python.Common.AST.ArgKeyword ds1 ds2 ds3
                   -> Language.Python.Common.AST.$cArgKeyword }) -}
94dde4ffceed0a2a13daed020b6576e1
  $fDataArgument_a3 ::
    Data.Typeable.Internal.TypeRep Language.Python.Common.AST.Argument
  {- Unfolding: (case GHC.Magic.noinline
                        @ ([GHC.Fingerprint.Type.Fingerprint]
                           -> GHC.Fingerprint.Type.Fingerprint)
                        GHC.Fingerprint.fingerprintFingerprints
                        Language.Python.Common.AST.$fDataArgument2 of dt { GHC.Fingerprint.Type.Fingerprint dt1 dt2 ->
                 Data.Typeable.Internal.TrTyCon
                   @ (* -> *)
                   @ Language.Python.Common.AST.Argument
                   dt1
                   dt2
                   Language.Python.Common.AST.$tcArgument
                   (GHC.Types.[] @ Data.Typeable.Internal.SomeTypeRep) }) -}
f55a81e56367dca5b5d86dd1548fd97f
  $fDataAssignOp ::
    Data.Data.Data annot =>
    Data.Data.Data (Language.Python.Common.AST.AssignOp annot)
  DFunId
  {- Arity: 1, Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)>,
     Inline: CONLIKE,
     Unfolding: DFun: @ annot1 (v :: Data.Data.Data annot1).
                  @ (Language.Python.Common.AST.AssignOp annot1)
                  (Language.Python.Common.AST.$fDataAssignOp_$cp1Data @ annot1 v)
                  (Language.Python.Common.AST.$fDataAssignOp_$cgfoldl @ annot1 v)
                  (Language.Python.Common.AST.$fDataAssignOp_$cgunfold @ annot1 v)
                  (Language.Python.Common.AST.$fDataAssignOp_$ctoConstr @ annot1 v)
                  (\ (ds :: Language.Python.Common.AST.AssignOp annot1) ->
                   Language.Python.Common.AST.$tAssignOp)
                  (Language.Python.Common.AST.$fDataAssignOp_$cdataCast1 @ annot1 v)
                  (\ @ t :: * -> * -> *
                     @ c :: * -> *
                     ($dTypeable :: Data.Typeable.Internal.Typeable t)
                     (ds :: forall d e.
                            (Data.Data.Data d, Data.Data.Data e) =>
                            c (t d e)) ->
                   GHC.Base.Nothing
                     @ (c (Language.Python.Common.AST.AssignOp annot1)))
                  (Language.Python.Common.AST.$fDataAssignOp2 @ annot1 v)
                    `cast`
                  (<forall b. Data.Data.Data b => b -> b>_R
                   ->_R <Language.Python.Common.AST.AssignOp annot1>_R
                   ->_R Data.Functor.Identity.N:Identity[0]
                            <Language.Python.Common.AST.AssignOp annot1>_R)
                  (Language.Python.Common.AST.$fDataAssignOp1 @ annot1 v)
                    `cast`
                  (forall (r :: <*>_N) (r' :: <*>_N).
                   <r -> r' -> r>_R
                   ->_R <r>_R
                   ->_R <forall d. Data.Data.Data d => d -> r'>_R
                   ->_R <Language.Python.Common.AST.AssignOp annot1>_R
                   ->_R Data.Functor.Const.N:Const[0]
                            <*>_N <r>_R <Language.Python.Common.AST.AssignOp annot1>_P)
                  (Language.Python.Common.AST.$fDataAssignOp_$cgmapQr @ annot1 v)
                  (Language.Python.Common.AST.$fDataAssignOp_$cgmapQ @ annot1 v)
                  (Language.Python.Common.AST.$fDataAssignOp_$cgmapQi @ annot1 v)
                  (Language.Python.Common.AST.$fDataAssignOp_$cgmapM @ annot1 v)
                  (Language.Python.Common.AST.$fDataAssignOp_$cgmapMp @ annot1 v)
                  (Language.Python.Common.AST.$fDataAssignOp_$cgmapMo @ annot1 v) -}
f55a81e56367dca5b5d86dd1548fd97f
  $fDataAssignOp1 ::
    Data.Data.Data annot =>
    forall r r'.
    (r -> r' -> r)
    -> r
    -> (forall d. Data.Data.Data d => d -> r')
    -> Language.Python.Common.AST.AssignOp annot
    -> Data.Functor.Const.Const
         r (Language.Python.Common.AST.AssignOp annot)
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,U><C(C(S)),1*C1(C1(U))><L,1*U><L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   @ r
                   @ r'
                   (ds :: r -> r' -> r)
                   (ds1 :: r)
                   (ds2 :: forall d. Data.Data.Data d => d -> r')
                   (eta :: Language.Python.Common.AST.AssignOp annot1) ->
                 Language.Python.Common.AST.$fDataAssignOp_$cgfoldl
                   @ annot1
                   $dData
                   @ (Data.Functor.Const.Const r)
                   (\ @ d
                      @ b
                      ($dData1 :: Data.Data.Data d)[OneShot]
                      (c :: Data.Functor.Const.Const r (d -> b))[OneShot]
                      (x :: d)[OneShot] ->
                    ds
                      c `cast` (Data.Functor.Const.N:Const[0] <*>_N <r>_R <d -> b>_P)
                      (ds2 @ d $dData1 x))
                     `cast`
                   (forall (d :: <*>_N) (b :: <*>_N).
                    <Data.Data.Data d>_R
                    ->_R <Data.Functor.Const.Const r (d -> b)>_R
                    ->_R <d>_R
                    ->_R Sym (Data.Functor.Const.N:Const[0] <*>_N <r>_R <b>_P))
                   (\ @ g1 (ds3 :: g1)[OneShot] -> ds1)
                     `cast`
                   (forall (g1 :: <*>_N).
                    <g1>_R ->_R Sym (Data.Functor.Const.N:Const[0] <*>_N <r>_R <g1>_P))
                   eta) -}
f55a81e56367dca5b5d86dd1548fd97f
  $fDataAssignOp2 ::
    Data.Data.Data annot =>
    (forall b. Data.Data.Data b => b -> b)
    -> Language.Python.Common.AST.AssignOp annot
    -> Data.Functor.Identity.Identity
         (Language.Python.Common.AST.AssignOp annot)
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   (ds :: forall b. Data.Data.Data b => b -> b)
                   (x0 :: Language.Python.Common.AST.AssignOp annot1) ->
                 Language.Python.Common.AST.$fDataAssignOp_$cgfoldl
                   @ annot1
                   $dData
                   @ Data.Functor.Identity.Identity
                   (\ @ d
                      @ b
                      ($dData1 :: Data.Data.Data d)[OneShot]
                      (ds1 :: Data.Functor.Identity.Identity (d -> b))[OneShot]
                      (x :: d)[OneShot] ->
                    ds1 `cast` (Data.Functor.Identity.N:Identity[0] <d -> b>_R)
                      (ds @ d $dData1 x))
                     `cast`
                   (forall (d :: <*>_N) (b :: <*>_N).
                    <Data.Data.Data d>_R
                    ->_R <Data.Functor.Identity.Identity (d -> b)>_R
                    ->_R <d>_R
                    ->_R Sym (Data.Functor.Identity.N:Identity[0] <b>_R))
                   Language.Python.Common.AST.$fDataExpr7
                     `cast`
                   (forall (g :: <*>_N).
                    <g>_R ->_R Sym (Data.Functor.Identity.N:Identity[0] <g>_R))
                   x0) -}
8eb4e0d9ceec4f2f1dd649a9df955cb1
  $fDataAssignOp3 :: [GHC.Fingerprint.Type.Fingerprint]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Fingerprint.Type.Fingerprint
                   Language.Python.Common.AST.$fDataAssignOp4
                   Language.Python.Common.AST.$fDataExpr9) -}
29541cc0ee9114d61a54151ece8f2eb4
  $fDataAssignOp4 :: GHC.Fingerprint.Type.Fingerprint
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Fingerprint.Type.Fingerprint
                   13764614873011673546##
                   12021813562253942580##) -}
f55a81e56367dca5b5d86dd1548fd97f
  $fDataAssignOp5 :: GHC.Fingerprint.Type.Fingerprint
  {- Unfolding: (case Language.Python.Common.AST.$fDataAssignOp_a3 of wild { Data.Typeable.Internal.TrTyCon dt dt1 ds1 ds2 ->
                 GHC.Fingerprint.Type.Fingerprint dt dt1 }) -}
f55a81e56367dca5b5d86dd1548fd97f
  $fDataAssignOp_$cdataCast1 ::
    Data.Data.Data annot =>
    forall (t :: * -> *) (c :: * -> *).
    Data.Typeable.Internal.Typeable t =>
    (forall d. Data.Data.Data d => c (t d))
    -> GHC.Base.Maybe (c (Language.Python.Common.AST.AssignOp annot))
  {- Arity: 2, Strictness: <L,U><L,1*U>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   @ t :: * -> *
                   @ c :: * -> *
                   ($dTypeable :: Data.Typeable.Internal.Typeable t) ->
                 let {
                   lvl447 :: GHC.Base.Maybe
                               (t Data.Type.Equality.:~~: Language.Python.Common.AST.AssignOp)
                   = Data.Typeable.Internal.eqTypeRep
                       @ (* -> *)
                       @ (* -> *)
                       @ t
                       @ Language.Python.Common.AST.AssignOp
                       $dTypeable
                         `cast`
                       (Data.Typeable.Internal.N:Typeable[0] <* -> *>_N <t>_N)
                       Language.Python.Common.AST.$fDataAssignOp_a3
                 } in
                 \ (f12 :: forall d. Data.Data.Data d => c (t d)) ->
                 case lvl447 of wild {
                   GHC.Base.Nothing
                   -> GHC.Base.Nothing
                        @ (c (Language.Python.Common.AST.AssignOp annot1))
                   GHC.Base.Just ds
                   -> case ds of wild1 { Data.Type.Equality.HRefl cobox cobox1 ->
                      GHC.Base.Just
                        @ (c (Language.Python.Common.AST.AssignOp annot1))
                        (f12 @ annot1 $dData)
                          `cast`
                        (<c>_R (Sym cobox1 <annot1>_N)) } }) -}
f55a81e56367dca5b5d86dd1548fd97f
  $fDataAssignOp_$cgfoldl ::
    Data.Data.Data annot =>
    forall (c :: * -> *).
    (forall d b. Data.Data.Data d => c (d -> b) -> d -> c b)
    -> (forall g. g -> c g)
    -> Language.Python.Common.AST.AssignOp annot
    -> c (Language.Python.Common.AST.AssignOp annot)
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,U><C(C(C(S))),1*C1(C1(C1(U)))><L,1*C1(U)><S,1*U> -}
f55a81e56367dca5b5d86dd1548fd97f
  $fDataAssignOp_$cgmapM ::
    Data.Data.Data annot =>
    forall (m :: * -> *).
    GHC.Base.Monad m =>
    (forall d. Data.Data.Data d => d -> m d)
    -> Language.Python.Common.AST.AssignOp annot
    -> m (Language.Python.Common.AST.AssignOp annot)
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,U><S(LC(C(S))LLL),U(A,C(C1(U)),A,C(U),A)><L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   @ m :: * -> *
                   ($dMonad :: GHC.Base.Monad m)
                   (ds :: forall d. Data.Data.Data d => d -> m d)
                   (eta :: Language.Python.Common.AST.AssignOp annot1) ->
                 Language.Python.Common.AST.$fDataAssignOp_$cgfoldl
                   @ annot1
                   $dData
                   @ m
                   (\ @ d
                      @ b
                      ($dData1 :: Data.Data.Data d)[OneShot]
                      (c :: m (d -> b))[OneShot]
                      (x :: d)[OneShot] ->
                    let {
                      lvl447 :: m d = ds @ d $dData1 x
                    } in
                    GHC.Base.>>=
                      @ m
                      $dMonad
                      @ (d -> b)
                      @ b
                      c
                      (\ (c' :: d -> b) ->
                       GHC.Base.>>=
                         @ m
                         $dMonad
                         @ d
                         @ b
                         lvl447
                         (\ (x' :: d) -> GHC.Base.return @ m $dMonad @ b (c' x'))))
                   (\ @ g -> GHC.Base.return @ m $dMonad @ g)
                   eta) -}
f55a81e56367dca5b5d86dd1548fd97f
  $fDataAssignOp_$cgmapMo ::
    Data.Data.Data annot =>
    forall (m :: * -> *).
    GHC.Base.MonadPlus m =>
    (forall d. Data.Data.Data d => d -> m d)
    -> Language.Python.Common.AST.AssignOp annot
    -> m (Language.Python.Common.AST.AssignOp annot)
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,U><S(LS(LC(C(S))LLL)LL),U(A,1*U(A,C(C1(U)),A,C(U),A),1*U,C(C1(U)))><L,1*C1(C1(U))><L,1*U>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   @ m :: * -> *
                   ($dMonadPlus :: GHC.Base.MonadPlus m)
                   (ds :: forall d. Data.Data.Data d => d -> m d)
                   (eta :: Language.Python.Common.AST.AssignOp annot1) ->
                 let {
                   $dMonad :: GHC.Base.Monad m = GHC.Base.$p2MonadPlus @ m $dMonadPlus
                 } in
                 let {
                   lvl447 :: m (Language.Python.Common.AST.AssignOp annot1)
                   = GHC.Base.mzero
                       @ m
                       $dMonadPlus
                       @ (Language.Python.Common.AST.AssignOp annot1)
                 } in
                 GHC.Base.>>=
                   @ m
                   $dMonad
                   @ (Language.Python.Common.AST.AssignOp annot1, GHC.Types.Bool)
                   @ (Language.Python.Common.AST.AssignOp annot1)
                   (Language.Python.Common.AST.$fDataAssignOp_$cgfoldl
                      @ annot1
                      $dData
                      @ (Data.Data.Mp m)
                      (\ @ d
                         @ b
                         ($dData1 :: Data.Data.Data d)[OneShot]
                         (ds1 :: Data.Data.Mp m (d -> b))[OneShot]
                         (y :: d)[OneShot] ->
                       let {
                         lvl448 :: m d = ds @ d $dData1 y
                       } in
                       GHC.Base.>>=
                         @ m
                         $dMonad
                         @ (d -> b, GHC.Types.Bool)
                         @ (b, GHC.Types.Bool)
                         ds1 `cast` (Data.Data.N:Mp[0] <m>_R <d -> b>_N)
                         (\ (ds2 :: (d -> b, GHC.Types.Bool)) ->
                          case ds2 of wild { (,) h b1 ->
                          case b1 of wild1 {
                            GHC.Types.False
                            -> GHC.Base.mplus
                                 @ m
                                 $dMonadPlus
                                 @ (b, GHC.Types.Bool)
                                 (GHC.Base.>>=
                                    @ m
                                    $dMonad
                                    @ d
                                    @ (b, GHC.Types.Bool)
                                    lvl448
                                    (\ (y' :: d) ->
                                     GHC.Base.return
                                       @ m
                                       $dMonad
                                       @ (b, GHC.Types.Bool)
                                       (h y', GHC.Types.True)))
                                 (GHC.Base.return
                                    @ m
                                    $dMonad
                                    @ (b, GHC.Types.Bool)
                                    (h y, GHC.Types.False))
                            GHC.Types.True
                            -> GHC.Base.return
                                 @ m
                                 $dMonad
                                 @ (b, GHC.Types.Bool)
                                 (h y, GHC.Types.True) } }))
                        `cast`
                      (forall (d :: <*>_N) (b :: <*>_N).
                       <Data.Data.Data d>_R
                       ->_R <Data.Data.Mp m (d -> b)>_R
                       ->_R <d>_R
                       ->_R Sym (Data.Data.N:Mp[0] <m>_R <b>_N))
                      (\ @ g (g1 :: g)[OneShot] ->
                       GHC.Base.return
                         @ m
                         $dMonad
                         @ (g, GHC.Types.Bool)
                         (g1, GHC.Types.False))
                        `cast`
                      (forall (g :: <*>_N).
                       <g>_R ->_R Sym (Data.Data.N:Mp[0] <m>_R <g>_N))
                      eta)
                     `cast`
                   (Data.Data.N:Mp[0]
                        <m>_R <Language.Python.Common.AST.AssignOp annot1>_N)
                   (\ (ds1 :: (Language.Python.Common.AST.AssignOp annot1,
                               GHC.Types.Bool)) ->
                    case ds1 of wild { (,) x' b ->
                    case b of wild1 {
                      GHC.Types.False -> lvl447
                      GHC.Types.True
                      -> GHC.Base.return
                           @ m
                           $dMonad
                           @ (Language.Python.Common.AST.AssignOp annot1)
                           x' } })) -}
f55a81e56367dca5b5d86dd1548fd97f
  $fDataAssignOp_$cgmapMp ::
    Data.Data.Data annot =>
    forall (m :: * -> *).
    GHC.Base.MonadPlus m =>
    (forall d. Data.Data.Data d => d -> m d)
    -> Language.Python.Common.AST.AssignOp annot
    -> m (Language.Python.Common.AST.AssignOp annot)
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,U><S(LS(LC(C(S))LLL)LL),U(A,1*U(A,C(C1(U)),A,C(U),A),1*U,C(C1(U)))><L,1*C1(C1(U))><L,1*U>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   @ m :: * -> *
                   ($dMonadPlus :: GHC.Base.MonadPlus m)
                   (ds :: forall d. Data.Data.Data d => d -> m d)
                   (eta :: Language.Python.Common.AST.AssignOp annot1) ->
                 let {
                   $dMonad :: GHC.Base.Monad m = GHC.Base.$p2MonadPlus @ m $dMonadPlus
                 } in
                 let {
                   lvl447 :: m (Language.Python.Common.AST.AssignOp annot1)
                   = GHC.Base.mzero
                       @ m
                       $dMonadPlus
                       @ (Language.Python.Common.AST.AssignOp annot1)
                 } in
                 GHC.Base.>>=
                   @ m
                   $dMonad
                   @ (Language.Python.Common.AST.AssignOp annot1, GHC.Types.Bool)
                   @ (Language.Python.Common.AST.AssignOp annot1)
                   (Language.Python.Common.AST.$fDataAssignOp_$cgfoldl
                      @ annot1
                      $dData
                      @ (Data.Data.Mp m)
                      (\ @ d
                         @ b
                         ($dData1 :: Data.Data.Data d)[OneShot]
                         (ds1 :: Data.Data.Mp m (d -> b))[OneShot]
                         (y :: d)[OneShot] ->
                       let {
                         lvl448 :: m d = ds @ d $dData1 y
                       } in
                       GHC.Base.>>=
                         @ m
                         $dMonad
                         @ (d -> b, GHC.Types.Bool)
                         @ (b, GHC.Types.Bool)
                         ds1 `cast` (Data.Data.N:Mp[0] <m>_R <d -> b>_N)
                         (\ (ds2 :: (d -> b, GHC.Types.Bool)) ->
                          case ds2 of wild { (,) h b1 ->
                          GHC.Base.mplus
                            @ m
                            $dMonadPlus
                            @ (b, GHC.Types.Bool)
                            (GHC.Base.>>=
                               @ m
                               $dMonad
                               @ d
                               @ (b, GHC.Types.Bool)
                               lvl448
                               (\ (y' :: d) ->
                                GHC.Base.return
                                  @ m
                                  $dMonad
                                  @ (b, GHC.Types.Bool)
                                  (h y', GHC.Types.True)))
                            (GHC.Base.return @ m $dMonad @ (b, GHC.Types.Bool) (h y, b1)) }))
                        `cast`
                      (forall (d :: <*>_N) (b :: <*>_N).
                       <Data.Data.Data d>_R
                       ->_R <Data.Data.Mp m (d -> b)>_R
                       ->_R <d>_R
                       ->_R Sym (Data.Data.N:Mp[0] <m>_R <b>_N))
                      (\ @ g (g1 :: g)[OneShot] ->
                       GHC.Base.return
                         @ m
                         $dMonad
                         @ (g, GHC.Types.Bool)
                         (g1, GHC.Types.False))
                        `cast`
                      (forall (g :: <*>_N).
                       <g>_R ->_R Sym (Data.Data.N:Mp[0] <m>_R <g>_N))
                      eta)
                     `cast`
                   (Data.Data.N:Mp[0]
                        <m>_R <Language.Python.Common.AST.AssignOp annot1>_N)
                   (\ (ds1 :: (Language.Python.Common.AST.AssignOp annot1,
                               GHC.Types.Bool)) ->
                    case ds1 of wild { (,) x' b ->
                    case b of wild1 {
                      GHC.Types.False -> lvl447
                      GHC.Types.True
                      -> GHC.Base.return
                           @ m
                           $dMonad
                           @ (Language.Python.Common.AST.AssignOp annot1)
                           x' } })) -}
f55a81e56367dca5b5d86dd1548fd97f
  $fDataAssignOp_$cgmapQ ::
    Data.Data.Data annot =>
    forall u.
    (forall d. Data.Data.Data d => d -> u)
    -> Language.Python.Common.AST.AssignOp annot -> [u]
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><L,C(C1(U))><S,1*U>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   @ u
                   (ds :: forall d. Data.Data.Data d => d -> u)
                   (x0 :: Language.Python.Common.AST.AssignOp annot1) ->
                 (Language.Python.Common.AST.$fDataAssignOp_$cgfoldl
                    @ annot1
                    $dData
                    @ (Data.Data.Qr [u])
                    (\ @ d
                       @ b
                       ($dData1 :: Data.Data.Data d)[OneShot]
                       (ds1 :: Data.Data.Qr [u] (d -> b))[OneShot]
                       (x :: d)[OneShot]
                       (r1 :: [u]) ->
                     ds1 `cast` (Data.Data.N:Qr[0] <*>_N <[u]>_R <d -> b>_P)
                       (GHC.Types.: @ u (ds @ d $dData1 x) r1))
                      `cast`
                    (forall (d :: <*>_N) (b :: <*>_N).
                     <Data.Data.Data d>_R
                     ->_R <Data.Data.Qr [u] (d -> b)>_R
                     ->_R <d>_R
                     ->_R Sym (Data.Data.N:Qr[0] <*>_N <[u]>_R <b>_P))
                    (Language.Python.Common.AST.$fDataExpr4 @ u)
                      `cast`
                    (forall (g :: <*>_N).
                     <g>_R ->_R Sym (Data.Data.N:Qr[0] <*>_N <[u]>_R <g>_P))
                    x0)
                   `cast`
                 (Data.Data.N:Qr[0]
                      <*>_N <[u]>_R <Language.Python.Common.AST.AssignOp annot1>_P)
                   (GHC.Types.[] @ u)) -}
f55a81e56367dca5b5d86dd1548fd97f
  $fDataAssignOp_$cgmapQi ::
    Data.Data.Data annot =>
    forall u.
    GHC.Types.Int
    -> (forall d. Data.Data.Data d => d -> u)
    -> Language.Python.Common.AST.AssignOp annot
    -> u
  {- Arity: 4, Strictness: <L,U><L,1*U(U)><L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   @ u
                   (ds :: GHC.Types.Int)
                   (ds1 :: forall d. Data.Data.Data d => d -> u)
                   (x :: Language.Python.Common.AST.AssignOp annot1) ->
                 case Language.Python.Common.AST.$fDataAssignOp_$cgfoldl
                        @ annot1
                        $dData
                        @ (Data.Data.Qi u)
                        (\ @ d
                           @ b
                           ($dData1 :: Data.Data.Data d)[OneShot]
                           (ds2 :: Data.Data.Qi u (d -> b))[OneShot]
                           (a2 :: d)[OneShot] ->
                         case ds2 of wild { Data.Data.Qi i' q ->
                         Data.Data.Qi
                           @ *
                           @ u
                           @ b
                           (case i' of wild1 { GHC.Types.I# x1 ->
                            GHC.Types.I# (GHC.Prim.+# x1 1#) })
                           (case ds of wild1 { GHC.Types.I# x1 ->
                            case i' of wild2 { GHC.Types.I# y ->
                            case GHC.Prim.tagToEnum#
                                   @ GHC.Types.Bool
                                   (GHC.Prim.==# x1 y) of wild3 {
                              GHC.Types.False -> q
                              GHC.Types.True -> GHC.Base.Just @ u (ds1 @ d $dData1 a2) } } }) })
                        (Language.Python.Common.AST.$fDataExpr1 @ u)
                        x of wild { Data.Data.Qi ds2 q ->
                 Data.Maybe.fromJust @ u q }) -}
f55a81e56367dca5b5d86dd1548fd97f
  $fDataAssignOp_$cgmapQr ::
    Data.Data.Data annot =>
    forall r r'.
    (r' -> r -> r)
    -> r
    -> (forall d. Data.Data.Data d => d -> r')
    -> Language.Python.Common.AST.AssignOp annot
    -> r
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,U><L,C(C1(U))><L,U><L,C(C1(U))><S,1*U>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   @ r
                   @ r'
                   (ds :: r' -> r -> r)
                   (ds1 :: r)
                   (ds2 :: forall d. Data.Data.Data d => d -> r')
                   (x0 :: Language.Python.Common.AST.AssignOp annot1) ->
                 (Language.Python.Common.AST.$fDataAssignOp_$cgfoldl
                    @ annot1
                    $dData
                    @ (Data.Data.Qr r)
                    (\ @ d
                       @ b
                       ($dData1 :: Data.Data.Data d)[OneShot]
                       (ds3 :: Data.Data.Qr r (d -> b))[OneShot]
                       (x :: d)[OneShot]
                       (r1 :: r) ->
                     ds3 `cast` (Data.Data.N:Qr[0] <*>_N <r>_R <d -> b>_P)
                       (ds (ds2 @ d $dData1 x) r1))
                      `cast`
                    (forall (d :: <*>_N) (b :: <*>_N).
                     <Data.Data.Data d>_R
                     ->_R <Data.Data.Qr r (d -> b)>_R
                     ->_R <d>_R
                     ->_R Sym (Data.Data.N:Qr[0] <*>_N <r>_R <b>_P))
                    (Language.Python.Common.AST.$fDataExpr5 @ r)
                      `cast`
                    (forall (g :: <*>_N).
                     <g>_R ->_R Sym (Data.Data.N:Qr[0] <*>_N <r>_R <g>_P))
                    x0)
                   `cast`
                 (Data.Data.N:Qr[0]
                      <*>_N <r>_R <Language.Python.Common.AST.AssignOp annot1>_P)
                   ds1) -}
f55a81e56367dca5b5d86dd1548fd97f
  $fDataAssignOp_$cgunfold ::
    Data.Data.Data annot =>
    forall (c :: * -> *).
    (forall b r. Data.Data.Data b => c (b -> r) -> c r)
    -> (forall r. r -> c r)
    -> Data.Data.Constr
    -> c (Language.Python.Common.AST.AssignOp annot)
  {- Arity: 4,
     Strictness: <L,U><C(C(S)),1*C1(C1(U))><L,1*C1(U)><S(SLLLL),1*U(1*U,A,A,A,1*U(1*U,A))>,
     Inline: [0],
     Unfolding: InlineRule (4, True, False)
                (\ @ annot1
                   (w :: Data.Data.Data annot1)
                   @ c :: * -> *
                   (w249 :: forall b r. Data.Data.Data b => c (b -> r) -> c r)
                   (w250 :: forall r. r -> c r)
                   (w251 :: Data.Data.Constr) ->
                 case w251 of ww { Data.Data.Constr ww1 ww2 ww3 ww4 ww5 ->
                 Language.Python.Common.AST.$w$cgunfold
                   @ annot1
                   w
                   @ c
                   w249
                   w250
                   ww1
                   ww5 }) -}
f55a81e56367dca5b5d86dd1548fd97f
  $fDataAssignOp_$cp1Data ::
    Data.Data.Data annot =>
    Data.Typeable.Internal.Typeable
      (Language.Python.Common.AST.AssignOp annot)
  {- Arity: 1, Strictness: <L,1*U(1*U,A,A,A,A,A,A,A,A,A,A,A,A,A,A)>,
     Unfolding: (\ @ annot1 ($dData :: Data.Data.Data annot1) ->
                 let {
                   b1 :: Data.Typeable.Internal.Typeable annot1
                   = Data.Data.$p1Data @ annot1 $dData
                 } in
                 case GHC.Magic.noinline
                        @ ([GHC.Fingerprint.Type.Fingerprint]
                           -> GHC.Fingerprint.Type.Fingerprint)
                        GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           Language.Python.Common.AST.$fDataAssignOp5
                           (GHC.Types.:
                              @ GHC.Fingerprint.Type.Fingerprint
                              (Data.Typeable.Internal.typeRepFingerprint
                                 @ *
                                 @ annot1
                                 b1 `cast` (Data.Typeable.Internal.N:Typeable[0] <*>_N <annot1>_N))
                              (GHC.Types.[]
                                 @ GHC.Fingerprint.Type.Fingerprint))) of dt { GHC.Fingerprint.Type.Fingerprint dt1 dt2 ->
                 (Data.Typeable.Internal.TrApp
                    @ *
                    @ (Language.Python.Common.AST.AssignOp annot1)
                    @ *
                    @ Language.Python.Common.AST.AssignOp
                    @ annot1
                    @~ <Language.Python.Common.AST.AssignOp annot1>_N
                    dt1
                    dt2
                    Language.Python.Common.AST.$fDataAssignOp_a3
                    b1 `cast` (Data.Typeable.Internal.N:Typeable[0] <*>_N <annot1>_N))
                   `cast`
                 (Sym (Data.Typeable.Internal.N:Typeable[0]) <*>_N <Language.Python.Common.AST.AssignOp
                                                                      annot1>_N) }) -}
f55a81e56367dca5b5d86dd1548fd97f
  $fDataAssignOp_$ctoConstr ::
    Data.Data.Data annot =>
    Language.Python.Common.AST.AssignOp annot -> Data.Data.Constr
  {- Arity: 2, Strictness: <L,A><S,1*U>m, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ @ annot1
                   (w :: Data.Data.Data annot1)
                   (w249 :: Language.Python.Common.AST.AssignOp annot1) ->
                 case w249 of wild {
                   Language.Python.Common.AST.PlusAssign ds
                   -> Language.Python.Common.AST.$cPlusAssign
                   Language.Python.Common.AST.MinusAssign ds
                   -> Language.Python.Common.AST.$cMinusAssign
                   Language.Python.Common.AST.MultAssign ds
                   -> Language.Python.Common.AST.$cMultAssign
                   Language.Python.Common.AST.DivAssign ds
                   -> Language.Python.Common.AST.$cDivAssign
                   Language.Python.Common.AST.ModAssign ds
                   -> Language.Python.Common.AST.$cModAssign
                   Language.Python.Common.AST.PowAssign ds
                   -> Language.Python.Common.AST.$cPowAssign
                   Language.Python.Common.AST.BinAndAssign ds
                   -> Language.Python.Common.AST.$cBinAndAssign
                   Language.Python.Common.AST.BinOrAssign ds
                   -> Language.Python.Common.AST.$cBinOrAssign
                   Language.Python.Common.AST.BinXorAssign ds
                   -> Language.Python.Common.AST.$cBinXorAssign
                   Language.Python.Common.AST.LeftShiftAssign ds
                   -> Language.Python.Common.AST.$cLeftShiftAssign
                   Language.Python.Common.AST.RightShiftAssign ds
                   -> Language.Python.Common.AST.$cRightShiftAssign
                   Language.Python.Common.AST.FloorDivAssign ds
                   -> Language.Python.Common.AST.$cFloorDivAssign
                   Language.Python.Common.AST.MatrixMultAssign ds
                   -> Language.Python.Common.AST.$cMatrixMultAssign }) -}
f55a81e56367dca5b5d86dd1548fd97f
  $fDataAssignOp_a3 ::
    Data.Typeable.Internal.TypeRep Language.Python.Common.AST.AssignOp
  {- Unfolding: (case GHC.Magic.noinline
                        @ ([GHC.Fingerprint.Type.Fingerprint]
                           -> GHC.Fingerprint.Type.Fingerprint)
                        GHC.Fingerprint.fingerprintFingerprints
                        Language.Python.Common.AST.$fDataAssignOp3 of dt { GHC.Fingerprint.Type.Fingerprint dt1 dt2 ->
                 Data.Typeable.Internal.TrTyCon
                   @ (* -> *)
                   @ Language.Python.Common.AST.AssignOp
                   dt1
                   dt2
                   Language.Python.Common.AST.$tcAssignOp
                   (GHC.Types.[] @ Data.Typeable.Internal.SomeTypeRep) }) -}
94dde4ffceed0a2a13daed020b6576e1
  $fDataCompFor ::
    Data.Data.Data annot =>
    Data.Data.Data (Language.Python.Common.AST.CompFor annot)
  DFunId
  {- Arity: 1, Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)>,
     Inline: CONLIKE,
     Unfolding: DFun: @ annot1 (v :: Data.Data.Data annot1).
                  @ (Language.Python.Common.AST.CompFor annot1)
                  (Language.Python.Common.AST.$fDataCompFor_$cp1Data @ annot1 v)
                  (Language.Python.Common.AST.$fDataCompFor_$cgfoldl @ annot1 v)
                  (Language.Python.Common.AST.$fDataCompFor_$cgunfold @ annot1 v)
                  (\ (ds :: Language.Python.Common.AST.CompFor annot1) ->
                   case ds of wild { Language.Python.Common.AST.CompFor ds1 ds2 ds3 ds4 ds5 ->
                   Language.Python.Common.AST.$cCompFor })
                  (\ (ds :: Language.Python.Common.AST.CompFor annot1) ->
                   Language.Python.Common.AST.$tCompFor)
                  (Language.Python.Common.AST.$fDataCompFor_$cdataCast1 @ annot1 v)
                  (\ @ t :: * -> * -> *
                     @ c :: * -> *
                     ($dTypeable :: Data.Typeable.Internal.Typeable t)
                     (ds :: forall d e.
                            (Data.Data.Data d, Data.Data.Data e) =>
                            c (t d e)) ->
                   GHC.Base.Nothing @ (c (Language.Python.Common.AST.CompFor annot1)))
                  (Language.Python.Common.AST.$fDataCompFor1 @ annot1 v)
                    `cast`
                  (<forall b. Data.Data.Data b => b -> b>_R
                   ->_R <Language.Python.Common.AST.CompFor annot1>_R
                   ->_R Data.Functor.Identity.N:Identity[0]
                            <Language.Python.Common.AST.CompFor annot1>_R)
                  (Language.Python.Common.AST.$fDataCompFor_$cgmapQl @ annot1 v)
                  (Language.Python.Common.AST.$fDataCompFor_$cgmapQr @ annot1 v)
                  (Language.Python.Common.AST.$fDataCompFor_$cgmapQ @ annot1 v)
                  (Language.Python.Common.AST.$fDataCompFor_$cgmapQi @ annot1 v)
                  (Language.Python.Common.AST.$fDataCompFor_$cgmapM @ annot1 v)
                  (Language.Python.Common.AST.$fDataCompFor_$cgmapMp @ annot1 v)
                  (Language.Python.Common.AST.$fDataCompFor_$cgmapMo @ annot1 v) -}
94dde4ffceed0a2a13daed020b6576e1
  $fDataCompFor1 ::
    Data.Data.Data annot =>
    (forall b. Data.Data.Data b => b -> b)
    -> Language.Python.Common.AST.CompFor annot
    -> Data.Functor.Identity.Identity
         (Language.Python.Common.AST.CompFor annot)
  {- Arity: 3,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,C(C1(U))><L,U> -}
d5439c015488d2aa031f9dc64fbba287
  $fDataCompFor2 :: [GHC.Fingerprint.Type.Fingerprint]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Fingerprint.Type.Fingerprint
                   Language.Python.Common.AST.$fDataCompFor3
                   Language.Python.Common.AST.$fDataExpr9) -}
00ede22c57dded2fa38b79cb288cb7e6
  $fDataCompFor3 :: GHC.Fingerprint.Type.Fingerprint
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Fingerprint.Type.Fingerprint
                   6080231020298658597##
                   11894485551313816511##) -}
cd3e8eea849fcee3b094be16cf474f2c
  $fDataCompFor4 :: Data.Data.DataRep
  {- Strictness: m1,
     Unfolding: (Data.Data.AlgRep
                   Language.Python.Common.AST.$fDataCompFor5) -}
eb22fcea6286fc667ba23cdca5c2edcc
  $fDataCompFor5 :: [Data.Data.Constr]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Data.Data.Constr
                   Language.Python.Common.AST.$cCompFor
                   (GHC.Types.[] @ Data.Data.Constr)) -}
0f024ca9e8f9ac687a355764186937db
  $fDataCompFor6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.Python.Common.AST.$tcCompFor2) -}
94dde4ffceed0a2a13daed020b6576e1
  $fDataCompFor7 :: GHC.Fingerprint.Type.Fingerprint
  {- Unfolding: (case Language.Python.Common.AST.$fDataCompFor_a3 of wild { Data.Typeable.Internal.TrTyCon dt dt1 ds1 ds2 ->
                 GHC.Fingerprint.Type.Fingerprint dt dt1 }) -}
94dde4ffceed0a2a13daed020b6576e1
  $fDataCompFor_$cdataCast1 ::
    Data.Data.Data annot =>
    forall (t :: * -> *) (c :: * -> *).
    Data.Typeable.Internal.Typeable t =>
    (forall d. Data.Data.Data d => c (t d))
    -> GHC.Base.Maybe (c (Language.Python.Common.AST.CompFor annot))
  {- Arity: 2, Strictness: <L,U><L,1*U>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   @ t :: * -> *
                   @ c :: * -> *
                   ($dTypeable :: Data.Typeable.Internal.Typeable t) ->
                 let {
                   lvl447 :: GHC.Base.Maybe
                               (t Data.Type.Equality.:~~: Language.Python.Common.AST.CompFor)
                   = Data.Typeable.Internal.eqTypeRep
                       @ (* -> *)
                       @ (* -> *)
                       @ t
                       @ Language.Python.Common.AST.CompFor
                       $dTypeable
                         `cast`
                       (Data.Typeable.Internal.N:Typeable[0] <* -> *>_N <t>_N)
                       Language.Python.Common.AST.$fDataCompFor_a3
                 } in
                 \ (f12 :: forall d. Data.Data.Data d => c (t d)) ->
                 case lvl447 of wild {
                   GHC.Base.Nothing
                   -> GHC.Base.Nothing
                        @ (c (Language.Python.Common.AST.CompFor annot1))
                   GHC.Base.Just ds
                   -> case ds of wild1 { Data.Type.Equality.HRefl cobox cobox1 ->
                      GHC.Base.Just
                        @ (c (Language.Python.Common.AST.CompFor annot1))
                        (f12 @ annot1 $dData)
                          `cast`
                        (<c>_R (Sym cobox1 <annot1>_N)) } }) -}
94dde4ffceed0a2a13daed020b6576e1
  $fDataCompFor_$cgfoldl ::
    Data.Data.Data annot =>
    forall (c :: * -> *).
    (forall d b. Data.Data.Data d => c (d -> b) -> d -> c b)
    -> (forall g. g -> c g)
    -> Language.Python.Common.AST.CompFor annot
    -> c (Language.Python.Common.AST.CompFor annot)
  {- Arity: 1, Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)> -}
94dde4ffceed0a2a13daed020b6576e1
  $fDataCompFor_$cgmapM ::
    Data.Data.Data annot =>
    forall (m :: * -> *).
    GHC.Base.Monad m =>
    (forall d. Data.Data.Data d => d -> m d)
    -> Language.Python.Common.AST.CompFor annot
    -> m (Language.Python.Common.AST.CompFor annot)
  {- Arity: 3,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,U(A,C(C1(U)),A,U,A)><L,C(C1(U))> -}
94dde4ffceed0a2a13daed020b6576e1
  $fDataCompFor_$cgmapMo ::
    Data.Data.Data annot =>
    forall (m :: * -> *).
    GHC.Base.MonadPlus m =>
    (forall d. Data.Data.Data d => d -> m d)
    -> Language.Python.Common.AST.CompFor annot
    -> m (Language.Python.Common.AST.CompFor annot)
  {- Arity: 4,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><S(LS(LC(C(S))LLL)LL),U(A,1*U(A,C(C1(U)),A,C(U),A),1*U,C(C1(U)))><L,C(C1(U))><L,U> -}
94dde4ffceed0a2a13daed020b6576e1
  $fDataCompFor_$cgmapMp ::
    Data.Data.Data annot =>
    forall (m :: * -> *).
    GHC.Base.MonadPlus m =>
    (forall d. Data.Data.Data d => d -> m d)
    -> Language.Python.Common.AST.CompFor annot
    -> m (Language.Python.Common.AST.CompFor annot)
  {- Arity: 4,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><S(LS(LC(C(S))LLL)LL),U(A,1*U(A,C(C1(U)),A,C(U),A),1*U,C(C1(U)))><L,C(C1(U))><L,U> -}
94dde4ffceed0a2a13daed020b6576e1
  $fDataCompFor_$cgmapQ ::
    Data.Data.Data annot =>
    forall u.
    (forall d. Data.Data.Data d => d -> u)
    -> Language.Python.Common.AST.CompFor annot -> [u]
  {- Arity: 3,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,C(C1(U))> -}
94dde4ffceed0a2a13daed020b6576e1
  $fDataCompFor_$cgmapQi ::
    Data.Data.Data annot =>
    forall u.
    GHC.Types.Int
    -> (forall d. Data.Data.Data d => d -> u)
    -> Language.Python.Common.AST.CompFor annot
    -> u
  {- Arity: 4,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,U(U)><L,C(C1(U))><L,U> -}
94dde4ffceed0a2a13daed020b6576e1
  $fDataCompFor_$cgmapQl ::
    Data.Data.Data annot =>
    forall r r'.
    (r -> r' -> r)
    -> r
    -> (forall d. Data.Data.Data d => d -> r')
    -> Language.Python.Common.AST.CompFor annot
    -> r
  {- Arity: 4,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,C(C1(U))><L,U><L,C(C1(U))> -}
94dde4ffceed0a2a13daed020b6576e1
  $fDataCompFor_$cgmapQr ::
    Data.Data.Data annot =>
    forall r r'.
    (r' -> r -> r)
    -> r
    -> (forall d. Data.Data.Data d => d -> r')
    -> Language.Python.Common.AST.CompFor annot
    -> r
  {- Arity: 5,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,C(C1(U))><L,U><L,C(C1(U))><L,U> -}
94dde4ffceed0a2a13daed020b6576e1
  $fDataCompFor_$cgunfold ::
    Data.Data.Data annot =>
    forall (c :: * -> *).
    (forall b r. Data.Data.Data b => c (b -> r) -> c r)
    -> (forall r. r -> c r)
    -> Data.Data.Constr
    -> c (Language.Python.Common.AST.CompFor annot)
  {- Arity: 1, Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)> -}
94dde4ffceed0a2a13daed020b6576e1
  $fDataCompFor_$cp1Data ::
    Data.Data.Data annot =>
    Data.Typeable.Internal.Typeable
      (Language.Python.Common.AST.CompFor annot)
  {- Arity: 1, Strictness: <L,1*U(1*U,A,A,A,A,A,A,A,A,A,A,A,A,A,A)>,
     Unfolding: (\ @ annot1 ($dData :: Data.Data.Data annot1) ->
                 let {
                   b1 :: Data.Typeable.Internal.Typeable annot1
                   = Data.Data.$p1Data @ annot1 $dData
                 } in
                 case GHC.Magic.noinline
                        @ ([GHC.Fingerprint.Type.Fingerprint]
                           -> GHC.Fingerprint.Type.Fingerprint)
                        GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           Language.Python.Common.AST.$fDataCompFor7
                           (GHC.Types.:
                              @ GHC.Fingerprint.Type.Fingerprint
                              (Data.Typeable.Internal.typeRepFingerprint
                                 @ *
                                 @ annot1
                                 b1 `cast` (Data.Typeable.Internal.N:Typeable[0] <*>_N <annot1>_N))
                              (GHC.Types.[]
                                 @ GHC.Fingerprint.Type.Fingerprint))) of dt { GHC.Fingerprint.Type.Fingerprint dt1 dt2 ->
                 (Data.Typeable.Internal.TrApp
                    @ *
                    @ (Language.Python.Common.AST.CompFor annot1)
                    @ *
                    @ Language.Python.Common.AST.CompFor
                    @ annot1
                    @~ <Language.Python.Common.AST.CompFor annot1>_N
                    dt1
                    dt2
                    Language.Python.Common.AST.$fDataCompFor_a3
                    b1 `cast` (Data.Typeable.Internal.N:Typeable[0] <*>_N <annot1>_N))
                   `cast`
                 (Sym (Data.Typeable.Internal.N:Typeable[0]) <*>_N <Language.Python.Common.AST.CompFor
                                                                      annot1>_N) }) -}
94dde4ffceed0a2a13daed020b6576e1
  $fDataCompFor_a3 ::
    Data.Typeable.Internal.TypeRep Language.Python.Common.AST.CompFor
  {- Unfolding: (case GHC.Magic.noinline
                        @ ([GHC.Fingerprint.Type.Fingerprint]
                           -> GHC.Fingerprint.Type.Fingerprint)
                        GHC.Fingerprint.fingerprintFingerprints
                        Language.Python.Common.AST.$fDataCompFor2 of dt { GHC.Fingerprint.Type.Fingerprint dt1 dt2 ->
                 Data.Typeable.Internal.TrTyCon
                   @ (* -> *)
                   @ Language.Python.Common.AST.CompFor
                   dt1
                   dt2
                   Language.Python.Common.AST.$tcCompFor
                   (GHC.Types.[] @ Data.Typeable.Internal.SomeTypeRep) }) -}
94dde4ffceed0a2a13daed020b6576e1
  $fDataCompIf ::
    Data.Data.Data annot =>
    Data.Data.Data (Language.Python.Common.AST.CompIf annot)
  DFunId
  {- Arity: 1, Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)>,
     Inline: CONLIKE,
     Unfolding: DFun: @ annot1 (v :: Data.Data.Data annot1).
                  @ (Language.Python.Common.AST.CompIf annot1)
                  (Language.Python.Common.AST.$fDataCompIf_$cp1Data @ annot1 v)
                  (Language.Python.Common.AST.$fDataCompIf_$cgfoldl @ annot1 v)
                  (Language.Python.Common.AST.$fDataCompIf_$cgunfold @ annot1 v)
                  (\ (ds :: Language.Python.Common.AST.CompIf annot1) ->
                   case ds of wild { Language.Python.Common.AST.CompIf ds1 ds2 ds3 ->
                   Language.Python.Common.AST.$cCompIf })
                  (\ (ds :: Language.Python.Common.AST.CompIf annot1) ->
                   Language.Python.Common.AST.$tCompIf)
                  (Language.Python.Common.AST.$fDataCompIf_$cdataCast1 @ annot1 v)
                  (\ @ t :: * -> * -> *
                     @ c :: * -> *
                     ($dTypeable :: Data.Typeable.Internal.Typeable t)
                     (ds :: forall d e.
                            (Data.Data.Data d, Data.Data.Data e) =>
                            c (t d e)) ->
                   GHC.Base.Nothing @ (c (Language.Python.Common.AST.CompIf annot1)))
                  (Language.Python.Common.AST.$fDataCompIf1 @ annot1 v)
                    `cast`
                  (<forall b. Data.Data.Data b => b -> b>_R
                   ->_R <Language.Python.Common.AST.CompIf annot1>_R
                   ->_R Data.Functor.Identity.N:Identity[0]
                            <Language.Python.Common.AST.CompIf annot1>_R)
                  (Language.Python.Common.AST.$fDataCompIf_$cgmapQl @ annot1 v)
                  (Language.Python.Common.AST.$fDataCompIf_$cgmapQr @ annot1 v)
                  (Language.Python.Common.AST.$fDataCompIf_$cgmapQ @ annot1 v)
                  (Language.Python.Common.AST.$fDataCompIf_$cgmapQi @ annot1 v)
                  (Language.Python.Common.AST.$fDataCompIf_$cgmapM @ annot1 v)
                  (Language.Python.Common.AST.$fDataCompIf_$cgmapMp @ annot1 v)
                  (Language.Python.Common.AST.$fDataCompIf_$cgmapMo @ annot1 v) -}
94dde4ffceed0a2a13daed020b6576e1
  $fDataCompIf1 ::
    Data.Data.Data annot =>
    (forall b. Data.Data.Data b => b -> b)
    -> Language.Python.Common.AST.CompIf annot
    -> Data.Functor.Identity.Identity
         (Language.Python.Common.AST.CompIf annot)
  {- Arity: 3,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,C(C1(U))><L,U> -}
f5fac89cd204ccb618592ff9fb1275a1
  $fDataCompIf2 :: [GHC.Fingerprint.Type.Fingerprint]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Fingerprint.Type.Fingerprint
                   Language.Python.Common.AST.$fDataCompIf3
                   Language.Python.Common.AST.$fDataExpr9) -}
067e0ddb092f191be82638845412fdf2
  $fDataCompIf3 :: GHC.Fingerprint.Type.Fingerprint
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Fingerprint.Type.Fingerprint
                   11440816723277832960##
                   3727855433885124127##) -}
18c670d11e3b985a4df82985f80f1ae6
  $fDataCompIf4 :: Data.Data.DataRep
  {- Strictness: m1,
     Unfolding: (Data.Data.AlgRep
                   Language.Python.Common.AST.$fDataCompIf5) -}
e0b9c18ecc2ac9c0fdf69ec21e8a3053
  $fDataCompIf5 :: [Data.Data.Constr]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Data.Data.Constr
                   Language.Python.Common.AST.$cCompIf
                   (GHC.Types.[] @ Data.Data.Constr)) -}
b6449662712e6fd0619eff1eb127f83c
  $fDataCompIf6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.Python.Common.AST.$tcCompIf2) -}
94dde4ffceed0a2a13daed020b6576e1
  $fDataCompIf7 :: GHC.Fingerprint.Type.Fingerprint
  {- Unfolding: (case Language.Python.Common.AST.$fDataCompIf_a3 of wild { Data.Typeable.Internal.TrTyCon dt dt1 ds1 ds2 ->
                 GHC.Fingerprint.Type.Fingerprint dt dt1 }) -}
94dde4ffceed0a2a13daed020b6576e1
  $fDataCompIf_$cdataCast1 ::
    Data.Data.Data annot =>
    forall (t :: * -> *) (c :: * -> *).
    Data.Typeable.Internal.Typeable t =>
    (forall d. Data.Data.Data d => c (t d))
    -> GHC.Base.Maybe (c (Language.Python.Common.AST.CompIf annot))
  {- Arity: 2, Strictness: <L,U><L,1*U>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   @ t :: * -> *
                   @ c :: * -> *
                   ($dTypeable :: Data.Typeable.Internal.Typeable t) ->
                 let {
                   lvl447 :: GHC.Base.Maybe
                               (t Data.Type.Equality.:~~: Language.Python.Common.AST.CompIf)
                   = Data.Typeable.Internal.eqTypeRep
                       @ (* -> *)
                       @ (* -> *)
                       @ t
                       @ Language.Python.Common.AST.CompIf
                       $dTypeable
                         `cast`
                       (Data.Typeable.Internal.N:Typeable[0] <* -> *>_N <t>_N)
                       Language.Python.Common.AST.$fDataCompIf_a3
                 } in
                 \ (f12 :: forall d. Data.Data.Data d => c (t d)) ->
                 case lvl447 of wild {
                   GHC.Base.Nothing
                   -> GHC.Base.Nothing
                        @ (c (Language.Python.Common.AST.CompIf annot1))
                   GHC.Base.Just ds
                   -> case ds of wild1 { Data.Type.Equality.HRefl cobox cobox1 ->
                      GHC.Base.Just
                        @ (c (Language.Python.Common.AST.CompIf annot1))
                        (f12 @ annot1 $dData)
                          `cast`
                        (<c>_R (Sym cobox1 <annot1>_N)) } }) -}
94dde4ffceed0a2a13daed020b6576e1
  $fDataCompIf_$cgfoldl ::
    Data.Data.Data annot =>
    forall (c :: * -> *).
    (forall d b. Data.Data.Data d => c (d -> b) -> d -> c b)
    -> (forall g. g -> c g)
    -> Language.Python.Common.AST.CompIf annot
    -> c (Language.Python.Common.AST.CompIf annot)
  {- Arity: 1, Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)> -}
94dde4ffceed0a2a13daed020b6576e1
  $fDataCompIf_$cgmapM ::
    Data.Data.Data annot =>
    forall (m :: * -> *).
    GHC.Base.Monad m =>
    (forall d. Data.Data.Data d => d -> m d)
    -> Language.Python.Common.AST.CompIf annot
    -> m (Language.Python.Common.AST.CompIf annot)
  {- Arity: 3,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,U(A,C(C1(U)),A,U,A)><L,C(C1(U))> -}
94dde4ffceed0a2a13daed020b6576e1
  $fDataCompIf_$cgmapMo ::
    Data.Data.Data annot =>
    forall (m :: * -> *).
    GHC.Base.MonadPlus m =>
    (forall d. Data.Data.Data d => d -> m d)
    -> Language.Python.Common.AST.CompIf annot
    -> m (Language.Python.Common.AST.CompIf annot)
  {- Arity: 4,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><S(LS(LC(C(S))LLL)LL),U(A,1*U(A,C(C1(U)),A,C(U),A),1*U,C(C1(U)))><L,C(C1(U))><L,U> -}
94dde4ffceed0a2a13daed020b6576e1
  $fDataCompIf_$cgmapMp ::
    Data.Data.Data annot =>
    forall (m :: * -> *).
    GHC.Base.MonadPlus m =>
    (forall d. Data.Data.Data d => d -> m d)
    -> Language.Python.Common.AST.CompIf annot
    -> m (Language.Python.Common.AST.CompIf annot)
  {- Arity: 4,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><S(LS(LC(C(S))LLL)LL),U(A,1*U(A,C(C1(U)),A,C(U),A),1*U,C(C1(U)))><L,C(C1(U))><L,U> -}
94dde4ffceed0a2a13daed020b6576e1
  $fDataCompIf_$cgmapQ ::
    Data.Data.Data annot =>
    forall u.
    (forall d. Data.Data.Data d => d -> u)
    -> Language.Python.Common.AST.CompIf annot -> [u]
  {- Arity: 3,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,C(C1(U))> -}
94dde4ffceed0a2a13daed020b6576e1
  $fDataCompIf_$cgmapQi ::
    Data.Data.Data annot =>
    forall u.
    GHC.Types.Int
    -> (forall d. Data.Data.Data d => d -> u)
    -> Language.Python.Common.AST.CompIf annot
    -> u
  {- Arity: 4,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,U(U)><L,C(C1(U))><L,U> -}
94dde4ffceed0a2a13daed020b6576e1
  $fDataCompIf_$cgmapQl ::
    Data.Data.Data annot =>
    forall r r'.
    (r -> r' -> r)
    -> r
    -> (forall d. Data.Data.Data d => d -> r')
    -> Language.Python.Common.AST.CompIf annot
    -> r
  {- Arity: 4,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,C(C1(U))><L,U><L,C(C1(U))> -}
94dde4ffceed0a2a13daed020b6576e1
  $fDataCompIf_$cgmapQr ::
    Data.Data.Data annot =>
    forall r r'.
    (r' -> r -> r)
    -> r
    -> (forall d. Data.Data.Data d => d -> r')
    -> Language.Python.Common.AST.CompIf annot
    -> r
  {- Arity: 5,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,C(C1(U))><L,U><L,C(C1(U))><L,U> -}
94dde4ffceed0a2a13daed020b6576e1
  $fDataCompIf_$cgunfold ::
    Data.Data.Data annot =>
    forall (c :: * -> *).
    (forall b r. Data.Data.Data b => c (b -> r) -> c r)
    -> (forall r. r -> c r)
    -> Data.Data.Constr
    -> c (Language.Python.Common.AST.CompIf annot)
  {- Arity: 1, Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)> -}
94dde4ffceed0a2a13daed020b6576e1
  $fDataCompIf_$cp1Data ::
    Data.Data.Data annot =>
    Data.Typeable.Internal.Typeable
      (Language.Python.Common.AST.CompIf annot)
  {- Arity: 1, Strictness: <L,1*U(1*U,A,A,A,A,A,A,A,A,A,A,A,A,A,A)>,
     Unfolding: (\ @ annot1 ($dData :: Data.Data.Data annot1) ->
                 let {
                   b1 :: Data.Typeable.Internal.Typeable annot1
                   = Data.Data.$p1Data @ annot1 $dData
                 } in
                 case GHC.Magic.noinline
                        @ ([GHC.Fingerprint.Type.Fingerprint]
                           -> GHC.Fingerprint.Type.Fingerprint)
                        GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           Language.Python.Common.AST.$fDataCompIf7
                           (GHC.Types.:
                              @ GHC.Fingerprint.Type.Fingerprint
                              (Data.Typeable.Internal.typeRepFingerprint
                                 @ *
                                 @ annot1
                                 b1 `cast` (Data.Typeable.Internal.N:Typeable[0] <*>_N <annot1>_N))
                              (GHC.Types.[]
                                 @ GHC.Fingerprint.Type.Fingerprint))) of dt { GHC.Fingerprint.Type.Fingerprint dt1 dt2 ->
                 (Data.Typeable.Internal.TrApp
                    @ *
                    @ (Language.Python.Common.AST.CompIf annot1)
                    @ *
                    @ Language.Python.Common.AST.CompIf
                    @ annot1
                    @~ <Language.Python.Common.AST.CompIf annot1>_N
                    dt1
                    dt2
                    Language.Python.Common.AST.$fDataCompIf_a3
                    b1 `cast` (Data.Typeable.Internal.N:Typeable[0] <*>_N <annot1>_N))
                   `cast`
                 (Sym (Data.Typeable.Internal.N:Typeable[0]) <*>_N <Language.Python.Common.AST.CompIf
                                                                      annot1>_N) }) -}
94dde4ffceed0a2a13daed020b6576e1
  $fDataCompIf_a3 ::
    Data.Typeable.Internal.TypeRep Language.Python.Common.AST.CompIf
  {- Unfolding: (case GHC.Magic.noinline
                        @ ([GHC.Fingerprint.Type.Fingerprint]
                           -> GHC.Fingerprint.Type.Fingerprint)
                        GHC.Fingerprint.fingerprintFingerprints
                        Language.Python.Common.AST.$fDataCompIf2 of dt { GHC.Fingerprint.Type.Fingerprint dt1 dt2 ->
                 Data.Typeable.Internal.TrTyCon
                   @ (* -> *)
                   @ Language.Python.Common.AST.CompIf
                   dt1
                   dt2
                   Language.Python.Common.AST.$tcCompIf
                   (GHC.Types.[] @ Data.Typeable.Internal.SomeTypeRep) }) -}
94dde4ffceed0a2a13daed020b6576e1
  $fDataCompIter ::
    Data.Data.Data annot =>
    Data.Data.Data (Language.Python.Common.AST.CompIter annot)
  DFunId
  {- Arity: 1, Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)>,
     Inline: CONLIKE,
     Unfolding: DFun: @ annot1 (v :: Data.Data.Data annot1).
                  @ (Language.Python.Common.AST.CompIter annot1)
                  (Language.Python.Common.AST.$fDataCompIter_$cp1Data @ annot1 v)
                  (Language.Python.Common.AST.$fDataCompIter_$cgfoldl @ annot1 v)
                  (Language.Python.Common.AST.$fDataCompIter_$cgunfold @ annot1 v)
                  (\ (ds :: Language.Python.Common.AST.CompIter annot1) ->
                   case ds of wild {
                     Language.Python.Common.AST.IterFor ds1 ds2
                     -> Language.Python.Common.AST.$cIterFor
                     Language.Python.Common.AST.IterIf ds1 ds2
                     -> Language.Python.Common.AST.$cIterIf })
                  (\ (ds :: Language.Python.Common.AST.CompIter annot1) ->
                   Language.Python.Common.AST.$tCompIter)
                  (Language.Python.Common.AST.$fDataCompIter_$cdataCast1 @ annot1 v)
                  (\ @ t :: * -> * -> *
                     @ c :: * -> *
                     ($dTypeable :: Data.Typeable.Internal.Typeable t)
                     (ds :: forall d e.
                            (Data.Data.Data d, Data.Data.Data e) =>
                            c (t d e)) ->
                   GHC.Base.Nothing
                     @ (c (Language.Python.Common.AST.CompIter annot1)))
                  (Language.Python.Common.AST.$fDataCompIter1 @ annot1 v)
                    `cast`
                  (<forall b. Data.Data.Data b => b -> b>_R
                   ->_R <Language.Python.Common.AST.CompIter annot1>_R
                   ->_R Data.Functor.Identity.N:Identity[0]
                            <Language.Python.Common.AST.CompIter annot1>_R)
                  (Language.Python.Common.AST.$fDataCompIter_$cgmapQl @ annot1 v)
                  (Language.Python.Common.AST.$fDataCompIter_$cgmapQr @ annot1 v)
                  (Language.Python.Common.AST.$fDataCompIter_$cgmapQ @ annot1 v)
                  (Language.Python.Common.AST.$fDataCompIter_$cgmapQi @ annot1 v)
                  (Language.Python.Common.AST.$fDataCompIter_$cgmapM @ annot1 v)
                  (Language.Python.Common.AST.$fDataCompIter_$cgmapMp @ annot1 v)
                  (Language.Python.Common.AST.$fDataCompIter_$cgmapMo @ annot1 v) -}
94dde4ffceed0a2a13daed020b6576e1
  $fDataCompIter1 ::
    Data.Data.Data annot =>
    (forall b. Data.Data.Data b => b -> b)
    -> Language.Python.Common.AST.CompIter annot
    -> Data.Functor.Identity.Identity
         (Language.Python.Common.AST.CompIter annot)
  {- Arity: 3,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,C(C1(U))><L,U> -}
0462a8a54f0484119cdf2b5b3967e554
  $fDataCompIter2 :: [GHC.Fingerprint.Type.Fingerprint]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Fingerprint.Type.Fingerprint
                   Language.Python.Common.AST.$fDataCompIter3
                   Language.Python.Common.AST.$fDataExpr9) -}
a8adbcd780bc8cf83eee3f103aa88d81
  $fDataCompIter3 :: GHC.Fingerprint.Type.Fingerprint
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Fingerprint.Type.Fingerprint
                   8911918354333159942##
                   2320376509614388691##) -}
94dde4ffceed0a2a13daed020b6576e1
  $fDataCompIter4 :: GHC.Fingerprint.Type.Fingerprint
  {- Unfolding: (case Language.Python.Common.AST.$fDataCompIter_a3 of wild { Data.Typeable.Internal.TrTyCon dt dt1 ds1 ds2 ->
                 GHC.Fingerprint.Type.Fingerprint dt dt1 }) -}
94dde4ffceed0a2a13daed020b6576e1
  $fDataCompIter_$cdataCast1 ::
    Data.Data.Data annot =>
    forall (t :: * -> *) (c :: * -> *).
    Data.Typeable.Internal.Typeable t =>
    (forall d. Data.Data.Data d => c (t d))
    -> GHC.Base.Maybe (c (Language.Python.Common.AST.CompIter annot))
  {- Arity: 2, Strictness: <L,U><L,1*U>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   @ t :: * -> *
                   @ c :: * -> *
                   ($dTypeable :: Data.Typeable.Internal.Typeable t) ->
                 let {
                   lvl447 :: GHC.Base.Maybe
                               (t Data.Type.Equality.:~~: Language.Python.Common.AST.CompIter)
                   = Data.Typeable.Internal.eqTypeRep
                       @ (* -> *)
                       @ (* -> *)
                       @ t
                       @ Language.Python.Common.AST.CompIter
                       $dTypeable
                         `cast`
                       (Data.Typeable.Internal.N:Typeable[0] <* -> *>_N <t>_N)
                       Language.Python.Common.AST.$fDataCompIter_a3
                 } in
                 \ (f12 :: forall d. Data.Data.Data d => c (t d)) ->
                 case lvl447 of wild {
                   GHC.Base.Nothing
                   -> GHC.Base.Nothing
                        @ (c (Language.Python.Common.AST.CompIter annot1))
                   GHC.Base.Just ds
                   -> case ds of wild1 { Data.Type.Equality.HRefl cobox cobox1 ->
                      GHC.Base.Just
                        @ (c (Language.Python.Common.AST.CompIter annot1))
                        (f12 @ annot1 $dData)
                          `cast`
                        (<c>_R (Sym cobox1 <annot1>_N)) } }) -}
94dde4ffceed0a2a13daed020b6576e1
  $fDataCompIter_$cgfoldl ::
    Data.Data.Data annot =>
    forall (c :: * -> *).
    (forall d b. Data.Data.Data d => c (d -> b) -> d -> c b)
    -> (forall g. g -> c g)
    -> Language.Python.Common.AST.CompIter annot
    -> c (Language.Python.Common.AST.CompIter annot)
  {- Arity: 1, Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)> -}
94dde4ffceed0a2a13daed020b6576e1
  $fDataCompIter_$cgmapM ::
    Data.Data.Data annot =>
    forall (m :: * -> *).
    GHC.Base.Monad m =>
    (forall d. Data.Data.Data d => d -> m d)
    -> Language.Python.Common.AST.CompIter annot
    -> m (Language.Python.Common.AST.CompIter annot)
  {- Arity: 3,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,U(A,C(C1(U)),A,U,A)><L,C(C1(U))> -}
94dde4ffceed0a2a13daed020b6576e1
  $fDataCompIter_$cgmapMo ::
    Data.Data.Data annot =>
    forall (m :: * -> *).
    GHC.Base.MonadPlus m =>
    (forall d. Data.Data.Data d => d -> m d)
    -> Language.Python.Common.AST.CompIter annot
    -> m (Language.Python.Common.AST.CompIter annot)
  {- Arity: 4,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><S(LS(LC(C(S))LLL)LL),U(A,1*U(A,C(C1(U)),A,C(U),A),1*U,C(C1(U)))><L,C(C1(U))><L,U> -}
94dde4ffceed0a2a13daed020b6576e1
  $fDataCompIter_$cgmapMp ::
    Data.Data.Data annot =>
    forall (m :: * -> *).
    GHC.Base.MonadPlus m =>
    (forall d. Data.Data.Data d => d -> m d)
    -> Language.Python.Common.AST.CompIter annot
    -> m (Language.Python.Common.AST.CompIter annot)
  {- Arity: 4,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><S(LS(LC(C(S))LLL)LL),U(A,1*U(A,C(C1(U)),A,C(U),A),1*U,C(C1(U)))><L,C(C1(U))><L,U> -}
94dde4ffceed0a2a13daed020b6576e1
  $fDataCompIter_$cgmapQ ::
    Data.Data.Data annot =>
    forall u.
    (forall d. Data.Data.Data d => d -> u)
    -> Language.Python.Common.AST.CompIter annot -> [u]
  {- Arity: 3,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,C(C1(U))> -}
94dde4ffceed0a2a13daed020b6576e1
  $fDataCompIter_$cgmapQi ::
    Data.Data.Data annot =>
    forall u.
    GHC.Types.Int
    -> (forall d. Data.Data.Data d => d -> u)
    -> Language.Python.Common.AST.CompIter annot
    -> u
  {- Arity: 4,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,U(U)><L,C(C1(U))><L,U> -}
94dde4ffceed0a2a13daed020b6576e1
  $fDataCompIter_$cgmapQl ::
    Data.Data.Data annot =>
    forall r r'.
    (r -> r' -> r)
    -> r
    -> (forall d. Data.Data.Data d => d -> r')
    -> Language.Python.Common.AST.CompIter annot
    -> r
  {- Arity: 4,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,C(C1(U))><L,U><L,C(C1(U))> -}
94dde4ffceed0a2a13daed020b6576e1
  $fDataCompIter_$cgmapQr ::
    Data.Data.Data annot =>
    forall r r'.
    (r' -> r -> r)
    -> r
    -> (forall d. Data.Data.Data d => d -> r')
    -> Language.Python.Common.AST.CompIter annot
    -> r
  {- Arity: 5,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,C(C1(U))><L,U><L,C(C1(U))><L,U> -}
94dde4ffceed0a2a13daed020b6576e1
  $fDataCompIter_$cgunfold ::
    Data.Data.Data annot =>
    forall (c :: * -> *).
    (forall b r. Data.Data.Data b => c (b -> r) -> c r)
    -> (forall r. r -> c r)
    -> Data.Data.Constr
    -> c (Language.Python.Common.AST.CompIter annot)
  {- Arity: 1, Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)> -}
94dde4ffceed0a2a13daed020b6576e1
  $fDataCompIter_$cp1Data ::
    Data.Data.Data annot =>
    Data.Typeable.Internal.Typeable
      (Language.Python.Common.AST.CompIter annot)
  {- Arity: 1, Strictness: <L,1*U(1*U,A,A,A,A,A,A,A,A,A,A,A,A,A,A)>,
     Unfolding: (\ @ annot1 ($dData :: Data.Data.Data annot1) ->
                 let {
                   b1 :: Data.Typeable.Internal.Typeable annot1
                   = Data.Data.$p1Data @ annot1 $dData
                 } in
                 case GHC.Magic.noinline
                        @ ([GHC.Fingerprint.Type.Fingerprint]
                           -> GHC.Fingerprint.Type.Fingerprint)
                        GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           Language.Python.Common.AST.$fDataCompIter4
                           (GHC.Types.:
                              @ GHC.Fingerprint.Type.Fingerprint
                              (Data.Typeable.Internal.typeRepFingerprint
                                 @ *
                                 @ annot1
                                 b1 `cast` (Data.Typeable.Internal.N:Typeable[0] <*>_N <annot1>_N))
                              (GHC.Types.[]
                                 @ GHC.Fingerprint.Type.Fingerprint))) of dt { GHC.Fingerprint.Type.Fingerprint dt1 dt2 ->
                 (Data.Typeable.Internal.TrApp
                    @ *
                    @ (Language.Python.Common.AST.CompIter annot1)
                    @ *
                    @ Language.Python.Common.AST.CompIter
                    @ annot1
                    @~ <Language.Python.Common.AST.CompIter annot1>_N
                    dt1
                    dt2
                    Language.Python.Common.AST.$fDataCompIter_a3
                    b1 `cast` (Data.Typeable.Internal.N:Typeable[0] <*>_N <annot1>_N))
                   `cast`
                 (Sym (Data.Typeable.Internal.N:Typeable[0]) <*>_N <Language.Python.Common.AST.CompIter
                                                                      annot1>_N) }) -}
94dde4ffceed0a2a13daed020b6576e1
  $fDataCompIter_a3 ::
    Data.Typeable.Internal.TypeRep Language.Python.Common.AST.CompIter
  {- Unfolding: (case GHC.Magic.noinline
                        @ ([GHC.Fingerprint.Type.Fingerprint]
                           -> GHC.Fingerprint.Type.Fingerprint)
                        GHC.Fingerprint.fingerprintFingerprints
                        Language.Python.Common.AST.$fDataCompIter2 of dt { GHC.Fingerprint.Type.Fingerprint dt1 dt2 ->
                 Data.Typeable.Internal.TrTyCon
                   @ (* -> *)
                   @ Language.Python.Common.AST.CompIter
                   dt1
                   dt2
                   Language.Python.Common.AST.$tcCompIter
                   (GHC.Types.[] @ Data.Typeable.Internal.SomeTypeRep) }) -}
94dde4ffceed0a2a13daed020b6576e1
  $fDataComprehension ::
    Data.Data.Data annot =>
    Data.Data.Data (Language.Python.Common.AST.Comprehension annot)
  DFunId
  {- Arity: 1, Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)>,
     Inline: CONLIKE,
     Unfolding: DFun: @ annot1 (v :: Data.Data.Data annot1).
                  @ (Language.Python.Common.AST.Comprehension annot1)
                  (Language.Python.Common.AST.$fDataComprehension_$cp1Data
                     @ annot1
                     v)
                  (Language.Python.Common.AST.$fDataComprehension_$cgfoldl
                     @ annot1
                     v)
                  (Language.Python.Common.AST.$fDataComprehension_$cgunfold
                     @ annot1
                     v)
                  (\ (ds :: Language.Python.Common.AST.Comprehension annot1) ->
                   case ds of wild { Language.Python.Common.AST.Comprehension ds1 ds2 ds3 ->
                   Language.Python.Common.AST.$cComprehension })
                  (\ (ds :: Language.Python.Common.AST.Comprehension annot1) ->
                   Language.Python.Common.AST.$tComprehension)
                  (Language.Python.Common.AST.$fDataComprehension_$cdataCast1
                     @ annot1
                     v)
                  (\ @ t :: * -> * -> *
                     @ c :: * -> *
                     ($dTypeable :: Data.Typeable.Internal.Typeable t)
                     (ds :: forall d e.
                            (Data.Data.Data d, Data.Data.Data e) =>
                            c (t d e)) ->
                   GHC.Base.Nothing
                     @ (c (Language.Python.Common.AST.Comprehension annot1)))
                  (Language.Python.Common.AST.$fDataComprehension1 @ annot1 v)
                    `cast`
                  (<forall b. Data.Data.Data b => b -> b>_R
                   ->_R <Language.Python.Common.AST.Comprehension annot1>_R
                   ->_R Data.Functor.Identity.N:Identity[0]
                            <Language.Python.Common.AST.Comprehension annot1>_R)
                  (Language.Python.Common.AST.$fDataComprehension_$cgmapQl
                     @ annot1
                     v)
                  (Language.Python.Common.AST.$fDataComprehension_$cgmapQr
                     @ annot1
                     v)
                  (Language.Python.Common.AST.$fDataComprehension_$cgmapQ @ annot1 v)
                  (Language.Python.Common.AST.$fDataComprehension_$cgmapQi
                     @ annot1
                     v)
                  (Language.Python.Common.AST.$fDataComprehension_$cgmapM @ annot1 v)
                  (Language.Python.Common.AST.$fDataComprehension_$cgmapMp
                     @ annot1
                     v)
                  (Language.Python.Common.AST.$fDataComprehension_$cgmapMo
                     @ annot1
                     v) -}
94dde4ffceed0a2a13daed020b6576e1
  $fDataComprehension1 ::
    Data.Data.Data annot =>
    (forall b. Data.Data.Data b => b -> b)
    -> Language.Python.Common.AST.Comprehension annot
    -> Data.Functor.Identity.Identity
         (Language.Python.Common.AST.Comprehension annot)
  {- Arity: 3,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,C(C1(U))><L,U>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   (ds :: forall b. Data.Data.Data b => b -> b)
                   (x0 :: Language.Python.Common.AST.Comprehension annot1) ->
                 Language.Python.Common.AST.$fDataComprehension_$cgfoldl
                   @ annot1
                   $dData
                   @ Data.Functor.Identity.Identity
                   (\ @ d
                      @ b
                      ($dData1 :: Data.Data.Data d)
                      (ds1 :: Data.Functor.Identity.Identity (d -> b))
                      (x :: d) ->
                    ds1 `cast` (Data.Functor.Identity.N:Identity[0] <d -> b>_R)
                      (ds @ d $dData1 x))
                     `cast`
                   (forall (d :: <*>_N) (b :: <*>_N).
                    <Data.Data.Data d>_R
                    ->_R <Data.Functor.Identity.Identity (d -> b)>_R
                    ->_R <d>_R
                    ->_R Sym (Data.Functor.Identity.N:Identity[0] <b>_R))
                   Language.Python.Common.AST.$fDataExpr7
                     `cast`
                   (forall (g :: <*>_N).
                    <g>_R ->_R Sym (Data.Functor.Identity.N:Identity[0] <g>_R))
                   x0) -}
9458637bad34d8eb482cd109dff5d94d
  $fDataComprehension2 :: [GHC.Fingerprint.Type.Fingerprint]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Fingerprint.Type.Fingerprint
                   Language.Python.Common.AST.$fDataComprehension3
                   Language.Python.Common.AST.$fDataExpr9) -}
b15ecde9ec8bb21ac321f57557aaea11
  $fDataComprehension3 :: GHC.Fingerprint.Type.Fingerprint
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Fingerprint.Type.Fingerprint
                   15394765488342463681##
                   8649136258008378970##) -}
1598c35830ef7f8146f2a797665dda4c
  $fDataComprehension4 :: Data.Data.DataRep
  {- Strictness: m1,
     Unfolding: (Data.Data.AlgRep
                   Language.Python.Common.AST.$fDataComprehension5) -}
b5a125ea554baa7676e070dee7e4ef90
  $fDataComprehension5 :: [Data.Data.Constr]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Data.Data.Constr
                   Language.Python.Common.AST.$cComprehension
                   (GHC.Types.[] @ Data.Data.Constr)) -}
289aed060591dcbcb896f2e45d0b2423
  $fDataComprehension6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.Python.Common.AST.$tcComprehension2) -}
94dde4ffceed0a2a13daed020b6576e1
  $fDataComprehension7 :: GHC.Fingerprint.Type.Fingerprint
  {- Unfolding: (case Language.Python.Common.AST.$fDataComprehension_a3 of wild { Data.Typeable.Internal.TrTyCon dt dt1 ds1 ds2 ->
                 GHC.Fingerprint.Type.Fingerprint dt dt1 }) -}
94dde4ffceed0a2a13daed020b6576e1
  $fDataComprehensionExpr ::
    Data.Data.Data annot =>
    Data.Data.Data (Language.Python.Common.AST.ComprehensionExpr annot)
  DFunId
  {- Arity: 1, Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)>,
     Inline: CONLIKE,
     Unfolding: DFun: @ annot1 (v :: Data.Data.Data annot1).
                  @ (Language.Python.Common.AST.ComprehensionExpr annot1)
                  (Language.Python.Common.AST.$fDataComprehensionExpr_$cp1Data
                     @ annot1
                     v)
                  (Language.Python.Common.AST.$fDataComprehensionExpr_$cgfoldl
                     @ annot1
                     v)
                  (Language.Python.Common.AST.$fDataComprehensionExpr_$cgunfold
                     @ annot1
                     v)
                  (\ (ds :: Language.Python.Common.AST.ComprehensionExpr annot1) ->
                   case ds of wild {
                     Language.Python.Common.AST.ComprehensionExpr ds1
                     -> Language.Python.Common.AST.$cComprehensionExpr
                     Language.Python.Common.AST.ComprehensionDict ds1
                     -> Language.Python.Common.AST.$cComprehensionDict })
                  (\ (ds :: Language.Python.Common.AST.ComprehensionExpr annot1) ->
                   Language.Python.Common.AST.$tComprehensionExpr)
                  (Language.Python.Common.AST.$fDataComprehensionExpr_$cdataCast1
                     @ annot1
                     v)
                  (\ @ t :: * -> * -> *
                     @ c :: * -> *
                     ($dTypeable :: Data.Typeable.Internal.Typeable t)
                     (ds :: forall d e.
                            (Data.Data.Data d, Data.Data.Data e) =>
                            c (t d e)) ->
                   GHC.Base.Nothing
                     @ (c (Language.Python.Common.AST.ComprehensionExpr annot1)))
                  (Language.Python.Common.AST.$fDataComprehensionExpr1 @ annot1 v)
                    `cast`
                  (<forall b. Data.Data.Data b => b -> b>_R
                   ->_R <Language.Python.Common.AST.ComprehensionExpr annot1>_R
                   ->_R Data.Functor.Identity.N:Identity[0]
                            <Language.Python.Common.AST.ComprehensionExpr annot1>_R)
                  (Language.Python.Common.AST.$fDataComprehensionExpr_$cgmapQl
                     @ annot1
                     v)
                  (Language.Python.Common.AST.$fDataComprehensionExpr_$cgmapQr
                     @ annot1
                     v)
                  (Language.Python.Common.AST.$fDataComprehensionExpr_$cgmapQ
                     @ annot1
                     v)
                  (Language.Python.Common.AST.$fDataComprehensionExpr_$cgmapQi
                     @ annot1
                     v)
                  (Language.Python.Common.AST.$fDataComprehensionExpr_$cgmapM
                     @ annot1
                     v)
                  (Language.Python.Common.AST.$fDataComprehensionExpr_$cgmapMp
                     @ annot1
                     v)
                  (Language.Python.Common.AST.$fDataComprehensionExpr_$cgmapMo
                     @ annot1
                     v) -}
94dde4ffceed0a2a13daed020b6576e1
  $fDataComprehensionExpr1 ::
    Data.Data.Data annot =>
    (forall b. Data.Data.Data b => b -> b)
    -> Language.Python.Common.AST.ComprehensionExpr annot
    -> Data.Functor.Identity.Identity
         (Language.Python.Common.AST.ComprehensionExpr annot)
  {- Arity: 3,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,C(C1(U))><L,U>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   (ds :: forall b. Data.Data.Data b => b -> b)
                   (x0 :: Language.Python.Common.AST.ComprehensionExpr annot1) ->
                 Language.Python.Common.AST.$fDataComprehensionExpr_$cgfoldl
                   @ annot1
                   $dData
                   @ Data.Functor.Identity.Identity
                   (\ @ d
                      @ b
                      ($dData1 :: Data.Data.Data d)
                      (ds1 :: Data.Functor.Identity.Identity (d -> b))
                      (x :: d) ->
                    ds1 `cast` (Data.Functor.Identity.N:Identity[0] <d -> b>_R)
                      (ds @ d $dData1 x))
                     `cast`
                   (forall (d :: <*>_N) (b :: <*>_N).
                    <Data.Data.Data d>_R
                    ->_R <Data.Functor.Identity.Identity (d -> b)>_R
                    ->_R <d>_R
                    ->_R Sym (Data.Functor.Identity.N:Identity[0] <b>_R))
                   Language.Python.Common.AST.$fDataExpr7
                     `cast`
                   (forall (g :: <*>_N).
                    <g>_R ->_R Sym (Data.Functor.Identity.N:Identity[0] <g>_R))
                   x0) -}
aa9c1e7d440166a55aa9100c77b13574
  $fDataComprehensionExpr2 :: [GHC.Fingerprint.Type.Fingerprint]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Fingerprint.Type.Fingerprint
                   Language.Python.Common.AST.$fDataComprehensionExpr3
                   Language.Python.Common.AST.$fDataExpr9) -}
f9b3dabe48d951468810839198b67aec
  $fDataComprehensionExpr3 :: GHC.Fingerprint.Type.Fingerprint
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Fingerprint.Type.Fingerprint
                   2088448333609907069##
                   6154448672430212656##) -}
94dde4ffceed0a2a13daed020b6576e1
  $fDataComprehensionExpr4 :: GHC.Fingerprint.Type.Fingerprint
  {- Unfolding: (case Language.Python.Common.AST.$fDataComprehensionExpr_a3 of wild { Data.Typeable.Internal.TrTyCon dt dt1 ds1 ds2 ->
                 GHC.Fingerprint.Type.Fingerprint dt dt1 }) -}
94dde4ffceed0a2a13daed020b6576e1
  $fDataComprehensionExpr_$cdataCast1 ::
    Data.Data.Data annot =>
    forall (t :: * -> *) (c :: * -> *).
    Data.Typeable.Internal.Typeable t =>
    (forall d. Data.Data.Data d => c (t d))
    -> GHC.Base.Maybe
         (c (Language.Python.Common.AST.ComprehensionExpr annot))
  {- Arity: 2, Strictness: <L,U><L,1*U>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   @ t :: * -> *
                   @ c :: * -> *
                   ($dTypeable :: Data.Typeable.Internal.Typeable t) ->
                 let {
                   lvl447 :: GHC.Base.Maybe
                               (t
                                Data.Type.Equality.:~~: Language.Python.Common.AST.ComprehensionExpr)
                   = Data.Typeable.Internal.eqTypeRep
                       @ (* -> *)
                       @ (* -> *)
                       @ t
                       @ Language.Python.Common.AST.ComprehensionExpr
                       $dTypeable
                         `cast`
                       (Data.Typeable.Internal.N:Typeable[0] <* -> *>_N <t>_N)
                       Language.Python.Common.AST.$fDataComprehensionExpr_a3
                 } in
                 \ (f12 :: forall d. Data.Data.Data d => c (t d)) ->
                 case lvl447 of wild {
                   GHC.Base.Nothing
                   -> GHC.Base.Nothing
                        @ (c (Language.Python.Common.AST.ComprehensionExpr annot1))
                   GHC.Base.Just ds
                   -> case ds of wild1 { Data.Type.Equality.HRefl cobox cobox1 ->
                      GHC.Base.Just
                        @ (c (Language.Python.Common.AST.ComprehensionExpr annot1))
                        (f12 @ annot1 $dData)
                          `cast`
                        (<c>_R (Sym cobox1 <annot1>_N)) } }) -}
94dde4ffceed0a2a13daed020b6576e1
  $fDataComprehensionExpr_$cgfoldl ::
    Data.Data.Data annot =>
    forall (c :: * -> *).
    (forall d b. Data.Data.Data d => c (d -> b) -> d -> c b)
    -> (forall g. g -> c g)
    -> Language.Python.Common.AST.ComprehensionExpr annot
    -> c (Language.Python.Common.AST.ComprehensionExpr annot)
  {- Arity: 1, Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   @ c :: * -> * ->
                 let {
                   $dData1 :: Data.Data.Data
                                (Language.Python.Common.AST.DictKeyDatumList annot1)
                   = Language.Python.Common.AST.$fDataDictKeyDatumList @ annot1 $dData
                 } in
                 let {
                   $dData2 :: Data.Data.Data (Language.Python.Common.AST.Expr annot1)
                   = Language.Python.Common.AST.$fDataExpr @ annot1 $dData
                 } in
                 \ (k :: forall d b. Data.Data.Data d => c (d -> b) -> d -> c b)
                   (z :: forall g. g -> c g)
                   (ds :: Language.Python.Common.AST.ComprehensionExpr annot1) ->
                 case ds of wild {
                   Language.Python.Common.AST.ComprehensionExpr a1
                   -> k @ (Language.Python.Common.AST.Expr annot1)
                        @ (Language.Python.Common.AST.ComprehensionExpr annot1)
                        $dData2
                        (z @ (Language.Python.Common.AST.Expr annot1
                              -> Language.Python.Common.AST.ComprehensionExpr annot1)
                           (Language.Python.Common.AST.ComprehensionExpr @ annot1))
                        a1
                   Language.Python.Common.AST.ComprehensionDict a1
                   -> k @ (Language.Python.Common.AST.DictKeyDatumList annot1)
                        @ (Language.Python.Common.AST.ComprehensionExpr annot1)
                        $dData1
                        (z @ (Language.Python.Common.AST.DictKeyDatumList annot1
                              -> Language.Python.Common.AST.ComprehensionExpr annot1)
                           (Language.Python.Common.AST.ComprehensionDict @ annot1))
                        a1 }) -}
94dde4ffceed0a2a13daed020b6576e1
  $fDataComprehensionExpr_$cgmapM ::
    Data.Data.Data annot =>
    forall (m :: * -> *).
    GHC.Base.Monad m =>
    (forall d. Data.Data.Data d => d -> m d)
    -> Language.Python.Common.AST.ComprehensionExpr annot
    -> m (Language.Python.Common.AST.ComprehensionExpr annot)
  {- Arity: 3,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,U(A,C(C1(U)),A,U,A)><L,C(C1(U))>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   @ m :: * -> *
                   ($dMonad :: GHC.Base.Monad m)
                   (ds :: forall d. Data.Data.Data d => d -> m d) ->
                 Language.Python.Common.AST.$fDataComprehensionExpr_$cgfoldl
                   @ annot1
                   $dData
                   @ m
                   (\ @ d
                      @ b
                      ($dData1 :: Data.Data.Data d)
                      (c :: m (d -> b))
                      (x :: d) ->
                    let {
                      lvl447 :: m d = ds @ d $dData1 x
                    } in
                    GHC.Base.>>=
                      @ m
                      $dMonad
                      @ (d -> b)
                      @ b
                      c
                      (\ (c' :: d -> b) ->
                       GHC.Base.>>=
                         @ m
                         $dMonad
                         @ d
                         @ b
                         lvl447
                         (\ (x' :: d) -> GHC.Base.return @ m $dMonad @ b (c' x'))))
                   (\ @ g -> GHC.Base.return @ m $dMonad @ g)) -}
94dde4ffceed0a2a13daed020b6576e1
  $fDataComprehensionExpr_$cgmapMo ::
    Data.Data.Data annot =>
    forall (m :: * -> *).
    GHC.Base.MonadPlus m =>
    (forall d. Data.Data.Data d => d -> m d)
    -> Language.Python.Common.AST.ComprehensionExpr annot
    -> m (Language.Python.Common.AST.ComprehensionExpr annot)
  {- Arity: 4,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><S(LS(LC(C(S))LLL)LL),U(A,1*U(A,C(C1(U)),A,C(U),A),1*U,C(C1(U)))><L,C(C1(U))><L,U>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   @ m :: * -> *
                   ($dMonadPlus :: GHC.Base.MonadPlus m)
                   (ds :: forall d. Data.Data.Data d => d -> m d)
                   (eta :: Language.Python.Common.AST.ComprehensionExpr annot1) ->
                 let {
                   $dMonad :: GHC.Base.Monad m = GHC.Base.$p2MonadPlus @ m $dMonadPlus
                 } in
                 let {
                   lvl447 :: m (Language.Python.Common.AST.ComprehensionExpr annot1)
                   = GHC.Base.mzero
                       @ m
                       $dMonadPlus
                       @ (Language.Python.Common.AST.ComprehensionExpr annot1)
                 } in
                 GHC.Base.>>=
                   @ m
                   $dMonad
                   @ (Language.Python.Common.AST.ComprehensionExpr annot1,
                      GHC.Types.Bool)
                   @ (Language.Python.Common.AST.ComprehensionExpr annot1)
                   (Language.Python.Common.AST.$fDataComprehensionExpr_$cgfoldl
                      @ annot1
                      $dData
                      @ (Data.Data.Mp m)
                      (\ @ d
                         @ b
                         ($dData1 :: Data.Data.Data d)
                         (ds1 :: Data.Data.Mp m (d -> b))
                         (y :: d) ->
                       let {
                         lvl448 :: m d = ds @ d $dData1 y
                       } in
                       GHC.Base.>>=
                         @ m
                         $dMonad
                         @ (d -> b, GHC.Types.Bool)
                         @ (b, GHC.Types.Bool)
                         ds1 `cast` (Data.Data.N:Mp[0] <m>_R <d -> b>_N)
                         (\ (ds2 :: (d -> b, GHC.Types.Bool)) ->
                          case ds2 of wild { (,) h b1 ->
                          case b1 of wild1 {
                            GHC.Types.False
                            -> GHC.Base.mplus
                                 @ m
                                 $dMonadPlus
                                 @ (b, GHC.Types.Bool)
                                 (GHC.Base.>>=
                                    @ m
                                    $dMonad
                                    @ d
                                    @ (b, GHC.Types.Bool)
                                    lvl448
                                    (\ (y' :: d) ->
                                     GHC.Base.return
                                       @ m
                                       $dMonad
                                       @ (b, GHC.Types.Bool)
                                       (h y', GHC.Types.True)))
                                 (GHC.Base.return
                                    @ m
                                    $dMonad
                                    @ (b, GHC.Types.Bool)
                                    (h y, GHC.Types.False))
                            GHC.Types.True
                            -> GHC.Base.return
                                 @ m
                                 $dMonad
                                 @ (b, GHC.Types.Bool)
                                 (h y, GHC.Types.True) } }))
                        `cast`
                      (forall (d :: <*>_N) (b :: <*>_N).
                       <Data.Data.Data d>_R
                       ->_R <Data.Data.Mp m (d -> b)>_R
                       ->_R <d>_R
                       ->_R Sym (Data.Data.N:Mp[0] <m>_R <b>_N))
                      (\ @ g (g1 :: g) ->
                       GHC.Base.return
                         @ m
                         $dMonad
                         @ (g, GHC.Types.Bool)
                         (g1, GHC.Types.False))
                        `cast`
                      (forall (g :: <*>_N).
                       <g>_R ->_R Sym (Data.Data.N:Mp[0] <m>_R <g>_N))
                      eta)
                     `cast`
                   (Data.Data.N:Mp[0]
                        <m>_R <Language.Python.Common.AST.ComprehensionExpr annot1>_N)
                   (\ (ds1 :: (Language.Python.Common.AST.ComprehensionExpr annot1,
                               GHC.Types.Bool)) ->
                    case ds1 of wild { (,) x' b ->
                    case b of wild1 {
                      GHC.Types.False -> lvl447
                      GHC.Types.True
                      -> GHC.Base.return
                           @ m
                           $dMonad
                           @ (Language.Python.Common.AST.ComprehensionExpr annot1)
                           x' } })) -}
94dde4ffceed0a2a13daed020b6576e1
  $fDataComprehensionExpr_$cgmapMp ::
    Data.Data.Data annot =>
    forall (m :: * -> *).
    GHC.Base.MonadPlus m =>
    (forall d. Data.Data.Data d => d -> m d)
    -> Language.Python.Common.AST.ComprehensionExpr annot
    -> m (Language.Python.Common.AST.ComprehensionExpr annot)
  {- Arity: 4,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><S(LS(LC(C(S))LLL)LL),U(A,1*U(A,C(C1(U)),A,C(U),A),1*U,C(C1(U)))><L,C(C1(U))><L,U>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   @ m :: * -> *
                   ($dMonadPlus :: GHC.Base.MonadPlus m)
                   (ds :: forall d. Data.Data.Data d => d -> m d)
                   (eta :: Language.Python.Common.AST.ComprehensionExpr annot1) ->
                 let {
                   $dMonad :: GHC.Base.Monad m = GHC.Base.$p2MonadPlus @ m $dMonadPlus
                 } in
                 let {
                   lvl447 :: m (Language.Python.Common.AST.ComprehensionExpr annot1)
                   = GHC.Base.mzero
                       @ m
                       $dMonadPlus
                       @ (Language.Python.Common.AST.ComprehensionExpr annot1)
                 } in
                 GHC.Base.>>=
                   @ m
                   $dMonad
                   @ (Language.Python.Common.AST.ComprehensionExpr annot1,
                      GHC.Types.Bool)
                   @ (Language.Python.Common.AST.ComprehensionExpr annot1)
                   (Language.Python.Common.AST.$fDataComprehensionExpr_$cgfoldl
                      @ annot1
                      $dData
                      @ (Data.Data.Mp m)
                      (\ @ d
                         @ b
                         ($dData1 :: Data.Data.Data d)
                         (ds1 :: Data.Data.Mp m (d -> b))
                         (y :: d) ->
                       let {
                         lvl448 :: m d = ds @ d $dData1 y
                       } in
                       GHC.Base.>>=
                         @ m
                         $dMonad
                         @ (d -> b, GHC.Types.Bool)
                         @ (b, GHC.Types.Bool)
                         ds1 `cast` (Data.Data.N:Mp[0] <m>_R <d -> b>_N)
                         (\ (ds2 :: (d -> b, GHC.Types.Bool)) ->
                          case ds2 of wild { (,) h b1 ->
                          GHC.Base.mplus
                            @ m
                            $dMonadPlus
                            @ (b, GHC.Types.Bool)
                            (GHC.Base.>>=
                               @ m
                               $dMonad
                               @ d
                               @ (b, GHC.Types.Bool)
                               lvl448
                               (\ (y' :: d) ->
                                GHC.Base.return
                                  @ m
                                  $dMonad
                                  @ (b, GHC.Types.Bool)
                                  (h y', GHC.Types.True)))
                            (GHC.Base.return @ m $dMonad @ (b, GHC.Types.Bool) (h y, b1)) }))
                        `cast`
                      (forall (d :: <*>_N) (b :: <*>_N).
                       <Data.Data.Data d>_R
                       ->_R <Data.Data.Mp m (d -> b)>_R
                       ->_R <d>_R
                       ->_R Sym (Data.Data.N:Mp[0] <m>_R <b>_N))
                      (\ @ g (g1 :: g) ->
                       GHC.Base.return
                         @ m
                         $dMonad
                         @ (g, GHC.Types.Bool)
                         (g1, GHC.Types.False))
                        `cast`
                      (forall (g :: <*>_N).
                       <g>_R ->_R Sym (Data.Data.N:Mp[0] <m>_R <g>_N))
                      eta)
                     `cast`
                   (Data.Data.N:Mp[0]
                        <m>_R <Language.Python.Common.AST.ComprehensionExpr annot1>_N)
                   (\ (ds1 :: (Language.Python.Common.AST.ComprehensionExpr annot1,
                               GHC.Types.Bool)) ->
                    case ds1 of wild { (,) x' b ->
                    case b of wild1 {
                      GHC.Types.False -> lvl447
                      GHC.Types.True
                      -> GHC.Base.return
                           @ m
                           $dMonad
                           @ (Language.Python.Common.AST.ComprehensionExpr annot1)
                           x' } })) -}
94dde4ffceed0a2a13daed020b6576e1
  $fDataComprehensionExpr_$cgmapQ ::
    Data.Data.Data annot =>
    forall u.
    (forall d. Data.Data.Data d => d -> u)
    -> Language.Python.Common.AST.ComprehensionExpr annot -> [u]
  {- Arity: 3,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,C(C1(U))><L,U>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   @ u
                   (ds :: forall d. Data.Data.Data d => d -> u)
                   (x0 :: Language.Python.Common.AST.ComprehensionExpr annot1) ->
                 (Language.Python.Common.AST.$fDataComprehensionExpr_$cgfoldl
                    @ annot1
                    $dData
                    @ (Data.Data.Qr [u])
                    (\ @ d
                       @ b
                       ($dData1 :: Data.Data.Data d)
                       (ds1 :: Data.Data.Qr [u] (d -> b))
                       (x :: d)
                       (r1 :: [u]) ->
                     ds1 `cast` (Data.Data.N:Qr[0] <*>_N <[u]>_R <d -> b>_P)
                       (GHC.Types.: @ u (ds @ d $dData1 x) r1))
                      `cast`
                    (forall (d :: <*>_N) (b :: <*>_N).
                     <Data.Data.Data d>_R
                     ->_R <Data.Data.Qr [u] (d -> b)>_R
                     ->_R <d>_R
                     ->_R Sym (Data.Data.N:Qr[0] <*>_N <[u]>_R <b>_P))
                    (Language.Python.Common.AST.$fDataExpr4 @ u)
                      `cast`
                    (forall (g :: <*>_N).
                     <g>_R ->_R Sym (Data.Data.N:Qr[0] <*>_N <[u]>_R <g>_P))
                    x0)
                   `cast`
                 (Data.Data.N:Qr[0]
                      <*>_N
                      <[u]>_R
                      <Language.Python.Common.AST.ComprehensionExpr annot1>_P)
                   (GHC.Types.[] @ u)) -}
94dde4ffceed0a2a13daed020b6576e1
  $fDataComprehensionExpr_$cgmapQi ::
    Data.Data.Data annot =>
    forall u.
    GHC.Types.Int
    -> (forall d. Data.Data.Data d => d -> u)
    -> Language.Python.Common.AST.ComprehensionExpr annot
    -> u
  {- Arity: 4,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,U(U)><L,C(C1(U))><L,U>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   @ u
                   (ds :: GHC.Types.Int)
                   (ds1 :: forall d. Data.Data.Data d => d -> u)
                   (x :: Language.Python.Common.AST.ComprehensionExpr annot1) ->
                 case Language.Python.Common.AST.$fDataComprehensionExpr_$cgfoldl
                        @ annot1
                        $dData
                        @ (Data.Data.Qi u)
                        (\ @ d
                           @ b
                           ($dData1 :: Data.Data.Data d)
                           (ds2 :: Data.Data.Qi u (d -> b))
                           (a2 :: d) ->
                         case ds2 of wild { Data.Data.Qi i' q ->
                         Data.Data.Qi
                           @ *
                           @ u
                           @ b
                           (case i' of wild1 { GHC.Types.I# x1 ->
                            GHC.Types.I# (GHC.Prim.+# x1 1#) })
                           (case ds of wild1 { GHC.Types.I# x1 ->
                            case i' of wild2 { GHC.Types.I# y ->
                            case GHC.Prim.tagToEnum#
                                   @ GHC.Types.Bool
                                   (GHC.Prim.==# x1 y) of wild3 {
                              GHC.Types.False -> q
                              GHC.Types.True -> GHC.Base.Just @ u (ds1 @ d $dData1 a2) } } }) })
                        (Language.Python.Common.AST.$fDataExpr1 @ u)
                        x of wild { Data.Data.Qi ds2 q ->
                 Data.Maybe.fromJust @ u q }) -}
94dde4ffceed0a2a13daed020b6576e1
  $fDataComprehensionExpr_$cgmapQl ::
    Data.Data.Data annot =>
    forall r r'.
    (r -> r' -> r)
    -> r
    -> (forall d. Data.Data.Data d => d -> r')
    -> Language.Python.Common.AST.ComprehensionExpr annot
    -> r
  {- Arity: 4,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,C(C1(U))><L,U><L,C(C1(U))>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   @ r
                   @ r'
                   (ds :: r -> r' -> r)
                   (ds1 :: r)
                   (ds2 :: forall d. Data.Data.Data d => d -> r') ->
                 let {
                   g :: Language.Python.Common.AST.ComprehensionExpr annot1
                        -> Data.Functor.Const.Const
                             r (Language.Python.Common.AST.ComprehensionExpr annot1)
                   = Language.Python.Common.AST.$fDataComprehensionExpr_$cgfoldl
                       @ annot1
                       $dData
                       @ (Data.Functor.Const.Const r)
                       (\ @ d
                          @ b
                          ($dData1 :: Data.Data.Data d)
                          (c :: Data.Functor.Const.Const r (d -> b))
                          (x :: d) ->
                        ds
                          c `cast` (Data.Functor.Const.N:Const[0] <*>_N <r>_R <d -> b>_P)
                          (ds2 @ d $dData1 x))
                         `cast`
                       (forall (d :: <*>_N) (b :: <*>_N).
                        <Data.Data.Data d>_R
                        ->_R <Data.Functor.Const.Const r (d -> b)>_R
                        ->_R <d>_R
                        ->_R Sym (Data.Functor.Const.N:Const[0] <*>_N <r>_R <b>_P))
                       (\ @ g1 (ds3 :: g1) -> ds1)
                         `cast`
                       (forall (g1 :: <*>_N).
                        <g1>_R ->_R Sym (Data.Functor.Const.N:Const[0] <*>_N <r>_R <g1>_P))
                 } in
                 (\ (x :: Language.Python.Common.AST.ComprehensionExpr annot1) ->
                  g x)
                   `cast`
                 (<Language.Python.Common.AST.ComprehensionExpr annot1>_R
                  ->_R Data.Functor.Const.N:Const[0]
                           <*>_N
                           <r>_R
                           <Language.Python.Common.AST.ComprehensionExpr annot1>_P)) -}
94dde4ffceed0a2a13daed020b6576e1
  $fDataComprehensionExpr_$cgmapQr ::
    Data.Data.Data annot =>
    forall r r'.
    (r' -> r -> r)
    -> r
    -> (forall d. Data.Data.Data d => d -> r')
    -> Language.Python.Common.AST.ComprehensionExpr annot
    -> r
  {- Arity: 5,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,C(C1(U))><L,U><L,C(C1(U))><L,U>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   @ r
                   @ r'
                   (ds :: r' -> r -> r)
                   (ds1 :: r)
                   (ds2 :: forall d. Data.Data.Data d => d -> r')
                   (x0 :: Language.Python.Common.AST.ComprehensionExpr annot1) ->
                 (Language.Python.Common.AST.$fDataComprehensionExpr_$cgfoldl
                    @ annot1
                    $dData
                    @ (Data.Data.Qr r)
                    (\ @ d
                       @ b
                       ($dData1 :: Data.Data.Data d)
                       (ds3 :: Data.Data.Qr r (d -> b))
                       (x :: d)
                       (r1 :: r) ->
                     ds3 `cast` (Data.Data.N:Qr[0] <*>_N <r>_R <d -> b>_P)
                       (ds (ds2 @ d $dData1 x) r1))
                      `cast`
                    (forall (d :: <*>_N) (b :: <*>_N).
                     <Data.Data.Data d>_R
                     ->_R <Data.Data.Qr r (d -> b)>_R
                     ->_R <d>_R
                     ->_R Sym (Data.Data.N:Qr[0] <*>_N <r>_R <b>_P))
                    (Language.Python.Common.AST.$fDataExpr5 @ r)
                      `cast`
                    (forall (g :: <*>_N).
                     <g>_R ->_R Sym (Data.Data.N:Qr[0] <*>_N <r>_R <g>_P))
                    x0)
                   `cast`
                 (Data.Data.N:Qr[0]
                      <*>_N
                      <r>_R
                      <Language.Python.Common.AST.ComprehensionExpr annot1>_P)
                   ds1) -}
94dde4ffceed0a2a13daed020b6576e1
  $fDataComprehensionExpr_$cgunfold ::
    Data.Data.Data annot =>
    forall (c :: * -> *).
    (forall b r. Data.Data.Data b => c (b -> r) -> c r)
    -> (forall r. r -> c r)
    -> Data.Data.Constr
    -> c (Language.Python.Common.AST.ComprehensionExpr annot)
  {- Arity: 1, Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   @ c :: * -> * ->
                 let {
                   $dData1 :: Data.Data.Data
                                (Language.Python.Common.AST.DictKeyDatumList annot1)
                   = Language.Python.Common.AST.$fDataDictKeyDatumList @ annot1 $dData
                 } in
                 let {
                   $dData2 :: Data.Data.Data (Language.Python.Common.AST.Expr annot1)
                   = Language.Python.Common.AST.$fDataExpr @ annot1 $dData
                 } in
                 \ (k :: forall b r. Data.Data.Data b => c (b -> r) -> c r)
                   (z :: forall r. r -> c r)
                   (c1 :: Data.Data.Constr) ->
                 case c1 of wild { Data.Data.Constr ds ds1 ds2 ds3 ds4 ->
                 case ds of wild1 {
                   DEFAULT
                   -> case ds4 of ww6 { Data.Data.DataType ww7 ww8 ->
                      case Data.Data.$wlvl ww7
                      ret_ty (c (Language.Python.Common.AST.ComprehensionExpr annot1))
                      of {} }
                   Data.Data.AlgConstr idx
                   -> case idx of wild2 { GHC.Types.I# ds7 ->
                      case ds7 of ds8 {
                        DEFAULT
                        -> k @ (Language.Python.Common.AST.DictKeyDatumList annot1)
                             @ (Language.Python.Common.AST.ComprehensionExpr annot1)
                             $dData1
                             (z @ (Language.Python.Common.AST.DictKeyDatumList annot1
                                   -> Language.Python.Common.AST.ComprehensionExpr annot1)
                                (Language.Python.Common.AST.ComprehensionDict @ annot1))
                        1#
                        -> k @ (Language.Python.Common.AST.Expr annot1)
                             @ (Language.Python.Common.AST.ComprehensionExpr annot1)
                             $dData2
                             (z @ (Language.Python.Common.AST.Expr annot1
                                   -> Language.Python.Common.AST.ComprehensionExpr annot1)
                                (Language.Python.Common.AST.ComprehensionExpr
                                   @ annot1)) } } } }) -}
94dde4ffceed0a2a13daed020b6576e1
  $fDataComprehensionExpr_$cp1Data ::
    Data.Data.Data annot =>
    Data.Typeable.Internal.Typeable
      (Language.Python.Common.AST.ComprehensionExpr annot)
  {- Arity: 1, Strictness: <L,1*U(1*U,A,A,A,A,A,A,A,A,A,A,A,A,A,A)>,
     Unfolding: (\ @ annot1 ($dData :: Data.Data.Data annot1) ->
                 let {
                   b1 :: Data.Typeable.Internal.Typeable annot1
                   = Data.Data.$p1Data @ annot1 $dData
                 } in
                 case GHC.Magic.noinline
                        @ ([GHC.Fingerprint.Type.Fingerprint]
                           -> GHC.Fingerprint.Type.Fingerprint)
                        GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           Language.Python.Common.AST.$fDataComprehensionExpr4
                           (GHC.Types.:
                              @ GHC.Fingerprint.Type.Fingerprint
                              (Data.Typeable.Internal.typeRepFingerprint
                                 @ *
                                 @ annot1
                                 b1 `cast` (Data.Typeable.Internal.N:Typeable[0] <*>_N <annot1>_N))
                              (GHC.Types.[]
                                 @ GHC.Fingerprint.Type.Fingerprint))) of dt { GHC.Fingerprint.Type.Fingerprint dt1 dt2 ->
                 (Data.Typeable.Internal.TrApp
                    @ *
                    @ (Language.Python.Common.AST.ComprehensionExpr annot1)
                    @ *
                    @ Language.Python.Common.AST.ComprehensionExpr
                    @ annot1
                    @~ <Language.Python.Common.AST.ComprehensionExpr annot1>_N
                    dt1
                    dt2
                    Language.Python.Common.AST.$fDataComprehensionExpr_a3
                    b1 `cast` (Data.Typeable.Internal.N:Typeable[0] <*>_N <annot1>_N))
                   `cast`
                 (Sym (Data.Typeable.Internal.N:Typeable[0]) <*>_N <Language.Python.Common.AST.ComprehensionExpr
                                                                      annot1>_N) }) -}
94dde4ffceed0a2a13daed020b6576e1
  $fDataComprehensionExpr_a3 ::
    Data.Typeable.Internal.TypeRep
      Language.Python.Common.AST.ComprehensionExpr
  {- Unfolding: (case GHC.Magic.noinline
                        @ ([GHC.Fingerprint.Type.Fingerprint]
                           -> GHC.Fingerprint.Type.Fingerprint)
                        GHC.Fingerprint.fingerprintFingerprints
                        Language.Python.Common.AST.$fDataComprehensionExpr2 of dt { GHC.Fingerprint.Type.Fingerprint dt1 dt2 ->
                 Data.Typeable.Internal.TrTyCon
                   @ (* -> *)
                   @ Language.Python.Common.AST.ComprehensionExpr
                   dt1
                   dt2
                   Language.Python.Common.AST.$tcComprehensionExpr
                   (GHC.Types.[] @ Data.Typeable.Internal.SomeTypeRep) }) -}
94dde4ffceed0a2a13daed020b6576e1
  $fDataComprehension_$cdataCast1 ::
    Data.Data.Data annot =>
    forall (t :: * -> *) (c :: * -> *).
    Data.Typeable.Internal.Typeable t =>
    (forall d. Data.Data.Data d => c (t d))
    -> GHC.Base.Maybe
         (c (Language.Python.Common.AST.Comprehension annot))
  {- Arity: 2, Strictness: <L,U><L,1*U>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   @ t :: * -> *
                   @ c :: * -> *
                   ($dTypeable :: Data.Typeable.Internal.Typeable t) ->
                 let {
                   lvl447 :: GHC.Base.Maybe
                               (t
                                Data.Type.Equality.:~~: Language.Python.Common.AST.Comprehension)
                   = Data.Typeable.Internal.eqTypeRep
                       @ (* -> *)
                       @ (* -> *)
                       @ t
                       @ Language.Python.Common.AST.Comprehension
                       $dTypeable
                         `cast`
                       (Data.Typeable.Internal.N:Typeable[0] <* -> *>_N <t>_N)
                       Language.Python.Common.AST.$fDataComprehension_a3
                 } in
                 \ (f12 :: forall d. Data.Data.Data d => c (t d)) ->
                 case lvl447 of wild {
                   GHC.Base.Nothing
                   -> GHC.Base.Nothing
                        @ (c (Language.Python.Common.AST.Comprehension annot1))
                   GHC.Base.Just ds
                   -> case ds of wild1 { Data.Type.Equality.HRefl cobox cobox1 ->
                      GHC.Base.Just
                        @ (c (Language.Python.Common.AST.Comprehension annot1))
                        (f12 @ annot1 $dData)
                          `cast`
                        (<c>_R (Sym cobox1 <annot1>_N)) } }) -}
94dde4ffceed0a2a13daed020b6576e1
  $fDataComprehension_$cgfoldl ::
    Data.Data.Data annot =>
    forall (c :: * -> *).
    (forall d b. Data.Data.Data d => c (d -> b) -> d -> c b)
    -> (forall g. g -> c g)
    -> Language.Python.Common.AST.Comprehension annot
    -> c (Language.Python.Common.AST.Comprehension annot)
  {- Arity: 1, Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   @ c :: * -> * ->
                 let {
                   $dData1 :: Data.Data.Data
                                (Language.Python.Common.AST.ComprehensionExpr annot1)
                   = Language.Python.Common.AST.$fDataComprehensionExpr
                       @ annot1
                       $dData
                 } in
                 let {
                   $dData2 :: Data.Data.Data
                                (Language.Python.Common.AST.CompFor annot1)
                   = Language.Python.Common.AST.$fDataCompFor @ annot1 $dData
                 } in
                 \ (k :: forall d b. Data.Data.Data d => c (d -> b) -> d -> c b)
                   (z :: forall g. g -> c g)
                   (ds :: Language.Python.Common.AST.Comprehension annot1) ->
                 case ds of wild { Language.Python.Common.AST.Comprehension a1 a2 a3 ->
                 k @ annot1
                   @ (Language.Python.Common.AST.Comprehension annot1)
                   $dData
                   (k @ (Language.Python.Common.AST.CompFor annot1)
                      @ (annot1 -> Language.Python.Common.AST.Comprehension annot1)
                      $dData2
                      (k @ (Language.Python.Common.AST.ComprehensionExpr annot1)
                         @ (Language.Python.Common.AST.CompFor annot1
                            -> annot1 -> Language.Python.Common.AST.Comprehension annot1)
                         $dData1
                         (z @ (Language.Python.Common.AST.ComprehensionExpr annot1
                               -> Language.Python.Common.AST.CompFor annot1
                               -> annot1
                               -> Language.Python.Common.AST.Comprehension annot1)
                            (Language.Python.Common.AST.Comprehension @ annot1))
                         a1)
                      a2)
                   a3 }) -}
94dde4ffceed0a2a13daed020b6576e1
  $fDataComprehension_$cgmapM ::
    Data.Data.Data annot =>
    forall (m :: * -> *).
    GHC.Base.Monad m =>
    (forall d. Data.Data.Data d => d -> m d)
    -> Language.Python.Common.AST.Comprehension annot
    -> m (Language.Python.Common.AST.Comprehension annot)
  {- Arity: 3,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,U(A,C(C1(U)),A,U,A)><L,C(C1(U))>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   @ m :: * -> *
                   ($dMonad :: GHC.Base.Monad m)
                   (ds :: forall d. Data.Data.Data d => d -> m d) ->
                 Language.Python.Common.AST.$fDataComprehension_$cgfoldl
                   @ annot1
                   $dData
                   @ m
                   (\ @ d
                      @ b
                      ($dData1 :: Data.Data.Data d)
                      (c :: m (d -> b))
                      (x :: d) ->
                    let {
                      lvl447 :: m d = ds @ d $dData1 x
                    } in
                    GHC.Base.>>=
                      @ m
                      $dMonad
                      @ (d -> b)
                      @ b
                      c
                      (\ (c' :: d -> b) ->
                       GHC.Base.>>=
                         @ m
                         $dMonad
                         @ d
                         @ b
                         lvl447
                         (\ (x' :: d) -> GHC.Base.return @ m $dMonad @ b (c' x'))))
                   (\ @ g -> GHC.Base.return @ m $dMonad @ g)) -}
94dde4ffceed0a2a13daed020b6576e1
  $fDataComprehension_$cgmapMo ::
    Data.Data.Data annot =>
    forall (m :: * -> *).
    GHC.Base.MonadPlus m =>
    (forall d. Data.Data.Data d => d -> m d)
    -> Language.Python.Common.AST.Comprehension annot
    -> m (Language.Python.Common.AST.Comprehension annot)
  {- Arity: 4,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><S(LS(LC(C(S))LLL)LL),U(A,1*U(A,C(C1(U)),A,C(U),A),1*U,C(C1(U)))><L,C(C1(U))><L,U>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   @ m :: * -> *
                   ($dMonadPlus :: GHC.Base.MonadPlus m)
                   (ds :: forall d. Data.Data.Data d => d -> m d)
                   (eta :: Language.Python.Common.AST.Comprehension annot1) ->
                 let {
                   $dMonad :: GHC.Base.Monad m = GHC.Base.$p2MonadPlus @ m $dMonadPlus
                 } in
                 let {
                   lvl447 :: m (Language.Python.Common.AST.Comprehension annot1)
                   = GHC.Base.mzero
                       @ m
                       $dMonadPlus
                       @ (Language.Python.Common.AST.Comprehension annot1)
                 } in
                 GHC.Base.>>=
                   @ m
                   $dMonad
                   @ (Language.Python.Common.AST.Comprehension annot1, GHC.Types.Bool)
                   @ (Language.Python.Common.AST.Comprehension annot1)
                   (Language.Python.Common.AST.$fDataComprehension_$cgfoldl
                      @ annot1
                      $dData
                      @ (Data.Data.Mp m)
                      (\ @ d
                         @ b
                         ($dData1 :: Data.Data.Data d)
                         (ds1 :: Data.Data.Mp m (d -> b))
                         (y :: d) ->
                       let {
                         lvl448 :: m d = ds @ d $dData1 y
                       } in
                       GHC.Base.>>=
                         @ m
                         $dMonad
                         @ (d -> b, GHC.Types.Bool)
                         @ (b, GHC.Types.Bool)
                         ds1 `cast` (Data.Data.N:Mp[0] <m>_R <d -> b>_N)
                         (\ (ds2 :: (d -> b, GHC.Types.Bool)) ->
                          case ds2 of wild { (,) h b1 ->
                          case b1 of wild1 {
                            GHC.Types.False
                            -> GHC.Base.mplus
                                 @ m
                                 $dMonadPlus
                                 @ (b, GHC.Types.Bool)
                                 (GHC.Base.>>=
                                    @ m
                                    $dMonad
                                    @ d
                                    @ (b, GHC.Types.Bool)
                                    lvl448
                                    (\ (y' :: d) ->
                                     GHC.Base.return
                                       @ m
                                       $dMonad
                                       @ (b, GHC.Types.Bool)
                                       (h y', GHC.Types.True)))
                                 (GHC.Base.return
                                    @ m
                                    $dMonad
                                    @ (b, GHC.Types.Bool)
                                    (h y, GHC.Types.False))
                            GHC.Types.True
                            -> GHC.Base.return
                                 @ m
                                 $dMonad
                                 @ (b, GHC.Types.Bool)
                                 (h y, GHC.Types.True) } }))
                        `cast`
                      (forall (d :: <*>_N) (b :: <*>_N).
                       <Data.Data.Data d>_R
                       ->_R <Data.Data.Mp m (d -> b)>_R
                       ->_R <d>_R
                       ->_R Sym (Data.Data.N:Mp[0] <m>_R <b>_N))
                      (\ @ g (g1 :: g) ->
                       GHC.Base.return
                         @ m
                         $dMonad
                         @ (g, GHC.Types.Bool)
                         (g1, GHC.Types.False))
                        `cast`
                      (forall (g :: <*>_N).
                       <g>_R ->_R Sym (Data.Data.N:Mp[0] <m>_R <g>_N))
                      eta)
                     `cast`
                   (Data.Data.N:Mp[0]
                        <m>_R <Language.Python.Common.AST.Comprehension annot1>_N)
                   (\ (ds1 :: (Language.Python.Common.AST.Comprehension annot1,
                               GHC.Types.Bool)) ->
                    case ds1 of wild { (,) x' b ->
                    case b of wild1 {
                      GHC.Types.False -> lvl447
                      GHC.Types.True
                      -> GHC.Base.return
                           @ m
                           $dMonad
                           @ (Language.Python.Common.AST.Comprehension annot1)
                           x' } })) -}
94dde4ffceed0a2a13daed020b6576e1
  $fDataComprehension_$cgmapMp ::
    Data.Data.Data annot =>
    forall (m :: * -> *).
    GHC.Base.MonadPlus m =>
    (forall d. Data.Data.Data d => d -> m d)
    -> Language.Python.Common.AST.Comprehension annot
    -> m (Language.Python.Common.AST.Comprehension annot)
  {- Arity: 4,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><S(LS(LC(C(S))LLL)LL),U(A,1*U(A,C(C1(U)),A,C(U),A),1*U,C(C1(U)))><L,C(C1(U))><L,U>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   @ m :: * -> *
                   ($dMonadPlus :: GHC.Base.MonadPlus m)
                   (ds :: forall d. Data.Data.Data d => d -> m d)
                   (eta :: Language.Python.Common.AST.Comprehension annot1) ->
                 let {
                   $dMonad :: GHC.Base.Monad m = GHC.Base.$p2MonadPlus @ m $dMonadPlus
                 } in
                 let {
                   lvl447 :: m (Language.Python.Common.AST.Comprehension annot1)
                   = GHC.Base.mzero
                       @ m
                       $dMonadPlus
                       @ (Language.Python.Common.AST.Comprehension annot1)
                 } in
                 GHC.Base.>>=
                   @ m
                   $dMonad
                   @ (Language.Python.Common.AST.Comprehension annot1, GHC.Types.Bool)
                   @ (Language.Python.Common.AST.Comprehension annot1)
                   (Language.Python.Common.AST.$fDataComprehension_$cgfoldl
                      @ annot1
                      $dData
                      @ (Data.Data.Mp m)
                      (\ @ d
                         @ b
                         ($dData1 :: Data.Data.Data d)
                         (ds1 :: Data.Data.Mp m (d -> b))
                         (y :: d) ->
                       let {
                         lvl448 :: m d = ds @ d $dData1 y
                       } in
                       GHC.Base.>>=
                         @ m
                         $dMonad
                         @ (d -> b, GHC.Types.Bool)
                         @ (b, GHC.Types.Bool)
                         ds1 `cast` (Data.Data.N:Mp[0] <m>_R <d -> b>_N)
                         (\ (ds2 :: (d -> b, GHC.Types.Bool)) ->
                          case ds2 of wild { (,) h b1 ->
                          GHC.Base.mplus
                            @ m
                            $dMonadPlus
                            @ (b, GHC.Types.Bool)
                            (GHC.Base.>>=
                               @ m
                               $dMonad
                               @ d
                               @ (b, GHC.Types.Bool)
                               lvl448
                               (\ (y' :: d) ->
                                GHC.Base.return
                                  @ m
                                  $dMonad
                                  @ (b, GHC.Types.Bool)
                                  (h y', GHC.Types.True)))
                            (GHC.Base.return @ m $dMonad @ (b, GHC.Types.Bool) (h y, b1)) }))
                        `cast`
                      (forall (d :: <*>_N) (b :: <*>_N).
                       <Data.Data.Data d>_R
                       ->_R <Data.Data.Mp m (d -> b)>_R
                       ->_R <d>_R
                       ->_R Sym (Data.Data.N:Mp[0] <m>_R <b>_N))
                      (\ @ g (g1 :: g) ->
                       GHC.Base.return
                         @ m
                         $dMonad
                         @ (g, GHC.Types.Bool)
                         (g1, GHC.Types.False))
                        `cast`
                      (forall (g :: <*>_N).
                       <g>_R ->_R Sym (Data.Data.N:Mp[0] <m>_R <g>_N))
                      eta)
                     `cast`
                   (Data.Data.N:Mp[0]
                        <m>_R <Language.Python.Common.AST.Comprehension annot1>_N)
                   (\ (ds1 :: (Language.Python.Common.AST.Comprehension annot1,
                               GHC.Types.Bool)) ->
                    case ds1 of wild { (,) x' b ->
                    case b of wild1 {
                      GHC.Types.False -> lvl447
                      GHC.Types.True
                      -> GHC.Base.return
                           @ m
                           $dMonad
                           @ (Language.Python.Common.AST.Comprehension annot1)
                           x' } })) -}
94dde4ffceed0a2a13daed020b6576e1
  $fDataComprehension_$cgmapQ ::
    Data.Data.Data annot =>
    forall u.
    (forall d. Data.Data.Data d => d -> u)
    -> Language.Python.Common.AST.Comprehension annot -> [u]
  {- Arity: 3,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,C(C1(U))><L,U>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   @ u
                   (ds :: forall d. Data.Data.Data d => d -> u)
                   (x0 :: Language.Python.Common.AST.Comprehension annot1) ->
                 (Language.Python.Common.AST.$fDataComprehension_$cgfoldl
                    @ annot1
                    $dData
                    @ (Data.Data.Qr [u])
                    (\ @ d
                       @ b
                       ($dData1 :: Data.Data.Data d)
                       (ds1 :: Data.Data.Qr [u] (d -> b))
                       (x :: d)
                       (r1 :: [u]) ->
                     ds1 `cast` (Data.Data.N:Qr[0] <*>_N <[u]>_R <d -> b>_P)
                       (GHC.Types.: @ u (ds @ d $dData1 x) r1))
                      `cast`
                    (forall (d :: <*>_N) (b :: <*>_N).
                     <Data.Data.Data d>_R
                     ->_R <Data.Data.Qr [u] (d -> b)>_R
                     ->_R <d>_R
                     ->_R Sym (Data.Data.N:Qr[0] <*>_N <[u]>_R <b>_P))
                    (Language.Python.Common.AST.$fDataExpr4 @ u)
                      `cast`
                    (forall (g :: <*>_N).
                     <g>_R ->_R Sym (Data.Data.N:Qr[0] <*>_N <[u]>_R <g>_P))
                    x0)
                   `cast`
                 (Data.Data.N:Qr[0]
                      <*>_N <[u]>_R <Language.Python.Common.AST.Comprehension annot1>_P)
                   (GHC.Types.[] @ u)) -}
94dde4ffceed0a2a13daed020b6576e1
  $fDataComprehension_$cgmapQi ::
    Data.Data.Data annot =>
    forall u.
    GHC.Types.Int
    -> (forall d. Data.Data.Data d => d -> u)
    -> Language.Python.Common.AST.Comprehension annot
    -> u
  {- Arity: 4,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,U(U)><L,C(C1(U))><L,U>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   @ u
                   (ds :: GHC.Types.Int)
                   (ds1 :: forall d. Data.Data.Data d => d -> u)
                   (x :: Language.Python.Common.AST.Comprehension annot1) ->
                 case Language.Python.Common.AST.$fDataComprehension_$cgfoldl
                        @ annot1
                        $dData
                        @ (Data.Data.Qi u)
                        (\ @ d
                           @ b
                           ($dData1 :: Data.Data.Data d)
                           (ds2 :: Data.Data.Qi u (d -> b))
                           (a2 :: d) ->
                         case ds2 of wild { Data.Data.Qi i' q ->
                         Data.Data.Qi
                           @ *
                           @ u
                           @ b
                           (case i' of wild1 { GHC.Types.I# x1 ->
                            GHC.Types.I# (GHC.Prim.+# x1 1#) })
                           (case ds of wild1 { GHC.Types.I# x1 ->
                            case i' of wild2 { GHC.Types.I# y ->
                            case GHC.Prim.tagToEnum#
                                   @ GHC.Types.Bool
                                   (GHC.Prim.==# x1 y) of wild3 {
                              GHC.Types.False -> q
                              GHC.Types.True -> GHC.Base.Just @ u (ds1 @ d $dData1 a2) } } }) })
                        (Language.Python.Common.AST.$fDataExpr1 @ u)
                        x of wild { Data.Data.Qi ds2 q ->
                 Data.Maybe.fromJust @ u q }) -}
94dde4ffceed0a2a13daed020b6576e1
  $fDataComprehension_$cgmapQl ::
    Data.Data.Data annot =>
    forall r r'.
    (r -> r' -> r)
    -> r
    -> (forall d. Data.Data.Data d => d -> r')
    -> Language.Python.Common.AST.Comprehension annot
    -> r
  {- Arity: 4,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,C(C1(U))><L,U><L,C(C1(U))>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   @ r
                   @ r'
                   (ds :: r -> r' -> r)
                   (ds1 :: r)
                   (ds2 :: forall d. Data.Data.Data d => d -> r') ->
                 let {
                   g :: Language.Python.Common.AST.Comprehension annot1
                        -> Data.Functor.Const.Const
                             r (Language.Python.Common.AST.Comprehension annot1)
                   = Language.Python.Common.AST.$fDataComprehension_$cgfoldl
                       @ annot1
                       $dData
                       @ (Data.Functor.Const.Const r)
                       (\ @ d
                          @ b
                          ($dData1 :: Data.Data.Data d)
                          (c :: Data.Functor.Const.Const r (d -> b))
                          (x :: d) ->
                        ds
                          c `cast` (Data.Functor.Const.N:Const[0] <*>_N <r>_R <d -> b>_P)
                          (ds2 @ d $dData1 x))
                         `cast`
                       (forall (d :: <*>_N) (b :: <*>_N).
                        <Data.Data.Data d>_R
                        ->_R <Data.Functor.Const.Const r (d -> b)>_R
                        ->_R <d>_R
                        ->_R Sym (Data.Functor.Const.N:Const[0] <*>_N <r>_R <b>_P))
                       (\ @ g1 (ds3 :: g1) -> ds1)
                         `cast`
                       (forall (g1 :: <*>_N).
                        <g1>_R ->_R Sym (Data.Functor.Const.N:Const[0] <*>_N <r>_R <g1>_P))
                 } in
                 (\ (x :: Language.Python.Common.AST.Comprehension annot1) -> g x)
                   `cast`
                 (<Language.Python.Common.AST.Comprehension annot1>_R
                  ->_R Data.Functor.Const.N:Const[0]
                           <*>_N
                           <r>_R
                           <Language.Python.Common.AST.Comprehension annot1>_P)) -}
94dde4ffceed0a2a13daed020b6576e1
  $fDataComprehension_$cgmapQr ::
    Data.Data.Data annot =>
    forall r r'.
    (r' -> r -> r)
    -> r
    -> (forall d. Data.Data.Data d => d -> r')
    -> Language.Python.Common.AST.Comprehension annot
    -> r
  {- Arity: 5,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,C(C1(U))><L,U><L,C(C1(U))><L,U>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   @ r
                   @ r'
                   (ds :: r' -> r -> r)
                   (ds1 :: r)
                   (ds2 :: forall d. Data.Data.Data d => d -> r')
                   (x0 :: Language.Python.Common.AST.Comprehension annot1) ->
                 (Language.Python.Common.AST.$fDataComprehension_$cgfoldl
                    @ annot1
                    $dData
                    @ (Data.Data.Qr r)
                    (\ @ d
                       @ b
                       ($dData1 :: Data.Data.Data d)
                       (ds3 :: Data.Data.Qr r (d -> b))
                       (x :: d)
                       (r1 :: r) ->
                     ds3 `cast` (Data.Data.N:Qr[0] <*>_N <r>_R <d -> b>_P)
                       (ds (ds2 @ d $dData1 x) r1))
                      `cast`
                    (forall (d :: <*>_N) (b :: <*>_N).
                     <Data.Data.Data d>_R
                     ->_R <Data.Data.Qr r (d -> b)>_R
                     ->_R <d>_R
                     ->_R Sym (Data.Data.N:Qr[0] <*>_N <r>_R <b>_P))
                    (Language.Python.Common.AST.$fDataExpr5 @ r)
                      `cast`
                    (forall (g :: <*>_N).
                     <g>_R ->_R Sym (Data.Data.N:Qr[0] <*>_N <r>_R <g>_P))
                    x0)
                   `cast`
                 (Data.Data.N:Qr[0]
                      <*>_N <r>_R <Language.Python.Common.AST.Comprehension annot1>_P)
                   ds1) -}
94dde4ffceed0a2a13daed020b6576e1
  $fDataComprehension_$cgunfold ::
    Data.Data.Data annot =>
    forall (c :: * -> *).
    (forall b r. Data.Data.Data b => c (b -> r) -> c r)
    -> (forall r. r -> c r)
    -> Data.Data.Constr
    -> c (Language.Python.Common.AST.Comprehension annot)
  {- Arity: 1, Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   @ c :: * -> * ->
                 let {
                   $dData1 :: Data.Data.Data
                                (Language.Python.Common.AST.ComprehensionExpr annot1)
                   = Language.Python.Common.AST.$fDataComprehensionExpr
                       @ annot1
                       $dData
                 } in
                 let {
                   $dData2 :: Data.Data.Data
                                (Language.Python.Common.AST.CompFor annot1)
                   = Language.Python.Common.AST.$fDataCompFor @ annot1 $dData
                 } in
                 \ (k :: forall b r. Data.Data.Data b => c (b -> r) -> c r)
                   (z :: forall r. r -> c r)
                   (ds :: Data.Data.Constr) ->
                 k @ annot1
                   @ (Language.Python.Common.AST.Comprehension annot1)
                   $dData
                   (k @ (Language.Python.Common.AST.CompFor annot1)
                      @ (annot1 -> Language.Python.Common.AST.Comprehension annot1)
                      $dData2
                      (k @ (Language.Python.Common.AST.ComprehensionExpr annot1)
                         @ (Language.Python.Common.AST.CompFor annot1
                            -> annot1 -> Language.Python.Common.AST.Comprehension annot1)
                         $dData1
                         (z @ (Language.Python.Common.AST.ComprehensionExpr annot1
                               -> Language.Python.Common.AST.CompFor annot1
                               -> annot1
                               -> Language.Python.Common.AST.Comprehension annot1)
                            (Language.Python.Common.AST.Comprehension @ annot1))))) -}
94dde4ffceed0a2a13daed020b6576e1
  $fDataComprehension_$cp1Data ::
    Data.Data.Data annot =>
    Data.Typeable.Internal.Typeable
      (Language.Python.Common.AST.Comprehension annot)
  {- Arity: 1, Strictness: <L,1*U(1*U,A,A,A,A,A,A,A,A,A,A,A,A,A,A)>,
     Unfolding: (\ @ annot1 ($dData :: Data.Data.Data annot1) ->
                 let {
                   b1 :: Data.Typeable.Internal.Typeable annot1
                   = Data.Data.$p1Data @ annot1 $dData
                 } in
                 case GHC.Magic.noinline
                        @ ([GHC.Fingerprint.Type.Fingerprint]
                           -> GHC.Fingerprint.Type.Fingerprint)
                        GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           Language.Python.Common.AST.$fDataComprehension7
                           (GHC.Types.:
                              @ GHC.Fingerprint.Type.Fingerprint
                              (Data.Typeable.Internal.typeRepFingerprint
                                 @ *
                                 @ annot1
                                 b1 `cast` (Data.Typeable.Internal.N:Typeable[0] <*>_N <annot1>_N))
                              (GHC.Types.[]
                                 @ GHC.Fingerprint.Type.Fingerprint))) of dt { GHC.Fingerprint.Type.Fingerprint dt1 dt2 ->
                 (Data.Typeable.Internal.TrApp
                    @ *
                    @ (Language.Python.Common.AST.Comprehension annot1)
                    @ *
                    @ Language.Python.Common.AST.Comprehension
                    @ annot1
                    @~ <Language.Python.Common.AST.Comprehension annot1>_N
                    dt1
                    dt2
                    Language.Python.Common.AST.$fDataComprehension_a3
                    b1 `cast` (Data.Typeable.Internal.N:Typeable[0] <*>_N <annot1>_N))
                   `cast`
                 (Sym (Data.Typeable.Internal.N:Typeable[0]) <*>_N <Language.Python.Common.AST.Comprehension
                                                                      annot1>_N) }) -}
94dde4ffceed0a2a13daed020b6576e1
  $fDataComprehension_a3 ::
    Data.Typeable.Internal.TypeRep
      Language.Python.Common.AST.Comprehension
  {- Unfolding: (case GHC.Magic.noinline
                        @ ([GHC.Fingerprint.Type.Fingerprint]
                           -> GHC.Fingerprint.Type.Fingerprint)
                        GHC.Fingerprint.fingerprintFingerprints
                        Language.Python.Common.AST.$fDataComprehension2 of dt { GHC.Fingerprint.Type.Fingerprint dt1 dt2 ->
                 Data.Typeable.Internal.TrTyCon
                   @ (* -> *)
                   @ Language.Python.Common.AST.Comprehension
                   dt1
                   dt2
                   Language.Python.Common.AST.$tcComprehension
                   (GHC.Types.[] @ Data.Typeable.Internal.SomeTypeRep) }) -}
6e1ab2fb537d2522edcf9b3f967431ea
  $fDataDecorator ::
    Data.Data.Data annot =>
    Data.Data.Data (Language.Python.Common.AST.Decorator annot)
  DFunId
  {- Arity: 1, Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)>,
     Inline: CONLIKE,
     Unfolding: DFun: @ annot1 (v :: Data.Data.Data annot1).
                  @ (Language.Python.Common.AST.Decorator annot1)
                  (Language.Python.Common.AST.$fDataDecorator_$cp1Data @ annot1 v)
                  (Language.Python.Common.AST.$fDataDecorator_$cgfoldl @ annot1 v)
                  (Language.Python.Common.AST.$fDataDecorator_$cgunfold @ annot1 v)
                  (\ (ds :: Language.Python.Common.AST.Decorator annot1) ->
                   case ds of wild { Language.Python.Common.AST.Decorator ds1 ds2 ds3 ->
                   Language.Python.Common.AST.$cDecorator })
                  (\ (ds :: Language.Python.Common.AST.Decorator annot1) ->
                   Language.Python.Common.AST.$tDecorator)
                  (Language.Python.Common.AST.$fDataDecorator_$cdataCast1 @ annot1 v)
                  (\ @ t :: * -> * -> *
                     @ c :: * -> *
                     ($dTypeable :: Data.Typeable.Internal.Typeable t)
                     (ds :: forall d e.
                            (Data.Data.Data d, Data.Data.Data e) =>
                            c (t d e)) ->
                   GHC.Base.Nothing
                     @ (c (Language.Python.Common.AST.Decorator annot1)))
                  (Language.Python.Common.AST.$fDataDecorator1 @ annot1 v)
                    `cast`
                  (<forall b. Data.Data.Data b => b -> b>_R
                   ->_R <Language.Python.Common.AST.Decorator annot1>_R
                   ->_R Data.Functor.Identity.N:Identity[0]
                            <Language.Python.Common.AST.Decorator annot1>_R)
                  (Language.Python.Common.AST.$fDataDecorator_$cgmapQl @ annot1 v)
                  (Language.Python.Common.AST.$fDataDecorator_$cgmapQr @ annot1 v)
                  (Language.Python.Common.AST.$fDataDecorator_$cgmapQ @ annot1 v)
                  (Language.Python.Common.AST.$fDataDecorator_$cgmapQi @ annot1 v)
                  (Language.Python.Common.AST.$fDataDecorator_$cgmapM @ annot1 v)
                  (Language.Python.Common.AST.$fDataDecorator_$cgmapMp @ annot1 v)
                  (Language.Python.Common.AST.$fDataDecorator_$cgmapMo @ annot1 v) -}
6e1ab2fb537d2522edcf9b3f967431ea
  $fDataDecorator1 ::
    Data.Data.Data annot =>
    (forall b. Data.Data.Data b => b -> b)
    -> Language.Python.Common.AST.Decorator annot
    -> Data.Functor.Identity.Identity
         (Language.Python.Common.AST.Decorator annot)
  {- Arity: 3,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,C(C1(U))><L,U>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   (ds :: forall b. Data.Data.Data b => b -> b)
                   (x0 :: Language.Python.Common.AST.Decorator annot1) ->
                 Language.Python.Common.AST.$fDataDecorator_$cgfoldl
                   @ annot1
                   $dData
                   @ Data.Functor.Identity.Identity
                   (\ @ d
                      @ b
                      ($dData1 :: Data.Data.Data d)
                      (ds1 :: Data.Functor.Identity.Identity (d -> b))
                      (x :: d) ->
                    ds1 `cast` (Data.Functor.Identity.N:Identity[0] <d -> b>_R)
                      (ds @ d $dData1 x))
                     `cast`
                   (forall (d :: <*>_N) (b :: <*>_N).
                    <Data.Data.Data d>_R
                    ->_R <Data.Functor.Identity.Identity (d -> b)>_R
                    ->_R <d>_R
                    ->_R Sym (Data.Functor.Identity.N:Identity[0] <b>_R))
                   Language.Python.Common.AST.$fDataExpr7
                     `cast`
                   (forall (g :: <*>_N).
                    <g>_R ->_R Sym (Data.Functor.Identity.N:Identity[0] <g>_R))
                   x0) -}
23def2267bf31061a9f0437ed960cde3
  $fDataDecorator2 :: [GHC.Fingerprint.Type.Fingerprint]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Fingerprint.Type.Fingerprint
                   Language.Python.Common.AST.$fDataDecorator3
                   Language.Python.Common.AST.$fDataExpr9) -}
9efde1af4dbee5cb2221535656267d6d
  $fDataDecorator3 :: GHC.Fingerprint.Type.Fingerprint
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Fingerprint.Type.Fingerprint
                   13246240914903781432##
                   13356469711918197383##) -}
ab03e4726d9c4cb66a7a87faeb31652a
  $fDataDecorator4 :: Data.Data.DataRep
  {- Strictness: m1,
     Unfolding: (Data.Data.AlgRep
                   Language.Python.Common.AST.$fDataDecorator5) -}
58c2ff5c5865e78ea6cbf093c686fa35
  $fDataDecorator5 :: [Data.Data.Constr]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Data.Data.Constr
                   Language.Python.Common.AST.$cDecorator
                   (GHC.Types.[] @ Data.Data.Constr)) -}
8e7973e7d67f14d3d6d27da0c3f0fc79
  $fDataDecorator6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.Python.Common.AST.$tcDecorator2) -}
6e1ab2fb537d2522edcf9b3f967431ea
  $fDataDecorator7 :: GHC.Fingerprint.Type.Fingerprint
  {- Unfolding: (case Language.Python.Common.AST.$fDataDecorator_a3 of wild { Data.Typeable.Internal.TrTyCon dt dt1 ds1 ds2 ->
                 GHC.Fingerprint.Type.Fingerprint dt dt1 }) -}
6e1ab2fb537d2522edcf9b3f967431ea
  $fDataDecorator_$cdataCast1 ::
    Data.Data.Data annot =>
    forall (t :: * -> *) (c :: * -> *).
    Data.Typeable.Internal.Typeable t =>
    (forall d. Data.Data.Data d => c (t d))
    -> GHC.Base.Maybe (c (Language.Python.Common.AST.Decorator annot))
  {- Arity: 2, Strictness: <L,U><L,1*U>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   @ t :: * -> *
                   @ c :: * -> *
                   ($dTypeable :: Data.Typeable.Internal.Typeable t) ->
                 let {
                   lvl447 :: GHC.Base.Maybe
                               (t Data.Type.Equality.:~~: Language.Python.Common.AST.Decorator)
                   = Data.Typeable.Internal.eqTypeRep
                       @ (* -> *)
                       @ (* -> *)
                       @ t
                       @ Language.Python.Common.AST.Decorator
                       $dTypeable
                         `cast`
                       (Data.Typeable.Internal.N:Typeable[0] <* -> *>_N <t>_N)
                       Language.Python.Common.AST.$fDataDecorator_a3
                 } in
                 \ (f12 :: forall d. Data.Data.Data d => c (t d)) ->
                 case lvl447 of wild {
                   GHC.Base.Nothing
                   -> GHC.Base.Nothing
                        @ (c (Language.Python.Common.AST.Decorator annot1))
                   GHC.Base.Just ds
                   -> case ds of wild1 { Data.Type.Equality.HRefl cobox cobox1 ->
                      GHC.Base.Just
                        @ (c (Language.Python.Common.AST.Decorator annot1))
                        (f12 @ annot1 $dData)
                          `cast`
                        (<c>_R (Sym cobox1 <annot1>_N)) } }) -}
6e1ab2fb537d2522edcf9b3f967431ea
  $fDataDecorator_$cgfoldl ::
    Data.Data.Data annot =>
    forall (c :: * -> *).
    (forall d b. Data.Data.Data d => c (d -> b) -> d -> c b)
    -> (forall g. g -> c g)
    -> Language.Python.Common.AST.Decorator annot
    -> c (Language.Python.Common.AST.Decorator annot)
  {- Arity: 1, Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   @ c :: * -> * ->
                 let {
                   $dData1 :: Data.Data.Data (Language.Python.Common.AST.Ident annot1)
                   = Language.Python.Common.AST.$fDataIdent @ annot1 $dData
                 } in
                 let {
                   $dData2 :: Data.Data.Data
                                (Language.Python.Common.AST.DottedName annot1)
                   = Data.Data.$fData[]
                       @ (Language.Python.Common.AST.Ident annot1)
                       $dData1
                 } in
                 let {
                   $dData3 :: Data.Data.Data
                                (Language.Python.Common.AST.Argument annot1)
                   = Language.Python.Common.AST.$fDataArgument @ annot1 $dData
                 } in
                 let {
                   $dData4 :: Data.Data.Data
                                [Language.Python.Common.AST.Argument annot1]
                   = Data.Data.$fData[]
                       @ (Language.Python.Common.AST.Argument annot1)
                       $dData3
                 } in
                 \ (k :: forall d b. Data.Data.Data d => c (d -> b) -> d -> c b)
                   (z :: forall g. g -> c g)
                   (ds :: Language.Python.Common.AST.Decorator annot1) ->
                 case ds of wild { Language.Python.Common.AST.Decorator a1 a2 a3 ->
                 k @ annot1
                   @ (Language.Python.Common.AST.Decorator annot1)
                   $dData
                   (k @ [Language.Python.Common.AST.Argument annot1]
                      @ (annot1 -> Language.Python.Common.AST.Decorator annot1)
                      $dData4
                      (k @ (Language.Python.Common.AST.DottedName annot1)
                         @ ([Language.Python.Common.AST.Argument annot1]
                            -> annot1 -> Language.Python.Common.AST.Decorator annot1)
                         $dData2
                         (z @ (Language.Python.Common.AST.DottedName annot1
                               -> [Language.Python.Common.AST.Argument annot1]
                               -> annot1
                               -> Language.Python.Common.AST.Decorator annot1)
                            (Language.Python.Common.AST.Decorator @ annot1))
                         a1)
                      a2)
                   a3 }) -}
6e1ab2fb537d2522edcf9b3f967431ea
  $fDataDecorator_$cgmapM ::
    Data.Data.Data annot =>
    forall (m :: * -> *).
    GHC.Base.Monad m =>
    (forall d. Data.Data.Data d => d -> m d)
    -> Language.Python.Common.AST.Decorator annot
    -> m (Language.Python.Common.AST.Decorator annot)
  {- Arity: 3,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,U(A,C(C1(U)),A,U,A)><L,C(C1(U))>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   @ m :: * -> *
                   ($dMonad :: GHC.Base.Monad m)
                   (ds :: forall d. Data.Data.Data d => d -> m d) ->
                 Language.Python.Common.AST.$fDataDecorator_$cgfoldl
                   @ annot1
                   $dData
                   @ m
                   (\ @ d
                      @ b
                      ($dData1 :: Data.Data.Data d)
                      (c :: m (d -> b))
                      (x :: d) ->
                    let {
                      lvl447 :: m d = ds @ d $dData1 x
                    } in
                    GHC.Base.>>=
                      @ m
                      $dMonad
                      @ (d -> b)
                      @ b
                      c
                      (\ (c' :: d -> b) ->
                       GHC.Base.>>=
                         @ m
                         $dMonad
                         @ d
                         @ b
                         lvl447
                         (\ (x' :: d) -> GHC.Base.return @ m $dMonad @ b (c' x'))))
                   (\ @ g -> GHC.Base.return @ m $dMonad @ g)) -}
6e1ab2fb537d2522edcf9b3f967431ea
  $fDataDecorator_$cgmapMo ::
    Data.Data.Data annot =>
    forall (m :: * -> *).
    GHC.Base.MonadPlus m =>
    (forall d. Data.Data.Data d => d -> m d)
    -> Language.Python.Common.AST.Decorator annot
    -> m (Language.Python.Common.AST.Decorator annot)
  {- Arity: 4,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><S(LS(LC(C(S))LLL)LL),U(A,1*U(A,C(C1(U)),A,C(U),A),1*U,C(C1(U)))><L,C(C1(U))><L,U>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   @ m :: * -> *
                   ($dMonadPlus :: GHC.Base.MonadPlus m)
                   (ds :: forall d. Data.Data.Data d => d -> m d)
                   (eta :: Language.Python.Common.AST.Decorator annot1) ->
                 let {
                   $dMonad :: GHC.Base.Monad m = GHC.Base.$p2MonadPlus @ m $dMonadPlus
                 } in
                 let {
                   lvl447 :: m (Language.Python.Common.AST.Decorator annot1)
                   = GHC.Base.mzero
                       @ m
                       $dMonadPlus
                       @ (Language.Python.Common.AST.Decorator annot1)
                 } in
                 GHC.Base.>>=
                   @ m
                   $dMonad
                   @ (Language.Python.Common.AST.Decorator annot1, GHC.Types.Bool)
                   @ (Language.Python.Common.AST.Decorator annot1)
                   (Language.Python.Common.AST.$fDataDecorator_$cgfoldl
                      @ annot1
                      $dData
                      @ (Data.Data.Mp m)
                      (\ @ d
                         @ b
                         ($dData1 :: Data.Data.Data d)
                         (ds1 :: Data.Data.Mp m (d -> b))
                         (y :: d) ->
                       let {
                         lvl448 :: m d = ds @ d $dData1 y
                       } in
                       GHC.Base.>>=
                         @ m
                         $dMonad
                         @ (d -> b, GHC.Types.Bool)
                         @ (b, GHC.Types.Bool)
                         ds1 `cast` (Data.Data.N:Mp[0] <m>_R <d -> b>_N)
                         (\ (ds2 :: (d -> b, GHC.Types.Bool)) ->
                          case ds2 of wild { (,) h b1 ->
                          case b1 of wild1 {
                            GHC.Types.False
                            -> GHC.Base.mplus
                                 @ m
                                 $dMonadPlus
                                 @ (b, GHC.Types.Bool)
                                 (GHC.Base.>>=
                                    @ m
                                    $dMonad
                                    @ d
                                    @ (b, GHC.Types.Bool)
                                    lvl448
                                    (\ (y' :: d) ->
                                     GHC.Base.return
                                       @ m
                                       $dMonad
                                       @ (b, GHC.Types.Bool)
                                       (h y', GHC.Types.True)))
                                 (GHC.Base.return
                                    @ m
                                    $dMonad
                                    @ (b, GHC.Types.Bool)
                                    (h y, GHC.Types.False))
                            GHC.Types.True
                            -> GHC.Base.return
                                 @ m
                                 $dMonad
                                 @ (b, GHC.Types.Bool)
                                 (h y, GHC.Types.True) } }))
                        `cast`
                      (forall (d :: <*>_N) (b :: <*>_N).
                       <Data.Data.Data d>_R
                       ->_R <Data.Data.Mp m (d -> b)>_R
                       ->_R <d>_R
                       ->_R Sym (Data.Data.N:Mp[0] <m>_R <b>_N))
                      (\ @ g (g1 :: g) ->
                       GHC.Base.return
                         @ m
                         $dMonad
                         @ (g, GHC.Types.Bool)
                         (g1, GHC.Types.False))
                        `cast`
                      (forall (g :: <*>_N).
                       <g>_R ->_R Sym (Data.Data.N:Mp[0] <m>_R <g>_N))
                      eta)
                     `cast`
                   (Data.Data.N:Mp[0]
                        <m>_R <Language.Python.Common.AST.Decorator annot1>_N)
                   (\ (ds1 :: (Language.Python.Common.AST.Decorator annot1,
                               GHC.Types.Bool)) ->
                    case ds1 of wild { (,) x' b ->
                    case b of wild1 {
                      GHC.Types.False -> lvl447
                      GHC.Types.True
                      -> GHC.Base.return
                           @ m
                           $dMonad
                           @ (Language.Python.Common.AST.Decorator annot1)
                           x' } })) -}
6e1ab2fb537d2522edcf9b3f967431ea
  $fDataDecorator_$cgmapMp ::
    Data.Data.Data annot =>
    forall (m :: * -> *).
    GHC.Base.MonadPlus m =>
    (forall d. Data.Data.Data d => d -> m d)
    -> Language.Python.Common.AST.Decorator annot
    -> m (Language.Python.Common.AST.Decorator annot)
  {- Arity: 4,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><S(LS(LC(C(S))LLL)LL),U(A,1*U(A,C(C1(U)),A,C(U),A),1*U,C(C1(U)))><L,C(C1(U))><L,U>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   @ m :: * -> *
                   ($dMonadPlus :: GHC.Base.MonadPlus m)
                   (ds :: forall d. Data.Data.Data d => d -> m d)
                   (eta :: Language.Python.Common.AST.Decorator annot1) ->
                 let {
                   $dMonad :: GHC.Base.Monad m = GHC.Base.$p2MonadPlus @ m $dMonadPlus
                 } in
                 let {
                   lvl447 :: m (Language.Python.Common.AST.Decorator annot1)
                   = GHC.Base.mzero
                       @ m
                       $dMonadPlus
                       @ (Language.Python.Common.AST.Decorator annot1)
                 } in
                 GHC.Base.>>=
                   @ m
                   $dMonad
                   @ (Language.Python.Common.AST.Decorator annot1, GHC.Types.Bool)
                   @ (Language.Python.Common.AST.Decorator annot1)
                   (Language.Python.Common.AST.$fDataDecorator_$cgfoldl
                      @ annot1
                      $dData
                      @ (Data.Data.Mp m)
                      (\ @ d
                         @ b
                         ($dData1 :: Data.Data.Data d)
                         (ds1 :: Data.Data.Mp m (d -> b))
                         (y :: d) ->
                       let {
                         lvl448 :: m d = ds @ d $dData1 y
                       } in
                       GHC.Base.>>=
                         @ m
                         $dMonad
                         @ (d -> b, GHC.Types.Bool)
                         @ (b, GHC.Types.Bool)
                         ds1 `cast` (Data.Data.N:Mp[0] <m>_R <d -> b>_N)
                         (\ (ds2 :: (d -> b, GHC.Types.Bool)) ->
                          case ds2 of wild { (,) h b1 ->
                          GHC.Base.mplus
                            @ m
                            $dMonadPlus
                            @ (b, GHC.Types.Bool)
                            (GHC.Base.>>=
                               @ m
                               $dMonad
                               @ d
                               @ (b, GHC.Types.Bool)
                               lvl448
                               (\ (y' :: d) ->
                                GHC.Base.return
                                  @ m
                                  $dMonad
                                  @ (b, GHC.Types.Bool)
                                  (h y', GHC.Types.True)))
                            (GHC.Base.return @ m $dMonad @ (b, GHC.Types.Bool) (h y, b1)) }))
                        `cast`
                      (forall (d :: <*>_N) (b :: <*>_N).
                       <Data.Data.Data d>_R
                       ->_R <Data.Data.Mp m (d -> b)>_R
                       ->_R <d>_R
                       ->_R Sym (Data.Data.N:Mp[0] <m>_R <b>_N))
                      (\ @ g (g1 :: g) ->
                       GHC.Base.return
                         @ m
                         $dMonad
                         @ (g, GHC.Types.Bool)
                         (g1, GHC.Types.False))
                        `cast`
                      (forall (g :: <*>_N).
                       <g>_R ->_R Sym (Data.Data.N:Mp[0] <m>_R <g>_N))
                      eta)
                     `cast`
                   (Data.Data.N:Mp[0]
                        <m>_R <Language.Python.Common.AST.Decorator annot1>_N)
                   (\ (ds1 :: (Language.Python.Common.AST.Decorator annot1,
                               GHC.Types.Bool)) ->
                    case ds1 of wild { (,) x' b ->
                    case b of wild1 {
                      GHC.Types.False -> lvl447
                      GHC.Types.True
                      -> GHC.Base.return
                           @ m
                           $dMonad
                           @ (Language.Python.Common.AST.Decorator annot1)
                           x' } })) -}
6e1ab2fb537d2522edcf9b3f967431ea
  $fDataDecorator_$cgmapQ ::
    Data.Data.Data annot =>
    forall u.
    (forall d. Data.Data.Data d => d -> u)
    -> Language.Python.Common.AST.Decorator annot -> [u]
  {- Arity: 3,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,C(C1(U))><L,U>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   @ u
                   (ds :: forall d. Data.Data.Data d => d -> u)
                   (x0 :: Language.Python.Common.AST.Decorator annot1) ->
                 (Language.Python.Common.AST.$fDataDecorator_$cgfoldl
                    @ annot1
                    $dData
                    @ (Data.Data.Qr [u])
                    (\ @ d
                       @ b
                       ($dData1 :: Data.Data.Data d)
                       (ds1 :: Data.Data.Qr [u] (d -> b))
                       (x :: d)
                       (r1 :: [u]) ->
                     ds1 `cast` (Data.Data.N:Qr[0] <*>_N <[u]>_R <d -> b>_P)
                       (GHC.Types.: @ u (ds @ d $dData1 x) r1))
                      `cast`
                    (forall (d :: <*>_N) (b :: <*>_N).
                     <Data.Data.Data d>_R
                     ->_R <Data.Data.Qr [u] (d -> b)>_R
                     ->_R <d>_R
                     ->_R Sym (Data.Data.N:Qr[0] <*>_N <[u]>_R <b>_P))
                    (Language.Python.Common.AST.$fDataExpr4 @ u)
                      `cast`
                    (forall (g :: <*>_N).
                     <g>_R ->_R Sym (Data.Data.N:Qr[0] <*>_N <[u]>_R <g>_P))
                    x0)
                   `cast`
                 (Data.Data.N:Qr[0]
                      <*>_N <[u]>_R <Language.Python.Common.AST.Decorator annot1>_P)
                   (GHC.Types.[] @ u)) -}
6e1ab2fb537d2522edcf9b3f967431ea
  $fDataDecorator_$cgmapQi ::
    Data.Data.Data annot =>
    forall u.
    GHC.Types.Int
    -> (forall d. Data.Data.Data d => d -> u)
    -> Language.Python.Common.AST.Decorator annot
    -> u
  {- Arity: 4,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,U(U)><L,C(C1(U))><L,U>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   @ u
                   (ds :: GHC.Types.Int)
                   (ds1 :: forall d. Data.Data.Data d => d -> u)
                   (x :: Language.Python.Common.AST.Decorator annot1) ->
                 case Language.Python.Common.AST.$fDataDecorator_$cgfoldl
                        @ annot1
                        $dData
                        @ (Data.Data.Qi u)
                        (\ @ d
                           @ b
                           ($dData1 :: Data.Data.Data d)
                           (ds2 :: Data.Data.Qi u (d -> b))
                           (a2 :: d) ->
                         case ds2 of wild { Data.Data.Qi i' q ->
                         Data.Data.Qi
                           @ *
                           @ u
                           @ b
                           (case i' of wild1 { GHC.Types.I# x1 ->
                            GHC.Types.I# (GHC.Prim.+# x1 1#) })
                           (case ds of wild1 { GHC.Types.I# x1 ->
                            case i' of wild2 { GHC.Types.I# y ->
                            case GHC.Prim.tagToEnum#
                                   @ GHC.Types.Bool
                                   (GHC.Prim.==# x1 y) of wild3 {
                              GHC.Types.False -> q
                              GHC.Types.True -> GHC.Base.Just @ u (ds1 @ d $dData1 a2) } } }) })
                        (Language.Python.Common.AST.$fDataExpr1 @ u)
                        x of wild { Data.Data.Qi ds2 q ->
                 Data.Maybe.fromJust @ u q }) -}
6e1ab2fb537d2522edcf9b3f967431ea
  $fDataDecorator_$cgmapQl ::
    Data.Data.Data annot =>
    forall r r'.
    (r -> r' -> r)
    -> r
    -> (forall d. Data.Data.Data d => d -> r')
    -> Language.Python.Common.AST.Decorator annot
    -> r
  {- Arity: 4,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,C(C1(U))><L,U><L,C(C1(U))>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   @ r
                   @ r'
                   (ds :: r -> r' -> r)
                   (ds1 :: r)
                   (ds2 :: forall d. Data.Data.Data d => d -> r') ->
                 let {
                   g :: Language.Python.Common.AST.Decorator annot1
                        -> Data.Functor.Const.Const
                             r (Language.Python.Common.AST.Decorator annot1)
                   = Language.Python.Common.AST.$fDataDecorator_$cgfoldl
                       @ annot1
                       $dData
                       @ (Data.Functor.Const.Const r)
                       (\ @ d
                          @ b
                          ($dData1 :: Data.Data.Data d)
                          (c :: Data.Functor.Const.Const r (d -> b))
                          (x :: d) ->
                        ds
                          c `cast` (Data.Functor.Const.N:Const[0] <*>_N <r>_R <d -> b>_P)
                          (ds2 @ d $dData1 x))
                         `cast`
                       (forall (d :: <*>_N) (b :: <*>_N).
                        <Data.Data.Data d>_R
                        ->_R <Data.Functor.Const.Const r (d -> b)>_R
                        ->_R <d>_R
                        ->_R Sym (Data.Functor.Const.N:Const[0] <*>_N <r>_R <b>_P))
                       (\ @ g1 (ds3 :: g1) -> ds1)
                         `cast`
                       (forall (g1 :: <*>_N).
                        <g1>_R ->_R Sym (Data.Functor.Const.N:Const[0] <*>_N <r>_R <g1>_P))
                 } in
                 (\ (x :: Language.Python.Common.AST.Decorator annot1) -> g x)
                   `cast`
                 (<Language.Python.Common.AST.Decorator annot1>_R
                  ->_R Data.Functor.Const.N:Const[0]
                           <*>_N <r>_R <Language.Python.Common.AST.Decorator annot1>_P)) -}
6e1ab2fb537d2522edcf9b3f967431ea
  $fDataDecorator_$cgmapQr ::
    Data.Data.Data annot =>
    forall r r'.
    (r' -> r -> r)
    -> r
    -> (forall d. Data.Data.Data d => d -> r')
    -> Language.Python.Common.AST.Decorator annot
    -> r
  {- Arity: 5,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,C(C1(U))><L,U><L,C(C1(U))><L,U>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   @ r
                   @ r'
                   (ds :: r' -> r -> r)
                   (ds1 :: r)
                   (ds2 :: forall d. Data.Data.Data d => d -> r')
                   (x0 :: Language.Python.Common.AST.Decorator annot1) ->
                 (Language.Python.Common.AST.$fDataDecorator_$cgfoldl
                    @ annot1
                    $dData
                    @ (Data.Data.Qr r)
                    (\ @ d
                       @ b
                       ($dData1 :: Data.Data.Data d)
                       (ds3 :: Data.Data.Qr r (d -> b))
                       (x :: d)
                       (r1 :: r) ->
                     ds3 `cast` (Data.Data.N:Qr[0] <*>_N <r>_R <d -> b>_P)
                       (ds (ds2 @ d $dData1 x) r1))
                      `cast`
                    (forall (d :: <*>_N) (b :: <*>_N).
                     <Data.Data.Data d>_R
                     ->_R <Data.Data.Qr r (d -> b)>_R
                     ->_R <d>_R
                     ->_R Sym (Data.Data.N:Qr[0] <*>_N <r>_R <b>_P))
                    (Language.Python.Common.AST.$fDataExpr5 @ r)
                      `cast`
                    (forall (g :: <*>_N).
                     <g>_R ->_R Sym (Data.Data.N:Qr[0] <*>_N <r>_R <g>_P))
                    x0)
                   `cast`
                 (Data.Data.N:Qr[0]
                      <*>_N <r>_R <Language.Python.Common.AST.Decorator annot1>_P)
                   ds1) -}
6e1ab2fb537d2522edcf9b3f967431ea
  $fDataDecorator_$cgunfold ::
    Data.Data.Data annot =>
    forall (c :: * -> *).
    (forall b r. Data.Data.Data b => c (b -> r) -> c r)
    -> (forall r. r -> c r)
    -> Data.Data.Constr
    -> c (Language.Python.Common.AST.Decorator annot)
  {- Arity: 1, Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   @ c :: * -> * ->
                 let {
                   $dData1 :: Data.Data.Data (Language.Python.Common.AST.Ident annot1)
                   = Language.Python.Common.AST.$fDataIdent @ annot1 $dData
                 } in
                 let {
                   $dData2 :: Data.Data.Data
                                (Language.Python.Common.AST.DottedName annot1)
                   = Data.Data.$fData[]
                       @ (Language.Python.Common.AST.Ident annot1)
                       $dData1
                 } in
                 let {
                   $dData3 :: Data.Data.Data
                                (Language.Python.Common.AST.Argument annot1)
                   = Language.Python.Common.AST.$fDataArgument @ annot1 $dData
                 } in
                 let {
                   $dData4 :: Data.Data.Data
                                [Language.Python.Common.AST.Argument annot1]
                   = Data.Data.$fData[]
                       @ (Language.Python.Common.AST.Argument annot1)
                       $dData3
                 } in
                 \ (k :: forall b r. Data.Data.Data b => c (b -> r) -> c r)
                   (z :: forall r. r -> c r)
                   (ds :: Data.Data.Constr) ->
                 k @ annot1
                   @ (Language.Python.Common.AST.Decorator annot1)
                   $dData
                   (k @ [Language.Python.Common.AST.Argument annot1]
                      @ (annot1 -> Language.Python.Common.AST.Decorator annot1)
                      $dData4
                      (k @ (Language.Python.Common.AST.DottedName annot1)
                         @ ([Language.Python.Common.AST.Argument annot1]
                            -> annot1 -> Language.Python.Common.AST.Decorator annot1)
                         $dData2
                         (z @ (Language.Python.Common.AST.DottedName annot1
                               -> [Language.Python.Common.AST.Argument annot1]
                               -> annot1
                               -> Language.Python.Common.AST.Decorator annot1)
                            (Language.Python.Common.AST.Decorator @ annot1))))) -}
6e1ab2fb537d2522edcf9b3f967431ea
  $fDataDecorator_$cp1Data ::
    Data.Data.Data annot =>
    Data.Typeable.Internal.Typeable
      (Language.Python.Common.AST.Decorator annot)
  {- Arity: 1, Strictness: <L,1*U(1*U,A,A,A,A,A,A,A,A,A,A,A,A,A,A)>,
     Unfolding: (\ @ annot1 ($dData :: Data.Data.Data annot1) ->
                 let {
                   b1 :: Data.Typeable.Internal.Typeable annot1
                   = Data.Data.$p1Data @ annot1 $dData
                 } in
                 case GHC.Magic.noinline
                        @ ([GHC.Fingerprint.Type.Fingerprint]
                           -> GHC.Fingerprint.Type.Fingerprint)
                        GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           Language.Python.Common.AST.$fDataDecorator7
                           (GHC.Types.:
                              @ GHC.Fingerprint.Type.Fingerprint
                              (Data.Typeable.Internal.typeRepFingerprint
                                 @ *
                                 @ annot1
                                 b1 `cast` (Data.Typeable.Internal.N:Typeable[0] <*>_N <annot1>_N))
                              (GHC.Types.[]
                                 @ GHC.Fingerprint.Type.Fingerprint))) of dt { GHC.Fingerprint.Type.Fingerprint dt1 dt2 ->
                 (Data.Typeable.Internal.TrApp
                    @ *
                    @ (Language.Python.Common.AST.Decorator annot1)
                    @ *
                    @ Language.Python.Common.AST.Decorator
                    @ annot1
                    @~ <Language.Python.Common.AST.Decorator annot1>_N
                    dt1
                    dt2
                    Language.Python.Common.AST.$fDataDecorator_a3
                    b1 `cast` (Data.Typeable.Internal.N:Typeable[0] <*>_N <annot1>_N))
                   `cast`
                 (Sym (Data.Typeable.Internal.N:Typeable[0]) <*>_N <Language.Python.Common.AST.Decorator
                                                                      annot1>_N) }) -}
6e1ab2fb537d2522edcf9b3f967431ea
  $fDataDecorator_a3 ::
    Data.Typeable.Internal.TypeRep Language.Python.Common.AST.Decorator
  {- Unfolding: (case GHC.Magic.noinline
                        @ ([GHC.Fingerprint.Type.Fingerprint]
                           -> GHC.Fingerprint.Type.Fingerprint)
                        GHC.Fingerprint.fingerprintFingerprints
                        Language.Python.Common.AST.$fDataDecorator2 of dt { GHC.Fingerprint.Type.Fingerprint dt1 dt2 ->
                 Data.Typeable.Internal.TrTyCon
                   @ (* -> *)
                   @ Language.Python.Common.AST.Decorator
                   dt1
                   dt2
                   Language.Python.Common.AST.$tcDecorator
                   (GHC.Types.[] @ Data.Typeable.Internal.SomeTypeRep) }) -}
94dde4ffceed0a2a13daed020b6576e1
  $fDataDictKeyDatumList ::
    Data.Data.Data annot =>
    Data.Data.Data (Language.Python.Common.AST.DictKeyDatumList annot)
  DFunId
  {- Arity: 1, Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)>,
     Inline: CONLIKE,
     Unfolding: DFun: @ annot1 (v :: Data.Data.Data annot1).
                  @ (Language.Python.Common.AST.DictKeyDatumList annot1)
                  (Language.Python.Common.AST.$fDataDictKeyDatumList_$cp1Data
                     @ annot1
                     v)
                  (Language.Python.Common.AST.$fDataDictKeyDatumList_$cgfoldl
                     @ annot1
                     v)
                  (Language.Python.Common.AST.$fDataDictKeyDatumList_$cgunfold
                     @ annot1
                     v)
                  (\ (ds :: Language.Python.Common.AST.DictKeyDatumList annot1) ->
                   case ds of wild {
                     Language.Python.Common.AST.DictMappingPair ds1 ds2
                     -> Language.Python.Common.AST.$cDictMappingPair
                     Language.Python.Common.AST.DictUnpacking ds1
                     -> Language.Python.Common.AST.$cDictUnpacking })
                  (\ (ds :: Language.Python.Common.AST.DictKeyDatumList annot1) ->
                   Language.Python.Common.AST.$tDictKeyDatumList)
                  (Language.Python.Common.AST.$fDataDictKeyDatumList_$cdataCast1
                     @ annot1
                     v)
                  (\ @ t :: * -> * -> *
                     @ c :: * -> *
                     ($dTypeable :: Data.Typeable.Internal.Typeable t)
                     (ds :: forall d e.
                            (Data.Data.Data d, Data.Data.Data e) =>
                            c (t d e)) ->
                   GHC.Base.Nothing
                     @ (c (Language.Python.Common.AST.DictKeyDatumList annot1)))
                  (Language.Python.Common.AST.$fDataDictKeyDatumList1 @ annot1 v)
                    `cast`
                  (<forall b. Data.Data.Data b => b -> b>_R
                   ->_R <Language.Python.Common.AST.DictKeyDatumList annot1>_R
                   ->_R Data.Functor.Identity.N:Identity[0]
                            <Language.Python.Common.AST.DictKeyDatumList annot1>_R)
                  (Language.Python.Common.AST.$fDataDictKeyDatumList_$cgmapQl
                     @ annot1
                     v)
                  (Language.Python.Common.AST.$fDataDictKeyDatumList_$cgmapQr
                     @ annot1
                     v)
                  (Language.Python.Common.AST.$fDataDictKeyDatumList_$cgmapQ
                     @ annot1
                     v)
                  (Language.Python.Common.AST.$fDataDictKeyDatumList_$cgmapQi
                     @ annot1
                     v)
                  (Language.Python.Common.AST.$fDataDictKeyDatumList_$cgmapM
                     @ annot1
                     v)
                  (Language.Python.Common.AST.$fDataDictKeyDatumList_$cgmapMp
                     @ annot1
                     v)
                  (Language.Python.Common.AST.$fDataDictKeyDatumList_$cgmapMo
                     @ annot1
                     v) -}
94dde4ffceed0a2a13daed020b6576e1
  $fDataDictKeyDatumList1 ::
    Data.Data.Data annot =>
    (forall b. Data.Data.Data b => b -> b)
    -> Language.Python.Common.AST.DictKeyDatumList annot
    -> Data.Functor.Identity.Identity
         (Language.Python.Common.AST.DictKeyDatumList annot)
  {- Arity: 3,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,C(C1(U))><L,U>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   (ds :: forall b. Data.Data.Data b => b -> b)
                   (x0 :: Language.Python.Common.AST.DictKeyDatumList annot1) ->
                 Language.Python.Common.AST.$fDataDictKeyDatumList_$cgfoldl
                   @ annot1
                   $dData
                   @ Data.Functor.Identity.Identity
                   (\ @ d
                      @ b
                      ($dData1 :: Data.Data.Data d)
                      (ds1 :: Data.Functor.Identity.Identity (d -> b))
                      (x :: d) ->
                    ds1 `cast` (Data.Functor.Identity.N:Identity[0] <d -> b>_R)
                      (ds @ d $dData1 x))
                     `cast`
                   (forall (d :: <*>_N) (b :: <*>_N).
                    <Data.Data.Data d>_R
                    ->_R <Data.Functor.Identity.Identity (d -> b)>_R
                    ->_R <d>_R
                    ->_R Sym (Data.Functor.Identity.N:Identity[0] <b>_R))
                   Language.Python.Common.AST.$fDataExpr7
                     `cast`
                   (forall (g :: <*>_N).
                    <g>_R ->_R Sym (Data.Functor.Identity.N:Identity[0] <g>_R))
                   x0) -}
d5ef7624dd8dbf64594a1d98b6fcb4bb
  $fDataDictKeyDatumList2 :: [GHC.Fingerprint.Type.Fingerprint]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Fingerprint.Type.Fingerprint
                   Language.Python.Common.AST.$fDataDictKeyDatumList3
                   Language.Python.Common.AST.$fDataExpr9) -}
9f9f8438d26135865751cb3bf6dbe016
  $fDataDictKeyDatumList3 :: GHC.Fingerprint.Type.Fingerprint
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Fingerprint.Type.Fingerprint
                   16153218616785896642##
                   5440022984144751669##) -}
94dde4ffceed0a2a13daed020b6576e1
  $fDataDictKeyDatumList4 :: GHC.Fingerprint.Type.Fingerprint
  {- Unfolding: (case Language.Python.Common.AST.$fDataDictKeyDatumList_a3 of wild { Data.Typeable.Internal.TrTyCon dt dt1 ds1 ds2 ->
                 GHC.Fingerprint.Type.Fingerprint dt dt1 }) -}
94dde4ffceed0a2a13daed020b6576e1
  $fDataDictKeyDatumList_$cdataCast1 ::
    Data.Data.Data annot =>
    forall (t :: * -> *) (c :: * -> *).
    Data.Typeable.Internal.Typeable t =>
    (forall d. Data.Data.Data d => c (t d))
    -> GHC.Base.Maybe
         (c (Language.Python.Common.AST.DictKeyDatumList annot))
  {- Arity: 2, Strictness: <L,U><L,1*U>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   @ t :: * -> *
                   @ c :: * -> *
                   ($dTypeable :: Data.Typeable.Internal.Typeable t) ->
                 let {
                   lvl447 :: GHC.Base.Maybe
                               (t
                                Data.Type.Equality.:~~: Language.Python.Common.AST.DictKeyDatumList)
                   = Data.Typeable.Internal.eqTypeRep
                       @ (* -> *)
                       @ (* -> *)
                       @ t
                       @ Language.Python.Common.AST.DictKeyDatumList
                       $dTypeable
                         `cast`
                       (Data.Typeable.Internal.N:Typeable[0] <* -> *>_N <t>_N)
                       Language.Python.Common.AST.$fDataDictKeyDatumList_a3
                 } in
                 \ (f12 :: forall d. Data.Data.Data d => c (t d)) ->
                 case lvl447 of wild {
                   GHC.Base.Nothing
                   -> GHC.Base.Nothing
                        @ (c (Language.Python.Common.AST.DictKeyDatumList annot1))
                   GHC.Base.Just ds
                   -> case ds of wild1 { Data.Type.Equality.HRefl cobox cobox1 ->
                      GHC.Base.Just
                        @ (c (Language.Python.Common.AST.DictKeyDatumList annot1))
                        (f12 @ annot1 $dData)
                          `cast`
                        (<c>_R (Sym cobox1 <annot1>_N)) } }) -}
94dde4ffceed0a2a13daed020b6576e1
  $fDataDictKeyDatumList_$cgfoldl ::
    Data.Data.Data annot =>
    forall (c :: * -> *).
    (forall d b. Data.Data.Data d => c (d -> b) -> d -> c b)
    -> (forall g. g -> c g)
    -> Language.Python.Common.AST.DictKeyDatumList annot
    -> c (Language.Python.Common.AST.DictKeyDatumList annot)
  {- Arity: 1, Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   @ c :: * -> * ->
                 let {
                   $dData1 :: Data.Data.Data (Language.Python.Common.AST.Expr annot1)
                   = Language.Python.Common.AST.$fDataExpr @ annot1 $dData
                 } in
                 \ (k :: forall d b. Data.Data.Data d => c (d -> b) -> d -> c b)
                   (z :: forall g. g -> c g)
                   (ds :: Language.Python.Common.AST.DictKeyDatumList annot1) ->
                 case ds of wild {
                   Language.Python.Common.AST.DictMappingPair a1 a2
                   -> k @ (Language.Python.Common.AST.Expr annot1)
                        @ (Language.Python.Common.AST.DictKeyDatumList annot1)
                        $dData1
                        (k @ (Language.Python.Common.AST.Expr annot1)
                           @ (Language.Python.Common.AST.Expr annot1
                              -> Language.Python.Common.AST.DictKeyDatumList annot1)
                           $dData1
                           (z @ (Language.Python.Common.AST.Expr annot1
                                 -> Language.Python.Common.AST.Expr annot1
                                 -> Language.Python.Common.AST.DictKeyDatumList annot1)
                              (Language.Python.Common.AST.DictMappingPair @ annot1))
                           a1)
                        a2
                   Language.Python.Common.AST.DictUnpacking a1
                   -> k @ (Language.Python.Common.AST.Expr annot1)
                        @ (Language.Python.Common.AST.DictKeyDatumList annot1)
                        $dData1
                        (z @ (Language.Python.Common.AST.Expr annot1
                              -> Language.Python.Common.AST.DictKeyDatumList annot1)
                           (Language.Python.Common.AST.DictUnpacking @ annot1))
                        a1 }) -}
94dde4ffceed0a2a13daed020b6576e1
  $fDataDictKeyDatumList_$cgmapM ::
    Data.Data.Data annot =>
    forall (m :: * -> *).
    GHC.Base.Monad m =>
    (forall d. Data.Data.Data d => d -> m d)
    -> Language.Python.Common.AST.DictKeyDatumList annot
    -> m (Language.Python.Common.AST.DictKeyDatumList annot)
  {- Arity: 3,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,U(A,C(C1(U)),A,U,A)><L,C(C1(U))>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   @ m :: * -> *
                   ($dMonad :: GHC.Base.Monad m)
                   (ds :: forall d. Data.Data.Data d => d -> m d) ->
                 Language.Python.Common.AST.$fDataDictKeyDatumList_$cgfoldl
                   @ annot1
                   $dData
                   @ m
                   (\ @ d
                      @ b
                      ($dData1 :: Data.Data.Data d)
                      (c :: m (d -> b))
                      (x :: d) ->
                    let {
                      lvl447 :: m d = ds @ d $dData1 x
                    } in
                    GHC.Base.>>=
                      @ m
                      $dMonad
                      @ (d -> b)
                      @ b
                      c
                      (\ (c' :: d -> b) ->
                       GHC.Base.>>=
                         @ m
                         $dMonad
                         @ d
                         @ b
                         lvl447
                         (\ (x' :: d) -> GHC.Base.return @ m $dMonad @ b (c' x'))))
                   (\ @ g -> GHC.Base.return @ m $dMonad @ g)) -}
94dde4ffceed0a2a13daed020b6576e1
  $fDataDictKeyDatumList_$cgmapMo ::
    Data.Data.Data annot =>
    forall (m :: * -> *).
    GHC.Base.MonadPlus m =>
    (forall d. Data.Data.Data d => d -> m d)
    -> Language.Python.Common.AST.DictKeyDatumList annot
    -> m (Language.Python.Common.AST.DictKeyDatumList annot)
  {- Arity: 4,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><S(LS(LC(C(S))LLL)LL),U(A,1*U(A,C(C1(U)),A,C(U),A),1*U,C(C1(U)))><L,C(C1(U))><L,U>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   @ m :: * -> *
                   ($dMonadPlus :: GHC.Base.MonadPlus m)
                   (ds :: forall d. Data.Data.Data d => d -> m d)
                   (eta :: Language.Python.Common.AST.DictKeyDatumList annot1) ->
                 let {
                   $dMonad :: GHC.Base.Monad m = GHC.Base.$p2MonadPlus @ m $dMonadPlus
                 } in
                 let {
                   lvl447 :: m (Language.Python.Common.AST.DictKeyDatumList annot1)
                   = GHC.Base.mzero
                       @ m
                       $dMonadPlus
                       @ (Language.Python.Common.AST.DictKeyDatumList annot1)
                 } in
                 GHC.Base.>>=
                   @ m
                   $dMonad
                   @ (Language.Python.Common.AST.DictKeyDatumList annot1,
                      GHC.Types.Bool)
                   @ (Language.Python.Common.AST.DictKeyDatumList annot1)
                   (Language.Python.Common.AST.$fDataDictKeyDatumList_$cgfoldl
                      @ annot1
                      $dData
                      @ (Data.Data.Mp m)
                      (\ @ d
                         @ b
                         ($dData1 :: Data.Data.Data d)
                         (ds1 :: Data.Data.Mp m (d -> b))
                         (y :: d) ->
                       let {
                         lvl448 :: m d = ds @ d $dData1 y
                       } in
                       GHC.Base.>>=
                         @ m
                         $dMonad
                         @ (d -> b, GHC.Types.Bool)
                         @ (b, GHC.Types.Bool)
                         ds1 `cast` (Data.Data.N:Mp[0] <m>_R <d -> b>_N)
                         (\ (ds2 :: (d -> b, GHC.Types.Bool)) ->
                          case ds2 of wild { (,) h b1 ->
                          case b1 of wild1 {
                            GHC.Types.False
                            -> GHC.Base.mplus
                                 @ m
                                 $dMonadPlus
                                 @ (b, GHC.Types.Bool)
                                 (GHC.Base.>>=
                                    @ m
                                    $dMonad
                                    @ d
                                    @ (b, GHC.Types.Bool)
                                    lvl448
                                    (\ (y' :: d) ->
                                     GHC.Base.return
                                       @ m
                                       $dMonad
                                       @ (b, GHC.Types.Bool)
                                       (h y', GHC.Types.True)))
                                 (GHC.Base.return
                                    @ m
                                    $dMonad
                                    @ (b, GHC.Types.Bool)
                                    (h y, GHC.Types.False))
                            GHC.Types.True
                            -> GHC.Base.return
                                 @ m
                                 $dMonad
                                 @ (b, GHC.Types.Bool)
                                 (h y, GHC.Types.True) } }))
                        `cast`
                      (forall (d :: <*>_N) (b :: <*>_N).
                       <Data.Data.Data d>_R
                       ->_R <Data.Data.Mp m (d -> b)>_R
                       ->_R <d>_R
                       ->_R Sym (Data.Data.N:Mp[0] <m>_R <b>_N))
                      (\ @ g (g1 :: g) ->
                       GHC.Base.return
                         @ m
                         $dMonad
                         @ (g, GHC.Types.Bool)
                         (g1, GHC.Types.False))
                        `cast`
                      (forall (g :: <*>_N).
                       <g>_R ->_R Sym (Data.Data.N:Mp[0] <m>_R <g>_N))
                      eta)
                     `cast`
                   (Data.Data.N:Mp[0]
                        <m>_R <Language.Python.Common.AST.DictKeyDatumList annot1>_N)
                   (\ (ds1 :: (Language.Python.Common.AST.DictKeyDatumList annot1,
                               GHC.Types.Bool)) ->
                    case ds1 of wild { (,) x' b ->
                    case b of wild1 {
                      GHC.Types.False -> lvl447
                      GHC.Types.True
                      -> GHC.Base.return
                           @ m
                           $dMonad
                           @ (Language.Python.Common.AST.DictKeyDatumList annot1)
                           x' } })) -}
94dde4ffceed0a2a13daed020b6576e1
  $fDataDictKeyDatumList_$cgmapMp ::
    Data.Data.Data annot =>
    forall (m :: * -> *).
    GHC.Base.MonadPlus m =>
    (forall d. Data.Data.Data d => d -> m d)
    -> Language.Python.Common.AST.DictKeyDatumList annot
    -> m (Language.Python.Common.AST.DictKeyDatumList annot)
  {- Arity: 4,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><S(LS(LC(C(S))LLL)LL),U(A,1*U(A,C(C1(U)),A,C(U),A),1*U,C(C1(U)))><L,C(C1(U))><L,U>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   @ m :: * -> *
                   ($dMonadPlus :: GHC.Base.MonadPlus m)
                   (ds :: forall d. Data.Data.Data d => d -> m d)
                   (eta :: Language.Python.Common.AST.DictKeyDatumList annot1) ->
                 let {
                   $dMonad :: GHC.Base.Monad m = GHC.Base.$p2MonadPlus @ m $dMonadPlus
                 } in
                 let {
                   lvl447 :: m (Language.Python.Common.AST.DictKeyDatumList annot1)
                   = GHC.Base.mzero
                       @ m
                       $dMonadPlus
                       @ (Language.Python.Common.AST.DictKeyDatumList annot1)
                 } in
                 GHC.Base.>>=
                   @ m
                   $dMonad
                   @ (Language.Python.Common.AST.DictKeyDatumList annot1,
                      GHC.Types.Bool)
                   @ (Language.Python.Common.AST.DictKeyDatumList annot1)
                   (Language.Python.Common.AST.$fDataDictKeyDatumList_$cgfoldl
                      @ annot1
                      $dData
                      @ (Data.Data.Mp m)
                      (\ @ d
                         @ b
                         ($dData1 :: Data.Data.Data d)
                         (ds1 :: Data.Data.Mp m (d -> b))
                         (y :: d) ->
                       let {
                         lvl448 :: m d = ds @ d $dData1 y
                       } in
                       GHC.Base.>>=
                         @ m
                         $dMonad
                         @ (d -> b, GHC.Types.Bool)
                         @ (b, GHC.Types.Bool)
                         ds1 `cast` (Data.Data.N:Mp[0] <m>_R <d -> b>_N)
                         (\ (ds2 :: (d -> b, GHC.Types.Bool)) ->
                          case ds2 of wild { (,) h b1 ->
                          GHC.Base.mplus
                            @ m
                            $dMonadPlus
                            @ (b, GHC.Types.Bool)
                            (GHC.Base.>>=
                               @ m
                               $dMonad
                               @ d
                               @ (b, GHC.Types.Bool)
                               lvl448
                               (\ (y' :: d) ->
                                GHC.Base.return
                                  @ m
                                  $dMonad
                                  @ (b, GHC.Types.Bool)
                                  (h y', GHC.Types.True)))
                            (GHC.Base.return @ m $dMonad @ (b, GHC.Types.Bool) (h y, b1)) }))
                        `cast`
                      (forall (d :: <*>_N) (b :: <*>_N).
                       <Data.Data.Data d>_R
                       ->_R <Data.Data.Mp m (d -> b)>_R
                       ->_R <d>_R
                       ->_R Sym (Data.Data.N:Mp[0] <m>_R <b>_N))
                      (\ @ g (g1 :: g) ->
                       GHC.Base.return
                         @ m
                         $dMonad
                         @ (g, GHC.Types.Bool)
                         (g1, GHC.Types.False))
                        `cast`
                      (forall (g :: <*>_N).
                       <g>_R ->_R Sym (Data.Data.N:Mp[0] <m>_R <g>_N))
                      eta)
                     `cast`
                   (Data.Data.N:Mp[0]
                        <m>_R <Language.Python.Common.AST.DictKeyDatumList annot1>_N)
                   (\ (ds1 :: (Language.Python.Common.AST.DictKeyDatumList annot1,
                               GHC.Types.Bool)) ->
                    case ds1 of wild { (,) x' b ->
                    case b of wild1 {
                      GHC.Types.False -> lvl447
                      GHC.Types.True
                      -> GHC.Base.return
                           @ m
                           $dMonad
                           @ (Language.Python.Common.AST.DictKeyDatumList annot1)
                           x' } })) -}
94dde4ffceed0a2a13daed020b6576e1
  $fDataDictKeyDatumList_$cgmapQ ::
    Data.Data.Data annot =>
    forall u.
    (forall d. Data.Data.Data d => d -> u)
    -> Language.Python.Common.AST.DictKeyDatumList annot -> [u]
  {- Arity: 3,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,C(C1(U))><L,U>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   @ u
                   (ds :: forall d. Data.Data.Data d => d -> u)
                   (x0 :: Language.Python.Common.AST.DictKeyDatumList annot1) ->
                 (Language.Python.Common.AST.$fDataDictKeyDatumList_$cgfoldl
                    @ annot1
                    $dData
                    @ (Data.Data.Qr [u])
                    (\ @ d
                       @ b
                       ($dData1 :: Data.Data.Data d)
                       (ds1 :: Data.Data.Qr [u] (d -> b))
                       (x :: d)
                       (r1 :: [u]) ->
                     ds1 `cast` (Data.Data.N:Qr[0] <*>_N <[u]>_R <d -> b>_P)
                       (GHC.Types.: @ u (ds @ d $dData1 x) r1))
                      `cast`
                    (forall (d :: <*>_N) (b :: <*>_N).
                     <Data.Data.Data d>_R
                     ->_R <Data.Data.Qr [u] (d -> b)>_R
                     ->_R <d>_R
                     ->_R Sym (Data.Data.N:Qr[0] <*>_N <[u]>_R <b>_P))
                    (Language.Python.Common.AST.$fDataExpr4 @ u)
                      `cast`
                    (forall (g :: <*>_N).
                     <g>_R ->_R Sym (Data.Data.N:Qr[0] <*>_N <[u]>_R <g>_P))
                    x0)
                   `cast`
                 (Data.Data.N:Qr[0]
                      <*>_N
                      <[u]>_R
                      <Language.Python.Common.AST.DictKeyDatumList annot1>_P)
                   (GHC.Types.[] @ u)) -}
94dde4ffceed0a2a13daed020b6576e1
  $fDataDictKeyDatumList_$cgmapQi ::
    Data.Data.Data annot =>
    forall u.
    GHC.Types.Int
    -> (forall d. Data.Data.Data d => d -> u)
    -> Language.Python.Common.AST.DictKeyDatumList annot
    -> u
  {- Arity: 4,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,U(U)><L,C(C1(U))><L,U>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   @ u
                   (ds :: GHC.Types.Int)
                   (ds1 :: forall d. Data.Data.Data d => d -> u)
                   (x :: Language.Python.Common.AST.DictKeyDatumList annot1) ->
                 case Language.Python.Common.AST.$fDataDictKeyDatumList_$cgfoldl
                        @ annot1
                        $dData
                        @ (Data.Data.Qi u)
                        (\ @ d
                           @ b
                           ($dData1 :: Data.Data.Data d)
                           (ds2 :: Data.Data.Qi u (d -> b))
                           (a2 :: d) ->
                         case ds2 of wild { Data.Data.Qi i' q ->
                         Data.Data.Qi
                           @ *
                           @ u
                           @ b
                           (case i' of wild1 { GHC.Types.I# x1 ->
                            GHC.Types.I# (GHC.Prim.+# x1 1#) })
                           (case ds of wild1 { GHC.Types.I# x1 ->
                            case i' of wild2 { GHC.Types.I# y ->
                            case GHC.Prim.tagToEnum#
                                   @ GHC.Types.Bool
                                   (GHC.Prim.==# x1 y) of wild3 {
                              GHC.Types.False -> q
                              GHC.Types.True -> GHC.Base.Just @ u (ds1 @ d $dData1 a2) } } }) })
                        (Language.Python.Common.AST.$fDataExpr1 @ u)
                        x of wild { Data.Data.Qi ds2 q ->
                 Data.Maybe.fromJust @ u q }) -}
94dde4ffceed0a2a13daed020b6576e1
  $fDataDictKeyDatumList_$cgmapQl ::
    Data.Data.Data annot =>
    forall r r'.
    (r -> r' -> r)
    -> r
    -> (forall d. Data.Data.Data d => d -> r')
    -> Language.Python.Common.AST.DictKeyDatumList annot
    -> r
  {- Arity: 4,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,C(C1(U))><L,U><L,C(C1(U))>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   @ r
                   @ r'
                   (ds :: r -> r' -> r)
                   (ds1 :: r)
                   (ds2 :: forall d. Data.Data.Data d => d -> r') ->
                 let {
                   g :: Language.Python.Common.AST.DictKeyDatumList annot1
                        -> Data.Functor.Const.Const
                             r (Language.Python.Common.AST.DictKeyDatumList annot1)
                   = Language.Python.Common.AST.$fDataDictKeyDatumList_$cgfoldl
                       @ annot1
                       $dData
                       @ (Data.Functor.Const.Const r)
                       (\ @ d
                          @ b
                          ($dData1 :: Data.Data.Data d)
                          (c :: Data.Functor.Const.Const r (d -> b))
                          (x :: d) ->
                        ds
                          c `cast` (Data.Functor.Const.N:Const[0] <*>_N <r>_R <d -> b>_P)
                          (ds2 @ d $dData1 x))
                         `cast`
                       (forall (d :: <*>_N) (b :: <*>_N).
                        <Data.Data.Data d>_R
                        ->_R <Data.Functor.Const.Const r (d -> b)>_R
                        ->_R <d>_R
                        ->_R Sym (Data.Functor.Const.N:Const[0] <*>_N <r>_R <b>_P))
                       (\ @ g1 (ds3 :: g1) -> ds1)
                         `cast`
                       (forall (g1 :: <*>_N).
                        <g1>_R ->_R Sym (Data.Functor.Const.N:Const[0] <*>_N <r>_R <g1>_P))
                 } in
                 (\ (x :: Language.Python.Common.AST.DictKeyDatumList annot1) ->
                  g x)
                   `cast`
                 (<Language.Python.Common.AST.DictKeyDatumList annot1>_R
                  ->_R Data.Functor.Const.N:Const[0]
                           <*>_N
                           <r>_R
                           <Language.Python.Common.AST.DictKeyDatumList annot1>_P)) -}
94dde4ffceed0a2a13daed020b6576e1
  $fDataDictKeyDatumList_$cgmapQr ::
    Data.Data.Data annot =>
    forall r r'.
    (r' -> r -> r)
    -> r
    -> (forall d. Data.Data.Data d => d -> r')
    -> Language.Python.Common.AST.DictKeyDatumList annot
    -> r
  {- Arity: 5,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,C(C1(U))><L,U><L,C(C1(U))><L,U>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   @ r
                   @ r'
                   (ds :: r' -> r -> r)
                   (ds1 :: r)
                   (ds2 :: forall d. Data.Data.Data d => d -> r')
                   (x0 :: Language.Python.Common.AST.DictKeyDatumList annot1) ->
                 (Language.Python.Common.AST.$fDataDictKeyDatumList_$cgfoldl
                    @ annot1
                    $dData
                    @ (Data.Data.Qr r)
                    (\ @ d
                       @ b
                       ($dData1 :: Data.Data.Data d)
                       (ds3 :: Data.Data.Qr r (d -> b))
                       (x :: d)
                       (r1 :: r) ->
                     ds3 `cast` (Data.Data.N:Qr[0] <*>_N <r>_R <d -> b>_P)
                       (ds (ds2 @ d $dData1 x) r1))
                      `cast`
                    (forall (d :: <*>_N) (b :: <*>_N).
                     <Data.Data.Data d>_R
                     ->_R <Data.Data.Qr r (d -> b)>_R
                     ->_R <d>_R
                     ->_R Sym (Data.Data.N:Qr[0] <*>_N <r>_R <b>_P))
                    (Language.Python.Common.AST.$fDataExpr5 @ r)
                      `cast`
                    (forall (g :: <*>_N).
                     <g>_R ->_R Sym (Data.Data.N:Qr[0] <*>_N <r>_R <g>_P))
                    x0)
                   `cast`
                 (Data.Data.N:Qr[0]
                      <*>_N <r>_R <Language.Python.Common.AST.DictKeyDatumList annot1>_P)
                   ds1) -}
94dde4ffceed0a2a13daed020b6576e1
  $fDataDictKeyDatumList_$cgunfold ::
    Data.Data.Data annot =>
    forall (c :: * -> *).
    (forall b r. Data.Data.Data b => c (b -> r) -> c r)
    -> (forall r. r -> c r)
    -> Data.Data.Constr
    -> c (Language.Python.Common.AST.DictKeyDatumList annot)
  {- Arity: 1, Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   @ c :: * -> * ->
                 let {
                   $dData1 :: Data.Data.Data (Language.Python.Common.AST.Expr annot1)
                   = Language.Python.Common.AST.$fDataExpr @ annot1 $dData
                 } in
                 \ (k :: forall b r. Data.Data.Data b => c (b -> r) -> c r)
                   (z :: forall r. r -> c r)
                   (c1 :: Data.Data.Constr) ->
                 case c1 of wild { Data.Data.Constr ds ds1 ds2 ds3 ds4 ->
                 case ds of wild1 {
                   DEFAULT
                   -> case ds4 of ww6 { Data.Data.DataType ww7 ww8 ->
                      case Data.Data.$wlvl ww7
                      ret_ty (c (Language.Python.Common.AST.DictKeyDatumList annot1))
                      of {} }
                   Data.Data.AlgConstr idx
                   -> case idx of wild2 { GHC.Types.I# ds7 ->
                      case ds7 of ds8 {
                        DEFAULT
                        -> k @ (Language.Python.Common.AST.Expr annot1)
                             @ (Language.Python.Common.AST.DictKeyDatumList annot1)
                             $dData1
                             (z @ (Language.Python.Common.AST.Expr annot1
                                   -> Language.Python.Common.AST.DictKeyDatumList annot1)
                                (Language.Python.Common.AST.DictUnpacking @ annot1))
                        1#
                        -> k @ (Language.Python.Common.AST.Expr annot1)
                             @ (Language.Python.Common.AST.DictKeyDatumList annot1)
                             $dData1
                             (k @ (Language.Python.Common.AST.Expr annot1)
                                @ (Language.Python.Common.AST.Expr annot1
                                   -> Language.Python.Common.AST.DictKeyDatumList annot1)
                                $dData1
                                (z @ (Language.Python.Common.AST.Expr annot1
                                      -> Language.Python.Common.AST.Expr annot1
                                      -> Language.Python.Common.AST.DictKeyDatumList annot1)
                                   (Language.Python.Common.AST.DictMappingPair
                                      @ annot1))) } } } }) -}
94dde4ffceed0a2a13daed020b6576e1
  $fDataDictKeyDatumList_$cp1Data ::
    Data.Data.Data annot =>
    Data.Typeable.Internal.Typeable
      (Language.Python.Common.AST.DictKeyDatumList annot)
  {- Arity: 1, Strictness: <L,1*U(1*U,A,A,A,A,A,A,A,A,A,A,A,A,A,A)>,
     Unfolding: (\ @ annot1 ($dData :: Data.Data.Data annot1) ->
                 let {
                   b1 :: Data.Typeable.Internal.Typeable annot1
                   = Data.Data.$p1Data @ annot1 $dData
                 } in
                 case GHC.Magic.noinline
                        @ ([GHC.Fingerprint.Type.Fingerprint]
                           -> GHC.Fingerprint.Type.Fingerprint)
                        GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           Language.Python.Common.AST.$fDataDictKeyDatumList4
                           (GHC.Types.:
                              @ GHC.Fingerprint.Type.Fingerprint
                              (Data.Typeable.Internal.typeRepFingerprint
                                 @ *
                                 @ annot1
                                 b1 `cast` (Data.Typeable.Internal.N:Typeable[0] <*>_N <annot1>_N))
                              (GHC.Types.[]
                                 @ GHC.Fingerprint.Type.Fingerprint))) of dt { GHC.Fingerprint.Type.Fingerprint dt1 dt2 ->
                 (Data.Typeable.Internal.TrApp
                    @ *
                    @ (Language.Python.Common.AST.DictKeyDatumList annot1)
                    @ *
                    @ Language.Python.Common.AST.DictKeyDatumList
                    @ annot1
                    @~ <Language.Python.Common.AST.DictKeyDatumList annot1>_N
                    dt1
                    dt2
                    Language.Python.Common.AST.$fDataDictKeyDatumList_a3
                    b1 `cast` (Data.Typeable.Internal.N:Typeable[0] <*>_N <annot1>_N))
                   `cast`
                 (Sym (Data.Typeable.Internal.N:Typeable[0]) <*>_N <Language.Python.Common.AST.DictKeyDatumList
                                                                      annot1>_N) }) -}
94dde4ffceed0a2a13daed020b6576e1
  $fDataDictKeyDatumList_a3 ::
    Data.Typeable.Internal.TypeRep
      Language.Python.Common.AST.DictKeyDatumList
  {- Unfolding: (case GHC.Magic.noinline
                        @ ([GHC.Fingerprint.Type.Fingerprint]
                           -> GHC.Fingerprint.Type.Fingerprint)
                        GHC.Fingerprint.fingerprintFingerprints
                        Language.Python.Common.AST.$fDataDictKeyDatumList2 of dt { GHC.Fingerprint.Type.Fingerprint dt1 dt2 ->
                 Data.Typeable.Internal.TrTyCon
                   @ (* -> *)
                   @ Language.Python.Common.AST.DictKeyDatumList
                   dt1
                   dt2
                   Language.Python.Common.AST.$tcDictKeyDatumList
                   (GHC.Types.[] @ Data.Typeable.Internal.SomeTypeRep) }) -}
54ad83b54b9c0dd8bf180da8d82f4195
  $fDataExceptClause ::
    Data.Data.Data annot =>
    Data.Data.Data (Language.Python.Common.AST.ExceptClause annot)
  DFunId
  {- Arity: 1, Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)>,
     Inline: CONLIKE,
     Unfolding: DFun: @ annot1 (v :: Data.Data.Data annot1).
                  @ (Language.Python.Common.AST.ExceptClause annot1)
                  (Language.Python.Common.AST.$fDataExceptClause_$cp1Data @ annot1 v)
                  (Language.Python.Common.AST.$fDataExceptClause_$cgfoldl @ annot1 v)
                  (Language.Python.Common.AST.$fDataExceptClause_$cgunfold
                     @ annot1
                     v)
                  (\ (ds :: Language.Python.Common.AST.ExceptClause annot1) ->
                   case ds of wild { Language.Python.Common.AST.ExceptClause ds1 ds2 ->
                   Language.Python.Common.AST.$cExceptClause })
                  (\ (ds :: Language.Python.Common.AST.ExceptClause annot1) ->
                   Language.Python.Common.AST.$tExceptClause)
                  (Language.Python.Common.AST.$fDataExceptClause_$cdataCast1
                     @ annot1
                     v)
                  (\ @ t :: * -> * -> *
                     @ c :: * -> *
                     ($dTypeable :: Data.Typeable.Internal.Typeable t)
                     (ds :: forall d e.
                            (Data.Data.Data d, Data.Data.Data e) =>
                            c (t d e)) ->
                   GHC.Base.Nothing
                     @ (c (Language.Python.Common.AST.ExceptClause annot1)))
                  (Language.Python.Common.AST.$fDataExceptClause1 @ annot1 v)
                    `cast`
                  (<forall b. Data.Data.Data b => b -> b>_R
                   ->_R <Language.Python.Common.AST.ExceptClause annot1>_R
                   ->_R Data.Functor.Identity.N:Identity[0]
                            <Language.Python.Common.AST.ExceptClause annot1>_R)
                  (Language.Python.Common.AST.$fDataExceptClause_$cgmapQl @ annot1 v)
                  (Language.Python.Common.AST.$fDataExceptClause_$cgmapQr @ annot1 v)
                  (Language.Python.Common.AST.$fDataExceptClause_$cgmapQ @ annot1 v)
                  (Language.Python.Common.AST.$fDataExceptClause_$cgmapQi @ annot1 v)
                  (Language.Python.Common.AST.$fDataExceptClause_$cgmapM @ annot1 v)
                  (Language.Python.Common.AST.$fDataExceptClause_$cgmapMp @ annot1 v)
                  (Language.Python.Common.AST.$fDataExceptClause_$cgmapMo
                     @ annot1
                     v) -}
54ad83b54b9c0dd8bf180da8d82f4195
  $fDataExceptClause1 ::
    Data.Data.Data annot =>
    (forall b. Data.Data.Data b => b -> b)
    -> Language.Python.Common.AST.ExceptClause annot
    -> Data.Functor.Identity.Identity
         (Language.Python.Common.AST.ExceptClause annot)
  {- Arity: 3,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,C(C1(U))><L,U>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   (ds :: forall b. Data.Data.Data b => b -> b)
                   (x0 :: Language.Python.Common.AST.ExceptClause annot1) ->
                 Language.Python.Common.AST.$fDataExceptClause_$cgfoldl
                   @ annot1
                   $dData
                   @ Data.Functor.Identity.Identity
                   (\ @ d
                      @ b
                      ($dData1 :: Data.Data.Data d)
                      (ds1 :: Data.Functor.Identity.Identity (d -> b))
                      (x :: d) ->
                    ds1 `cast` (Data.Functor.Identity.N:Identity[0] <d -> b>_R)
                      (ds @ d $dData1 x))
                     `cast`
                   (forall (d :: <*>_N) (b :: <*>_N).
                    <Data.Data.Data d>_R
                    ->_R <Data.Functor.Identity.Identity (d -> b)>_R
                    ->_R <d>_R
                    ->_R Sym (Data.Functor.Identity.N:Identity[0] <b>_R))
                   Language.Python.Common.AST.$fDataExpr7
                     `cast`
                   (forall (g :: <*>_N).
                    <g>_R ->_R Sym (Data.Functor.Identity.N:Identity[0] <g>_R))
                   x0) -}
1e7f60afebdf5ee64d1948899a7f866b
  $fDataExceptClause2 :: [GHC.Fingerprint.Type.Fingerprint]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Fingerprint.Type.Fingerprint
                   Language.Python.Common.AST.$fDataExceptClause3
                   Language.Python.Common.AST.$fDataExpr9) -}
9a840bad9b3fd3a8bc092100c4e99dcb
  $fDataExceptClause3 :: GHC.Fingerprint.Type.Fingerprint
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Fingerprint.Type.Fingerprint
                   2721824131768232338##
                   10605195192644708219##) -}
3c14a66bc53cc600d657376f609acdec
  $fDataExceptClause4 :: Data.Data.DataRep
  {- Strictness: m1,
     Unfolding: (Data.Data.AlgRep
                   Language.Python.Common.AST.$fDataExceptClause5) -}
48081be27e57ef36fbb734197ae7bd01
  $fDataExceptClause5 :: [Data.Data.Constr]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Data.Data.Constr
                   Language.Python.Common.AST.$cExceptClause
                   (GHC.Types.[] @ Data.Data.Constr)) -}
ae24493c40f6407c1dace4716d8e0be4
  $fDataExceptClause6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.Python.Common.AST.$tcExceptClause2) -}
54ad83b54b9c0dd8bf180da8d82f4195
  $fDataExceptClause7 :: GHC.Fingerprint.Type.Fingerprint
  {- Unfolding: (case Language.Python.Common.AST.$fDataExceptClause_a3 of wild { Data.Typeable.Internal.TrTyCon dt dt1 ds1 ds2 ->
                 GHC.Fingerprint.Type.Fingerprint dt dt1 }) -}
54ad83b54b9c0dd8bf180da8d82f4195
  $fDataExceptClause_$cdataCast1 ::
    Data.Data.Data annot =>
    forall (t :: * -> *) (c :: * -> *).
    Data.Typeable.Internal.Typeable t =>
    (forall d. Data.Data.Data d => c (t d))
    -> GHC.Base.Maybe
         (c (Language.Python.Common.AST.ExceptClause annot))
  {- Arity: 2, Strictness: <L,U><L,1*U>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   @ t :: * -> *
                   @ c :: * -> *
                   ($dTypeable :: Data.Typeable.Internal.Typeable t) ->
                 let {
                   lvl447 :: GHC.Base.Maybe
                               (t Data.Type.Equality.:~~: Language.Python.Common.AST.ExceptClause)
                   = Data.Typeable.Internal.eqTypeRep
                       @ (* -> *)
                       @ (* -> *)
                       @ t
                       @ Language.Python.Common.AST.ExceptClause
                       $dTypeable
                         `cast`
                       (Data.Typeable.Internal.N:Typeable[0] <* -> *>_N <t>_N)
                       Language.Python.Common.AST.$fDataExceptClause_a3
                 } in
                 \ (f12 :: forall d. Data.Data.Data d => c (t d)) ->
                 case lvl447 of wild {
                   GHC.Base.Nothing
                   -> GHC.Base.Nothing
                        @ (c (Language.Python.Common.AST.ExceptClause annot1))
                   GHC.Base.Just ds
                   -> case ds of wild1 { Data.Type.Equality.HRefl cobox cobox1 ->
                      GHC.Base.Just
                        @ (c (Language.Python.Common.AST.ExceptClause annot1))
                        (f12 @ annot1 $dData)
                          `cast`
                        (<c>_R (Sym cobox1 <annot1>_N)) } }) -}
54ad83b54b9c0dd8bf180da8d82f4195
  $fDataExceptClause_$cgfoldl ::
    Data.Data.Data annot =>
    forall (c :: * -> *).
    (forall d b. Data.Data.Data d => c (d -> b) -> d -> c b)
    -> (forall g. g -> c g)
    -> Language.Python.Common.AST.ExceptClause annot
    -> c (Language.Python.Common.AST.ExceptClause annot)
  {- Arity: 1, Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   @ c :: * -> * ->
                 let {
                   $dData1 :: Data.Data.Data (Language.Python.Common.AST.Expr annot1)
                   = Language.Python.Common.AST.$fDataExpr @ annot1 $dData
                 } in
                 let {
                   $dData2 :: Data.Data.Data
                                (GHC.Base.Maybe (Language.Python.Common.AST.Expr annot1))
                   = Data.Data.$fDataMaybe
                       @ (Language.Python.Common.AST.Expr annot1)
                       $dData1
                 } in
                 let {
                   $dData3 :: Data.Data.Data
                                (Language.Python.Common.AST.Expr annot1,
                                 GHC.Base.Maybe (Language.Python.Common.AST.Expr annot1))
                   = Data.Data.$fData(,)
                       @ (Language.Python.Common.AST.Expr annot1)
                       @ (GHC.Base.Maybe (Language.Python.Common.AST.Expr annot1))
                       $dData1
                       $dData2
                 } in
                 let {
                   $dData4 :: Data.Data.Data
                                (GHC.Base.Maybe
                                   (Language.Python.Common.AST.Expr annot1,
                                    GHC.Base.Maybe (Language.Python.Common.AST.Expr annot1)))
                   = Data.Data.$fDataMaybe
                       @ (Language.Python.Common.AST.Expr annot1,
                          GHC.Base.Maybe (Language.Python.Common.AST.Expr annot1))
                       $dData3
                 } in
                 \ (k :: forall d b. Data.Data.Data d => c (d -> b) -> d -> c b)
                   (z :: forall g. g -> c g)
                   (ds :: Language.Python.Common.AST.ExceptClause annot1) ->
                 case ds of wild { Language.Python.Common.AST.ExceptClause a1 a2 ->
                 k @ annot1
                   @ (Language.Python.Common.AST.ExceptClause annot1)
                   $dData
                   (k @ (GHC.Base.Maybe
                           (Language.Python.Common.AST.Expr annot1,
                            GHC.Base.Maybe (Language.Python.Common.AST.Expr annot1)))
                      @ (annot1 -> Language.Python.Common.AST.ExceptClause annot1)
                      $dData4
                      (z @ (GHC.Base.Maybe
                              (Language.Python.Common.AST.Expr annot1,
                               GHC.Base.Maybe (Language.Python.Common.AST.Expr annot1))
                            -> annot1 -> Language.Python.Common.AST.ExceptClause annot1)
                         (Language.Python.Common.AST.ExceptClause @ annot1))
                      a1)
                   a2 }) -}
54ad83b54b9c0dd8bf180da8d82f4195
  $fDataExceptClause_$cgmapM ::
    Data.Data.Data annot =>
    forall (m :: * -> *).
    GHC.Base.Monad m =>
    (forall d. Data.Data.Data d => d -> m d)
    -> Language.Python.Common.AST.ExceptClause annot
    -> m (Language.Python.Common.AST.ExceptClause annot)
  {- Arity: 3,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,U(A,C(C1(U)),A,U,A)><L,C(C1(U))>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   @ m :: * -> *
                   ($dMonad :: GHC.Base.Monad m)
                   (ds :: forall d. Data.Data.Data d => d -> m d) ->
                 Language.Python.Common.AST.$fDataExceptClause_$cgfoldl
                   @ annot1
                   $dData
                   @ m
                   (\ @ d
                      @ b
                      ($dData1 :: Data.Data.Data d)
                      (c :: m (d -> b))
                      (x :: d) ->
                    let {
                      lvl447 :: m d = ds @ d $dData1 x
                    } in
                    GHC.Base.>>=
                      @ m
                      $dMonad
                      @ (d -> b)
                      @ b
                      c
                      (\ (c' :: d -> b) ->
                       GHC.Base.>>=
                         @ m
                         $dMonad
                         @ d
                         @ b
                         lvl447
                         (\ (x' :: d) -> GHC.Base.return @ m $dMonad @ b (c' x'))))
                   (\ @ g -> GHC.Base.return @ m $dMonad @ g)) -}
54ad83b54b9c0dd8bf180da8d82f4195
  $fDataExceptClause_$cgmapMo ::
    Data.Data.Data annot =>
    forall (m :: * -> *).
    GHC.Base.MonadPlus m =>
    (forall d. Data.Data.Data d => d -> m d)
    -> Language.Python.Common.AST.ExceptClause annot
    -> m (Language.Python.Common.AST.ExceptClause annot)
  {- Arity: 4,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><S(LS(LC(C(S))LLL)LL),U(A,1*U(A,C(C1(U)),A,C(U),A),1*U,C(C1(U)))><L,C(C1(U))><L,U>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   @ m :: * -> *
                   ($dMonadPlus :: GHC.Base.MonadPlus m)
                   (ds :: forall d. Data.Data.Data d => d -> m d)
                   (eta :: Language.Python.Common.AST.ExceptClause annot1) ->
                 let {
                   $dMonad :: GHC.Base.Monad m = GHC.Base.$p2MonadPlus @ m $dMonadPlus
                 } in
                 let {
                   lvl447 :: m (Language.Python.Common.AST.ExceptClause annot1)
                   = GHC.Base.mzero
                       @ m
                       $dMonadPlus
                       @ (Language.Python.Common.AST.ExceptClause annot1)
                 } in
                 GHC.Base.>>=
                   @ m
                   $dMonad
                   @ (Language.Python.Common.AST.ExceptClause annot1, GHC.Types.Bool)
                   @ (Language.Python.Common.AST.ExceptClause annot1)
                   (Language.Python.Common.AST.$fDataExceptClause_$cgfoldl
                      @ annot1
                      $dData
                      @ (Data.Data.Mp m)
                      (\ @ d
                         @ b
                         ($dData1 :: Data.Data.Data d)
                         (ds1 :: Data.Data.Mp m (d -> b))
                         (y :: d) ->
                       let {
                         lvl448 :: m d = ds @ d $dData1 y
                       } in
                       GHC.Base.>>=
                         @ m
                         $dMonad
                         @ (d -> b, GHC.Types.Bool)
                         @ (b, GHC.Types.Bool)
                         ds1 `cast` (Data.Data.N:Mp[0] <m>_R <d -> b>_N)
                         (\ (ds2 :: (d -> b, GHC.Types.Bool)) ->
                          case ds2 of wild { (,) h b1 ->
                          case b1 of wild1 {
                            GHC.Types.False
                            -> GHC.Base.mplus
                                 @ m
                                 $dMonadPlus
                                 @ (b, GHC.Types.Bool)
                                 (GHC.Base.>>=
                                    @ m
                                    $dMonad
                                    @ d
                                    @ (b, GHC.Types.Bool)
                                    lvl448
                                    (\ (y' :: d) ->
                                     GHC.Base.return
                                       @ m
                                       $dMonad
                                       @ (b, GHC.Types.Bool)
                                       (h y', GHC.Types.True)))
                                 (GHC.Base.return
                                    @ m
                                    $dMonad
                                    @ (b, GHC.Types.Bool)
                                    (h y, GHC.Types.False))
                            GHC.Types.True
                            -> GHC.Base.return
                                 @ m
                                 $dMonad
                                 @ (b, GHC.Types.Bool)
                                 (h y, GHC.Types.True) } }))
                        `cast`
                      (forall (d :: <*>_N) (b :: <*>_N).
                       <Data.Data.Data d>_R
                       ->_R <Data.Data.Mp m (d -> b)>_R
                       ->_R <d>_R
                       ->_R Sym (Data.Data.N:Mp[0] <m>_R <b>_N))
                      (\ @ g (g1 :: g) ->
                       GHC.Base.return
                         @ m
                         $dMonad
                         @ (g, GHC.Types.Bool)
                         (g1, GHC.Types.False))
                        `cast`
                      (forall (g :: <*>_N).
                       <g>_R ->_R Sym (Data.Data.N:Mp[0] <m>_R <g>_N))
                      eta)
                     `cast`
                   (Data.Data.N:Mp[0]
                        <m>_R <Language.Python.Common.AST.ExceptClause annot1>_N)
                   (\ (ds1 :: (Language.Python.Common.AST.ExceptClause annot1,
                               GHC.Types.Bool)) ->
                    case ds1 of wild { (,) x' b ->
                    case b of wild1 {
                      GHC.Types.False -> lvl447
                      GHC.Types.True
                      -> GHC.Base.return
                           @ m
                           $dMonad
                           @ (Language.Python.Common.AST.ExceptClause annot1)
                           x' } })) -}
54ad83b54b9c0dd8bf180da8d82f4195
  $fDataExceptClause_$cgmapMp ::
    Data.Data.Data annot =>
    forall (m :: * -> *).
    GHC.Base.MonadPlus m =>
    (forall d. Data.Data.Data d => d -> m d)
    -> Language.Python.Common.AST.ExceptClause annot
    -> m (Language.Python.Common.AST.ExceptClause annot)
  {- Arity: 4,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><S(LS(LC(C(S))LLL)LL),U(A,1*U(A,C(C1(U)),A,C(U),A),1*U,C(C1(U)))><L,C(C1(U))><L,U>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   @ m :: * -> *
                   ($dMonadPlus :: GHC.Base.MonadPlus m)
                   (ds :: forall d. Data.Data.Data d => d -> m d)
                   (eta :: Language.Python.Common.AST.ExceptClause annot1) ->
                 let {
                   $dMonad :: GHC.Base.Monad m = GHC.Base.$p2MonadPlus @ m $dMonadPlus
                 } in
                 let {
                   lvl447 :: m (Language.Python.Common.AST.ExceptClause annot1)
                   = GHC.Base.mzero
                       @ m
                       $dMonadPlus
                       @ (Language.Python.Common.AST.ExceptClause annot1)
                 } in
                 GHC.Base.>>=
                   @ m
                   $dMonad
                   @ (Language.Python.Common.AST.ExceptClause annot1, GHC.Types.Bool)
                   @ (Language.Python.Common.AST.ExceptClause annot1)
                   (Language.Python.Common.AST.$fDataExceptClause_$cgfoldl
                      @ annot1
                      $dData
                      @ (Data.Data.Mp m)
                      (\ @ d
                         @ b
                         ($dData1 :: Data.Data.Data d)
                         (ds1 :: Data.Data.Mp m (d -> b))
                         (y :: d) ->
                       let {
                         lvl448 :: m d = ds @ d $dData1 y
                       } in
                       GHC.Base.>>=
                         @ m
                         $dMonad
                         @ (d -> b, GHC.Types.Bool)
                         @ (b, GHC.Types.Bool)
                         ds1 `cast` (Data.Data.N:Mp[0] <m>_R <d -> b>_N)
                         (\ (ds2 :: (d -> b, GHC.Types.Bool)) ->
                          case ds2 of wild { (,) h b1 ->
                          GHC.Base.mplus
                            @ m
                            $dMonadPlus
                            @ (b, GHC.Types.Bool)
                            (GHC.Base.>>=
                               @ m
                               $dMonad
                               @ d
                               @ (b, GHC.Types.Bool)
                               lvl448
                               (\ (y' :: d) ->
                                GHC.Base.return
                                  @ m
                                  $dMonad
                                  @ (b, GHC.Types.Bool)
                                  (h y', GHC.Types.True)))
                            (GHC.Base.return @ m $dMonad @ (b, GHC.Types.Bool) (h y, b1)) }))
                        `cast`
                      (forall (d :: <*>_N) (b :: <*>_N).
                       <Data.Data.Data d>_R
                       ->_R <Data.Data.Mp m (d -> b)>_R
                       ->_R <d>_R
                       ->_R Sym (Data.Data.N:Mp[0] <m>_R <b>_N))
                      (\ @ g (g1 :: g) ->
                       GHC.Base.return
                         @ m
                         $dMonad
                         @ (g, GHC.Types.Bool)
                         (g1, GHC.Types.False))
                        `cast`
                      (forall (g :: <*>_N).
                       <g>_R ->_R Sym (Data.Data.N:Mp[0] <m>_R <g>_N))
                      eta)
                     `cast`
                   (Data.Data.N:Mp[0]
                        <m>_R <Language.Python.Common.AST.ExceptClause annot1>_N)
                   (\ (ds1 :: (Language.Python.Common.AST.ExceptClause annot1,
                               GHC.Types.Bool)) ->
                    case ds1 of wild { (,) x' b ->
                    case b of wild1 {
                      GHC.Types.False -> lvl447
                      GHC.Types.True
                      -> GHC.Base.return
                           @ m
                           $dMonad
                           @ (Language.Python.Common.AST.ExceptClause annot1)
                           x' } })) -}
54ad83b54b9c0dd8bf180da8d82f4195
  $fDataExceptClause_$cgmapQ ::
    Data.Data.Data annot =>
    forall u.
    (forall d. Data.Data.Data d => d -> u)
    -> Language.Python.Common.AST.ExceptClause annot -> [u]
  {- Arity: 3,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,C(C1(U))><L,U>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   @ u
                   (ds :: forall d. Data.Data.Data d => d -> u)
                   (x0 :: Language.Python.Common.AST.ExceptClause annot1) ->
                 (Language.Python.Common.AST.$fDataExceptClause_$cgfoldl
                    @ annot1
                    $dData
                    @ (Data.Data.Qr [u])
                    (\ @ d
                       @ b
                       ($dData1 :: Data.Data.Data d)
                       (ds1 :: Data.Data.Qr [u] (d -> b))
                       (x :: d)
                       (r1 :: [u]) ->
                     ds1 `cast` (Data.Data.N:Qr[0] <*>_N <[u]>_R <d -> b>_P)
                       (GHC.Types.: @ u (ds @ d $dData1 x) r1))
                      `cast`
                    (forall (d :: <*>_N) (b :: <*>_N).
                     <Data.Data.Data d>_R
                     ->_R <Data.Data.Qr [u] (d -> b)>_R
                     ->_R <d>_R
                     ->_R Sym (Data.Data.N:Qr[0] <*>_N <[u]>_R <b>_P))
                    (Language.Python.Common.AST.$fDataExpr4 @ u)
                      `cast`
                    (forall (g :: <*>_N).
                     <g>_R ->_R Sym (Data.Data.N:Qr[0] <*>_N <[u]>_R <g>_P))
                    x0)
                   `cast`
                 (Data.Data.N:Qr[0]
                      <*>_N <[u]>_R <Language.Python.Common.AST.ExceptClause annot1>_P)
                   (GHC.Types.[] @ u)) -}
54ad83b54b9c0dd8bf180da8d82f4195
  $fDataExceptClause_$cgmapQi ::
    Data.Data.Data annot =>
    forall u.
    GHC.Types.Int
    -> (forall d. Data.Data.Data d => d -> u)
    -> Language.Python.Common.AST.ExceptClause annot
    -> u
  {- Arity: 4,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,U(U)><L,C(C1(U))><L,U>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   @ u
                   (ds :: GHC.Types.Int)
                   (ds1 :: forall d. Data.Data.Data d => d -> u)
                   (x :: Language.Python.Common.AST.ExceptClause annot1) ->
                 case Language.Python.Common.AST.$fDataExceptClause_$cgfoldl
                        @ annot1
                        $dData
                        @ (Data.Data.Qi u)
                        (\ @ d
                           @ b
                           ($dData1 :: Data.Data.Data d)
                           (ds2 :: Data.Data.Qi u (d -> b))
                           (a2 :: d) ->
                         case ds2 of wild { Data.Data.Qi i' q ->
                         Data.Data.Qi
                           @ *
                           @ u
                           @ b
                           (case i' of wild1 { GHC.Types.I# x1 ->
                            GHC.Types.I# (GHC.Prim.+# x1 1#) })
                           (case ds of wild1 { GHC.Types.I# x1 ->
                            case i' of wild2 { GHC.Types.I# y ->
                            case GHC.Prim.tagToEnum#
                                   @ GHC.Types.Bool
                                   (GHC.Prim.==# x1 y) of wild3 {
                              GHC.Types.False -> q
                              GHC.Types.True -> GHC.Base.Just @ u (ds1 @ d $dData1 a2) } } }) })
                        (Language.Python.Common.AST.$fDataExpr1 @ u)
                        x of wild { Data.Data.Qi ds2 q ->
                 Data.Maybe.fromJust @ u q }) -}
54ad83b54b9c0dd8bf180da8d82f4195
  $fDataExceptClause_$cgmapQl ::
    Data.Data.Data annot =>
    forall r r'.
    (r -> r' -> r)
    -> r
    -> (forall d. Data.Data.Data d => d -> r')
    -> Language.Python.Common.AST.ExceptClause annot
    -> r
  {- Arity: 4,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,C(C1(U))><L,U><L,C(C1(U))>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   @ r
                   @ r'
                   (ds :: r -> r' -> r)
                   (ds1 :: r)
                   (ds2 :: forall d. Data.Data.Data d => d -> r') ->
                 let {
                   g :: Language.Python.Common.AST.ExceptClause annot1
                        -> Data.Functor.Const.Const
                             r (Language.Python.Common.AST.ExceptClause annot1)
                   = Language.Python.Common.AST.$fDataExceptClause_$cgfoldl
                       @ annot1
                       $dData
                       @ (Data.Functor.Const.Const r)
                       (\ @ d
                          @ b
                          ($dData1 :: Data.Data.Data d)
                          (c :: Data.Functor.Const.Const r (d -> b))
                          (x :: d) ->
                        ds
                          c `cast` (Data.Functor.Const.N:Const[0] <*>_N <r>_R <d -> b>_P)
                          (ds2 @ d $dData1 x))
                         `cast`
                       (forall (d :: <*>_N) (b :: <*>_N).
                        <Data.Data.Data d>_R
                        ->_R <Data.Functor.Const.Const r (d -> b)>_R
                        ->_R <d>_R
                        ->_R Sym (Data.Functor.Const.N:Const[0] <*>_N <r>_R <b>_P))
                       (\ @ g1 (ds3 :: g1) -> ds1)
                         `cast`
                       (forall (g1 :: <*>_N).
                        <g1>_R ->_R Sym (Data.Functor.Const.N:Const[0] <*>_N <r>_R <g1>_P))
                 } in
                 (\ (x :: Language.Python.Common.AST.ExceptClause annot1) -> g x)
                   `cast`
                 (<Language.Python.Common.AST.ExceptClause annot1>_R
                  ->_R Data.Functor.Const.N:Const[0]
                           <*>_N <r>_R <Language.Python.Common.AST.ExceptClause annot1>_P)) -}
54ad83b54b9c0dd8bf180da8d82f4195
  $fDataExceptClause_$cgmapQr ::
    Data.Data.Data annot =>
    forall r r'.
    (r' -> r -> r)
    -> r
    -> (forall d. Data.Data.Data d => d -> r')
    -> Language.Python.Common.AST.ExceptClause annot
    -> r
  {- Arity: 5,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,C(C1(U))><L,U><L,C(C1(U))><L,U>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   @ r
                   @ r'
                   (ds :: r' -> r -> r)
                   (ds1 :: r)
                   (ds2 :: forall d. Data.Data.Data d => d -> r')
                   (x0 :: Language.Python.Common.AST.ExceptClause annot1) ->
                 (Language.Python.Common.AST.$fDataExceptClause_$cgfoldl
                    @ annot1
                    $dData
                    @ (Data.Data.Qr r)
                    (\ @ d
                       @ b
                       ($dData1 :: Data.Data.Data d)
                       (ds3 :: Data.Data.Qr r (d -> b))
                       (x :: d)
                       (r1 :: r) ->
                     ds3 `cast` (Data.Data.N:Qr[0] <*>_N <r>_R <d -> b>_P)
                       (ds (ds2 @ d $dData1 x) r1))
                      `cast`
                    (forall (d :: <*>_N) (b :: <*>_N).
                     <Data.Data.Data d>_R
                     ->_R <Data.Data.Qr r (d -> b)>_R
                     ->_R <d>_R
                     ->_R Sym (Data.Data.N:Qr[0] <*>_N <r>_R <b>_P))
                    (Language.Python.Common.AST.$fDataExpr5 @ r)
                      `cast`
                    (forall (g :: <*>_N).
                     <g>_R ->_R Sym (Data.Data.N:Qr[0] <*>_N <r>_R <g>_P))
                    x0)
                   `cast`
                 (Data.Data.N:Qr[0]
                      <*>_N <r>_R <Language.Python.Common.AST.ExceptClause annot1>_P)
                   ds1) -}
54ad83b54b9c0dd8bf180da8d82f4195
  $fDataExceptClause_$cgunfold ::
    Data.Data.Data annot =>
    forall (c :: * -> *).
    (forall b r. Data.Data.Data b => c (b -> r) -> c r)
    -> (forall r. r -> c r)
    -> Data.Data.Constr
    -> c (Language.Python.Common.AST.ExceptClause annot)
  {- Arity: 1, Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   @ c :: * -> * ->
                 let {
                   $dData1 :: Data.Data.Data (Language.Python.Common.AST.Expr annot1)
                   = Language.Python.Common.AST.$fDataExpr @ annot1 $dData
                 } in
                 let {
                   $dData2 :: Data.Data.Data
                                (GHC.Base.Maybe (Language.Python.Common.AST.Expr annot1))
                   = Data.Data.$fDataMaybe
                       @ (Language.Python.Common.AST.Expr annot1)
                       $dData1
                 } in
                 let {
                   $dData3 :: Data.Data.Data
                                (Language.Python.Common.AST.Expr annot1,
                                 GHC.Base.Maybe (Language.Python.Common.AST.Expr annot1))
                   = Data.Data.$fData(,)
                       @ (Language.Python.Common.AST.Expr annot1)
                       @ (GHC.Base.Maybe (Language.Python.Common.AST.Expr annot1))
                       $dData1
                       $dData2
                 } in
                 let {
                   $dData4 :: Data.Data.Data
                                (GHC.Base.Maybe
                                   (Language.Python.Common.AST.Expr annot1,
                                    GHC.Base.Maybe (Language.Python.Common.AST.Expr annot1)))
                   = Data.Data.$fDataMaybe
                       @ (Language.Python.Common.AST.Expr annot1,
                          GHC.Base.Maybe (Language.Python.Common.AST.Expr annot1))
                       $dData3
                 } in
                 \ (k :: forall b r. Data.Data.Data b => c (b -> r) -> c r)
                   (z :: forall r. r -> c r)
                   (ds :: Data.Data.Constr) ->
                 k @ annot1
                   @ (Language.Python.Common.AST.ExceptClause annot1)
                   $dData
                   (k @ (GHC.Base.Maybe
                           (Language.Python.Common.AST.Expr annot1,
                            GHC.Base.Maybe (Language.Python.Common.AST.Expr annot1)))
                      @ (annot1 -> Language.Python.Common.AST.ExceptClause annot1)
                      $dData4
                      (z @ (GHC.Base.Maybe
                              (Language.Python.Common.AST.Expr annot1,
                               GHC.Base.Maybe (Language.Python.Common.AST.Expr annot1))
                            -> annot1 -> Language.Python.Common.AST.ExceptClause annot1)
                         (Language.Python.Common.AST.ExceptClause @ annot1)))) -}
54ad83b54b9c0dd8bf180da8d82f4195
  $fDataExceptClause_$cp1Data ::
    Data.Data.Data annot =>
    Data.Typeable.Internal.Typeable
      (Language.Python.Common.AST.ExceptClause annot)
  {- Arity: 1, Strictness: <L,1*U(1*U,A,A,A,A,A,A,A,A,A,A,A,A,A,A)>,
     Unfolding: (\ @ annot1 ($dData :: Data.Data.Data annot1) ->
                 let {
                   b1 :: Data.Typeable.Internal.Typeable annot1
                   = Data.Data.$p1Data @ annot1 $dData
                 } in
                 case GHC.Magic.noinline
                        @ ([GHC.Fingerprint.Type.Fingerprint]
                           -> GHC.Fingerprint.Type.Fingerprint)
                        GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           Language.Python.Common.AST.$fDataExceptClause7
                           (GHC.Types.:
                              @ GHC.Fingerprint.Type.Fingerprint
                              (Data.Typeable.Internal.typeRepFingerprint
                                 @ *
                                 @ annot1
                                 b1 `cast` (Data.Typeable.Internal.N:Typeable[0] <*>_N <annot1>_N))
                              (GHC.Types.[]
                                 @ GHC.Fingerprint.Type.Fingerprint))) of dt { GHC.Fingerprint.Type.Fingerprint dt1 dt2 ->
                 (Data.Typeable.Internal.TrApp
                    @ *
                    @ (Language.Python.Common.AST.ExceptClause annot1)
                    @ *
                    @ Language.Python.Common.AST.ExceptClause
                    @ annot1
                    @~ <Language.Python.Common.AST.ExceptClause annot1>_N
                    dt1
                    dt2
                    Language.Python.Common.AST.$fDataExceptClause_a3
                    b1 `cast` (Data.Typeable.Internal.N:Typeable[0] <*>_N <annot1>_N))
                   `cast`
                 (Sym (Data.Typeable.Internal.N:Typeable[0]) <*>_N <Language.Python.Common.AST.ExceptClause
                                                                      annot1>_N) }) -}
54ad83b54b9c0dd8bf180da8d82f4195
  $fDataExceptClause_a3 ::
    Data.Typeable.Internal.TypeRep
      Language.Python.Common.AST.ExceptClause
  {- Unfolding: (case GHC.Magic.noinline
                        @ ([GHC.Fingerprint.Type.Fingerprint]
                           -> GHC.Fingerprint.Type.Fingerprint)
                        GHC.Fingerprint.fingerprintFingerprints
                        Language.Python.Common.AST.$fDataExceptClause2 of dt { GHC.Fingerprint.Type.Fingerprint dt1 dt2 ->
                 Data.Typeable.Internal.TrTyCon
                   @ (* -> *)
                   @ Language.Python.Common.AST.ExceptClause
                   dt1
                   dt2
                   Language.Python.Common.AST.$tcExceptClause
                   (GHC.Types.[] @ Data.Typeable.Internal.SomeTypeRep) }) -}
94dde4ffceed0a2a13daed020b6576e1
  $fDataExpr ::
    Data.Data.Data annot =>
    Data.Data.Data (Language.Python.Common.AST.Expr annot)
  DFunId
  {- Arity: 1, Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)>,
     Inline: CONLIKE,
     Unfolding: DFun: @ annot1 (v :: Data.Data.Data annot1).
                  @ (Language.Python.Common.AST.Expr annot1)
                  (Language.Python.Common.AST.$fDataExpr_$cp1Data @ annot1 v)
                  (Language.Python.Common.AST.$fDataExpr_$cgfoldl @ annot1 v)
                  (Language.Python.Common.AST.$fDataExpr_$cgunfold @ annot1 v)
                  (Language.Python.Common.AST.$fDataExpr_$ctoConstr @ annot1 v)
                  (\ (ds :: Language.Python.Common.AST.Expr annot1) ->
                   Language.Python.Common.AST.$tExpr)
                  (Language.Python.Common.AST.$fDataExpr_$cdataCast1 @ annot1 v)
                  (\ @ t :: * -> * -> *
                     @ c :: * -> *
                     ($dTypeable :: Data.Typeable.Internal.Typeable t)
                     (ds :: forall d e.
                            (Data.Data.Data d, Data.Data.Data e) =>
                            c (t d e)) ->
                   GHC.Base.Nothing @ (c (Language.Python.Common.AST.Expr annot1)))
                  (Language.Python.Common.AST.$fDataExpr6 @ annot1 v)
                    `cast`
                  (<forall b. Data.Data.Data b => b -> b>_R
                   ->_R <Language.Python.Common.AST.Expr annot1>_R
                   ->_R Data.Functor.Identity.N:Identity[0]
                            <Language.Python.Common.AST.Expr annot1>_R)
                  (Language.Python.Common.AST.$fDataExpr_$cgmapQl @ annot1 v)
                  (Language.Python.Common.AST.$fDataExpr_$cgmapQr @ annot1 v)
                  (Language.Python.Common.AST.$fDataExpr_$cgmapQ @ annot1 v)
                  (Language.Python.Common.AST.$fDataExpr_$cgmapQi @ annot1 v)
                  (Language.Python.Common.AST.$fDataExpr_$cgmapM @ annot1 v)
                  (Language.Python.Common.AST.$fDataExpr_$cgmapMp @ annot1 v)
                  (Language.Python.Common.AST.$fDataExpr_$cgmapMo @ annot1 v) -}
74c160daaf11464c7f34aff9e441b657
  $fDataExpr1 :: g -> Data.Data.Qi u g
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>m,
     Unfolding: InlineRule (1, True, True)
                (\ @ u @ g (ds :: g) ->
                 Language.Python.Common.AST.$fDataExpr2 @ g @ u) -}
de6e224b4273a0bd4e3714f8eeb3077c
  $fDataExpr10 :: GHC.Fingerprint.Type.Fingerprint
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Fingerprint.Type.Fingerprint
                   1147406964965894738##
                   11316846573964050704##) -}
94dde4ffceed0a2a13daed020b6576e1
  $fDataExpr11 :: GHC.Fingerprint.Type.Fingerprint
  {- Unfolding: (case Language.Python.Common.AST.$fDataExpr_a3 of wild { Data.Typeable.Internal.TrTyCon dt dt1 ds1 ds2 ->
                 GHC.Fingerprint.Type.Fingerprint dt dt1 }) -}
658e388801bd791f8dd3399fe888ce25
  $fDataExpr2 :: Data.Data.Qi u g
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (\ @ g @ u ->
                 Data.Data.Qi
                   @ *
                   @ u
                   @ g
                   Language.Python.Common.AST.$fDataExpr3
                   (GHC.Base.Nothing @ u)) -}
086ce97d2658f268e7dee93279755417
  $fDataExpr3 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
3e7cbd19503af534187f99670a018e19
  $fDataExpr4 :: g -> [u] -> [u]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><S,1*U>,
     Unfolding: InlineRule (2, True, True)
                (\ @ u @ g (ds :: g) (eta :: [u]) -> eta) -}
d7b53ece28b39e177b7c9d0f1ec6024f
  $fDataExpr5 :: g -> r -> r
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><S,1*U>,
     Unfolding: InlineRule (2, True, True)
                (\ @ r @ g (ds :: g) (eta :: r) -> eta) -}
94dde4ffceed0a2a13daed020b6576e1
  $fDataExpr6 ::
    Data.Data.Data annot =>
    (forall b. Data.Data.Data b => b -> b)
    -> Language.Python.Common.AST.Expr annot
    -> Data.Functor.Identity.Identity
         (Language.Python.Common.AST.Expr annot)
  {- Arity: 3,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,C(C1(U))><L,U>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   (ds :: forall b. Data.Data.Data b => b -> b)
                   (x0 :: Language.Python.Common.AST.Expr annot1) ->
                 Language.Python.Common.AST.$fDataExpr_$cgfoldl
                   @ annot1
                   $dData
                   @ Data.Functor.Identity.Identity
                   (\ @ d
                      @ b
                      ($dData1 :: Data.Data.Data d)
                      (ds1 :: Data.Functor.Identity.Identity (d -> b))
                      (x :: d) ->
                    ds1 `cast` (Data.Functor.Identity.N:Identity[0] <d -> b>_R)
                      (ds @ d $dData1 x))
                     `cast`
                   (forall (d :: <*>_N) (b :: <*>_N).
                    <Data.Data.Data d>_R
                    ->_R <Data.Functor.Identity.Identity (d -> b)>_R
                    ->_R <d>_R
                    ->_R Sym (Data.Functor.Identity.N:Identity[0] <b>_R))
                   Language.Python.Common.AST.$fDataExpr7
                     `cast`
                   (forall (g :: <*>_N).
                    <g>_R ->_R Sym (Data.Functor.Identity.N:Identity[0] <g>_R))
                   x0) -}
d4a40f01c63448b34a65ceae9d6b6bfe
  $fDataExpr7 :: g -> g
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, True) (\ @ g (v :: g) -> v) -}
4f677bc71307d398f1238de770731d7f
  $fDataExpr8 :: [GHC.Fingerprint.Type.Fingerprint]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Fingerprint.Type.Fingerprint
                   Language.Python.Common.AST.$fDataExpr10
                   Language.Python.Common.AST.$fDataExpr9) -}
86b9088cb22899c2a094c61db99f4a7b
  $fDataExpr9 :: [GHC.Fingerprint.Type.Fingerprint]
  {- Unfolding: (GHC.Base.map
                   @ Data.Typeable.Internal.SomeTypeRep
                   @ GHC.Fingerprint.Type.Fingerprint
                   Data.Typeable.Internal.someTypeRepFingerprint
                   (GHC.Types.[] @ Data.Typeable.Internal.SomeTypeRep)) -}
94dde4ffceed0a2a13daed020b6576e1
  $fDataExpr_$cdataCast1 ::
    Data.Data.Data annot =>
    forall (t :: * -> *) (c :: * -> *).
    Data.Typeable.Internal.Typeable t =>
    (forall d. Data.Data.Data d => c (t d))
    -> GHC.Base.Maybe (c (Language.Python.Common.AST.Expr annot))
  {- Arity: 2, Strictness: <L,U><L,1*U>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   @ t :: * -> *
                   @ c :: * -> *
                   ($dTypeable :: Data.Typeable.Internal.Typeable t) ->
                 let {
                   lvl447 :: GHC.Base.Maybe
                               (t Data.Type.Equality.:~~: Language.Python.Common.AST.Expr)
                   = Data.Typeable.Internal.eqTypeRep
                       @ (* -> *)
                       @ (* -> *)
                       @ t
                       @ Language.Python.Common.AST.Expr
                       $dTypeable
                         `cast`
                       (Data.Typeable.Internal.N:Typeable[0] <* -> *>_N <t>_N)
                       Language.Python.Common.AST.$fDataExpr_a3
                 } in
                 \ (f12 :: forall d. Data.Data.Data d => c (t d)) ->
                 case lvl447 of wild {
                   GHC.Base.Nothing
                   -> GHC.Base.Nothing @ (c (Language.Python.Common.AST.Expr annot1))
                   GHC.Base.Just ds
                   -> case ds of wild1 { Data.Type.Equality.HRefl cobox cobox1 ->
                      GHC.Base.Just
                        @ (c (Language.Python.Common.AST.Expr annot1))
                        (f12 @ annot1 $dData)
                          `cast`
                        (<c>_R (Sym cobox1 <annot1>_N)) } }) -}
94dde4ffceed0a2a13daed020b6576e1
  $fDataExpr_$cgfoldl ::
    Data.Data.Data annot =>
    forall (c :: * -> *).
    (forall d b. Data.Data.Data d => c (d -> b) -> d -> c b)
    -> (forall g. g -> c g)
    -> Language.Python.Common.AST.Expr annot
    -> c (Language.Python.Common.AST.Expr annot)
  {- Arity: 1, Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)> -}
94dde4ffceed0a2a13daed020b6576e1
  $fDataExpr_$cgmapM ::
    Data.Data.Data annot =>
    forall (m :: * -> *).
    GHC.Base.Monad m =>
    (forall d. Data.Data.Data d => d -> m d)
    -> Language.Python.Common.AST.Expr annot
    -> m (Language.Python.Common.AST.Expr annot)
  {- Arity: 3,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,U(A,C(C1(U)),A,U,A)><L,C(C1(U))>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   @ m :: * -> *
                   ($dMonad :: GHC.Base.Monad m)
                   (ds :: forall d. Data.Data.Data d => d -> m d) ->
                 Language.Python.Common.AST.$fDataExpr_$cgfoldl
                   @ annot1
                   $dData
                   @ m
                   (\ @ d
                      @ b
                      ($dData1 :: Data.Data.Data d)
                      (c :: m (d -> b))
                      (x :: d) ->
                    let {
                      lvl447 :: m d = ds @ d $dData1 x
                    } in
                    GHC.Base.>>=
                      @ m
                      $dMonad
                      @ (d -> b)
                      @ b
                      c
                      (\ (c' :: d -> b) ->
                       GHC.Base.>>=
                         @ m
                         $dMonad
                         @ d
                         @ b
                         lvl447
                         (\ (x' :: d) -> GHC.Base.return @ m $dMonad @ b (c' x'))))
                   (\ @ g -> GHC.Base.return @ m $dMonad @ g)) -}
94dde4ffceed0a2a13daed020b6576e1
  $fDataExpr_$cgmapMo ::
    Data.Data.Data annot =>
    forall (m :: * -> *).
    GHC.Base.MonadPlus m =>
    (forall d. Data.Data.Data d => d -> m d)
    -> Language.Python.Common.AST.Expr annot
    -> m (Language.Python.Common.AST.Expr annot)
  {- Arity: 4,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><S(LS(LC(C(S))LLL)LL),U(A,1*U(A,C(C1(U)),A,C(U),A),1*U,C(C1(U)))><L,C(C1(U))><L,U>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   @ m :: * -> *
                   ($dMonadPlus :: GHC.Base.MonadPlus m)
                   (ds :: forall d. Data.Data.Data d => d -> m d)
                   (eta :: Language.Python.Common.AST.Expr annot1) ->
                 let {
                   $dMonad :: GHC.Base.Monad m = GHC.Base.$p2MonadPlus @ m $dMonadPlus
                 } in
                 let {
                   lvl447 :: m (Language.Python.Common.AST.Expr annot1)
                   = GHC.Base.mzero
                       @ m
                       $dMonadPlus
                       @ (Language.Python.Common.AST.Expr annot1)
                 } in
                 GHC.Base.>>=
                   @ m
                   $dMonad
                   @ (Language.Python.Common.AST.Expr annot1, GHC.Types.Bool)
                   @ (Language.Python.Common.AST.Expr annot1)
                   (Language.Python.Common.AST.$fDataExpr_$cgfoldl
                      @ annot1
                      $dData
                      @ (Data.Data.Mp m)
                      (\ @ d
                         @ b
                         ($dData1 :: Data.Data.Data d)
                         (ds1 :: Data.Data.Mp m (d -> b))
                         (y :: d) ->
                       let {
                         lvl448 :: m d = ds @ d $dData1 y
                       } in
                       GHC.Base.>>=
                         @ m
                         $dMonad
                         @ (d -> b, GHC.Types.Bool)
                         @ (b, GHC.Types.Bool)
                         ds1 `cast` (Data.Data.N:Mp[0] <m>_R <d -> b>_N)
                         (\ (ds2 :: (d -> b, GHC.Types.Bool)) ->
                          case ds2 of wild { (,) h b1 ->
                          case b1 of wild1 {
                            GHC.Types.False
                            -> GHC.Base.mplus
                                 @ m
                                 $dMonadPlus
                                 @ (b, GHC.Types.Bool)
                                 (GHC.Base.>>=
                                    @ m
                                    $dMonad
                                    @ d
                                    @ (b, GHC.Types.Bool)
                                    lvl448
                                    (\ (y' :: d) ->
                                     GHC.Base.return
                                       @ m
                                       $dMonad
                                       @ (b, GHC.Types.Bool)
                                       (h y', GHC.Types.True)))
                                 (GHC.Base.return
                                    @ m
                                    $dMonad
                                    @ (b, GHC.Types.Bool)
                                    (h y, GHC.Types.False))
                            GHC.Types.True
                            -> GHC.Base.return
                                 @ m
                                 $dMonad
                                 @ (b, GHC.Types.Bool)
                                 (h y, GHC.Types.True) } }))
                        `cast`
                      (forall (d :: <*>_N) (b :: <*>_N).
                       <Data.Data.Data d>_R
                       ->_R <Data.Data.Mp m (d -> b)>_R
                       ->_R <d>_R
                       ->_R Sym (Data.Data.N:Mp[0] <m>_R <b>_N))
                      (\ @ g (g1 :: g) ->
                       GHC.Base.return
                         @ m
                         $dMonad
                         @ (g, GHC.Types.Bool)
                         (g1, GHC.Types.False))
                        `cast`
                      (forall (g :: <*>_N).
                       <g>_R ->_R Sym (Data.Data.N:Mp[0] <m>_R <g>_N))
                      eta)
                     `cast`
                   (Data.Data.N:Mp[0]
                        <m>_R <Language.Python.Common.AST.Expr annot1>_N)
                   (\ (ds1 :: (Language.Python.Common.AST.Expr annot1,
                               GHC.Types.Bool)) ->
                    case ds1 of wild { (,) x' b ->
                    case b of wild1 {
                      GHC.Types.False -> lvl447
                      GHC.Types.True
                      -> GHC.Base.return
                           @ m
                           $dMonad
                           @ (Language.Python.Common.AST.Expr annot1)
                           x' } })) -}
94dde4ffceed0a2a13daed020b6576e1
  $fDataExpr_$cgmapMp ::
    Data.Data.Data annot =>
    forall (m :: * -> *).
    GHC.Base.MonadPlus m =>
    (forall d. Data.Data.Data d => d -> m d)
    -> Language.Python.Common.AST.Expr annot
    -> m (Language.Python.Common.AST.Expr annot)
  {- Arity: 4,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><S(LS(LC(C(S))LLL)LL),U(A,1*U(A,C(C1(U)),A,C(U),A),1*U,C(C1(U)))><L,C(C1(U))><L,U>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   @ m :: * -> *
                   ($dMonadPlus :: GHC.Base.MonadPlus m)
                   (ds :: forall d. Data.Data.Data d => d -> m d)
                   (eta :: Language.Python.Common.AST.Expr annot1) ->
                 let {
                   $dMonad :: GHC.Base.Monad m = GHC.Base.$p2MonadPlus @ m $dMonadPlus
                 } in
                 let {
                   lvl447 :: m (Language.Python.Common.AST.Expr annot1)
                   = GHC.Base.mzero
                       @ m
                       $dMonadPlus
                       @ (Language.Python.Common.AST.Expr annot1)
                 } in
                 GHC.Base.>>=
                   @ m
                   $dMonad
                   @ (Language.Python.Common.AST.Expr annot1, GHC.Types.Bool)
                   @ (Language.Python.Common.AST.Expr annot1)
                   (Language.Python.Common.AST.$fDataExpr_$cgfoldl
                      @ annot1
                      $dData
                      @ (Data.Data.Mp m)
                      (\ @ d
                         @ b
                         ($dData1 :: Data.Data.Data d)
                         (ds1 :: Data.Data.Mp m (d -> b))
                         (y :: d) ->
                       let {
                         lvl448 :: m d = ds @ d $dData1 y
                       } in
                       GHC.Base.>>=
                         @ m
                         $dMonad
                         @ (d -> b, GHC.Types.Bool)
                         @ (b, GHC.Types.Bool)
                         ds1 `cast` (Data.Data.N:Mp[0] <m>_R <d -> b>_N)
                         (\ (ds2 :: (d -> b, GHC.Types.Bool)) ->
                          case ds2 of wild { (,) h b1 ->
                          GHC.Base.mplus
                            @ m
                            $dMonadPlus
                            @ (b, GHC.Types.Bool)
                            (GHC.Base.>>=
                               @ m
                               $dMonad
                               @ d
                               @ (b, GHC.Types.Bool)
                               lvl448
                               (\ (y' :: d) ->
                                GHC.Base.return
                                  @ m
                                  $dMonad
                                  @ (b, GHC.Types.Bool)
                                  (h y', GHC.Types.True)))
                            (GHC.Base.return @ m $dMonad @ (b, GHC.Types.Bool) (h y, b1)) }))
                        `cast`
                      (forall (d :: <*>_N) (b :: <*>_N).
                       <Data.Data.Data d>_R
                       ->_R <Data.Data.Mp m (d -> b)>_R
                       ->_R <d>_R
                       ->_R Sym (Data.Data.N:Mp[0] <m>_R <b>_N))
                      (\ @ g (g1 :: g) ->
                       GHC.Base.return
                         @ m
                         $dMonad
                         @ (g, GHC.Types.Bool)
                         (g1, GHC.Types.False))
                        `cast`
                      (forall (g :: <*>_N).
                       <g>_R ->_R Sym (Data.Data.N:Mp[0] <m>_R <g>_N))
                      eta)
                     `cast`
                   (Data.Data.N:Mp[0]
                        <m>_R <Language.Python.Common.AST.Expr annot1>_N)
                   (\ (ds1 :: (Language.Python.Common.AST.Expr annot1,
                               GHC.Types.Bool)) ->
                    case ds1 of wild { (,) x' b ->
                    case b of wild1 {
                      GHC.Types.False -> lvl447
                      GHC.Types.True
                      -> GHC.Base.return
                           @ m
                           $dMonad
                           @ (Language.Python.Common.AST.Expr annot1)
                           x' } })) -}
94dde4ffceed0a2a13daed020b6576e1
  $fDataExpr_$cgmapQ ::
    Data.Data.Data annot =>
    forall u.
    (forall d. Data.Data.Data d => d -> u)
    -> Language.Python.Common.AST.Expr annot -> [u]
  {- Arity: 3,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,C(C1(U))><L,U>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   @ u
                   (ds :: forall d. Data.Data.Data d => d -> u)
                   (x0 :: Language.Python.Common.AST.Expr annot1) ->
                 (Language.Python.Common.AST.$fDataExpr_$cgfoldl
                    @ annot1
                    $dData
                    @ (Data.Data.Qr [u])
                    (\ @ d
                       @ b
                       ($dData1 :: Data.Data.Data d)
                       (ds1 :: Data.Data.Qr [u] (d -> b))
                       (x :: d)
                       (r1 :: [u]) ->
                     ds1 `cast` (Data.Data.N:Qr[0] <*>_N <[u]>_R <d -> b>_P)
                       (GHC.Types.: @ u (ds @ d $dData1 x) r1))
                      `cast`
                    (forall (d :: <*>_N) (b :: <*>_N).
                     <Data.Data.Data d>_R
                     ->_R <Data.Data.Qr [u] (d -> b)>_R
                     ->_R <d>_R
                     ->_R Sym (Data.Data.N:Qr[0] <*>_N <[u]>_R <b>_P))
                    (Language.Python.Common.AST.$fDataExpr4 @ u)
                      `cast`
                    (forall (g :: <*>_N).
                     <g>_R ->_R Sym (Data.Data.N:Qr[0] <*>_N <[u]>_R <g>_P))
                    x0)
                   `cast`
                 (Data.Data.N:Qr[0]
                      <*>_N <[u]>_R <Language.Python.Common.AST.Expr annot1>_P)
                   (GHC.Types.[] @ u)) -}
94dde4ffceed0a2a13daed020b6576e1
  $fDataExpr_$cgmapQi ::
    Data.Data.Data annot =>
    forall u.
    GHC.Types.Int
    -> (forall d. Data.Data.Data d => d -> u)
    -> Language.Python.Common.AST.Expr annot
    -> u
  {- Arity: 4,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,U(U)><L,C(C1(U))><L,U>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   @ u
                   (ds :: GHC.Types.Int)
                   (ds1 :: forall d. Data.Data.Data d => d -> u)
                   (x :: Language.Python.Common.AST.Expr annot1) ->
                 case Language.Python.Common.AST.$fDataExpr_$cgfoldl
                        @ annot1
                        $dData
                        @ (Data.Data.Qi u)
                        (\ @ d
                           @ b
                           ($dData1 :: Data.Data.Data d)
                           (ds2 :: Data.Data.Qi u (d -> b))
                           (a2 :: d) ->
                         case ds2 of wild { Data.Data.Qi i' q ->
                         Data.Data.Qi
                           @ *
                           @ u
                           @ b
                           (case i' of wild1 { GHC.Types.I# x1 ->
                            GHC.Types.I# (GHC.Prim.+# x1 1#) })
                           (case ds of wild1 { GHC.Types.I# x1 ->
                            case i' of wild2 { GHC.Types.I# y ->
                            case GHC.Prim.tagToEnum#
                                   @ GHC.Types.Bool
                                   (GHC.Prim.==# x1 y) of wild3 {
                              GHC.Types.False -> q
                              GHC.Types.True -> GHC.Base.Just @ u (ds1 @ d $dData1 a2) } } }) })
                        (Language.Python.Common.AST.$fDataExpr1 @ u)
                        x of wild { Data.Data.Qi ds2 q ->
                 Data.Maybe.fromJust @ u q }) -}
94dde4ffceed0a2a13daed020b6576e1
  $fDataExpr_$cgmapQl ::
    Data.Data.Data annot =>
    forall r r'.
    (r -> r' -> r)
    -> r
    -> (forall d. Data.Data.Data d => d -> r')
    -> Language.Python.Common.AST.Expr annot
    -> r
  {- Arity: 4,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,C(C1(U))><L,U><L,C(C1(U))>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   @ r
                   @ r'
                   (ds :: r -> r' -> r)
                   (ds1 :: r)
                   (ds2 :: forall d. Data.Data.Data d => d -> r') ->
                 let {
                   g :: Language.Python.Common.AST.Expr annot1
                        -> Data.Functor.Const.Const
                             r (Language.Python.Common.AST.Expr annot1)
                   = Language.Python.Common.AST.$fDataExpr_$cgfoldl
                       @ annot1
                       $dData
                       @ (Data.Functor.Const.Const r)
                       (\ @ d
                          @ b
                          ($dData1 :: Data.Data.Data d)
                          (c :: Data.Functor.Const.Const r (d -> b))
                          (x :: d) ->
                        ds
                          c `cast` (Data.Functor.Const.N:Const[0] <*>_N <r>_R <d -> b>_P)
                          (ds2 @ d $dData1 x))
                         `cast`
                       (forall (d :: <*>_N) (b :: <*>_N).
                        <Data.Data.Data d>_R
                        ->_R <Data.Functor.Const.Const r (d -> b)>_R
                        ->_R <d>_R
                        ->_R Sym (Data.Functor.Const.N:Const[0] <*>_N <r>_R <b>_P))
                       (\ @ g1 (ds3 :: g1) -> ds1)
                         `cast`
                       (forall (g1 :: <*>_N).
                        <g1>_R ->_R Sym (Data.Functor.Const.N:Const[0] <*>_N <r>_R <g1>_P))
                 } in
                 (\ (x :: Language.Python.Common.AST.Expr annot1) -> g x)
                   `cast`
                 (<Language.Python.Common.AST.Expr annot1>_R
                  ->_R Data.Functor.Const.N:Const[0]
                           <*>_N <r>_R <Language.Python.Common.AST.Expr annot1>_P)) -}
94dde4ffceed0a2a13daed020b6576e1
  $fDataExpr_$cgmapQr ::
    Data.Data.Data annot =>
    forall r r'.
    (r' -> r -> r)
    -> r
    -> (forall d. Data.Data.Data d => d -> r')
    -> Language.Python.Common.AST.Expr annot
    -> r
  {- Arity: 5,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,C(C1(U))><L,U><L,C(C1(U))><L,U>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   @ r
                   @ r'
                   (ds :: r' -> r -> r)
                   (ds1 :: r)
                   (ds2 :: forall d. Data.Data.Data d => d -> r')
                   (x0 :: Language.Python.Common.AST.Expr annot1) ->
                 (Language.Python.Common.AST.$fDataExpr_$cgfoldl
                    @ annot1
                    $dData
                    @ (Data.Data.Qr r)
                    (\ @ d
                       @ b
                       ($dData1 :: Data.Data.Data d)
                       (ds3 :: Data.Data.Qr r (d -> b))
                       (x :: d)
                       (r1 :: r) ->
                     ds3 `cast` (Data.Data.N:Qr[0] <*>_N <r>_R <d -> b>_P)
                       (ds (ds2 @ d $dData1 x) r1))
                      `cast`
                    (forall (d :: <*>_N) (b :: <*>_N).
                     <Data.Data.Data d>_R
                     ->_R <Data.Data.Qr r (d -> b)>_R
                     ->_R <d>_R
                     ->_R Sym (Data.Data.N:Qr[0] <*>_N <r>_R <b>_P))
                    (Language.Python.Common.AST.$fDataExpr5 @ r)
                      `cast`
                    (forall (g :: <*>_N).
                     <g>_R ->_R Sym (Data.Data.N:Qr[0] <*>_N <r>_R <g>_P))
                    x0)
                   `cast`
                 (Data.Data.N:Qr[0]
                      <*>_N <r>_R <Language.Python.Common.AST.Expr annot1>_P)
                   ds1) -}
94dde4ffceed0a2a13daed020b6576e1
  $fDataExpr_$cgunfold ::
    Data.Data.Data annot =>
    forall (c :: * -> *).
    (forall b r. Data.Data.Data b => c (b -> r) -> c r)
    -> (forall r. r -> c r)
    -> Data.Data.Constr
    -> c (Language.Python.Common.AST.Expr annot)
  {- Arity: 1, Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)> -}
94dde4ffceed0a2a13daed020b6576e1
  $fDataExpr_$cp1Data ::
    Data.Data.Data annot =>
    Data.Typeable.Internal.Typeable
      (Language.Python.Common.AST.Expr annot)
  {- Arity: 1, Strictness: <L,1*U(1*U,A,A,A,A,A,A,A,A,A,A,A,A,A,A)>,
     Unfolding: (\ @ annot1 ($dData :: Data.Data.Data annot1) ->
                 let {
                   b1 :: Data.Typeable.Internal.Typeable annot1
                   = Data.Data.$p1Data @ annot1 $dData
                 } in
                 case GHC.Magic.noinline
                        @ ([GHC.Fingerprint.Type.Fingerprint]
                           -> GHC.Fingerprint.Type.Fingerprint)
                        GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           Language.Python.Common.AST.$fDataExpr11
                           (GHC.Types.:
                              @ GHC.Fingerprint.Type.Fingerprint
                              (Data.Typeable.Internal.typeRepFingerprint
                                 @ *
                                 @ annot1
                                 b1 `cast` (Data.Typeable.Internal.N:Typeable[0] <*>_N <annot1>_N))
                              (GHC.Types.[]
                                 @ GHC.Fingerprint.Type.Fingerprint))) of dt { GHC.Fingerprint.Type.Fingerprint dt1 dt2 ->
                 (Data.Typeable.Internal.TrApp
                    @ *
                    @ (Language.Python.Common.AST.Expr annot1)
                    @ *
                    @ Language.Python.Common.AST.Expr
                    @ annot1
                    @~ <Language.Python.Common.AST.Expr annot1>_N
                    dt1
                    dt2
                    Language.Python.Common.AST.$fDataExpr_a3
                    b1 `cast` (Data.Typeable.Internal.N:Typeable[0] <*>_N <annot1>_N))
                   `cast`
                 (Sym (Data.Typeable.Internal.N:Typeable[0]) <*>_N <Language.Python.Common.AST.Expr
                                                                      annot1>_N) }) -}
94dde4ffceed0a2a13daed020b6576e1
  $fDataExpr_$ctoConstr ::
    Data.Data.Data annot =>
    Language.Python.Common.AST.Expr annot -> Data.Data.Constr
  {- Arity: 2, Strictness: <L,A><S,1*U>m, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ @ annot1
                   (w :: Data.Data.Data annot1)
                   (w249 :: Language.Python.Common.AST.Expr annot1) ->
                 case w249 of wild {
                   Language.Python.Common.AST.Var ds ds1
                   -> Language.Python.Common.AST.$cVar
                   Language.Python.Common.AST.Int ds ds1 ds2
                   -> Language.Python.Common.AST.$cInt
                   Language.Python.Common.AST.LongInt ds ds1 ds2
                   -> Language.Python.Common.AST.$cLongInt
                   Language.Python.Common.AST.Float ds ds1 ds2
                   -> Language.Python.Common.AST.$cFloat
                   Language.Python.Common.AST.Imaginary ds ds1 ds2
                   -> Language.Python.Common.AST.$cImaginary
                   Language.Python.Common.AST.Bool ds ds1
                   -> Language.Python.Common.AST.$cBool
                   Language.Python.Common.AST.None ds
                   -> Language.Python.Common.AST.$cNone
                   Language.Python.Common.AST.Ellipsis ds
                   -> Language.Python.Common.AST.$cEllipsis
                   Language.Python.Common.AST.ByteStrings ds ds1
                   -> Language.Python.Common.AST.$cByteStrings
                   Language.Python.Common.AST.Strings ds ds1
                   -> Language.Python.Common.AST.$cStrings
                   Language.Python.Common.AST.UnicodeStrings ds ds1
                   -> Language.Python.Common.AST.$cUnicodeStrings
                   Language.Python.Common.AST.Call ds ds1 ds2
                   -> Language.Python.Common.AST.$cCall
                   Language.Python.Common.AST.Subscript ds ds1 ds2
                   -> Language.Python.Common.AST.$cSubscript
                   Language.Python.Common.AST.SlicedExpr ds ds1 ds2
                   -> Language.Python.Common.AST.$cSlicedExpr
                   Language.Python.Common.AST.CondExpr ds ds1 ds2 ds3
                   -> Language.Python.Common.AST.$cCondExpr
                   Language.Python.Common.AST.BinaryOp ds ds1 ds2 ds3
                   -> Language.Python.Common.AST.$cBinaryOp
                   Language.Python.Common.AST.UnaryOp ds ds1 ds2
                   -> Language.Python.Common.AST.$cUnaryOp
                   Language.Python.Common.AST.Dot ds ds1 ds2
                   -> Language.Python.Common.AST.$cDot
                   Language.Python.Common.AST.Lambda ds ds1 ds2
                   -> Language.Python.Common.AST.$cLambda
                   Language.Python.Common.AST.Tuple ds ds1
                   -> Language.Python.Common.AST.$cTuple
                   Language.Python.Common.AST.Yield ds ds1
                   -> Language.Python.Common.AST.$cYield
                   Language.Python.Common.AST.Generator ds ds1
                   -> Language.Python.Common.AST.$cGenerator
                   Language.Python.Common.AST.Await ds ds1
                   -> Language.Python.Common.AST.$cAwait
                   Language.Python.Common.AST.ListComp ds ds1
                   -> Language.Python.Common.AST.$cListComp
                   Language.Python.Common.AST.List ds ds1
                   -> Language.Python.Common.AST.$cList
                   Language.Python.Common.AST.Dictionary ds ds1
                   -> Language.Python.Common.AST.$cDictionary
                   Language.Python.Common.AST.DictComp ds ds1
                   -> Language.Python.Common.AST.$cDictComp
                   Language.Python.Common.AST.Set ds ds1
                   -> Language.Python.Common.AST.$cSet
                   Language.Python.Common.AST.SetComp ds ds1
                   -> Language.Python.Common.AST.$cSetComp
                   Language.Python.Common.AST.Starred ds ds1
                   -> Language.Python.Common.AST.$cStarred
                   Language.Python.Common.AST.Paren ds ds1
                   -> Language.Python.Common.AST.$cParen
                   Language.Python.Common.AST.StringConversion ds ds1
                   -> Language.Python.Common.AST.$cStringConversion }) -}
94dde4ffceed0a2a13daed020b6576e1
  $fDataExpr_a3 ::
    Data.Typeable.Internal.TypeRep Language.Python.Common.AST.Expr
  {- Unfolding: (case GHC.Magic.noinline
                        @ ([GHC.Fingerprint.Type.Fingerprint]
                           -> GHC.Fingerprint.Type.Fingerprint)
                        GHC.Fingerprint.fingerprintFingerprints
                        Language.Python.Common.AST.$fDataExpr8 of dt { GHC.Fingerprint.Type.Fingerprint dt1 dt2 ->
                 Data.Typeable.Internal.TrTyCon
                   @ (* -> *)
                   @ Language.Python.Common.AST.Expr
                   dt1
                   dt2
                   Language.Python.Common.AST.$tcExpr
                   (GHC.Types.[] @ Data.Typeable.Internal.SomeTypeRep) }) -}
73d811e85ab4018f7789c4c4421a9fde
  $fDataFromItem ::
    Data.Data.Data annot =>
    Data.Data.Data (Language.Python.Common.AST.FromItem annot)
  DFunId
  {- Arity: 1, Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)>,
     Inline: CONLIKE,
     Unfolding: DFun: @ annot1 (v :: Data.Data.Data annot1).
                  @ (Language.Python.Common.AST.FromItem annot1)
                  (Language.Python.Common.AST.$fDataFromItem_$cp1Data @ annot1 v)
                  (Language.Python.Common.AST.$fDataFromItem_$cgfoldl @ annot1 v)
                  (Language.Python.Common.AST.$fDataFromItem_$cgunfold @ annot1 v)
                  (\ (ds :: Language.Python.Common.AST.FromItem annot1) ->
                   case ds of wild { Language.Python.Common.AST.FromItem ds1 ds2 ds3 ->
                   Language.Python.Common.AST.$cFromItem })
                  (\ (ds :: Language.Python.Common.AST.FromItem annot1) ->
                   Language.Python.Common.AST.$tFromItem)
                  (Language.Python.Common.AST.$fDataFromItem_$cdataCast1 @ annot1 v)
                  (\ @ t :: * -> * -> *
                     @ c :: * -> *
                     ($dTypeable :: Data.Typeable.Internal.Typeable t)
                     (ds :: forall d e.
                            (Data.Data.Data d, Data.Data.Data e) =>
                            c (t d e)) ->
                   GHC.Base.Nothing
                     @ (c (Language.Python.Common.AST.FromItem annot1)))
                  (Language.Python.Common.AST.$fDataFromItem1 @ annot1 v)
                    `cast`
                  (<forall b. Data.Data.Data b => b -> b>_R
                   ->_R <Language.Python.Common.AST.FromItem annot1>_R
                   ->_R Data.Functor.Identity.N:Identity[0]
                            <Language.Python.Common.AST.FromItem annot1>_R)
                  (Language.Python.Common.AST.$fDataFromItem_$cgmapQl @ annot1 v)
                  (Language.Python.Common.AST.$fDataFromItem_$cgmapQr @ annot1 v)
                  (Language.Python.Common.AST.$fDataFromItem_$cgmapQ @ annot1 v)
                  (Language.Python.Common.AST.$fDataFromItem_$cgmapQi @ annot1 v)
                  (Language.Python.Common.AST.$fDataFromItem_$cgmapM @ annot1 v)
                  (Language.Python.Common.AST.$fDataFromItem_$cgmapMp @ annot1 v)
                  (Language.Python.Common.AST.$fDataFromItem_$cgmapMo @ annot1 v) -}
73d811e85ab4018f7789c4c4421a9fde
  $fDataFromItem1 ::
    Data.Data.Data annot =>
    (forall b. Data.Data.Data b => b -> b)
    -> Language.Python.Common.AST.FromItem annot
    -> Data.Functor.Identity.Identity
         (Language.Python.Common.AST.FromItem annot)
  {- Arity: 3,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,C(C1(U))><L,U>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   (ds :: forall b. Data.Data.Data b => b -> b)
                   (x0 :: Language.Python.Common.AST.FromItem annot1) ->
                 Language.Python.Common.AST.$fDataFromItem_$cgfoldl
                   @ annot1
                   $dData
                   @ Data.Functor.Identity.Identity
                   (\ @ d
                      @ b
                      ($dData1 :: Data.Data.Data d)
                      (ds1 :: Data.Functor.Identity.Identity (d -> b))
                      (x :: d) ->
                    ds1 `cast` (Data.Functor.Identity.N:Identity[0] <d -> b>_R)
                      (ds @ d $dData1 x))
                     `cast`
                   (forall (d :: <*>_N) (b :: <*>_N).
                    <Data.Data.Data d>_R
                    ->_R <Data.Functor.Identity.Identity (d -> b)>_R
                    ->_R <d>_R
                    ->_R Sym (Data.Functor.Identity.N:Identity[0] <b>_R))
                   Language.Python.Common.AST.$fDataExpr7
                     `cast`
                   (forall (g :: <*>_N).
                    <g>_R ->_R Sym (Data.Functor.Identity.N:Identity[0] <g>_R))
                   x0) -}
bad3f4266be5ba9ce44b4398f9896e5b
  $fDataFromItem2 :: [GHC.Fingerprint.Type.Fingerprint]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Fingerprint.Type.Fingerprint
                   Language.Python.Common.AST.$fDataFromItem3
                   Language.Python.Common.AST.$fDataExpr9) -}
866e5c85e1ea3fcd275947452f5ff861
  $fDataFromItem3 :: GHC.Fingerprint.Type.Fingerprint
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Fingerprint.Type.Fingerprint
                   10135331783013307780##
                   4299251386509738820##) -}
64c110522734fe325617cb160c3fa86a
  $fDataFromItem4 :: Data.Data.DataRep
  {- Strictness: m1,
     Unfolding: (Data.Data.AlgRep
                   Language.Python.Common.AST.$fDataFromItem5) -}
0f289a3576ce113c0ad0cc28754603ca
  $fDataFromItem5 :: [Data.Data.Constr]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Data.Data.Constr
                   Language.Python.Common.AST.$cFromItem
                   (GHC.Types.[] @ Data.Data.Constr)) -}
898d0ff7f1f484e32f1c35d6d1a822f1
  $fDataFromItem6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.Python.Common.AST.$tcFromItem2) -}
73d811e85ab4018f7789c4c4421a9fde
  $fDataFromItem7 :: GHC.Fingerprint.Type.Fingerprint
  {- Unfolding: (case Language.Python.Common.AST.$fDataFromItem_a3 of wild { Data.Typeable.Internal.TrTyCon dt dt1 ds1 ds2 ->
                 GHC.Fingerprint.Type.Fingerprint dt dt1 }) -}
73d811e85ab4018f7789c4c4421a9fde
  $fDataFromItem_$cdataCast1 ::
    Data.Data.Data annot =>
    forall (t :: * -> *) (c :: * -> *).
    Data.Typeable.Internal.Typeable t =>
    (forall d. Data.Data.Data d => c (t d))
    -> GHC.Base.Maybe (c (Language.Python.Common.AST.FromItem annot))
  {- Arity: 2, Strictness: <L,U><L,1*U>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   @ t :: * -> *
                   @ c :: * -> *
                   ($dTypeable :: Data.Typeable.Internal.Typeable t) ->
                 let {
                   lvl447 :: GHC.Base.Maybe
                               (t Data.Type.Equality.:~~: Language.Python.Common.AST.FromItem)
                   = Data.Typeable.Internal.eqTypeRep
                       @ (* -> *)
                       @ (* -> *)
                       @ t
                       @ Language.Python.Common.AST.FromItem
                       $dTypeable
                         `cast`
                       (Data.Typeable.Internal.N:Typeable[0] <* -> *>_N <t>_N)
                       Language.Python.Common.AST.$fDataFromItem_a3
                 } in
                 \ (f12 :: forall d. Data.Data.Data d => c (t d)) ->
                 case lvl447 of wild {
                   GHC.Base.Nothing
                   -> GHC.Base.Nothing
                        @ (c (Language.Python.Common.AST.FromItem annot1))
                   GHC.Base.Just ds
                   -> case ds of wild1 { Data.Type.Equality.HRefl cobox cobox1 ->
                      GHC.Base.Just
                        @ (c (Language.Python.Common.AST.FromItem annot1))
                        (f12 @ annot1 $dData)
                          `cast`
                        (<c>_R (Sym cobox1 <annot1>_N)) } }) -}
73d811e85ab4018f7789c4c4421a9fde
  $fDataFromItem_$cgfoldl ::
    Data.Data.Data annot =>
    forall (c :: * -> *).
    (forall d b. Data.Data.Data d => c (d -> b) -> d -> c b)
    -> (forall g. g -> c g)
    -> Language.Python.Common.AST.FromItem annot
    -> c (Language.Python.Common.AST.FromItem annot)
  {- Arity: 1, Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   @ c :: * -> * ->
                 let {
                   $dData1 :: Data.Data.Data (Language.Python.Common.AST.Ident annot1)
                   = Language.Python.Common.AST.$fDataIdent @ annot1 $dData
                 } in
                 let {
                   $dData2 :: Data.Data.Data
                                (GHC.Base.Maybe (Language.Python.Common.AST.Ident annot1))
                   = Data.Data.$fDataMaybe
                       @ (Language.Python.Common.AST.Ident annot1)
                       $dData1
                 } in
                 \ (k :: forall d b. Data.Data.Data d => c (d -> b) -> d -> c b)
                   (z :: forall g. g -> c g)
                   (ds :: Language.Python.Common.AST.FromItem annot1) ->
                 case ds of wild { Language.Python.Common.AST.FromItem a1 a2 a3 ->
                 k @ annot1
                   @ (Language.Python.Common.AST.FromItem annot1)
                   $dData
                   (k @ (GHC.Base.Maybe (Language.Python.Common.AST.Ident annot1))
                      @ (annot1 -> Language.Python.Common.AST.FromItem annot1)
                      $dData2
                      (k @ (Language.Python.Common.AST.Ident annot1)
                         @ (GHC.Base.Maybe (Language.Python.Common.AST.Ident annot1)
                            -> annot1 -> Language.Python.Common.AST.FromItem annot1)
                         $dData1
                         (z @ (Language.Python.Common.AST.Ident annot1
                               -> GHC.Base.Maybe (Language.Python.Common.AST.Ident annot1)
                               -> annot1
                               -> Language.Python.Common.AST.FromItem annot1)
                            (Language.Python.Common.AST.FromItem @ annot1))
                         a1)
                      a2)
                   a3 }) -}
73d811e85ab4018f7789c4c4421a9fde
  $fDataFromItem_$cgmapM ::
    Data.Data.Data annot =>
    forall (m :: * -> *).
    GHC.Base.Monad m =>
    (forall d. Data.Data.Data d => d -> m d)
    -> Language.Python.Common.AST.FromItem annot
    -> m (Language.Python.Common.AST.FromItem annot)
  {- Arity: 3,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,U(A,C(C1(U)),A,U,A)><L,C(C1(U))>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   @ m :: * -> *
                   ($dMonad :: GHC.Base.Monad m)
                   (ds :: forall d. Data.Data.Data d => d -> m d) ->
                 Language.Python.Common.AST.$fDataFromItem_$cgfoldl
                   @ annot1
                   $dData
                   @ m
                   (\ @ d
                      @ b
                      ($dData1 :: Data.Data.Data d)
                      (c :: m (d -> b))
                      (x :: d) ->
                    let {
                      lvl447 :: m d = ds @ d $dData1 x
                    } in
                    GHC.Base.>>=
                      @ m
                      $dMonad
                      @ (d -> b)
                      @ b
                      c
                      (\ (c' :: d -> b) ->
                       GHC.Base.>>=
                         @ m
                         $dMonad
                         @ d
                         @ b
                         lvl447
                         (\ (x' :: d) -> GHC.Base.return @ m $dMonad @ b (c' x'))))
                   (\ @ g -> GHC.Base.return @ m $dMonad @ g)) -}
73d811e85ab4018f7789c4c4421a9fde
  $fDataFromItem_$cgmapMo ::
    Data.Data.Data annot =>
    forall (m :: * -> *).
    GHC.Base.MonadPlus m =>
    (forall d. Data.Data.Data d => d -> m d)
    -> Language.Python.Common.AST.FromItem annot
    -> m (Language.Python.Common.AST.FromItem annot)
  {- Arity: 4,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><S(LS(LC(C(S))LLL)LL),U(A,1*U(A,C(C1(U)),A,C(U),A),1*U,C(C1(U)))><L,C(C1(U))><L,U>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   @ m :: * -> *
                   ($dMonadPlus :: GHC.Base.MonadPlus m)
                   (ds :: forall d. Data.Data.Data d => d -> m d)
                   (eta :: Language.Python.Common.AST.FromItem annot1) ->
                 let {
                   $dMonad :: GHC.Base.Monad m = GHC.Base.$p2MonadPlus @ m $dMonadPlus
                 } in
                 let {
                   lvl447 :: m (Language.Python.Common.AST.FromItem annot1)
                   = GHC.Base.mzero
                       @ m
                       $dMonadPlus
                       @ (Language.Python.Common.AST.FromItem annot1)
                 } in
                 GHC.Base.>>=
                   @ m
                   $dMonad
                   @ (Language.Python.Common.AST.FromItem annot1, GHC.Types.Bool)
                   @ (Language.Python.Common.AST.FromItem annot1)
                   (Language.Python.Common.AST.$fDataFromItem_$cgfoldl
                      @ annot1
                      $dData
                      @ (Data.Data.Mp m)
                      (\ @ d
                         @ b
                         ($dData1 :: Data.Data.Data d)
                         (ds1 :: Data.Data.Mp m (d -> b))
                         (y :: d) ->
                       let {
                         lvl448 :: m d = ds @ d $dData1 y
                       } in
                       GHC.Base.>>=
                         @ m
                         $dMonad
                         @ (d -> b, GHC.Types.Bool)
                         @ (b, GHC.Types.Bool)
                         ds1 `cast` (Data.Data.N:Mp[0] <m>_R <d -> b>_N)
                         (\ (ds2 :: (d -> b, GHC.Types.Bool)) ->
                          case ds2 of wild { (,) h b1 ->
                          case b1 of wild1 {
                            GHC.Types.False
                            -> GHC.Base.mplus
                                 @ m
                                 $dMonadPlus
                                 @ (b, GHC.Types.Bool)
                                 (GHC.Base.>>=
                                    @ m
                                    $dMonad
                                    @ d
                                    @ (b, GHC.Types.Bool)
                                    lvl448
                                    (\ (y' :: d) ->
                                     GHC.Base.return
                                       @ m
                                       $dMonad
                                       @ (b, GHC.Types.Bool)
                                       (h y', GHC.Types.True)))
                                 (GHC.Base.return
                                    @ m
                                    $dMonad
                                    @ (b, GHC.Types.Bool)
                                    (h y, GHC.Types.False))
                            GHC.Types.True
                            -> GHC.Base.return
                                 @ m
                                 $dMonad
                                 @ (b, GHC.Types.Bool)
                                 (h y, GHC.Types.True) } }))
                        `cast`
                      (forall (d :: <*>_N) (b :: <*>_N).
                       <Data.Data.Data d>_R
                       ->_R <Data.Data.Mp m (d -> b)>_R
                       ->_R <d>_R
                       ->_R Sym (Data.Data.N:Mp[0] <m>_R <b>_N))
                      (\ @ g (g1 :: g) ->
                       GHC.Base.return
                         @ m
                         $dMonad
                         @ (g, GHC.Types.Bool)
                         (g1, GHC.Types.False))
                        `cast`
                      (forall (g :: <*>_N).
                       <g>_R ->_R Sym (Data.Data.N:Mp[0] <m>_R <g>_N))
                      eta)
                     `cast`
                   (Data.Data.N:Mp[0]
                        <m>_R <Language.Python.Common.AST.FromItem annot1>_N)
                   (\ (ds1 :: (Language.Python.Common.AST.FromItem annot1,
                               GHC.Types.Bool)) ->
                    case ds1 of wild { (,) x' b ->
                    case b of wild1 {
                      GHC.Types.False -> lvl447
                      GHC.Types.True
                      -> GHC.Base.return
                           @ m
                           $dMonad
                           @ (Language.Python.Common.AST.FromItem annot1)
                           x' } })) -}
73d811e85ab4018f7789c4c4421a9fde
  $fDataFromItem_$cgmapMp ::
    Data.Data.Data annot =>
    forall (m :: * -> *).
    GHC.Base.MonadPlus m =>
    (forall d. Data.Data.Data d => d -> m d)
    -> Language.Python.Common.AST.FromItem annot
    -> m (Language.Python.Common.AST.FromItem annot)
  {- Arity: 4,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><S(LS(LC(C(S))LLL)LL),U(A,1*U(A,C(C1(U)),A,C(U),A),1*U,C(C1(U)))><L,C(C1(U))><L,U>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   @ m :: * -> *
                   ($dMonadPlus :: GHC.Base.MonadPlus m)
                   (ds :: forall d. Data.Data.Data d => d -> m d)
                   (eta :: Language.Python.Common.AST.FromItem annot1) ->
                 let {
                   $dMonad :: GHC.Base.Monad m = GHC.Base.$p2MonadPlus @ m $dMonadPlus
                 } in
                 let {
                   lvl447 :: m (Language.Python.Common.AST.FromItem annot1)
                   = GHC.Base.mzero
                       @ m
                       $dMonadPlus
                       @ (Language.Python.Common.AST.FromItem annot1)
                 } in
                 GHC.Base.>>=
                   @ m
                   $dMonad
                   @ (Language.Python.Common.AST.FromItem annot1, GHC.Types.Bool)
                   @ (Language.Python.Common.AST.FromItem annot1)
                   (Language.Python.Common.AST.$fDataFromItem_$cgfoldl
                      @ annot1
                      $dData
                      @ (Data.Data.Mp m)
                      (\ @ d
                         @ b
                         ($dData1 :: Data.Data.Data d)
                         (ds1 :: Data.Data.Mp m (d -> b))
                         (y :: d) ->
                       let {
                         lvl448 :: m d = ds @ d $dData1 y
                       } in
                       GHC.Base.>>=
                         @ m
                         $dMonad
                         @ (d -> b, GHC.Types.Bool)
                         @ (b, GHC.Types.Bool)
                         ds1 `cast` (Data.Data.N:Mp[0] <m>_R <d -> b>_N)
                         (\ (ds2 :: (d -> b, GHC.Types.Bool)) ->
                          case ds2 of wild { (,) h b1 ->
                          GHC.Base.mplus
                            @ m
                            $dMonadPlus
                            @ (b, GHC.Types.Bool)
                            (GHC.Base.>>=
                               @ m
                               $dMonad
                               @ d
                               @ (b, GHC.Types.Bool)
                               lvl448
                               (\ (y' :: d) ->
                                GHC.Base.return
                                  @ m
                                  $dMonad
                                  @ (b, GHC.Types.Bool)
                                  (h y', GHC.Types.True)))
                            (GHC.Base.return @ m $dMonad @ (b, GHC.Types.Bool) (h y, b1)) }))
                        `cast`
                      (forall (d :: <*>_N) (b :: <*>_N).
                       <Data.Data.Data d>_R
                       ->_R <Data.Data.Mp m (d -> b)>_R
                       ->_R <d>_R
                       ->_R Sym (Data.Data.N:Mp[0] <m>_R <b>_N))
                      (\ @ g (g1 :: g) ->
                       GHC.Base.return
                         @ m
                         $dMonad
                         @ (g, GHC.Types.Bool)
                         (g1, GHC.Types.False))
                        `cast`
                      (forall (g :: <*>_N).
                       <g>_R ->_R Sym (Data.Data.N:Mp[0] <m>_R <g>_N))
                      eta)
                     `cast`
                   (Data.Data.N:Mp[0]
                        <m>_R <Language.Python.Common.AST.FromItem annot1>_N)
                   (\ (ds1 :: (Language.Python.Common.AST.FromItem annot1,
                               GHC.Types.Bool)) ->
                    case ds1 of wild { (,) x' b ->
                    case b of wild1 {
                      GHC.Types.False -> lvl447
                      GHC.Types.True
                      -> GHC.Base.return
                           @ m
                           $dMonad
                           @ (Language.Python.Common.AST.FromItem annot1)
                           x' } })) -}
73d811e85ab4018f7789c4c4421a9fde
  $fDataFromItem_$cgmapQ ::
    Data.Data.Data annot =>
    forall u.
    (forall d. Data.Data.Data d => d -> u)
    -> Language.Python.Common.AST.FromItem annot -> [u]
  {- Arity: 3,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,C(C1(U))><L,U>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   @ u
                   (ds :: forall d. Data.Data.Data d => d -> u)
                   (x0 :: Language.Python.Common.AST.FromItem annot1) ->
                 (Language.Python.Common.AST.$fDataFromItem_$cgfoldl
                    @ annot1
                    $dData
                    @ (Data.Data.Qr [u])
                    (\ @ d
                       @ b
                       ($dData1 :: Data.Data.Data d)
                       (ds1 :: Data.Data.Qr [u] (d -> b))
                       (x :: d)
                       (r1 :: [u]) ->
                     ds1 `cast` (Data.Data.N:Qr[0] <*>_N <[u]>_R <d -> b>_P)
                       (GHC.Types.: @ u (ds @ d $dData1 x) r1))
                      `cast`
                    (forall (d :: <*>_N) (b :: <*>_N).
                     <Data.Data.Data d>_R
                     ->_R <Data.Data.Qr [u] (d -> b)>_R
                     ->_R <d>_R
                     ->_R Sym (Data.Data.N:Qr[0] <*>_N <[u]>_R <b>_P))
                    (Language.Python.Common.AST.$fDataExpr4 @ u)
                      `cast`
                    (forall (g :: <*>_N).
                     <g>_R ->_R Sym (Data.Data.N:Qr[0] <*>_N <[u]>_R <g>_P))
                    x0)
                   `cast`
                 (Data.Data.N:Qr[0]
                      <*>_N <[u]>_R <Language.Python.Common.AST.FromItem annot1>_P)
                   (GHC.Types.[] @ u)) -}
73d811e85ab4018f7789c4c4421a9fde
  $fDataFromItem_$cgmapQi ::
    Data.Data.Data annot =>
    forall u.
    GHC.Types.Int
    -> (forall d. Data.Data.Data d => d -> u)
    -> Language.Python.Common.AST.FromItem annot
    -> u
  {- Arity: 4,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,U(U)><L,C(C1(U))><L,U>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   @ u
                   (ds :: GHC.Types.Int)
                   (ds1 :: forall d. Data.Data.Data d => d -> u)
                   (x :: Language.Python.Common.AST.FromItem annot1) ->
                 case Language.Python.Common.AST.$fDataFromItem_$cgfoldl
                        @ annot1
                        $dData
                        @ (Data.Data.Qi u)
                        (\ @ d
                           @ b
                           ($dData1 :: Data.Data.Data d)
                           (ds2 :: Data.Data.Qi u (d -> b))
                           (a2 :: d) ->
                         case ds2 of wild { Data.Data.Qi i' q ->
                         Data.Data.Qi
                           @ *
                           @ u
                           @ b
                           (case i' of wild1 { GHC.Types.I# x1 ->
                            GHC.Types.I# (GHC.Prim.+# x1 1#) })
                           (case ds of wild1 { GHC.Types.I# x1 ->
                            case i' of wild2 { GHC.Types.I# y ->
                            case GHC.Prim.tagToEnum#
                                   @ GHC.Types.Bool
                                   (GHC.Prim.==# x1 y) of wild3 {
                              GHC.Types.False -> q
                              GHC.Types.True -> GHC.Base.Just @ u (ds1 @ d $dData1 a2) } } }) })
                        (Language.Python.Common.AST.$fDataExpr1 @ u)
                        x of wild { Data.Data.Qi ds2 q ->
                 Data.Maybe.fromJust @ u q }) -}
73d811e85ab4018f7789c4c4421a9fde
  $fDataFromItem_$cgmapQl ::
    Data.Data.Data annot =>
    forall r r'.
    (r -> r' -> r)
    -> r
    -> (forall d. Data.Data.Data d => d -> r')
    -> Language.Python.Common.AST.FromItem annot
    -> r
  {- Arity: 4,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,C(C1(U))><L,U><L,C(C1(U))>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   @ r
                   @ r'
                   (ds :: r -> r' -> r)
                   (ds1 :: r)
                   (ds2 :: forall d. Data.Data.Data d => d -> r') ->
                 let {
                   g :: Language.Python.Common.AST.FromItem annot1
                        -> Data.Functor.Const.Const
                             r (Language.Python.Common.AST.FromItem annot1)
                   = Language.Python.Common.AST.$fDataFromItem_$cgfoldl
                       @ annot1
                       $dData
                       @ (Data.Functor.Const.Const r)
                       (\ @ d
                          @ b
                          ($dData1 :: Data.Data.Data d)
                          (c :: Data.Functor.Const.Const r (d -> b))
                          (x :: d) ->
                        ds
                          c `cast` (Data.Functor.Const.N:Const[0] <*>_N <r>_R <d -> b>_P)
                          (ds2 @ d $dData1 x))
                         `cast`
                       (forall (d :: <*>_N) (b :: <*>_N).
                        <Data.Data.Data d>_R
                        ->_R <Data.Functor.Const.Const r (d -> b)>_R
                        ->_R <d>_R
                        ->_R Sym (Data.Functor.Const.N:Const[0] <*>_N <r>_R <b>_P))
                       (\ @ g1 (ds3 :: g1) -> ds1)
                         `cast`
                       (forall (g1 :: <*>_N).
                        <g1>_R ->_R Sym (Data.Functor.Const.N:Const[0] <*>_N <r>_R <g1>_P))
                 } in
                 (\ (x :: Language.Python.Common.AST.FromItem annot1) -> g x)
                   `cast`
                 (<Language.Python.Common.AST.FromItem annot1>_R
                  ->_R Data.Functor.Const.N:Const[0]
                           <*>_N <r>_R <Language.Python.Common.AST.FromItem annot1>_P)) -}
73d811e85ab4018f7789c4c4421a9fde
  $fDataFromItem_$cgmapQr ::
    Data.Data.Data annot =>
    forall r r'.
    (r' -> r -> r)
    -> r
    -> (forall d. Data.Data.Data d => d -> r')
    -> Language.Python.Common.AST.FromItem annot
    -> r
  {- Arity: 5,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,C(C1(U))><L,U><L,C(C1(U))><L,U>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   @ r
                   @ r'
                   (ds :: r' -> r -> r)
                   (ds1 :: r)
                   (ds2 :: forall d. Data.Data.Data d => d -> r')
                   (x0 :: Language.Python.Common.AST.FromItem annot1) ->
                 (Language.Python.Common.AST.$fDataFromItem_$cgfoldl
                    @ annot1
                    $dData
                    @ (Data.Data.Qr r)
                    (\ @ d
                       @ b
                       ($dData1 :: Data.Data.Data d)
                       (ds3 :: Data.Data.Qr r (d -> b))
                       (x :: d)
                       (r1 :: r) ->
                     ds3 `cast` (Data.Data.N:Qr[0] <*>_N <r>_R <d -> b>_P)
                       (ds (ds2 @ d $dData1 x) r1))
                      `cast`
                    (forall (d :: <*>_N) (b :: <*>_N).
                     <Data.Data.Data d>_R
                     ->_R <Data.Data.Qr r (d -> b)>_R
                     ->_R <d>_R
                     ->_R Sym (Data.Data.N:Qr[0] <*>_N <r>_R <b>_P))
                    (Language.Python.Common.AST.$fDataExpr5 @ r)
                      `cast`
                    (forall (g :: <*>_N).
                     <g>_R ->_R Sym (Data.Data.N:Qr[0] <*>_N <r>_R <g>_P))
                    x0)
                   `cast`
                 (Data.Data.N:Qr[0]
                      <*>_N <r>_R <Language.Python.Common.AST.FromItem annot1>_P)
                   ds1) -}
73d811e85ab4018f7789c4c4421a9fde
  $fDataFromItem_$cgunfold ::
    Data.Data.Data annot =>
    forall (c :: * -> *).
    (forall b r. Data.Data.Data b => c (b -> r) -> c r)
    -> (forall r. r -> c r)
    -> Data.Data.Constr
    -> c (Language.Python.Common.AST.FromItem annot)
  {- Arity: 1, Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   @ c :: * -> * ->
                 let {
                   $dData1 :: Data.Data.Data (Language.Python.Common.AST.Ident annot1)
                   = Language.Python.Common.AST.$fDataIdent @ annot1 $dData
                 } in
                 let {
                   $dData2 :: Data.Data.Data
                                (GHC.Base.Maybe (Language.Python.Common.AST.Ident annot1))
                   = Data.Data.$fDataMaybe
                       @ (Language.Python.Common.AST.Ident annot1)
                       $dData1
                 } in
                 \ (k :: forall b r. Data.Data.Data b => c (b -> r) -> c r)
                   (z :: forall r. r -> c r)
                   (ds :: Data.Data.Constr) ->
                 k @ annot1
                   @ (Language.Python.Common.AST.FromItem annot1)
                   $dData
                   (k @ (GHC.Base.Maybe (Language.Python.Common.AST.Ident annot1))
                      @ (annot1 -> Language.Python.Common.AST.FromItem annot1)
                      $dData2
                      (k @ (Language.Python.Common.AST.Ident annot1)
                         @ (GHC.Base.Maybe (Language.Python.Common.AST.Ident annot1)
                            -> annot1 -> Language.Python.Common.AST.FromItem annot1)
                         $dData1
                         (z @ (Language.Python.Common.AST.Ident annot1
                               -> GHC.Base.Maybe (Language.Python.Common.AST.Ident annot1)
                               -> annot1
                               -> Language.Python.Common.AST.FromItem annot1)
                            (Language.Python.Common.AST.FromItem @ annot1))))) -}
73d811e85ab4018f7789c4c4421a9fde
  $fDataFromItem_$cp1Data ::
    Data.Data.Data annot =>
    Data.Typeable.Internal.Typeable
      (Language.Python.Common.AST.FromItem annot)
  {- Arity: 1, Strictness: <L,1*U(1*U,A,A,A,A,A,A,A,A,A,A,A,A,A,A)>,
     Unfolding: (\ @ annot1 ($dData :: Data.Data.Data annot1) ->
                 let {
                   b1 :: Data.Typeable.Internal.Typeable annot1
                   = Data.Data.$p1Data @ annot1 $dData
                 } in
                 case GHC.Magic.noinline
                        @ ([GHC.Fingerprint.Type.Fingerprint]
                           -> GHC.Fingerprint.Type.Fingerprint)
                        GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           Language.Python.Common.AST.$fDataFromItem7
                           (GHC.Types.:
                              @ GHC.Fingerprint.Type.Fingerprint
                              (Data.Typeable.Internal.typeRepFingerprint
                                 @ *
                                 @ annot1
                                 b1 `cast` (Data.Typeable.Internal.N:Typeable[0] <*>_N <annot1>_N))
                              (GHC.Types.[]
                                 @ GHC.Fingerprint.Type.Fingerprint))) of dt { GHC.Fingerprint.Type.Fingerprint dt1 dt2 ->
                 (Data.Typeable.Internal.TrApp
                    @ *
                    @ (Language.Python.Common.AST.FromItem annot1)
                    @ *
                    @ Language.Python.Common.AST.FromItem
                    @ annot1
                    @~ <Language.Python.Common.AST.FromItem annot1>_N
                    dt1
                    dt2
                    Language.Python.Common.AST.$fDataFromItem_a3
                    b1 `cast` (Data.Typeable.Internal.N:Typeable[0] <*>_N <annot1>_N))
                   `cast`
                 (Sym (Data.Typeable.Internal.N:Typeable[0]) <*>_N <Language.Python.Common.AST.FromItem
                                                                      annot1>_N) }) -}
73d811e85ab4018f7789c4c4421a9fde
  $fDataFromItem_a3 ::
    Data.Typeable.Internal.TypeRep Language.Python.Common.AST.FromItem
  {- Unfolding: (case GHC.Magic.noinline
                        @ ([GHC.Fingerprint.Type.Fingerprint]
                           -> GHC.Fingerprint.Type.Fingerprint)
                        GHC.Fingerprint.fingerprintFingerprints
                        Language.Python.Common.AST.$fDataFromItem2 of dt { GHC.Fingerprint.Type.Fingerprint dt1 dt2 ->
                 Data.Typeable.Internal.TrTyCon
                   @ (* -> *)
                   @ Language.Python.Common.AST.FromItem
                   dt1
                   dt2
                   Language.Python.Common.AST.$tcFromItem
                   (GHC.Types.[] @ Data.Typeable.Internal.SomeTypeRep) }) -}
e3cd8a0dc8214c8f5ef60ed5a9ac11ef
  $fDataFromItems ::
    Data.Data.Data annot =>
    Data.Data.Data (Language.Python.Common.AST.FromItems annot)
  DFunId
  {- Arity: 1, Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)>,
     Inline: CONLIKE,
     Unfolding: DFun: @ annot1 (v :: Data.Data.Data annot1).
                  @ (Language.Python.Common.AST.FromItems annot1)
                  (Language.Python.Common.AST.$fDataFromItems_$cp1Data @ annot1 v)
                  (Language.Python.Common.AST.$fDataFromItems_$cgfoldl @ annot1 v)
                  (Language.Python.Common.AST.$fDataFromItems_$cgunfold @ annot1 v)
                  (\ (ds :: Language.Python.Common.AST.FromItems annot1) ->
                   case ds of wild {
                     Language.Python.Common.AST.ImportEverything ds1
                     -> Language.Python.Common.AST.$cImportEverything
                     Language.Python.Common.AST.FromItems ds1 ds2
                     -> Language.Python.Common.AST.$cFromItems })
                  (\ (ds :: Language.Python.Common.AST.FromItems annot1) ->
                   Language.Python.Common.AST.$tFromItems)
                  (Language.Python.Common.AST.$fDataFromItems_$cdataCast1 @ annot1 v)
                  (\ @ t :: * -> * -> *
                     @ c :: * -> *
                     ($dTypeable :: Data.Typeable.Internal.Typeable t)
                     (ds :: forall d e.
                            (Data.Data.Data d, Data.Data.Data e) =>
                            c (t d e)) ->
                   GHC.Base.Nothing
                     @ (c (Language.Python.Common.AST.FromItems annot1)))
                  (Language.Python.Common.AST.$fDataFromItems1 @ annot1 v)
                    `cast`
                  (<forall b. Data.Data.Data b => b -> b>_R
                   ->_R <Language.Python.Common.AST.FromItems annot1>_R
                   ->_R Data.Functor.Identity.N:Identity[0]
                            <Language.Python.Common.AST.FromItems annot1>_R)
                  (Language.Python.Common.AST.$fDataFromItems_$cgmapQl @ annot1 v)
                  (Language.Python.Common.AST.$fDataFromItems_$cgmapQr @ annot1 v)
                  (Language.Python.Common.AST.$fDataFromItems_$cgmapQ @ annot1 v)
                  (Language.Python.Common.AST.$fDataFromItems_$cgmapQi @ annot1 v)
                  (Language.Python.Common.AST.$fDataFromItems_$cgmapM @ annot1 v)
                  (Language.Python.Common.AST.$fDataFromItems_$cgmapMp @ annot1 v)
                  (Language.Python.Common.AST.$fDataFromItems_$cgmapMo @ annot1 v) -}
e3cd8a0dc8214c8f5ef60ed5a9ac11ef
  $fDataFromItems1 ::
    Data.Data.Data annot =>
    (forall b. Data.Data.Data b => b -> b)
    -> Language.Python.Common.AST.FromItems annot
    -> Data.Functor.Identity.Identity
         (Language.Python.Common.AST.FromItems annot)
  {- Arity: 3,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,C(C1(U))><L,U>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   (ds :: forall b. Data.Data.Data b => b -> b)
                   (x0 :: Language.Python.Common.AST.FromItems annot1) ->
                 Language.Python.Common.AST.$fDataFromItems_$cgfoldl
                   @ annot1
                   $dData
                   @ Data.Functor.Identity.Identity
                   (\ @ d
                      @ b
                      ($dData1 :: Data.Data.Data d)
                      (ds1 :: Data.Functor.Identity.Identity (d -> b))
                      (x :: d) ->
                    ds1 `cast` (Data.Functor.Identity.N:Identity[0] <d -> b>_R)
                      (ds @ d $dData1 x))
                     `cast`
                   (forall (d :: <*>_N) (b :: <*>_N).
                    <Data.Data.Data d>_R
                    ->_R <Data.Functor.Identity.Identity (d -> b)>_R
                    ->_R <d>_R
                    ->_R Sym (Data.Functor.Identity.N:Identity[0] <b>_R))
                   Language.Python.Common.AST.$fDataExpr7
                     `cast`
                   (forall (g :: <*>_N).
                    <g>_R ->_R Sym (Data.Functor.Identity.N:Identity[0] <g>_R))
                   x0) -}
9f8abe68770a117c3809c5ea75ae141c
  $fDataFromItems2 :: [GHC.Fingerprint.Type.Fingerprint]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Fingerprint.Type.Fingerprint
                   Language.Python.Common.AST.$fDataFromItems3
                   Language.Python.Common.AST.$fDataExpr9) -}
bfb5e498c4a477cb07406a4f818e8fba
  $fDataFromItems3 :: GHC.Fingerprint.Type.Fingerprint
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Fingerprint.Type.Fingerprint
                   4465927397584623256##
                   16038499195478416996##) -}
e3cd8a0dc8214c8f5ef60ed5a9ac11ef
  $fDataFromItems4 :: GHC.Fingerprint.Type.Fingerprint
  {- Unfolding: (case Language.Python.Common.AST.$fDataFromItems_a3 of wild { Data.Typeable.Internal.TrTyCon dt dt1 ds1 ds2 ->
                 GHC.Fingerprint.Type.Fingerprint dt dt1 }) -}
e3cd8a0dc8214c8f5ef60ed5a9ac11ef
  $fDataFromItems_$cdataCast1 ::
    Data.Data.Data annot =>
    forall (t :: * -> *) (c :: * -> *).
    Data.Typeable.Internal.Typeable t =>
    (forall d. Data.Data.Data d => c (t d))
    -> GHC.Base.Maybe (c (Language.Python.Common.AST.FromItems annot))
  {- Arity: 2, Strictness: <L,U><L,1*U>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   @ t :: * -> *
                   @ c :: * -> *
                   ($dTypeable :: Data.Typeable.Internal.Typeable t) ->
                 let {
                   lvl447 :: GHC.Base.Maybe
                               (t Data.Type.Equality.:~~: Language.Python.Common.AST.FromItems)
                   = Data.Typeable.Internal.eqTypeRep
                       @ (* -> *)
                       @ (* -> *)
                       @ t
                       @ Language.Python.Common.AST.FromItems
                       $dTypeable
                         `cast`
                       (Data.Typeable.Internal.N:Typeable[0] <* -> *>_N <t>_N)
                       Language.Python.Common.AST.$fDataFromItems_a3
                 } in
                 \ (f12 :: forall d. Data.Data.Data d => c (t d)) ->
                 case lvl447 of wild {
                   GHC.Base.Nothing
                   -> GHC.Base.Nothing
                        @ (c (Language.Python.Common.AST.FromItems annot1))
                   GHC.Base.Just ds
                   -> case ds of wild1 { Data.Type.Equality.HRefl cobox cobox1 ->
                      GHC.Base.Just
                        @ (c (Language.Python.Common.AST.FromItems annot1))
                        (f12 @ annot1 $dData)
                          `cast`
                        (<c>_R (Sym cobox1 <annot1>_N)) } }) -}
e3cd8a0dc8214c8f5ef60ed5a9ac11ef
  $fDataFromItems_$cgfoldl ::
    Data.Data.Data annot =>
    forall (c :: * -> *).
    (forall d b. Data.Data.Data d => c (d -> b) -> d -> c b)
    -> (forall g. g -> c g)
    -> Language.Python.Common.AST.FromItems annot
    -> c (Language.Python.Common.AST.FromItems annot)
  {- Arity: 1, Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   @ c :: * -> * ->
                 let {
                   $dData1 :: Data.Data.Data
                                (Language.Python.Common.AST.FromItem annot1)
                   = Language.Python.Common.AST.$fDataFromItem @ annot1 $dData
                 } in
                 let {
                   $dData2 :: Data.Data.Data
                                [Language.Python.Common.AST.FromItem annot1]
                   = Data.Data.$fData[]
                       @ (Language.Python.Common.AST.FromItem annot1)
                       $dData1
                 } in
                 \ (k :: forall d b. Data.Data.Data d => c (d -> b) -> d -> c b)
                   (z :: forall g. g -> c g)
                   (ds :: Language.Python.Common.AST.FromItems annot1) ->
                 case ds of wild {
                   Language.Python.Common.AST.ImportEverything a1
                   -> k @ annot1
                        @ (Language.Python.Common.AST.FromItems annot1)
                        $dData
                        (z @ (annot1 -> Language.Python.Common.AST.FromItems annot1)
                           (Language.Python.Common.AST.ImportEverything @ annot1))
                        a1
                   Language.Python.Common.AST.FromItems a1 a2
                   -> k @ annot1
                        @ (Language.Python.Common.AST.FromItems annot1)
                        $dData
                        (k @ [Language.Python.Common.AST.FromItem annot1]
                           @ (annot1 -> Language.Python.Common.AST.FromItems annot1)
                           $dData2
                           (z @ ([Language.Python.Common.AST.FromItem annot1]
                                 -> annot1 -> Language.Python.Common.AST.FromItems annot1)
                              (Language.Python.Common.AST.FromItems @ annot1))
                           a1)
                        a2 }) -}
e3cd8a0dc8214c8f5ef60ed5a9ac11ef
  $fDataFromItems_$cgmapM ::
    Data.Data.Data annot =>
    forall (m :: * -> *).
    GHC.Base.Monad m =>
    (forall d. Data.Data.Data d => d -> m d)
    -> Language.Python.Common.AST.FromItems annot
    -> m (Language.Python.Common.AST.FromItems annot)
  {- Arity: 3,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,U(A,C(C1(U)),A,U,A)><L,C(C1(U))>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   @ m :: * -> *
                   ($dMonad :: GHC.Base.Monad m)
                   (ds :: forall d. Data.Data.Data d => d -> m d) ->
                 Language.Python.Common.AST.$fDataFromItems_$cgfoldl
                   @ annot1
                   $dData
                   @ m
                   (\ @ d
                      @ b
                      ($dData1 :: Data.Data.Data d)
                      (c :: m (d -> b))
                      (x :: d) ->
                    let {
                      lvl447 :: m d = ds @ d $dData1 x
                    } in
                    GHC.Base.>>=
                      @ m
                      $dMonad
                      @ (d -> b)
                      @ b
                      c
                      (\ (c' :: d -> b) ->
                       GHC.Base.>>=
                         @ m
                         $dMonad
                         @ d
                         @ b
                         lvl447
                         (\ (x' :: d) -> GHC.Base.return @ m $dMonad @ b (c' x'))))
                   (\ @ g -> GHC.Base.return @ m $dMonad @ g)) -}
e3cd8a0dc8214c8f5ef60ed5a9ac11ef
  $fDataFromItems_$cgmapMo ::
    Data.Data.Data annot =>
    forall (m :: * -> *).
    GHC.Base.MonadPlus m =>
    (forall d. Data.Data.Data d => d -> m d)
    -> Language.Python.Common.AST.FromItems annot
    -> m (Language.Python.Common.AST.FromItems annot)
  {- Arity: 4,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><S(LS(LC(C(S))LLL)LL),U(A,1*U(A,C(C1(U)),A,C(U),A),1*U,C(C1(U)))><L,C(C1(U))><L,U>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   @ m :: * -> *
                   ($dMonadPlus :: GHC.Base.MonadPlus m)
                   (ds :: forall d. Data.Data.Data d => d -> m d)
                   (eta :: Language.Python.Common.AST.FromItems annot1) ->
                 let {
                   $dMonad :: GHC.Base.Monad m = GHC.Base.$p2MonadPlus @ m $dMonadPlus
                 } in
                 let {
                   lvl447 :: m (Language.Python.Common.AST.FromItems annot1)
                   = GHC.Base.mzero
                       @ m
                       $dMonadPlus
                       @ (Language.Python.Common.AST.FromItems annot1)
                 } in
                 GHC.Base.>>=
                   @ m
                   $dMonad
                   @ (Language.Python.Common.AST.FromItems annot1, GHC.Types.Bool)
                   @ (Language.Python.Common.AST.FromItems annot1)
                   (Language.Python.Common.AST.$fDataFromItems_$cgfoldl
                      @ annot1
                      $dData
                      @ (Data.Data.Mp m)
                      (\ @ d
                         @ b
                         ($dData1 :: Data.Data.Data d)
                         (ds1 :: Data.Data.Mp m (d -> b))
                         (y :: d) ->
                       let {
                         lvl448 :: m d = ds @ d $dData1 y
                       } in
                       GHC.Base.>>=
                         @ m
                         $dMonad
                         @ (d -> b, GHC.Types.Bool)
                         @ (b, GHC.Types.Bool)
                         ds1 `cast` (Data.Data.N:Mp[0] <m>_R <d -> b>_N)
                         (\ (ds2 :: (d -> b, GHC.Types.Bool)) ->
                          case ds2 of wild { (,) h b1 ->
                          case b1 of wild1 {
                            GHC.Types.False
                            -> GHC.Base.mplus
                                 @ m
                                 $dMonadPlus
                                 @ (b, GHC.Types.Bool)
                                 (GHC.Base.>>=
                                    @ m
                                    $dMonad
                                    @ d
                                    @ (b, GHC.Types.Bool)
                                    lvl448
                                    (\ (y' :: d) ->
                                     GHC.Base.return
                                       @ m
                                       $dMonad
                                       @ (b, GHC.Types.Bool)
                                       (h y', GHC.Types.True)))
                                 (GHC.Base.return
                                    @ m
                                    $dMonad
                                    @ (b, GHC.Types.Bool)
                                    (h y, GHC.Types.False))
                            GHC.Types.True
                            -> GHC.Base.return
                                 @ m
                                 $dMonad
                                 @ (b, GHC.Types.Bool)
                                 (h y, GHC.Types.True) } }))
                        `cast`
                      (forall (d :: <*>_N) (b :: <*>_N).
                       <Data.Data.Data d>_R
                       ->_R <Data.Data.Mp m (d -> b)>_R
                       ->_R <d>_R
                       ->_R Sym (Data.Data.N:Mp[0] <m>_R <b>_N))
                      (\ @ g (g1 :: g) ->
                       GHC.Base.return
                         @ m
                         $dMonad
                         @ (g, GHC.Types.Bool)
                         (g1, GHC.Types.False))
                        `cast`
                      (forall (g :: <*>_N).
                       <g>_R ->_R Sym (Data.Data.N:Mp[0] <m>_R <g>_N))
                      eta)
                     `cast`
                   (Data.Data.N:Mp[0]
                        <m>_R <Language.Python.Common.AST.FromItems annot1>_N)
                   (\ (ds1 :: (Language.Python.Common.AST.FromItems annot1,
                               GHC.Types.Bool)) ->
                    case ds1 of wild { (,) x' b ->
                    case b of wild1 {
                      GHC.Types.False -> lvl447
                      GHC.Types.True
                      -> GHC.Base.return
                           @ m
                           $dMonad
                           @ (Language.Python.Common.AST.FromItems annot1)
                           x' } })) -}
e3cd8a0dc8214c8f5ef60ed5a9ac11ef
  $fDataFromItems_$cgmapMp ::
    Data.Data.Data annot =>
    forall (m :: * -> *).
    GHC.Base.MonadPlus m =>
    (forall d. Data.Data.Data d => d -> m d)
    -> Language.Python.Common.AST.FromItems annot
    -> m (Language.Python.Common.AST.FromItems annot)
  {- Arity: 4,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><S(LS(LC(C(S))LLL)LL),U(A,1*U(A,C(C1(U)),A,C(U),A),1*U,C(C1(U)))><L,C(C1(U))><L,U>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   @ m :: * -> *
                   ($dMonadPlus :: GHC.Base.MonadPlus m)
                   (ds :: forall d. Data.Data.Data d => d -> m d)
                   (eta :: Language.Python.Common.AST.FromItems annot1) ->
                 let {
                   $dMonad :: GHC.Base.Monad m = GHC.Base.$p2MonadPlus @ m $dMonadPlus
                 } in
                 let {
                   lvl447 :: m (Language.Python.Common.AST.FromItems annot1)
                   = GHC.Base.mzero
                       @ m
                       $dMonadPlus
                       @ (Language.Python.Common.AST.FromItems annot1)
                 } in
                 GHC.Base.>>=
                   @ m
                   $dMonad
                   @ (Language.Python.Common.AST.FromItems annot1, GHC.Types.Bool)
                   @ (Language.Python.Common.AST.FromItems annot1)
                   (Language.Python.Common.AST.$fDataFromItems_$cgfoldl
                      @ annot1
                      $dData
                      @ (Data.Data.Mp m)
                      (\ @ d
                         @ b
                         ($dData1 :: Data.Data.Data d)
                         (ds1 :: Data.Data.Mp m (d -> b))
                         (y :: d) ->
                       let {
                         lvl448 :: m d = ds @ d $dData1 y
                       } in
                       GHC.Base.>>=
                         @ m
                         $dMonad
                         @ (d -> b, GHC.Types.Bool)
                         @ (b, GHC.Types.Bool)
                         ds1 `cast` (Data.Data.N:Mp[0] <m>_R <d -> b>_N)
                         (\ (ds2 :: (d -> b, GHC.Types.Bool)) ->
                          case ds2 of wild { (,) h b1 ->
                          GHC.Base.mplus
                            @ m
                            $dMonadPlus
                            @ (b, GHC.Types.Bool)
                            (GHC.Base.>>=
                               @ m
                               $dMonad
                               @ d
                               @ (b, GHC.Types.Bool)
                               lvl448
                               (\ (y' :: d) ->
                                GHC.Base.return
                                  @ m
                                  $dMonad
                                  @ (b, GHC.Types.Bool)
                                  (h y', GHC.Types.True)))
                            (GHC.Base.return @ m $dMonad @ (b, GHC.Types.Bool) (h y, b1)) }))
                        `cast`
                      (forall (d :: <*>_N) (b :: <*>_N).
                       <Data.Data.Data d>_R
                       ->_R <Data.Data.Mp m (d -> b)>_R
                       ->_R <d>_R
                       ->_R Sym (Data.Data.N:Mp[0] <m>_R <b>_N))
                      (\ @ g (g1 :: g) ->
                       GHC.Base.return
                         @ m
                         $dMonad
                         @ (g, GHC.Types.Bool)
                         (g1, GHC.Types.False))
                        `cast`
                      (forall (g :: <*>_N).
                       <g>_R ->_R Sym (Data.Data.N:Mp[0] <m>_R <g>_N))
                      eta)
                     `cast`
                   (Data.Data.N:Mp[0]
                        <m>_R <Language.Python.Common.AST.FromItems annot1>_N)
                   (\ (ds1 :: (Language.Python.Common.AST.FromItems annot1,
                               GHC.Types.Bool)) ->
                    case ds1 of wild { (,) x' b ->
                    case b of wild1 {
                      GHC.Types.False -> lvl447
                      GHC.Types.True
                      -> GHC.Base.return
                           @ m
                           $dMonad
                           @ (Language.Python.Common.AST.FromItems annot1)
                           x' } })) -}
e3cd8a0dc8214c8f5ef60ed5a9ac11ef
  $fDataFromItems_$cgmapQ ::
    Data.Data.Data annot =>
    forall u.
    (forall d. Data.Data.Data d => d -> u)
    -> Language.Python.Common.AST.FromItems annot -> [u]
  {- Arity: 3,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,C(C1(U))><L,U>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   @ u
                   (ds :: forall d. Data.Data.Data d => d -> u)
                   (x0 :: Language.Python.Common.AST.FromItems annot1) ->
                 (Language.Python.Common.AST.$fDataFromItems_$cgfoldl
                    @ annot1
                    $dData
                    @ (Data.Data.Qr [u])
                    (\ @ d
                       @ b
                       ($dData1 :: Data.Data.Data d)
                       (ds1 :: Data.Data.Qr [u] (d -> b))
                       (x :: d)
                       (r1 :: [u]) ->
                     ds1 `cast` (Data.Data.N:Qr[0] <*>_N <[u]>_R <d -> b>_P)
                       (GHC.Types.: @ u (ds @ d $dData1 x) r1))
                      `cast`
                    (forall (d :: <*>_N) (b :: <*>_N).
                     <Data.Data.Data d>_R
                     ->_R <Data.Data.Qr [u] (d -> b)>_R
                     ->_R <d>_R
                     ->_R Sym (Data.Data.N:Qr[0] <*>_N <[u]>_R <b>_P))
                    (Language.Python.Common.AST.$fDataExpr4 @ u)
                      `cast`
                    (forall (g :: <*>_N).
                     <g>_R ->_R Sym (Data.Data.N:Qr[0] <*>_N <[u]>_R <g>_P))
                    x0)
                   `cast`
                 (Data.Data.N:Qr[0]
                      <*>_N <[u]>_R <Language.Python.Common.AST.FromItems annot1>_P)
                   (GHC.Types.[] @ u)) -}
e3cd8a0dc8214c8f5ef60ed5a9ac11ef
  $fDataFromItems_$cgmapQi ::
    Data.Data.Data annot =>
    forall u.
    GHC.Types.Int
    -> (forall d. Data.Data.Data d => d -> u)
    -> Language.Python.Common.AST.FromItems annot
    -> u
  {- Arity: 4,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,U(U)><L,C(C1(U))><L,U>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   @ u
                   (ds :: GHC.Types.Int)
                   (ds1 :: forall d. Data.Data.Data d => d -> u)
                   (x :: Language.Python.Common.AST.FromItems annot1) ->
                 case Language.Python.Common.AST.$fDataFromItems_$cgfoldl
                        @ annot1
                        $dData
                        @ (Data.Data.Qi u)
                        (\ @ d
                           @ b
                           ($dData1 :: Data.Data.Data d)
                           (ds2 :: Data.Data.Qi u (d -> b))
                           (a2 :: d) ->
                         case ds2 of wild { Data.Data.Qi i' q ->
                         Data.Data.Qi
                           @ *
                           @ u
                           @ b
                           (case i' of wild1 { GHC.Types.I# x1 ->
                            GHC.Types.I# (GHC.Prim.+# x1 1#) })
                           (case ds of wild1 { GHC.Types.I# x1 ->
                            case i' of wild2 { GHC.Types.I# y ->
                            case GHC.Prim.tagToEnum#
                                   @ GHC.Types.Bool
                                   (GHC.Prim.==# x1 y) of wild3 {
                              GHC.Types.False -> q
                              GHC.Types.True -> GHC.Base.Just @ u (ds1 @ d $dData1 a2) } } }) })
                        (Language.Python.Common.AST.$fDataExpr1 @ u)
                        x of wild { Data.Data.Qi ds2 q ->
                 Data.Maybe.fromJust @ u q }) -}
e3cd8a0dc8214c8f5ef60ed5a9ac11ef
  $fDataFromItems_$cgmapQl ::
    Data.Data.Data annot =>
    forall r r'.
    (r -> r' -> r)
    -> r
    -> (forall d. Data.Data.Data d => d -> r')
    -> Language.Python.Common.AST.FromItems annot
    -> r
  {- Arity: 4,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,C(C1(U))><L,U><L,C(C1(U))>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   @ r
                   @ r'
                   (ds :: r -> r' -> r)
                   (ds1 :: r)
                   (ds2 :: forall d. Data.Data.Data d => d -> r') ->
                 let {
                   g :: Language.Python.Common.AST.FromItems annot1
                        -> Data.Functor.Const.Const
                             r (Language.Python.Common.AST.FromItems annot1)
                   = Language.Python.Common.AST.$fDataFromItems_$cgfoldl
                       @ annot1
                       $dData
                       @ (Data.Functor.Const.Const r)
                       (\ @ d
                          @ b
                          ($dData1 :: Data.Data.Data d)
                          (c :: Data.Functor.Const.Const r (d -> b))
                          (x :: d) ->
                        ds
                          c `cast` (Data.Functor.Const.N:Const[0] <*>_N <r>_R <d -> b>_P)
                          (ds2 @ d $dData1 x))
                         `cast`
                       (forall (d :: <*>_N) (b :: <*>_N).
                        <Data.Data.Data d>_R
                        ->_R <Data.Functor.Const.Const r (d -> b)>_R
                        ->_R <d>_R
                        ->_R Sym (Data.Functor.Const.N:Const[0] <*>_N <r>_R <b>_P))
                       (\ @ g1 (ds3 :: g1) -> ds1)
                         `cast`
                       (forall (g1 :: <*>_N).
                        <g1>_R ->_R Sym (Data.Functor.Const.N:Const[0] <*>_N <r>_R <g1>_P))
                 } in
                 (\ (x :: Language.Python.Common.AST.FromItems annot1) -> g x)
                   `cast`
                 (<Language.Python.Common.AST.FromItems annot1>_R
                  ->_R Data.Functor.Const.N:Const[0]
                           <*>_N <r>_R <Language.Python.Common.AST.FromItems annot1>_P)) -}
e3cd8a0dc8214c8f5ef60ed5a9ac11ef
  $fDataFromItems_$cgmapQr ::
    Data.Data.Data annot =>
    forall r r'.
    (r' -> r -> r)
    -> r
    -> (forall d. Data.Data.Data d => d -> r')
    -> Language.Python.Common.AST.FromItems annot
    -> r
  {- Arity: 5,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,C(C1(U))><L,U><L,C(C1(U))><L,U>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   @ r
                   @ r'
                   (ds :: r' -> r -> r)
                   (ds1 :: r)
                   (ds2 :: forall d. Data.Data.Data d => d -> r')
                   (x0 :: Language.Python.Common.AST.FromItems annot1) ->
                 (Language.Python.Common.AST.$fDataFromItems_$cgfoldl
                    @ annot1
                    $dData
                    @ (Data.Data.Qr r)
                    (\ @ d
                       @ b
                       ($dData1 :: Data.Data.Data d)
                       (ds3 :: Data.Data.Qr r (d -> b))
                       (x :: d)
                       (r1 :: r) ->
                     ds3 `cast` (Data.Data.N:Qr[0] <*>_N <r>_R <d -> b>_P)
                       (ds (ds2 @ d $dData1 x) r1))
                      `cast`
                    (forall (d :: <*>_N) (b :: <*>_N).
                     <Data.Data.Data d>_R
                     ->_R <Data.Data.Qr r (d -> b)>_R
                     ->_R <d>_R
                     ->_R Sym (Data.Data.N:Qr[0] <*>_N <r>_R <b>_P))
                    (Language.Python.Common.AST.$fDataExpr5 @ r)
                      `cast`
                    (forall (g :: <*>_N).
                     <g>_R ->_R Sym (Data.Data.N:Qr[0] <*>_N <r>_R <g>_P))
                    x0)
                   `cast`
                 (Data.Data.N:Qr[0]
                      <*>_N <r>_R <Language.Python.Common.AST.FromItems annot1>_P)
                   ds1) -}
e3cd8a0dc8214c8f5ef60ed5a9ac11ef
  $fDataFromItems_$cgunfold ::
    Data.Data.Data annot =>
    forall (c :: * -> *).
    (forall b r. Data.Data.Data b => c (b -> r) -> c r)
    -> (forall r. r -> c r)
    -> Data.Data.Constr
    -> c (Language.Python.Common.AST.FromItems annot)
  {- Arity: 1, Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   @ c :: * -> * ->
                 let {
                   $dData1 :: Data.Data.Data
                                (Language.Python.Common.AST.FromItem annot1)
                   = Language.Python.Common.AST.$fDataFromItem @ annot1 $dData
                 } in
                 let {
                   $dData2 :: Data.Data.Data
                                [Language.Python.Common.AST.FromItem annot1]
                   = Data.Data.$fData[]
                       @ (Language.Python.Common.AST.FromItem annot1)
                       $dData1
                 } in
                 \ (k :: forall b r. Data.Data.Data b => c (b -> r) -> c r)
                   (z :: forall r. r -> c r)
                   (c1 :: Data.Data.Constr) ->
                 case c1 of wild { Data.Data.Constr ds ds1 ds2 ds3 ds4 ->
                 case ds of wild1 {
                   DEFAULT
                   -> case ds4 of ww6 { Data.Data.DataType ww7 ww8 ->
                      case Data.Data.$wlvl ww7
                      ret_ty (c (Language.Python.Common.AST.FromItems annot1))
                      of {} }
                   Data.Data.AlgConstr idx
                   -> case idx of wild2 { GHC.Types.I# ds7 ->
                      case ds7 of ds8 {
                        DEFAULT
                        -> k @ annot1
                             @ (Language.Python.Common.AST.FromItems annot1)
                             $dData
                             (k @ [Language.Python.Common.AST.FromItem annot1]
                                @ (annot1 -> Language.Python.Common.AST.FromItems annot1)
                                $dData2
                                (z @ ([Language.Python.Common.AST.FromItem annot1]
                                      -> annot1 -> Language.Python.Common.AST.FromItems annot1)
                                   (Language.Python.Common.AST.FromItems @ annot1)))
                        1#
                        -> k @ annot1
                             @ (Language.Python.Common.AST.FromItems annot1)
                             $dData
                             (z @ (annot1 -> Language.Python.Common.AST.FromItems annot1)
                                (Language.Python.Common.AST.ImportEverything @ annot1)) } } } }) -}
e3cd8a0dc8214c8f5ef60ed5a9ac11ef
  $fDataFromItems_$cp1Data ::
    Data.Data.Data annot =>
    Data.Typeable.Internal.Typeable
      (Language.Python.Common.AST.FromItems annot)
  {- Arity: 1, Strictness: <L,1*U(1*U,A,A,A,A,A,A,A,A,A,A,A,A,A,A)>,
     Unfolding: (\ @ annot1 ($dData :: Data.Data.Data annot1) ->
                 let {
                   b1 :: Data.Typeable.Internal.Typeable annot1
                   = Data.Data.$p1Data @ annot1 $dData
                 } in
                 case GHC.Magic.noinline
                        @ ([GHC.Fingerprint.Type.Fingerprint]
                           -> GHC.Fingerprint.Type.Fingerprint)
                        GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           Language.Python.Common.AST.$fDataFromItems4
                           (GHC.Types.:
                              @ GHC.Fingerprint.Type.Fingerprint
                              (Data.Typeable.Internal.typeRepFingerprint
                                 @ *
                                 @ annot1
                                 b1 `cast` (Data.Typeable.Internal.N:Typeable[0] <*>_N <annot1>_N))
                              (GHC.Types.[]
                                 @ GHC.Fingerprint.Type.Fingerprint))) of dt { GHC.Fingerprint.Type.Fingerprint dt1 dt2 ->
                 (Data.Typeable.Internal.TrApp
                    @ *
                    @ (Language.Python.Common.AST.FromItems annot1)
                    @ *
                    @ Language.Python.Common.AST.FromItems
                    @ annot1
                    @~ <Language.Python.Common.AST.FromItems annot1>_N
                    dt1
                    dt2
                    Language.Python.Common.AST.$fDataFromItems_a3
                    b1 `cast` (Data.Typeable.Internal.N:Typeable[0] <*>_N <annot1>_N))
                   `cast`
                 (Sym (Data.Typeable.Internal.N:Typeable[0]) <*>_N <Language.Python.Common.AST.FromItems
                                                                      annot1>_N) }) -}
e3cd8a0dc8214c8f5ef60ed5a9ac11ef
  $fDataFromItems_a3 ::
    Data.Typeable.Internal.TypeRep Language.Python.Common.AST.FromItems
  {- Unfolding: (case GHC.Magic.noinline
                        @ ([GHC.Fingerprint.Type.Fingerprint]
                           -> GHC.Fingerprint.Type.Fingerprint)
                        GHC.Fingerprint.fingerprintFingerprints
                        Language.Python.Common.AST.$fDataFromItems2 of dt { GHC.Fingerprint.Type.Fingerprint dt1 dt2 ->
                 Data.Typeable.Internal.TrTyCon
                   @ (* -> *)
                   @ Language.Python.Common.AST.FromItems
                   dt1
                   dt2
                   Language.Python.Common.AST.$tcFromItems
                   (GHC.Types.[] @ Data.Typeable.Internal.SomeTypeRep) }) -}
cf431e64d114ff48b3a5eb8fda819c32
  $fDataHandler ::
    Data.Data.Data annot =>
    Data.Data.Data (Language.Python.Common.AST.Handler annot)
  DFunId
  {- Arity: 1, Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)>,
     Inline: CONLIKE,
     Unfolding: DFun: @ annot1 (v :: Data.Data.Data annot1).
                  @ (Language.Python.Common.AST.Handler annot1)
                  (Language.Python.Common.AST.$fDataHandler_$cp1Data @ annot1 v)
                  (Language.Python.Common.AST.$fDataHandler_$cgfoldl @ annot1 v)
                  (Language.Python.Common.AST.$fDataHandler_$cgunfold @ annot1 v)
                  (\ (ds :: Language.Python.Common.AST.Handler annot1) ->
                   case ds of wild { Language.Python.Common.AST.Handler ds1 ds2 ds3 ->
                   Language.Python.Common.AST.$cHandler })
                  (\ (ds :: Language.Python.Common.AST.Handler annot1) ->
                   Language.Python.Common.AST.$tHandler)
                  (Language.Python.Common.AST.$fDataHandler_$cdataCast1 @ annot1 v)
                  (\ @ t :: * -> * -> *
                     @ c :: * -> *
                     ($dTypeable :: Data.Typeable.Internal.Typeable t)
                     (ds :: forall d e.
                            (Data.Data.Data d, Data.Data.Data e) =>
                            c (t d e)) ->
                   GHC.Base.Nothing @ (c (Language.Python.Common.AST.Handler annot1)))
                  (Language.Python.Common.AST.$fDataHandler1 @ annot1 v)
                    `cast`
                  (<forall b. Data.Data.Data b => b -> b>_R
                   ->_R <Language.Python.Common.AST.Handler annot1>_R
                   ->_R Data.Functor.Identity.N:Identity[0]
                            <Language.Python.Common.AST.Handler annot1>_R)
                  (Language.Python.Common.AST.$fDataHandler_$cgmapQl @ annot1 v)
                  (Language.Python.Common.AST.$fDataHandler_$cgmapQr @ annot1 v)
                  (Language.Python.Common.AST.$fDataHandler_$cgmapQ @ annot1 v)
                  (Language.Python.Common.AST.$fDataHandler_$cgmapQi @ annot1 v)
                  (Language.Python.Common.AST.$fDataHandler_$cgmapM @ annot1 v)
                  (Language.Python.Common.AST.$fDataHandler_$cgmapMp @ annot1 v)
                  (Language.Python.Common.AST.$fDataHandler_$cgmapMo @ annot1 v) -}
cf431e64d114ff48b3a5eb8fda819c32
  $fDataHandler1 ::
    Data.Data.Data annot =>
    (forall b. Data.Data.Data b => b -> b)
    -> Language.Python.Common.AST.Handler annot
    -> Data.Functor.Identity.Identity
         (Language.Python.Common.AST.Handler annot)
  {- Arity: 3,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,C(C1(U))><L,U>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   (ds :: forall b. Data.Data.Data b => b -> b)
                   (x0 :: Language.Python.Common.AST.Handler annot1) ->
                 Language.Python.Common.AST.$fDataHandler_$cgfoldl
                   @ annot1
                   $dData
                   @ Data.Functor.Identity.Identity
                   (\ @ d
                      @ b
                      ($dData1 :: Data.Data.Data d)
                      (ds1 :: Data.Functor.Identity.Identity (d -> b))
                      (x :: d) ->
                    ds1 `cast` (Data.Functor.Identity.N:Identity[0] <d -> b>_R)
                      (ds @ d $dData1 x))
                     `cast`
                   (forall (d :: <*>_N) (b :: <*>_N).
                    <Data.Data.Data d>_R
                    ->_R <Data.Functor.Identity.Identity (d -> b)>_R
                    ->_R <d>_R
                    ->_R Sym (Data.Functor.Identity.N:Identity[0] <b>_R))
                   Language.Python.Common.AST.$fDataExpr7
                     `cast`
                   (forall (g :: <*>_N).
                    <g>_R ->_R Sym (Data.Functor.Identity.N:Identity[0] <g>_R))
                   x0) -}
09769628e2d71c5134a0e408c8e8474b
  $fDataHandler2 :: [GHC.Fingerprint.Type.Fingerprint]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Fingerprint.Type.Fingerprint
                   Language.Python.Common.AST.$fDataHandler3
                   Language.Python.Common.AST.$fDataExpr9) -}
a0adf35fe0dc1d5cf2b8fc09b77c7316
  $fDataHandler3 :: GHC.Fingerprint.Type.Fingerprint
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Fingerprint.Type.Fingerprint
                   4549164774891116280##
                   11149423908520546248##) -}
abdc9f1259a715e35c32c0aeb3e40411
  $fDataHandler4 :: Data.Data.DataRep
  {- Strictness: m1,
     Unfolding: (Data.Data.AlgRep
                   Language.Python.Common.AST.$fDataHandler5) -}
5031ed472b936cec05732bb273ae0519
  $fDataHandler5 :: [Data.Data.Constr]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Data.Data.Constr
                   Language.Python.Common.AST.$cHandler
                   (GHC.Types.[] @ Data.Data.Constr)) -}
e577690a69a26b089d8d9780745e2b65
  $fDataHandler6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.Python.Common.AST.$tcHandler2) -}
cf431e64d114ff48b3a5eb8fda819c32
  $fDataHandler7 :: GHC.Fingerprint.Type.Fingerprint
  {- Unfolding: (case Language.Python.Common.AST.$fDataHandler_a3 of wild { Data.Typeable.Internal.TrTyCon dt dt1 ds1 ds2 ->
                 GHC.Fingerprint.Type.Fingerprint dt dt1 }) -}
cf431e64d114ff48b3a5eb8fda819c32
  $fDataHandler_$cdataCast1 ::
    Data.Data.Data annot =>
    forall (t :: * -> *) (c :: * -> *).
    Data.Typeable.Internal.Typeable t =>
    (forall d. Data.Data.Data d => c (t d))
    -> GHC.Base.Maybe (c (Language.Python.Common.AST.Handler annot))
  {- Arity: 2, Strictness: <L,U><L,1*U>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   @ t :: * -> *
                   @ c :: * -> *
                   ($dTypeable :: Data.Typeable.Internal.Typeable t) ->
                 let {
                   lvl447 :: GHC.Base.Maybe
                               (t Data.Type.Equality.:~~: Language.Python.Common.AST.Handler)
                   = Data.Typeable.Internal.eqTypeRep
                       @ (* -> *)
                       @ (* -> *)
                       @ t
                       @ Language.Python.Common.AST.Handler
                       $dTypeable
                         `cast`
                       (Data.Typeable.Internal.N:Typeable[0] <* -> *>_N <t>_N)
                       Language.Python.Common.AST.$fDataHandler_a3
                 } in
                 \ (f12 :: forall d. Data.Data.Data d => c (t d)) ->
                 case lvl447 of wild {
                   GHC.Base.Nothing
                   -> GHC.Base.Nothing
                        @ (c (Language.Python.Common.AST.Handler annot1))
                   GHC.Base.Just ds
                   -> case ds of wild1 { Data.Type.Equality.HRefl cobox cobox1 ->
                      GHC.Base.Just
                        @ (c (Language.Python.Common.AST.Handler annot1))
                        (f12 @ annot1 $dData)
                          `cast`
                        (<c>_R (Sym cobox1 <annot1>_N)) } }) -}
cf431e64d114ff48b3a5eb8fda819c32
  $fDataHandler_$cgfoldl ::
    Data.Data.Data annot =>
    forall (c :: * -> *).
    (forall d b. Data.Data.Data d => c (d -> b) -> d -> c b)
    -> (forall g. g -> c g)
    -> Language.Python.Common.AST.Handler annot
    -> c (Language.Python.Common.AST.Handler annot)
  {- Arity: 1, Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   @ c :: * -> * ->
                 let {
                   $dData1 :: Data.Data.Data
                                (Language.Python.Common.AST.ExceptClause annot1)
                   = Language.Python.Common.AST.$fDataExceptClause @ annot1 $dData
                 } in
                 let {
                   $dData2 :: Data.Data.Data
                                (Language.Python.Common.AST.Statement annot1)
                   = Language.Python.Common.AST.$fDataStatement @ annot1 $dData
                 } in
                 let {
                   $dData3 :: Data.Data.Data (Language.Python.Common.AST.Suite annot1)
                   = Data.Data.$fData[]
                       @ (Language.Python.Common.AST.Statement annot1)
                       $dData2
                 } in
                 \ (k :: forall d b. Data.Data.Data d => c (d -> b) -> d -> c b)
                   (z :: forall g. g -> c g)
                   (ds :: Language.Python.Common.AST.Handler annot1) ->
                 case ds of wild { Language.Python.Common.AST.Handler a1 a2 a3 ->
                 k @ annot1
                   @ (Language.Python.Common.AST.Handler annot1)
                   $dData
                   (k @ (Language.Python.Common.AST.Suite annot1)
                      @ (annot1 -> Language.Python.Common.AST.Handler annot1)
                      $dData3
                      (k @ (Language.Python.Common.AST.ExceptClause annot1)
                         @ (Language.Python.Common.AST.Suite annot1
                            -> annot1 -> Language.Python.Common.AST.Handler annot1)
                         $dData1
                         (z @ (Language.Python.Common.AST.ExceptClause annot1
                               -> Language.Python.Common.AST.Suite annot1
                               -> annot1
                               -> Language.Python.Common.AST.Handler annot1)
                            (Language.Python.Common.AST.Handler @ annot1))
                         a1)
                      a2)
                   a3 }) -}
cf431e64d114ff48b3a5eb8fda819c32
  $fDataHandler_$cgmapM ::
    Data.Data.Data annot =>
    forall (m :: * -> *).
    GHC.Base.Monad m =>
    (forall d. Data.Data.Data d => d -> m d)
    -> Language.Python.Common.AST.Handler annot
    -> m (Language.Python.Common.AST.Handler annot)
  {- Arity: 3,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,U(A,C(C1(U)),A,U,A)><L,C(C1(U))>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   @ m :: * -> *
                   ($dMonad :: GHC.Base.Monad m)
                   (ds :: forall d. Data.Data.Data d => d -> m d) ->
                 Language.Python.Common.AST.$fDataHandler_$cgfoldl
                   @ annot1
                   $dData
                   @ m
                   (\ @ d
                      @ b
                      ($dData1 :: Data.Data.Data d)
                      (c :: m (d -> b))
                      (x :: d) ->
                    let {
                      lvl447 :: m d = ds @ d $dData1 x
                    } in
                    GHC.Base.>>=
                      @ m
                      $dMonad
                      @ (d -> b)
                      @ b
                      c
                      (\ (c' :: d -> b) ->
                       GHC.Base.>>=
                         @ m
                         $dMonad
                         @ d
                         @ b
                         lvl447
                         (\ (x' :: d) -> GHC.Base.return @ m $dMonad @ b (c' x'))))
                   (\ @ g -> GHC.Base.return @ m $dMonad @ g)) -}
cf431e64d114ff48b3a5eb8fda819c32
  $fDataHandler_$cgmapMo ::
    Data.Data.Data annot =>
    forall (m :: * -> *).
    GHC.Base.MonadPlus m =>
    (forall d. Data.Data.Data d => d -> m d)
    -> Language.Python.Common.AST.Handler annot
    -> m (Language.Python.Common.AST.Handler annot)
  {- Arity: 4,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><S(LS(LC(C(S))LLL)LL),U(A,1*U(A,C(C1(U)),A,C(U),A),1*U,C(C1(U)))><L,C(C1(U))><L,U>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   @ m :: * -> *
                   ($dMonadPlus :: GHC.Base.MonadPlus m)
                   (ds :: forall d. Data.Data.Data d => d -> m d)
                   (eta :: Language.Python.Common.AST.Handler annot1) ->
                 let {
                   $dMonad :: GHC.Base.Monad m = GHC.Base.$p2MonadPlus @ m $dMonadPlus
                 } in
                 let {
                   lvl447 :: m (Language.Python.Common.AST.Handler annot1)
                   = GHC.Base.mzero
                       @ m
                       $dMonadPlus
                       @ (Language.Python.Common.AST.Handler annot1)
                 } in
                 GHC.Base.>>=
                   @ m
                   $dMonad
                   @ (Language.Python.Common.AST.Handler annot1, GHC.Types.Bool)
                   @ (Language.Python.Common.AST.Handler annot1)
                   (Language.Python.Common.AST.$fDataHandler_$cgfoldl
                      @ annot1
                      $dData
                      @ (Data.Data.Mp m)
                      (\ @ d
                         @ b
                         ($dData1 :: Data.Data.Data d)
                         (ds1 :: Data.Data.Mp m (d -> b))
                         (y :: d) ->
                       let {
                         lvl448 :: m d = ds @ d $dData1 y
                       } in
                       GHC.Base.>>=
                         @ m
                         $dMonad
                         @ (d -> b, GHC.Types.Bool)
                         @ (b, GHC.Types.Bool)
                         ds1 `cast` (Data.Data.N:Mp[0] <m>_R <d -> b>_N)
                         (\ (ds2 :: (d -> b, GHC.Types.Bool)) ->
                          case ds2 of wild { (,) h b1 ->
                          case b1 of wild1 {
                            GHC.Types.False
                            -> GHC.Base.mplus
                                 @ m
                                 $dMonadPlus
                                 @ (b, GHC.Types.Bool)
                                 (GHC.Base.>>=
                                    @ m
                                    $dMonad
                                    @ d
                                    @ (b, GHC.Types.Bool)
                                    lvl448
                                    (\ (y' :: d) ->
                                     GHC.Base.return
                                       @ m
                                       $dMonad
                                       @ (b, GHC.Types.Bool)
                                       (h y', GHC.Types.True)))
                                 (GHC.Base.return
                                    @ m
                                    $dMonad
                                    @ (b, GHC.Types.Bool)
                                    (h y, GHC.Types.False))
                            GHC.Types.True
                            -> GHC.Base.return
                                 @ m
                                 $dMonad
                                 @ (b, GHC.Types.Bool)
                                 (h y, GHC.Types.True) } }))
                        `cast`
                      (forall (d :: <*>_N) (b :: <*>_N).
                       <Data.Data.Data d>_R
                       ->_R <Data.Data.Mp m (d -> b)>_R
                       ->_R <d>_R
                       ->_R Sym (Data.Data.N:Mp[0] <m>_R <b>_N))
                      (\ @ g (g1 :: g) ->
                       GHC.Base.return
                         @ m
                         $dMonad
                         @ (g, GHC.Types.Bool)
                         (g1, GHC.Types.False))
                        `cast`
                      (forall (g :: <*>_N).
                       <g>_R ->_R Sym (Data.Data.N:Mp[0] <m>_R <g>_N))
                      eta)
                     `cast`
                   (Data.Data.N:Mp[0]
                        <m>_R <Language.Python.Common.AST.Handler annot1>_N)
                   (\ (ds1 :: (Language.Python.Common.AST.Handler annot1,
                               GHC.Types.Bool)) ->
                    case ds1 of wild { (,) x' b ->
                    case b of wild1 {
                      GHC.Types.False -> lvl447
                      GHC.Types.True
                      -> GHC.Base.return
                           @ m
                           $dMonad
                           @ (Language.Python.Common.AST.Handler annot1)
                           x' } })) -}
cf431e64d114ff48b3a5eb8fda819c32
  $fDataHandler_$cgmapMp ::
    Data.Data.Data annot =>
    forall (m :: * -> *).
    GHC.Base.MonadPlus m =>
    (forall d. Data.Data.Data d => d -> m d)
    -> Language.Python.Common.AST.Handler annot
    -> m (Language.Python.Common.AST.Handler annot)
  {- Arity: 4,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><S(LS(LC(C(S))LLL)LL),U(A,1*U(A,C(C1(U)),A,C(U),A),1*U,C(C1(U)))><L,C(C1(U))><L,U>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   @ m :: * -> *
                   ($dMonadPlus :: GHC.Base.MonadPlus m)
                   (ds :: forall d. Data.Data.Data d => d -> m d)
                   (eta :: Language.Python.Common.AST.Handler annot1) ->
                 let {
                   $dMonad :: GHC.Base.Monad m = GHC.Base.$p2MonadPlus @ m $dMonadPlus
                 } in
                 let {
                   lvl447 :: m (Language.Python.Common.AST.Handler annot1)
                   = GHC.Base.mzero
                       @ m
                       $dMonadPlus
                       @ (Language.Python.Common.AST.Handler annot1)
                 } in
                 GHC.Base.>>=
                   @ m
                   $dMonad
                   @ (Language.Python.Common.AST.Handler annot1, GHC.Types.Bool)
                   @ (Language.Python.Common.AST.Handler annot1)
                   (Language.Python.Common.AST.$fDataHandler_$cgfoldl
                      @ annot1
                      $dData
                      @ (Data.Data.Mp m)
                      (\ @ d
                         @ b
                         ($dData1 :: Data.Data.Data d)
                         (ds1 :: Data.Data.Mp m (d -> b))
                         (y :: d) ->
                       let {
                         lvl448 :: m d = ds @ d $dData1 y
                       } in
                       GHC.Base.>>=
                         @ m
                         $dMonad
                         @ (d -> b, GHC.Types.Bool)
                         @ (b, GHC.Types.Bool)
                         ds1 `cast` (Data.Data.N:Mp[0] <m>_R <d -> b>_N)
                         (\ (ds2 :: (d -> b, GHC.Types.Bool)) ->
                          case ds2 of wild { (,) h b1 ->
                          GHC.Base.mplus
                            @ m
                            $dMonadPlus
                            @ (b, GHC.Types.Bool)
                            (GHC.Base.>>=
                               @ m
                               $dMonad
                               @ d
                               @ (b, GHC.Types.Bool)
                               lvl448
                               (\ (y' :: d) ->
                                GHC.Base.return
                                  @ m
                                  $dMonad
                                  @ (b, GHC.Types.Bool)
                                  (h y', GHC.Types.True)))
                            (GHC.Base.return @ m $dMonad @ (b, GHC.Types.Bool) (h y, b1)) }))
                        `cast`
                      (forall (d :: <*>_N) (b :: <*>_N).
                       <Data.Data.Data d>_R
                       ->_R <Data.Data.Mp m (d -> b)>_R
                       ->_R <d>_R
                       ->_R Sym (Data.Data.N:Mp[0] <m>_R <b>_N))
                      (\ @ g (g1 :: g) ->
                       GHC.Base.return
                         @ m
                         $dMonad
                         @ (g, GHC.Types.Bool)
                         (g1, GHC.Types.False))
                        `cast`
                      (forall (g :: <*>_N).
                       <g>_R ->_R Sym (Data.Data.N:Mp[0] <m>_R <g>_N))
                      eta)
                     `cast`
                   (Data.Data.N:Mp[0]
                        <m>_R <Language.Python.Common.AST.Handler annot1>_N)
                   (\ (ds1 :: (Language.Python.Common.AST.Handler annot1,
                               GHC.Types.Bool)) ->
                    case ds1 of wild { (,) x' b ->
                    case b of wild1 {
                      GHC.Types.False -> lvl447
                      GHC.Types.True
                      -> GHC.Base.return
                           @ m
                           $dMonad
                           @ (Language.Python.Common.AST.Handler annot1)
                           x' } })) -}
cf431e64d114ff48b3a5eb8fda819c32
  $fDataHandler_$cgmapQ ::
    Data.Data.Data annot =>
    forall u.
    (forall d. Data.Data.Data d => d -> u)
    -> Language.Python.Common.AST.Handler annot -> [u]
  {- Arity: 3,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,C(C1(U))><L,U>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   @ u
                   (ds :: forall d. Data.Data.Data d => d -> u)
                   (x0 :: Language.Python.Common.AST.Handler annot1) ->
                 (Language.Python.Common.AST.$fDataHandler_$cgfoldl
                    @ annot1
                    $dData
                    @ (Data.Data.Qr [u])
                    (\ @ d
                       @ b
                       ($dData1 :: Data.Data.Data d)
                       (ds1 :: Data.Data.Qr [u] (d -> b))
                       (x :: d)
                       (r1 :: [u]) ->
                     ds1 `cast` (Data.Data.N:Qr[0] <*>_N <[u]>_R <d -> b>_P)
                       (GHC.Types.: @ u (ds @ d $dData1 x) r1))
                      `cast`
                    (forall (d :: <*>_N) (b :: <*>_N).
                     <Data.Data.Data d>_R
                     ->_R <Data.Data.Qr [u] (d -> b)>_R
                     ->_R <d>_R
                     ->_R Sym (Data.Data.N:Qr[0] <*>_N <[u]>_R <b>_P))
                    (Language.Python.Common.AST.$fDataExpr4 @ u)
                      `cast`
                    (forall (g :: <*>_N).
                     <g>_R ->_R Sym (Data.Data.N:Qr[0] <*>_N <[u]>_R <g>_P))
                    x0)
                   `cast`
                 (Data.Data.N:Qr[0]
                      <*>_N <[u]>_R <Language.Python.Common.AST.Handler annot1>_P)
                   (GHC.Types.[] @ u)) -}
cf431e64d114ff48b3a5eb8fda819c32
  $fDataHandler_$cgmapQi ::
    Data.Data.Data annot =>
    forall u.
    GHC.Types.Int
    -> (forall d. Data.Data.Data d => d -> u)
    -> Language.Python.Common.AST.Handler annot
    -> u
  {- Arity: 4,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,U(U)><L,C(C1(U))><L,U>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   @ u
                   (ds :: GHC.Types.Int)
                   (ds1 :: forall d. Data.Data.Data d => d -> u)
                   (x :: Language.Python.Common.AST.Handler annot1) ->
                 case Language.Python.Common.AST.$fDataHandler_$cgfoldl
                        @ annot1
                        $dData
                        @ (Data.Data.Qi u)
                        (\ @ d
                           @ b
                           ($dData1 :: Data.Data.Data d)
                           (ds2 :: Data.Data.Qi u (d -> b))
                           (a2 :: d) ->
                         case ds2 of wild { Data.Data.Qi i' q ->
                         Data.Data.Qi
                           @ *
                           @ u
                           @ b
                           (case i' of wild1 { GHC.Types.I# x1 ->
                            GHC.Types.I# (GHC.Prim.+# x1 1#) })
                           (case ds of wild1 { GHC.Types.I# x1 ->
                            case i' of wild2 { GHC.Types.I# y ->
                            case GHC.Prim.tagToEnum#
                                   @ GHC.Types.Bool
                                   (GHC.Prim.==# x1 y) of wild3 {
                              GHC.Types.False -> q
                              GHC.Types.True -> GHC.Base.Just @ u (ds1 @ d $dData1 a2) } } }) })
                        (Language.Python.Common.AST.$fDataExpr1 @ u)
                        x of wild { Data.Data.Qi ds2 q ->
                 Data.Maybe.fromJust @ u q }) -}
cf431e64d114ff48b3a5eb8fda819c32
  $fDataHandler_$cgmapQl ::
    Data.Data.Data annot =>
    forall r r'.
    (r -> r' -> r)
    -> r
    -> (forall d. Data.Data.Data d => d -> r')
    -> Language.Python.Common.AST.Handler annot
    -> r
  {- Arity: 4,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,C(C1(U))><L,U><L,C(C1(U))>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   @ r
                   @ r'
                   (ds :: r -> r' -> r)
                   (ds1 :: r)
                   (ds2 :: forall d. Data.Data.Data d => d -> r') ->
                 let {
                   g :: Language.Python.Common.AST.Handler annot1
                        -> Data.Functor.Const.Const
                             r (Language.Python.Common.AST.Handler annot1)
                   = Language.Python.Common.AST.$fDataHandler_$cgfoldl
                       @ annot1
                       $dData
                       @ (Data.Functor.Const.Const r)
                       (\ @ d
                          @ b
                          ($dData1 :: Data.Data.Data d)
                          (c :: Data.Functor.Const.Const r (d -> b))
                          (x :: d) ->
                        ds
                          c `cast` (Data.Functor.Const.N:Const[0] <*>_N <r>_R <d -> b>_P)
                          (ds2 @ d $dData1 x))
                         `cast`
                       (forall (d :: <*>_N) (b :: <*>_N).
                        <Data.Data.Data d>_R
                        ->_R <Data.Functor.Const.Const r (d -> b)>_R
                        ->_R <d>_R
                        ->_R Sym (Data.Functor.Const.N:Const[0] <*>_N <r>_R <b>_P))
                       (\ @ g1 (ds3 :: g1) -> ds1)
                         `cast`
                       (forall (g1 :: <*>_N).
                        <g1>_R ->_R Sym (Data.Functor.Const.N:Const[0] <*>_N <r>_R <g1>_P))
                 } in
                 (\ (x :: Language.Python.Common.AST.Handler annot1) -> g x)
                   `cast`
                 (<Language.Python.Common.AST.Handler annot1>_R
                  ->_R Data.Functor.Const.N:Const[0]
                           <*>_N <r>_R <Language.Python.Common.AST.Handler annot1>_P)) -}
cf431e64d114ff48b3a5eb8fda819c32
  $fDataHandler_$cgmapQr ::
    Data.Data.Data annot =>
    forall r r'.
    (r' -> r -> r)
    -> r
    -> (forall d. Data.Data.Data d => d -> r')
    -> Language.Python.Common.AST.Handler annot
    -> r
  {- Arity: 5,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,C(C1(U))><L,U><L,C(C1(U))><L,U>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   @ r
                   @ r'
                   (ds :: r' -> r -> r)
                   (ds1 :: r)
                   (ds2 :: forall d. Data.Data.Data d => d -> r')
                   (x0 :: Language.Python.Common.AST.Handler annot1) ->
                 (Language.Python.Common.AST.$fDataHandler_$cgfoldl
                    @ annot1
                    $dData
                    @ (Data.Data.Qr r)
                    (\ @ d
                       @ b
                       ($dData1 :: Data.Data.Data d)
                       (ds3 :: Data.Data.Qr r (d -> b))
                       (x :: d)
                       (r1 :: r) ->
                     ds3 `cast` (Data.Data.N:Qr[0] <*>_N <r>_R <d -> b>_P)
                       (ds (ds2 @ d $dData1 x) r1))
                      `cast`
                    (forall (d :: <*>_N) (b :: <*>_N).
                     <Data.Data.Data d>_R
                     ->_R <Data.Data.Qr r (d -> b)>_R
                     ->_R <d>_R
                     ->_R Sym (Data.Data.N:Qr[0] <*>_N <r>_R <b>_P))
                    (Language.Python.Common.AST.$fDataExpr5 @ r)
                      `cast`
                    (forall (g :: <*>_N).
                     <g>_R ->_R Sym (Data.Data.N:Qr[0] <*>_N <r>_R <g>_P))
                    x0)
                   `cast`
                 (Data.Data.N:Qr[0]
                      <*>_N <r>_R <Language.Python.Common.AST.Handler annot1>_P)
                   ds1) -}
cf431e64d114ff48b3a5eb8fda819c32
  $fDataHandler_$cgunfold ::
    Data.Data.Data annot =>
    forall (c :: * -> *).
    (forall b r. Data.Data.Data b => c (b -> r) -> c r)
    -> (forall r. r -> c r)
    -> Data.Data.Constr
    -> c (Language.Python.Common.AST.Handler annot)
  {- Arity: 1, Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   @ c :: * -> * ->
                 let {
                   $dData1 :: Data.Data.Data
                                (Language.Python.Common.AST.ExceptClause annot1)
                   = Language.Python.Common.AST.$fDataExceptClause @ annot1 $dData
                 } in
                 let {
                   $dData2 :: Data.Data.Data
                                (Language.Python.Common.AST.Statement annot1)
                   = Language.Python.Common.AST.$fDataStatement @ annot1 $dData
                 } in
                 let {
                   $dData3 :: Data.Data.Data (Language.Python.Common.AST.Suite annot1)
                   = Data.Data.$fData[]
                       @ (Language.Python.Common.AST.Statement annot1)
                       $dData2
                 } in
                 \ (k :: forall b r. Data.Data.Data b => c (b -> r) -> c r)
                   (z :: forall r. r -> c r)
                   (ds :: Data.Data.Constr) ->
                 k @ annot1
                   @ (Language.Python.Common.AST.Handler annot1)
                   $dData
                   (k @ (Language.Python.Common.AST.Suite annot1)
                      @ (annot1 -> Language.Python.Common.AST.Handler annot1)
                      $dData3
                      (k @ (Language.Python.Common.AST.ExceptClause annot1)
                         @ (Language.Python.Common.AST.Suite annot1
                            -> annot1 -> Language.Python.Common.AST.Handler annot1)
                         $dData1
                         (z @ (Language.Python.Common.AST.ExceptClause annot1
                               -> Language.Python.Common.AST.Suite annot1
                               -> annot1
                               -> Language.Python.Common.AST.Handler annot1)
                            (Language.Python.Common.AST.Handler @ annot1))))) -}
cf431e64d114ff48b3a5eb8fda819c32
  $fDataHandler_$cp1Data ::
    Data.Data.Data annot =>
    Data.Typeable.Internal.Typeable
      (Language.Python.Common.AST.Handler annot)
  {- Arity: 1, Strictness: <L,1*U(1*U,A,A,A,A,A,A,A,A,A,A,A,A,A,A)>,
     Unfolding: (\ @ annot1 ($dData :: Data.Data.Data annot1) ->
                 let {
                   b1 :: Data.Typeable.Internal.Typeable annot1
                   = Data.Data.$p1Data @ annot1 $dData
                 } in
                 case GHC.Magic.noinline
                        @ ([GHC.Fingerprint.Type.Fingerprint]
                           -> GHC.Fingerprint.Type.Fingerprint)
                        GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           Language.Python.Common.AST.$fDataHandler7
                           (GHC.Types.:
                              @ GHC.Fingerprint.Type.Fingerprint
                              (Data.Typeable.Internal.typeRepFingerprint
                                 @ *
                                 @ annot1
                                 b1 `cast` (Data.Typeable.Internal.N:Typeable[0] <*>_N <annot1>_N))
                              (GHC.Types.[]
                                 @ GHC.Fingerprint.Type.Fingerprint))) of dt { GHC.Fingerprint.Type.Fingerprint dt1 dt2 ->
                 (Data.Typeable.Internal.TrApp
                    @ *
                    @ (Language.Python.Common.AST.Handler annot1)
                    @ *
                    @ Language.Python.Common.AST.Handler
                    @ annot1
                    @~ <Language.Python.Common.AST.Handler annot1>_N
                    dt1
                    dt2
                    Language.Python.Common.AST.$fDataHandler_a3
                    b1 `cast` (Data.Typeable.Internal.N:Typeable[0] <*>_N <annot1>_N))
                   `cast`
                 (Sym (Data.Typeable.Internal.N:Typeable[0]) <*>_N <Language.Python.Common.AST.Handler
                                                                      annot1>_N) }) -}
cf431e64d114ff48b3a5eb8fda819c32
  $fDataHandler_a3 ::
    Data.Typeable.Internal.TypeRep Language.Python.Common.AST.Handler
  {- Unfolding: (case GHC.Magic.noinline
                        @ ([GHC.Fingerprint.Type.Fingerprint]
                           -> GHC.Fingerprint.Type.Fingerprint)
                        GHC.Fingerprint.fingerprintFingerprints
                        Language.Python.Common.AST.$fDataHandler2 of dt { GHC.Fingerprint.Type.Fingerprint dt1 dt2 ->
                 Data.Typeable.Internal.TrTyCon
                   @ (* -> *)
                   @ Language.Python.Common.AST.Handler
                   dt1
                   dt2
                   Language.Python.Common.AST.$tcHandler
                   (GHC.Types.[] @ Data.Typeable.Internal.SomeTypeRep) }) -}
6aab1d6f902c3e0dbc09c99c8605e197
  $fDataIdent ::
    Data.Data.Data annot =>
    Data.Data.Data (Language.Python.Common.AST.Ident annot)
  DFunId
  {- Arity: 1, Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)>,
     Inline: CONLIKE,
     Unfolding: DFun: @ annot1 (v :: Data.Data.Data annot1).
                  @ (Language.Python.Common.AST.Ident annot1)
                  (Language.Python.Common.AST.$fDataIdent_$cp1Data @ annot1 v)
                  (Language.Python.Common.AST.$fDataIdent_$cgfoldl @ annot1 v)
                  (Language.Python.Common.AST.$fDataIdent_$cgunfold @ annot1 v)
                  (\ (ds :: Language.Python.Common.AST.Ident annot1) ->
                   case ds of wild { Language.Python.Common.AST.Ident ds1 ds2 ->
                   Language.Python.Common.AST.$cIdent })
                  (\ (ds :: Language.Python.Common.AST.Ident annot1) ->
                   Language.Python.Common.AST.$tIdent)
                  (Language.Python.Common.AST.$fDataIdent_$cdataCast1 @ annot1 v)
                  (\ @ t :: * -> * -> *
                     @ c :: * -> *
                     ($dTypeable :: Data.Typeable.Internal.Typeable t)
                     (ds :: forall d e.
                            (Data.Data.Data d, Data.Data.Data e) =>
                            c (t d e)) ->
                   GHC.Base.Nothing @ (c (Language.Python.Common.AST.Ident annot1)))
                  (Language.Python.Common.AST.$fDataIdent2 @ annot1 v)
                    `cast`
                  (<forall b. Data.Data.Data b => b -> b>_R
                   ->_R <Language.Python.Common.AST.Ident annot1>_R
                   ->_R Data.Functor.Identity.N:Identity[0]
                            <Language.Python.Common.AST.Ident annot1>_R)
                  (Language.Python.Common.AST.$fDataIdent1 @ annot1 v)
                    `cast`
                  (forall (r :: <*>_N) (r' :: <*>_N).
                   <r -> r' -> r>_R
                   ->_R <r>_R
                   ->_R <forall d. Data.Data.Data d => d -> r'>_R
                   ->_R <Language.Python.Common.AST.Ident annot1>_R
                   ->_R Data.Functor.Const.N:Const[0]
                            <*>_N <r>_R <Language.Python.Common.AST.Ident annot1>_P)
                  (Language.Python.Common.AST.$fDataIdent_$cgmapQr @ annot1 v)
                  (Language.Python.Common.AST.$fDataIdent_$cgmapQ @ annot1 v)
                  (Language.Python.Common.AST.$fDataIdent_$cgmapQi @ annot1 v)
                  (Language.Python.Common.AST.$fDataIdent_$cgmapM @ annot1 v)
                  (Language.Python.Common.AST.$fDataIdent_$cgmapMp @ annot1 v)
                  (Language.Python.Common.AST.$fDataIdent_$cgmapMo @ annot1 v) -}
6aab1d6f902c3e0dbc09c99c8605e197
  $fDataIdent1 ::
    Data.Data.Data annot =>
    forall r r'.
    (r -> r' -> r)
    -> r
    -> (forall d. Data.Data.Data d => d -> r')
    -> Language.Python.Common.AST.Ident annot
    -> Data.Functor.Const.Const
         r (Language.Python.Common.AST.Ident annot)
  {- Arity: 5,
     Strictness: <L,U><C(C(S)),C(C1(U))><L,U><L,C(C1(U))><S(SL),1*U(U,U)>,
     Inline: [0],
     Unfolding: InlineRule (5, True, False)
                (\ @ annot1
                   (w :: Data.Data.Data annot1)
                   @ r
                   @ r'
                   (w249 :: r -> r' -> r)
                   (w250 :: r)
                   (w251 :: forall d. Data.Data.Data d => d -> r')
                   (w252 :: Language.Python.Common.AST.Ident annot1) ->
                 case w252 of ww { Language.Python.Common.AST.Ident ww1 ww2 ->
                 (w249
                    (w249
                       w250
                       (w251 @ GHC.Base.String Data.Data.$fData[]_$s$fData[] ww1))
                    (w251 @ annot1 w ww2))
                   `cast`
                 (Sym (Data.Functor.Const.N:Const[0]
                           <*>_N <r>_R <Language.Python.Common.AST.Ident annot1>_P)) }) -}
6aab1d6f902c3e0dbc09c99c8605e197
  $fDataIdent2 ::
    Data.Data.Data annot =>
    (forall b. Data.Data.Data b => b -> b)
    -> Language.Python.Common.AST.Ident annot
    -> Data.Functor.Identity.Identity
         (Language.Python.Common.AST.Ident annot)
  {- Arity: 3, Strictness: <L,U><C(C(S)),C(C1(U))><S(SL),1*U(U,U)>m,
     Unfolding: InlineRule (3, True, False)
                (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   (ds :: forall b. Data.Data.Data b => b -> b)
                   (x0 :: Language.Python.Common.AST.Ident annot1) ->
                 case x0 of wild { Language.Python.Common.AST.Ident a1 a2 ->
                 case ds
                        @ GHC.Base.String
                        Data.Data.$fData[]_$s$fData[]
                        a1 of dt { DEFAULT ->
                 (Language.Python.Common.AST.Ident
                    @ annot1
                    dt
                    (ds @ annot1 $dData a2))
                   `cast`
                 (Sym (Data.Functor.Identity.N:Identity[0]
                           <Language.Python.Common.AST.Ident annot1>_R)) } }) -}
67b61d1f3c4635645a87494f3015c166
  $fDataIdent3 :: [GHC.Fingerprint.Type.Fingerprint]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Fingerprint.Type.Fingerprint
                   Language.Python.Common.AST.$fDataIdent4
                   Language.Python.Common.AST.$fDataExpr9) -}
8ea713e9735f1d361b792110168899b1
  $fDataIdent4 :: GHC.Fingerprint.Type.Fingerprint
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Fingerprint.Type.Fingerprint
                   4178918868776072306##
                   7904093417031114094##) -}
0ce5452f5d73ad0212bbec392268175f
  $fDataIdent5 :: Data.Data.DataRep
  {- Strictness: m1,
     Unfolding: (Data.Data.AlgRep
                   Language.Python.Common.AST.$fDataIdent6) -}
34b4e632b761a3a0355aa970a472cd5e
  $fDataIdent6 :: [Data.Data.Constr]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Data.Data.Constr
                   Language.Python.Common.AST.$cIdent
                   (GHC.Types.[] @ Data.Data.Constr)) -}
7a89cc056b0d52b71db969ccab7f475e
  $fDataIdent7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.Python.Common.AST.$tcIdent2) -}
6aab1d6f902c3e0dbc09c99c8605e197
  $fDataIdent8 :: GHC.Fingerprint.Type.Fingerprint
  {- Unfolding: (case Language.Python.Common.AST.$fDataIdent_a3 of wild { Data.Typeable.Internal.TrTyCon dt dt1 ds1 ds2 ->
                 GHC.Fingerprint.Type.Fingerprint dt dt1 }) -}
6aab1d6f902c3e0dbc09c99c8605e197
  $fDataIdent_$cdataCast1 ::
    Data.Data.Data annot =>
    forall (t :: * -> *) (c :: * -> *).
    Data.Typeable.Internal.Typeable t =>
    (forall d. Data.Data.Data d => c (t d))
    -> GHC.Base.Maybe (c (Language.Python.Common.AST.Ident annot))
  {- Arity: 2, Strictness: <L,U><L,1*U>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   @ t :: * -> *
                   @ c :: * -> *
                   ($dTypeable :: Data.Typeable.Internal.Typeable t) ->
                 let {
                   lvl447 :: GHC.Base.Maybe
                               (t Data.Type.Equality.:~~: Language.Python.Common.AST.Ident)
                   = Data.Typeable.Internal.eqTypeRep
                       @ (* -> *)
                       @ (* -> *)
                       @ t
                       @ Language.Python.Common.AST.Ident
                       $dTypeable
                         `cast`
                       (Data.Typeable.Internal.N:Typeable[0] <* -> *>_N <t>_N)
                       Language.Python.Common.AST.$fDataIdent_a3
                 } in
                 \ (f12 :: forall d. Data.Data.Data d => c (t d)) ->
                 case lvl447 of wild {
                   GHC.Base.Nothing
                   -> GHC.Base.Nothing @ (c (Language.Python.Common.AST.Ident annot1))
                   GHC.Base.Just ds
                   -> case ds of wild1 { Data.Type.Equality.HRefl cobox cobox1 ->
                      GHC.Base.Just
                        @ (c (Language.Python.Common.AST.Ident annot1))
                        (f12 @ annot1 $dData)
                          `cast`
                        (<c>_R (Sym cobox1 <annot1>_N)) } }) -}
6aab1d6f902c3e0dbc09c99c8605e197
  $fDataIdent_$cgfoldl ::
    Data.Data.Data annot =>
    forall (c :: * -> *).
    (forall d b. Data.Data.Data d => c (d -> b) -> d -> c b)
    -> (forall g. g -> c g)
    -> Language.Python.Common.AST.Ident annot
    -> c (Language.Python.Common.AST.Ident annot)
  {- Arity: 4,
     Strictness: <L,U><C(C(C(S))),C(C1(C1(U)))><L,1*C1(U)><S(SL),1*U(U,U)>,
     Unfolding: InlineRule (4, True, False)
                (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   @ c :: * -> *
                   (k :: forall d b. Data.Data.Data d => c (d -> b) -> d -> c b)
                   (z :: forall g. g -> c g)
                   (ds :: Language.Python.Common.AST.Ident annot1) ->
                 case ds of wild { Language.Python.Common.AST.Ident a1 a2 ->
                 k @ annot1
                   @ (Language.Python.Common.AST.Ident annot1)
                   $dData
                   (k @ GHC.Base.String
                      @ (annot1 -> Language.Python.Common.AST.Ident annot1)
                      Data.Data.$fData[]_$s$fData[]
                      (z @ (GHC.Base.String
                            -> annot1 -> Language.Python.Common.AST.Ident annot1)
                         (Language.Python.Common.AST.$WIdent @ annot1))
                      a1)
                   a2 }) -}
6aab1d6f902c3e0dbc09c99c8605e197
  $fDataIdent_$cgmapM ::
    Data.Data.Data annot =>
    forall (m :: * -> *).
    GHC.Base.Monad m =>
    (forall d. Data.Data.Data d => d -> m d)
    -> Language.Python.Common.AST.Ident annot
    -> m (Language.Python.Common.AST.Ident annot)
  {- Arity: 4,
     Strictness: <L,U><S(LC(C(S))LLL),U(A,C(C1(U)),A,C(U),A)><L,C(C1(U))><S(SL),1*U(U,U)>,
     Inline: [0],
     Unfolding: InlineRule (4, True, False)
                (\ @ annot1
                   (w :: Data.Data.Data annot1)
                   @ m :: * -> *
                   (w249 :: GHC.Base.Monad m)
                   (w250 :: forall d. Data.Data.Data d => d -> m d)
                   (w251 :: Language.Python.Common.AST.Ident annot1) ->
                 case w251 of ww { Language.Python.Common.AST.Ident ww1 ww2 ->
                 Language.Python.Common.AST.$w$cgmapM
                   @ annot1
                   w
                   @ m
                   w249
                   w250
                   ww1
                   ww2 }) -}
6aab1d6f902c3e0dbc09c99c8605e197
  $fDataIdent_$cgmapMo ::
    Data.Data.Data annot =>
    forall (m :: * -> *).
    GHC.Base.MonadPlus m =>
    (forall d. Data.Data.Data d => d -> m d)
    -> Language.Python.Common.AST.Ident annot
    -> m (Language.Python.Common.AST.Ident annot)
  {- Arity: 4,
     Strictness: <L,U><S(LS(LC(C(S))LLL)LL),U(A,1*U(A,C(C1(U)),A,C(U),A),1*U,C(C1(U)))><L,C(C1(U))><L,1*U(U,U)> -}
6aab1d6f902c3e0dbc09c99c8605e197
  $fDataIdent_$cgmapMp ::
    Data.Data.Data annot =>
    forall (m :: * -> *).
    GHC.Base.MonadPlus m =>
    (forall d. Data.Data.Data d => d -> m d)
    -> Language.Python.Common.AST.Ident annot
    -> m (Language.Python.Common.AST.Ident annot)
  {- Arity: 4,
     Strictness: <L,U><S(LS(LC(C(S))LLL)LL),U(A,1*U(A,C(C1(U)),A,C(U),A),1*U,C(C1(U)))><L,C(C1(U))><L,1*U(U,U)> -}
6aab1d6f902c3e0dbc09c99c8605e197
  $fDataIdent_$cgmapQ ::
    Data.Data.Data annot =>
    forall u.
    (forall d. Data.Data.Data d => d -> u)
    -> Language.Python.Common.AST.Ident annot -> [u]
  {- Arity: 3, Strictness: <L,U><L,C(C1(U))><S(SL),1*U(U,U)>m2,
     Unfolding: InlineRule (3, True, False)
                (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   @ u
                   (ds :: forall d. Data.Data.Data d => d -> u)
                   (x0 :: Language.Python.Common.AST.Ident annot1) ->
                 case x0 of wild { Language.Python.Common.AST.Ident a1 a2 ->
                 GHC.Types.:
                   @ u
                   (ds @ GHC.Base.String Data.Data.$fData[]_$s$fData[] a1)
                   (GHC.Types.: @ u (ds @ annot1 $dData a2) (GHC.Types.[] @ u)) }) -}
6aab1d6f902c3e0dbc09c99c8605e197
  $fDataIdent_$cgmapQi ::
    Data.Data.Data annot =>
    forall u.
    GHC.Types.Int
    -> (forall d. Data.Data.Data d => d -> u)
    -> Language.Python.Common.AST.Ident annot
    -> u
  {- Arity: 4,
     Strictness: <L,U><S(S),1*U(1*U)><C(C(S)),1*C1(C1(U))><S(SL),1*U(U,U)>,
     Unfolding: InlineRule (4, True, False)
                (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   @ u
                   (ds :: GHC.Types.Int)
                   (ds1 :: forall d. Data.Data.Data d => d -> u)
                   (x :: Language.Python.Common.AST.Ident annot1) ->
                 case x of wild { Language.Python.Common.AST.Ident a1 a2 ->
                 case ds of wild1 { GHC.Types.I# x1 ->
                 case x1 of wild2 {
                   DEFAULT -> Data.Maybe.fromJust1 @ u
                   0# -> ds1 @ GHC.Base.String Data.Data.$fData[]_$s$fData[] a1
                   1# -> ds1 @ annot1 $dData a2 } } }) -}
6aab1d6f902c3e0dbc09c99c8605e197
  $fDataIdent_$cgmapQr ::
    Data.Data.Data annot =>
    forall r r'.
    (r' -> r -> r)
    -> r
    -> (forall d. Data.Data.Data d => d -> r')
    -> Language.Python.Common.AST.Ident annot
    -> r
  {- Arity: 5,
     Strictness: <L,U><C(C(S)),C(C1(U))><L,U><L,C(C1(U))><S(SL),1*U(U,U)>,
     Inline: [0],
     Unfolding: InlineRule (5, True, False)
                (\ @ annot1
                   (w :: Data.Data.Data annot1)
                   @ r
                   @ r'
                   (w249 :: r' -> r -> r)
                   (w250 :: r)
                   (w251 :: forall d. Data.Data.Data d => d -> r')
                   (w252 :: Language.Python.Common.AST.Ident annot1) ->
                 case w252 of ww { Language.Python.Common.AST.Ident ww1 ww2 ->
                 w249
                   (w251 @ GHC.Base.String Data.Data.$fData[]_$s$fData[] ww1)
                   (w249 (w251 @ annot1 w ww2) w250) }) -}
6aab1d6f902c3e0dbc09c99c8605e197
  $fDataIdent_$cgunfold ::
    Data.Data.Data annot =>
    forall (c :: * -> *).
    (forall b r. Data.Data.Data b => c (b -> r) -> c r)
    -> (forall r. r -> c r)
    -> Data.Data.Constr
    -> c (Language.Python.Common.AST.Ident annot)
  {- Arity: 4, Strictness: <L,U><C(C(S)),C(C1(U))><L,1*C1(U)><L,A>,
     Unfolding: InlineRule (4, True, False)
                (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   @ c :: * -> *
                   (k :: forall b r. Data.Data.Data b => c (b -> r) -> c r)
                   (z :: forall r. r -> c r)
                   (ds :: Data.Data.Constr) ->
                 k @ annot1
                   @ (Language.Python.Common.AST.Ident annot1)
                   $dData
                   (k @ GHC.Base.String
                      @ (annot1 -> Language.Python.Common.AST.Ident annot1)
                      Data.Data.$fData[]_$s$fData[]
                      (z @ (GHC.Base.String
                            -> annot1 -> Language.Python.Common.AST.Ident annot1)
                         (Language.Python.Common.AST.$WIdent @ annot1)))) -}
6aab1d6f902c3e0dbc09c99c8605e197
  $fDataIdent_$cp1Data ::
    Data.Data.Data annot =>
    Data.Typeable.Internal.Typeable
      (Language.Python.Common.AST.Ident annot)
  {- Arity: 1, Strictness: <L,1*U(1*U,A,A,A,A,A,A,A,A,A,A,A,A,A,A)>,
     Unfolding: (\ @ annot1 ($dData :: Data.Data.Data annot1) ->
                 let {
                   b1 :: Data.Typeable.Internal.Typeable annot1
                   = Data.Data.$p1Data @ annot1 $dData
                 } in
                 case GHC.Magic.noinline
                        @ ([GHC.Fingerprint.Type.Fingerprint]
                           -> GHC.Fingerprint.Type.Fingerprint)
                        GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           Language.Python.Common.AST.$fDataIdent8
                           (GHC.Types.:
                              @ GHC.Fingerprint.Type.Fingerprint
                              (Data.Typeable.Internal.typeRepFingerprint
                                 @ *
                                 @ annot1
                                 b1 `cast` (Data.Typeable.Internal.N:Typeable[0] <*>_N <annot1>_N))
                              (GHC.Types.[]
                                 @ GHC.Fingerprint.Type.Fingerprint))) of dt { GHC.Fingerprint.Type.Fingerprint dt1 dt2 ->
                 (Data.Typeable.Internal.TrApp
                    @ *
                    @ (Language.Python.Common.AST.Ident annot1)
                    @ *
                    @ Language.Python.Common.AST.Ident
                    @ annot1
                    @~ <Language.Python.Common.AST.Ident annot1>_N
                    dt1
                    dt2
                    Language.Python.Common.AST.$fDataIdent_a3
                    b1 `cast` (Data.Typeable.Internal.N:Typeable[0] <*>_N <annot1>_N))
                   `cast`
                 (Sym (Data.Typeable.Internal.N:Typeable[0]) <*>_N <Language.Python.Common.AST.Ident
                                                                      annot1>_N) }) -}
6aab1d6f902c3e0dbc09c99c8605e197
  $fDataIdent_a3 ::
    Data.Typeable.Internal.TypeRep Language.Python.Common.AST.Ident
  {- Unfolding: (case GHC.Magic.noinline
                        @ ([GHC.Fingerprint.Type.Fingerprint]
                           -> GHC.Fingerprint.Type.Fingerprint)
                        GHC.Fingerprint.fingerprintFingerprints
                        Language.Python.Common.AST.$fDataIdent3 of dt { GHC.Fingerprint.Type.Fingerprint dt1 dt2 ->
                 Data.Typeable.Internal.TrTyCon
                   @ (* -> *)
                   @ Language.Python.Common.AST.Ident
                   dt1
                   dt2
                   Language.Python.Common.AST.$tcIdent
                   (GHC.Types.[] @ Data.Typeable.Internal.SomeTypeRep) }) -}
283607fc44cb0ad26a76914defc72d00
  $fDataImportItem ::
    Data.Data.Data annot =>
    Data.Data.Data (Language.Python.Common.AST.ImportItem annot)
  DFunId
  {- Arity: 1, Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)>,
     Inline: CONLIKE,
     Unfolding: DFun: @ annot1 (v :: Data.Data.Data annot1).
                  @ (Language.Python.Common.AST.ImportItem annot1)
                  (Language.Python.Common.AST.$fDataImportItem_$cp1Data @ annot1 v)
                  (Language.Python.Common.AST.$fDataImportItem_$cgfoldl @ annot1 v)
                  (Language.Python.Common.AST.$fDataImportItem_$cgunfold @ annot1 v)
                  (\ (ds :: Language.Python.Common.AST.ImportItem annot1) ->
                   case ds of wild { Language.Python.Common.AST.ImportItem ds1 ds2 ds3 ->
                   Language.Python.Common.AST.$cImportItem })
                  (\ (ds :: Language.Python.Common.AST.ImportItem annot1) ->
                   Language.Python.Common.AST.$tImportItem)
                  (Language.Python.Common.AST.$fDataImportItem_$cdataCast1
                     @ annot1
                     v)
                  (\ @ t :: * -> * -> *
                     @ c :: * -> *
                     ($dTypeable :: Data.Typeable.Internal.Typeable t)
                     (ds :: forall d e.
                            (Data.Data.Data d, Data.Data.Data e) =>
                            c (t d e)) ->
                   GHC.Base.Nothing
                     @ (c (Language.Python.Common.AST.ImportItem annot1)))
                  (Language.Python.Common.AST.$fDataImportItem1 @ annot1 v)
                    `cast`
                  (<forall b. Data.Data.Data b => b -> b>_R
                   ->_R <Language.Python.Common.AST.ImportItem annot1>_R
                   ->_R Data.Functor.Identity.N:Identity[0]
                            <Language.Python.Common.AST.ImportItem annot1>_R)
                  (Language.Python.Common.AST.$fDataImportItem_$cgmapQl @ annot1 v)
                  (Language.Python.Common.AST.$fDataImportItem_$cgmapQr @ annot1 v)
                  (Language.Python.Common.AST.$fDataImportItem_$cgmapQ @ annot1 v)
                  (Language.Python.Common.AST.$fDataImportItem_$cgmapQi @ annot1 v)
                  (Language.Python.Common.AST.$fDataImportItem_$cgmapM @ annot1 v)
                  (Language.Python.Common.AST.$fDataImportItem_$cgmapMp @ annot1 v)
                  (Language.Python.Common.AST.$fDataImportItem_$cgmapMo
                     @ annot1
                     v) -}
283607fc44cb0ad26a76914defc72d00
  $fDataImportItem1 ::
    Data.Data.Data annot =>
    (forall b. Data.Data.Data b => b -> b)
    -> Language.Python.Common.AST.ImportItem annot
    -> Data.Functor.Identity.Identity
         (Language.Python.Common.AST.ImportItem annot)
  {- Arity: 3,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,C(C1(U))><L,U>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   (ds :: forall b. Data.Data.Data b => b -> b)
                   (x0 :: Language.Python.Common.AST.ImportItem annot1) ->
                 Language.Python.Common.AST.$fDataImportItem_$cgfoldl
                   @ annot1
                   $dData
                   @ Data.Functor.Identity.Identity
                   (\ @ d
                      @ b
                      ($dData1 :: Data.Data.Data d)
                      (ds1 :: Data.Functor.Identity.Identity (d -> b))
                      (x :: d) ->
                    ds1 `cast` (Data.Functor.Identity.N:Identity[0] <d -> b>_R)
                      (ds @ d $dData1 x))
                     `cast`
                   (forall (d :: <*>_N) (b :: <*>_N).
                    <Data.Data.Data d>_R
                    ->_R <Data.Functor.Identity.Identity (d -> b)>_R
                    ->_R <d>_R
                    ->_R Sym (Data.Functor.Identity.N:Identity[0] <b>_R))
                   Language.Python.Common.AST.$fDataExpr7
                     `cast`
                   (forall (g :: <*>_N).
                    <g>_R ->_R Sym (Data.Functor.Identity.N:Identity[0] <g>_R))
                   x0) -}
7afd62f31a76a7ac0b6efa01f495de19
  $fDataImportItem2 :: [GHC.Fingerprint.Type.Fingerprint]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Fingerprint.Type.Fingerprint
                   Language.Python.Common.AST.$fDataImportItem3
                   Language.Python.Common.AST.$fDataExpr9) -}
6d55663987a0015cd4a5443f45f747c0
  $fDataImportItem3 :: GHC.Fingerprint.Type.Fingerprint
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Fingerprint.Type.Fingerprint
                   12057246179526076655##
                   11074786652000555012##) -}
f578c89a8c0c044ead9f6809b2b31abe
  $fDataImportItem4 :: Data.Data.DataRep
  {- Strictness: m1,
     Unfolding: (Data.Data.AlgRep
                   Language.Python.Common.AST.$fDataImportItem5) -}
24789911e1d71cbeb7ee6fd9e8e8869e
  $fDataImportItem5 :: [Data.Data.Constr]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Data.Data.Constr
                   Language.Python.Common.AST.$cImportItem
                   (GHC.Types.[] @ Data.Data.Constr)) -}
0b4feade5432b95b8838e05814fc47f1
  $fDataImportItem6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.Python.Common.AST.$tcImportItem2) -}
283607fc44cb0ad26a76914defc72d00
  $fDataImportItem7 :: GHC.Fingerprint.Type.Fingerprint
  {- Unfolding: (case Language.Python.Common.AST.$fDataImportItem_a3 of wild { Data.Typeable.Internal.TrTyCon dt dt1 ds1 ds2 ->
                 GHC.Fingerprint.Type.Fingerprint dt dt1 }) -}
283607fc44cb0ad26a76914defc72d00
  $fDataImportItem_$cdataCast1 ::
    Data.Data.Data annot =>
    forall (t :: * -> *) (c :: * -> *).
    Data.Typeable.Internal.Typeable t =>
    (forall d. Data.Data.Data d => c (t d))
    -> GHC.Base.Maybe (c (Language.Python.Common.AST.ImportItem annot))
  {- Arity: 2, Strictness: <L,U><L,1*U>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   @ t :: * -> *
                   @ c :: * -> *
                   ($dTypeable :: Data.Typeable.Internal.Typeable t) ->
                 let {
                   lvl447 :: GHC.Base.Maybe
                               (t Data.Type.Equality.:~~: Language.Python.Common.AST.ImportItem)
                   = Data.Typeable.Internal.eqTypeRep
                       @ (* -> *)
                       @ (* -> *)
                       @ t
                       @ Language.Python.Common.AST.ImportItem
                       $dTypeable
                         `cast`
                       (Data.Typeable.Internal.N:Typeable[0] <* -> *>_N <t>_N)
                       Language.Python.Common.AST.$fDataImportItem_a3
                 } in
                 \ (f12 :: forall d. Data.Data.Data d => c (t d)) ->
                 case lvl447 of wild {
                   GHC.Base.Nothing
                   -> GHC.Base.Nothing
                        @ (c (Language.Python.Common.AST.ImportItem annot1))
                   GHC.Base.Just ds
                   -> case ds of wild1 { Data.Type.Equality.HRefl cobox cobox1 ->
                      GHC.Base.Just
                        @ (c (Language.Python.Common.AST.ImportItem annot1))
                        (f12 @ annot1 $dData)
                          `cast`
                        (<c>_R (Sym cobox1 <annot1>_N)) } }) -}
283607fc44cb0ad26a76914defc72d00
  $fDataImportItem_$cgfoldl ::
    Data.Data.Data annot =>
    forall (c :: * -> *).
    (forall d b. Data.Data.Data d => c (d -> b) -> d -> c b)
    -> (forall g. g -> c g)
    -> Language.Python.Common.AST.ImportItem annot
    -> c (Language.Python.Common.AST.ImportItem annot)
  {- Arity: 1, Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   @ c :: * -> * ->
                 let {
                   $dData1 :: Data.Data.Data (Language.Python.Common.AST.Ident annot1)
                   = Language.Python.Common.AST.$fDataIdent @ annot1 $dData
                 } in
                 let {
                   $dData2 :: Data.Data.Data
                                (Language.Python.Common.AST.DottedName annot1)
                   = Data.Data.$fData[]
                       @ (Language.Python.Common.AST.Ident annot1)
                       $dData1
                 } in
                 let {
                   $dData3 :: Data.Data.Data
                                (GHC.Base.Maybe (Language.Python.Common.AST.Ident annot1))
                   = Data.Data.$fDataMaybe
                       @ (Language.Python.Common.AST.Ident annot1)
                       $dData1
                 } in
                 \ (k :: forall d b. Data.Data.Data d => c (d -> b) -> d -> c b)
                   (z :: forall g. g -> c g)
                   (ds :: Language.Python.Common.AST.ImportItem annot1) ->
                 case ds of wild { Language.Python.Common.AST.ImportItem a1 a2 a3 ->
                 k @ annot1
                   @ (Language.Python.Common.AST.ImportItem annot1)
                   $dData
                   (k @ (GHC.Base.Maybe (Language.Python.Common.AST.Ident annot1))
                      @ (annot1 -> Language.Python.Common.AST.ImportItem annot1)
                      $dData3
                      (k @ (Language.Python.Common.AST.DottedName annot1)
                         @ (GHC.Base.Maybe (Language.Python.Common.AST.Ident annot1)
                            -> annot1 -> Language.Python.Common.AST.ImportItem annot1)
                         $dData2
                         (z @ (Language.Python.Common.AST.DottedName annot1
                               -> GHC.Base.Maybe (Language.Python.Common.AST.Ident annot1)
                               -> annot1
                               -> Language.Python.Common.AST.ImportItem annot1)
                            (Language.Python.Common.AST.ImportItem @ annot1))
                         a1)
                      a2)
                   a3 }) -}
283607fc44cb0ad26a76914defc72d00
  $fDataImportItem_$cgmapM ::
    Data.Data.Data annot =>
    forall (m :: * -> *).
    GHC.Base.Monad m =>
    (forall d. Data.Data.Data d => d -> m d)
    -> Language.Python.Common.AST.ImportItem annot
    -> m (Language.Python.Common.AST.ImportItem annot)
  {- Arity: 3,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,U(A,C(C1(U)),A,U,A)><L,C(C1(U))>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   @ m :: * -> *
                   ($dMonad :: GHC.Base.Monad m)
                   (ds :: forall d. Data.Data.Data d => d -> m d) ->
                 Language.Python.Common.AST.$fDataImportItem_$cgfoldl
                   @ annot1
                   $dData
                   @ m
                   (\ @ d
                      @ b
                      ($dData1 :: Data.Data.Data d)
                      (c :: m (d -> b))
                      (x :: d) ->
                    let {
                      lvl447 :: m d = ds @ d $dData1 x
                    } in
                    GHC.Base.>>=
                      @ m
                      $dMonad
                      @ (d -> b)
                      @ b
                      c
                      (\ (c' :: d -> b) ->
                       GHC.Base.>>=
                         @ m
                         $dMonad
                         @ d
                         @ b
                         lvl447
                         (\ (x' :: d) -> GHC.Base.return @ m $dMonad @ b (c' x'))))
                   (\ @ g -> GHC.Base.return @ m $dMonad @ g)) -}
283607fc44cb0ad26a76914defc72d00
  $fDataImportItem_$cgmapMo ::
    Data.Data.Data annot =>
    forall (m :: * -> *).
    GHC.Base.MonadPlus m =>
    (forall d. Data.Data.Data d => d -> m d)
    -> Language.Python.Common.AST.ImportItem annot
    -> m (Language.Python.Common.AST.ImportItem annot)
  {- Arity: 4,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><S(LS(LC(C(S))LLL)LL),U(A,1*U(A,C(C1(U)),A,C(U),A),1*U,C(C1(U)))><L,C(C1(U))><L,U>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   @ m :: * -> *
                   ($dMonadPlus :: GHC.Base.MonadPlus m)
                   (ds :: forall d. Data.Data.Data d => d -> m d)
                   (eta :: Language.Python.Common.AST.ImportItem annot1) ->
                 let {
                   $dMonad :: GHC.Base.Monad m = GHC.Base.$p2MonadPlus @ m $dMonadPlus
                 } in
                 let {
                   lvl447 :: m (Language.Python.Common.AST.ImportItem annot1)
                   = GHC.Base.mzero
                       @ m
                       $dMonadPlus
                       @ (Language.Python.Common.AST.ImportItem annot1)
                 } in
                 GHC.Base.>>=
                   @ m
                   $dMonad
                   @ (Language.Python.Common.AST.ImportItem annot1, GHC.Types.Bool)
                   @ (Language.Python.Common.AST.ImportItem annot1)
                   (Language.Python.Common.AST.$fDataImportItem_$cgfoldl
                      @ annot1
                      $dData
                      @ (Data.Data.Mp m)
                      (\ @ d
                         @ b
                         ($dData1 :: Data.Data.Data d)
                         (ds1 :: Data.Data.Mp m (d -> b))
                         (y :: d) ->
                       let {
                         lvl448 :: m d = ds @ d $dData1 y
                       } in
                       GHC.Base.>>=
                         @ m
                         $dMonad
                         @ (d -> b, GHC.Types.Bool)
                         @ (b, GHC.Types.Bool)
                         ds1 `cast` (Data.Data.N:Mp[0] <m>_R <d -> b>_N)
                         (\ (ds2 :: (d -> b, GHC.Types.Bool)) ->
                          case ds2 of wild { (,) h b1 ->
                          case b1 of wild1 {
                            GHC.Types.False
                            -> GHC.Base.mplus
                                 @ m
                                 $dMonadPlus
                                 @ (b, GHC.Types.Bool)
                                 (GHC.Base.>>=
                                    @ m
                                    $dMonad
                                    @ d
                                    @ (b, GHC.Types.Bool)
                                    lvl448
                                    (\ (y' :: d) ->
                                     GHC.Base.return
                                       @ m
                                       $dMonad
                                       @ (b, GHC.Types.Bool)
                                       (h y', GHC.Types.True)))
                                 (GHC.Base.return
                                    @ m
                                    $dMonad
                                    @ (b, GHC.Types.Bool)
                                    (h y, GHC.Types.False))
                            GHC.Types.True
                            -> GHC.Base.return
                                 @ m
                                 $dMonad
                                 @ (b, GHC.Types.Bool)
                                 (h y, GHC.Types.True) } }))
                        `cast`
                      (forall (d :: <*>_N) (b :: <*>_N).
                       <Data.Data.Data d>_R
                       ->_R <Data.Data.Mp m (d -> b)>_R
                       ->_R <d>_R
                       ->_R Sym (Data.Data.N:Mp[0] <m>_R <b>_N))
                      (\ @ g (g1 :: g) ->
                       GHC.Base.return
                         @ m
                         $dMonad
                         @ (g, GHC.Types.Bool)
                         (g1, GHC.Types.False))
                        `cast`
                      (forall (g :: <*>_N).
                       <g>_R ->_R Sym (Data.Data.N:Mp[0] <m>_R <g>_N))
                      eta)
                     `cast`
                   (Data.Data.N:Mp[0]
                        <m>_R <Language.Python.Common.AST.ImportItem annot1>_N)
                   (\ (ds1 :: (Language.Python.Common.AST.ImportItem annot1,
                               GHC.Types.Bool)) ->
                    case ds1 of wild { (,) x' b ->
                    case b of wild1 {
                      GHC.Types.False -> lvl447
                      GHC.Types.True
                      -> GHC.Base.return
                           @ m
                           $dMonad
                           @ (Language.Python.Common.AST.ImportItem annot1)
                           x' } })) -}
283607fc44cb0ad26a76914defc72d00
  $fDataImportItem_$cgmapMp ::
    Data.Data.Data annot =>
    forall (m :: * -> *).
    GHC.Base.MonadPlus m =>
    (forall d. Data.Data.Data d => d -> m d)
    -> Language.Python.Common.AST.ImportItem annot
    -> m (Language.Python.Common.AST.ImportItem annot)
  {- Arity: 4,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><S(LS(LC(C(S))LLL)LL),U(A,1*U(A,C(C1(U)),A,C(U),A),1*U,C(C1(U)))><L,C(C1(U))><L,U>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   @ m :: * -> *
                   ($dMonadPlus :: GHC.Base.MonadPlus m)
                   (ds :: forall d. Data.Data.Data d => d -> m d)
                   (eta :: Language.Python.Common.AST.ImportItem annot1) ->
                 let {
                   $dMonad :: GHC.Base.Monad m = GHC.Base.$p2MonadPlus @ m $dMonadPlus
                 } in
                 let {
                   lvl447 :: m (Language.Python.Common.AST.ImportItem annot1)
                   = GHC.Base.mzero
                       @ m
                       $dMonadPlus
                       @ (Language.Python.Common.AST.ImportItem annot1)
                 } in
                 GHC.Base.>>=
                   @ m
                   $dMonad
                   @ (Language.Python.Common.AST.ImportItem annot1, GHC.Types.Bool)
                   @ (Language.Python.Common.AST.ImportItem annot1)
                   (Language.Python.Common.AST.$fDataImportItem_$cgfoldl
                      @ annot1
                      $dData
                      @ (Data.Data.Mp m)
                      (\ @ d
                         @ b
                         ($dData1 :: Data.Data.Data d)
                         (ds1 :: Data.Data.Mp m (d -> b))
                         (y :: d) ->
                       let {
                         lvl448 :: m d = ds @ d $dData1 y
                       } in
                       GHC.Base.>>=
                         @ m
                         $dMonad
                         @ (d -> b, GHC.Types.Bool)
                         @ (b, GHC.Types.Bool)
                         ds1 `cast` (Data.Data.N:Mp[0] <m>_R <d -> b>_N)
                         (\ (ds2 :: (d -> b, GHC.Types.Bool)) ->
                          case ds2 of wild { (,) h b1 ->
                          GHC.Base.mplus
                            @ m
                            $dMonadPlus
                            @ (b, GHC.Types.Bool)
                            (GHC.Base.>>=
                               @ m
                               $dMonad
                               @ d
                               @ (b, GHC.Types.Bool)
                               lvl448
                               (\ (y' :: d) ->
                                GHC.Base.return
                                  @ m
                                  $dMonad
                                  @ (b, GHC.Types.Bool)
                                  (h y', GHC.Types.True)))
                            (GHC.Base.return @ m $dMonad @ (b, GHC.Types.Bool) (h y, b1)) }))
                        `cast`
                      (forall (d :: <*>_N) (b :: <*>_N).
                       <Data.Data.Data d>_R
                       ->_R <Data.Data.Mp m (d -> b)>_R
                       ->_R <d>_R
                       ->_R Sym (Data.Data.N:Mp[0] <m>_R <b>_N))
                      (\ @ g (g1 :: g) ->
                       GHC.Base.return
                         @ m
                         $dMonad
                         @ (g, GHC.Types.Bool)
                         (g1, GHC.Types.False))
                        `cast`
                      (forall (g :: <*>_N).
                       <g>_R ->_R Sym (Data.Data.N:Mp[0] <m>_R <g>_N))
                      eta)
                     `cast`
                   (Data.Data.N:Mp[0]
                        <m>_R <Language.Python.Common.AST.ImportItem annot1>_N)
                   (\ (ds1 :: (Language.Python.Common.AST.ImportItem annot1,
                               GHC.Types.Bool)) ->
                    case ds1 of wild { (,) x' b ->
                    case b of wild1 {
                      GHC.Types.False -> lvl447
                      GHC.Types.True
                      -> GHC.Base.return
                           @ m
                           $dMonad
                           @ (Language.Python.Common.AST.ImportItem annot1)
                           x' } })) -}
283607fc44cb0ad26a76914defc72d00
  $fDataImportItem_$cgmapQ ::
    Data.Data.Data annot =>
    forall u.
    (forall d. Data.Data.Data d => d -> u)
    -> Language.Python.Common.AST.ImportItem annot -> [u]
  {- Arity: 3,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,C(C1(U))><L,U>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   @ u
                   (ds :: forall d. Data.Data.Data d => d -> u)
                   (x0 :: Language.Python.Common.AST.ImportItem annot1) ->
                 (Language.Python.Common.AST.$fDataImportItem_$cgfoldl
                    @ annot1
                    $dData
                    @ (Data.Data.Qr [u])
                    (\ @ d
                       @ b
                       ($dData1 :: Data.Data.Data d)
                       (ds1 :: Data.Data.Qr [u] (d -> b))
                       (x :: d)
                       (r1 :: [u]) ->
                     ds1 `cast` (Data.Data.N:Qr[0] <*>_N <[u]>_R <d -> b>_P)
                       (GHC.Types.: @ u (ds @ d $dData1 x) r1))
                      `cast`
                    (forall (d :: <*>_N) (b :: <*>_N).
                     <Data.Data.Data d>_R
                     ->_R <Data.Data.Qr [u] (d -> b)>_R
                     ->_R <d>_R
                     ->_R Sym (Data.Data.N:Qr[0] <*>_N <[u]>_R <b>_P))
                    (Language.Python.Common.AST.$fDataExpr4 @ u)
                      `cast`
                    (forall (g :: <*>_N).
                     <g>_R ->_R Sym (Data.Data.N:Qr[0] <*>_N <[u]>_R <g>_P))
                    x0)
                   `cast`
                 (Data.Data.N:Qr[0]
                      <*>_N <[u]>_R <Language.Python.Common.AST.ImportItem annot1>_P)
                   (GHC.Types.[] @ u)) -}
283607fc44cb0ad26a76914defc72d00
  $fDataImportItem_$cgmapQi ::
    Data.Data.Data annot =>
    forall u.
    GHC.Types.Int
    -> (forall d. Data.Data.Data d => d -> u)
    -> Language.Python.Common.AST.ImportItem annot
    -> u
  {- Arity: 4,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,U(U)><L,C(C1(U))><L,U>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   @ u
                   (ds :: GHC.Types.Int)
                   (ds1 :: forall d. Data.Data.Data d => d -> u)
                   (x :: Language.Python.Common.AST.ImportItem annot1) ->
                 case Language.Python.Common.AST.$fDataImportItem_$cgfoldl
                        @ annot1
                        $dData
                        @ (Data.Data.Qi u)
                        (\ @ d
                           @ b
                           ($dData1 :: Data.Data.Data d)
                           (ds2 :: Data.Data.Qi u (d -> b))
                           (a2 :: d) ->
                         case ds2 of wild { Data.Data.Qi i' q ->
                         Data.Data.Qi
                           @ *
                           @ u
                           @ b
                           (case i' of wild1 { GHC.Types.I# x1 ->
                            GHC.Types.I# (GHC.Prim.+# x1 1#) })
                           (case ds of wild1 { GHC.Types.I# x1 ->
                            case i' of wild2 { GHC.Types.I# y ->
                            case GHC.Prim.tagToEnum#
                                   @ GHC.Types.Bool
                                   (GHC.Prim.==# x1 y) of wild3 {
                              GHC.Types.False -> q
                              GHC.Types.True -> GHC.Base.Just @ u (ds1 @ d $dData1 a2) } } }) })
                        (Language.Python.Common.AST.$fDataExpr1 @ u)
                        x of wild { Data.Data.Qi ds2 q ->
                 Data.Maybe.fromJust @ u q }) -}
283607fc44cb0ad26a76914defc72d00
  $fDataImportItem_$cgmapQl ::
    Data.Data.Data annot =>
    forall r r'.
    (r -> r' -> r)
    -> r
    -> (forall d. Data.Data.Data d => d -> r')
    -> Language.Python.Common.AST.ImportItem annot
    -> r
  {- Arity: 4,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,C(C1(U))><L,U><L,C(C1(U))>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   @ r
                   @ r'
                   (ds :: r -> r' -> r)
                   (ds1 :: r)
                   (ds2 :: forall d. Data.Data.Data d => d -> r') ->
                 let {
                   g :: Language.Python.Common.AST.ImportItem annot1
                        -> Data.Functor.Const.Const
                             r (Language.Python.Common.AST.ImportItem annot1)
                   = Language.Python.Common.AST.$fDataImportItem_$cgfoldl
                       @ annot1
                       $dData
                       @ (Data.Functor.Const.Const r)
                       (\ @ d
                          @ b
                          ($dData1 :: Data.Data.Data d)
                          (c :: Data.Functor.Const.Const r (d -> b))
                          (x :: d) ->
                        ds
                          c `cast` (Data.Functor.Const.N:Const[0] <*>_N <r>_R <d -> b>_P)
                          (ds2 @ d $dData1 x))
                         `cast`
                       (forall (d :: <*>_N) (b :: <*>_N).
                        <Data.Data.Data d>_R
                        ->_R <Data.Functor.Const.Const r (d -> b)>_R
                        ->_R <d>_R
                        ->_R Sym (Data.Functor.Const.N:Const[0] <*>_N <r>_R <b>_P))
                       (\ @ g1 (ds3 :: g1) -> ds1)
                         `cast`
                       (forall (g1 :: <*>_N).
                        <g1>_R ->_R Sym (Data.Functor.Const.N:Const[0] <*>_N <r>_R <g1>_P))
                 } in
                 (\ (x :: Language.Python.Common.AST.ImportItem annot1) -> g x)
                   `cast`
                 (<Language.Python.Common.AST.ImportItem annot1>_R
                  ->_R Data.Functor.Const.N:Const[0]
                           <*>_N <r>_R <Language.Python.Common.AST.ImportItem annot1>_P)) -}
283607fc44cb0ad26a76914defc72d00
  $fDataImportItem_$cgmapQr ::
    Data.Data.Data annot =>
    forall r r'.
    (r' -> r -> r)
    -> r
    -> (forall d. Data.Data.Data d => d -> r')
    -> Language.Python.Common.AST.ImportItem annot
    -> r
  {- Arity: 5,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,C(C1(U))><L,U><L,C(C1(U))><L,U>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   @ r
                   @ r'
                   (ds :: r' -> r -> r)
                   (ds1 :: r)
                   (ds2 :: forall d. Data.Data.Data d => d -> r')
                   (x0 :: Language.Python.Common.AST.ImportItem annot1) ->
                 (Language.Python.Common.AST.$fDataImportItem_$cgfoldl
                    @ annot1
                    $dData
                    @ (Data.Data.Qr r)
                    (\ @ d
                       @ b
                       ($dData1 :: Data.Data.Data d)
                       (ds3 :: Data.Data.Qr r (d -> b))
                       (x :: d)
                       (r1 :: r) ->
                     ds3 `cast` (Data.Data.N:Qr[0] <*>_N <r>_R <d -> b>_P)
                       (ds (ds2 @ d $dData1 x) r1))
                      `cast`
                    (forall (d :: <*>_N) (b :: <*>_N).
                     <Data.Data.Data d>_R
                     ->_R <Data.Data.Qr r (d -> b)>_R
                     ->_R <d>_R
                     ->_R Sym (Data.Data.N:Qr[0] <*>_N <r>_R <b>_P))
                    (Language.Python.Common.AST.$fDataExpr5 @ r)
                      `cast`
                    (forall (g :: <*>_N).
                     <g>_R ->_R Sym (Data.Data.N:Qr[0] <*>_N <r>_R <g>_P))
                    x0)
                   `cast`
                 (Data.Data.N:Qr[0]
                      <*>_N <r>_R <Language.Python.Common.AST.ImportItem annot1>_P)
                   ds1) -}
283607fc44cb0ad26a76914defc72d00
  $fDataImportItem_$cgunfold ::
    Data.Data.Data annot =>
    forall (c :: * -> *).
    (forall b r. Data.Data.Data b => c (b -> r) -> c r)
    -> (forall r. r -> c r)
    -> Data.Data.Constr
    -> c (Language.Python.Common.AST.ImportItem annot)
  {- Arity: 1, Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   @ c :: * -> * ->
                 let {
                   $dData1 :: Data.Data.Data (Language.Python.Common.AST.Ident annot1)
                   = Language.Python.Common.AST.$fDataIdent @ annot1 $dData
                 } in
                 let {
                   $dData2 :: Data.Data.Data
                                (Language.Python.Common.AST.DottedName annot1)
                   = Data.Data.$fData[]
                       @ (Language.Python.Common.AST.Ident annot1)
                       $dData1
                 } in
                 let {
                   $dData3 :: Data.Data.Data
                                (GHC.Base.Maybe (Language.Python.Common.AST.Ident annot1))
                   = Data.Data.$fDataMaybe
                       @ (Language.Python.Common.AST.Ident annot1)
                       $dData1
                 } in
                 \ (k :: forall b r. Data.Data.Data b => c (b -> r) -> c r)
                   (z :: forall r. r -> c r)
                   (ds :: Data.Data.Constr) ->
                 k @ annot1
                   @ (Language.Python.Common.AST.ImportItem annot1)
                   $dData
                   (k @ (GHC.Base.Maybe (Language.Python.Common.AST.Ident annot1))
                      @ (annot1 -> Language.Python.Common.AST.ImportItem annot1)
                      $dData3
                      (k @ (Language.Python.Common.AST.DottedName annot1)
                         @ (GHC.Base.Maybe (Language.Python.Common.AST.Ident annot1)
                            -> annot1 -> Language.Python.Common.AST.ImportItem annot1)
                         $dData2
                         (z @ (Language.Python.Common.AST.DottedName annot1
                               -> GHC.Base.Maybe (Language.Python.Common.AST.Ident annot1)
                               -> annot1
                               -> Language.Python.Common.AST.ImportItem annot1)
                            (Language.Python.Common.AST.ImportItem @ annot1))))) -}
283607fc44cb0ad26a76914defc72d00
  $fDataImportItem_$cp1Data ::
    Data.Data.Data annot =>
    Data.Typeable.Internal.Typeable
      (Language.Python.Common.AST.ImportItem annot)
  {- Arity: 1, Strictness: <L,1*U(1*U,A,A,A,A,A,A,A,A,A,A,A,A,A,A)>,
     Unfolding: (\ @ annot1 ($dData :: Data.Data.Data annot1) ->
                 let {
                   b1 :: Data.Typeable.Internal.Typeable annot1
                   = Data.Data.$p1Data @ annot1 $dData
                 } in
                 case GHC.Magic.noinline
                        @ ([GHC.Fingerprint.Type.Fingerprint]
                           -> GHC.Fingerprint.Type.Fingerprint)
                        GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           Language.Python.Common.AST.$fDataImportItem7
                           (GHC.Types.:
                              @ GHC.Fingerprint.Type.Fingerprint
                              (Data.Typeable.Internal.typeRepFingerprint
                                 @ *
                                 @ annot1
                                 b1 `cast` (Data.Typeable.Internal.N:Typeable[0] <*>_N <annot1>_N))
                              (GHC.Types.[]
                                 @ GHC.Fingerprint.Type.Fingerprint))) of dt { GHC.Fingerprint.Type.Fingerprint dt1 dt2 ->
                 (Data.Typeable.Internal.TrApp
                    @ *
                    @ (Language.Python.Common.AST.ImportItem annot1)
                    @ *
                    @ Language.Python.Common.AST.ImportItem
                    @ annot1
                    @~ <Language.Python.Common.AST.ImportItem annot1>_N
                    dt1
                    dt2
                    Language.Python.Common.AST.$fDataImportItem_a3
                    b1 `cast` (Data.Typeable.Internal.N:Typeable[0] <*>_N <annot1>_N))
                   `cast`
                 (Sym (Data.Typeable.Internal.N:Typeable[0]) <*>_N <Language.Python.Common.AST.ImportItem
                                                                      annot1>_N) }) -}
283607fc44cb0ad26a76914defc72d00
  $fDataImportItem_a3 ::
    Data.Typeable.Internal.TypeRep
      Language.Python.Common.AST.ImportItem
  {- Unfolding: (case GHC.Magic.noinline
                        @ ([GHC.Fingerprint.Type.Fingerprint]
                           -> GHC.Fingerprint.Type.Fingerprint)
                        GHC.Fingerprint.fingerprintFingerprints
                        Language.Python.Common.AST.$fDataImportItem2 of dt { GHC.Fingerprint.Type.Fingerprint dt1 dt2 ->
                 Data.Typeable.Internal.TrTyCon
                   @ (* -> *)
                   @ Language.Python.Common.AST.ImportItem
                   dt1
                   dt2
                   Language.Python.Common.AST.$tcImportItem
                   (GHC.Types.[] @ Data.Typeable.Internal.SomeTypeRep) }) -}
01a50092e1f9a1aefabdff796e5265a4
  $fDataImportRelative ::
    Data.Data.Data annot =>
    Data.Data.Data (Language.Python.Common.AST.ImportRelative annot)
  DFunId
  {- Arity: 1, Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)>,
     Inline: CONLIKE,
     Unfolding: DFun: @ annot1 (v :: Data.Data.Data annot1).
                  @ (Language.Python.Common.AST.ImportRelative annot1)
                  (Language.Python.Common.AST.$fDataImportRelative_$cp1Data
                     @ annot1
                     v)
                  (Language.Python.Common.AST.$fDataImportRelative_$cgfoldl
                     @ annot1
                     v)
                  (Language.Python.Common.AST.$fDataImportRelative_$cgunfold
                     @ annot1
                     v)
                  (\ (ds :: Language.Python.Common.AST.ImportRelative annot1) ->
                   case ds of wild { Language.Python.Common.AST.ImportRelative ds1 ds2 ds3 ->
                   Language.Python.Common.AST.$cImportRelative })
                  (\ (ds :: Language.Python.Common.AST.ImportRelative annot1) ->
                   Language.Python.Common.AST.$tImportRelative)
                  (Language.Python.Common.AST.$fDataImportRelative_$cdataCast1
                     @ annot1
                     v)
                  (\ @ t :: * -> * -> *
                     @ c :: * -> *
                     ($dTypeable :: Data.Typeable.Internal.Typeable t)
                     (ds :: forall d e.
                            (Data.Data.Data d, Data.Data.Data e) =>
                            c (t d e)) ->
                   GHC.Base.Nothing
                     @ (c (Language.Python.Common.AST.ImportRelative annot1)))
                  (Language.Python.Common.AST.$fDataImportRelative1 @ annot1 v)
                    `cast`
                  (<forall b. Data.Data.Data b => b -> b>_R
                   ->_R <Language.Python.Common.AST.ImportRelative annot1>_R
                   ->_R Data.Functor.Identity.N:Identity[0]
                            <Language.Python.Common.AST.ImportRelative annot1>_R)
                  (Language.Python.Common.AST.$fDataImportRelative_$cgmapQl
                     @ annot1
                     v)
                  (Language.Python.Common.AST.$fDataImportRelative_$cgmapQr
                     @ annot1
                     v)
                  (Language.Python.Common.AST.$fDataImportRelative_$cgmapQ
                     @ annot1
                     v)
                  (Language.Python.Common.AST.$fDataImportRelative_$cgmapQi
                     @ annot1
                     v)
                  (Language.Python.Common.AST.$fDataImportRelative_$cgmapM
                     @ annot1
                     v)
                  (Language.Python.Common.AST.$fDataImportRelative_$cgmapMp
                     @ annot1
                     v)
                  (Language.Python.Common.AST.$fDataImportRelative_$cgmapMo
                     @ annot1
                     v) -}
01a50092e1f9a1aefabdff796e5265a4
  $fDataImportRelative1 ::
    Data.Data.Data annot =>
    (forall b. Data.Data.Data b => b -> b)
    -> Language.Python.Common.AST.ImportRelative annot
    -> Data.Functor.Identity.Identity
         (Language.Python.Common.AST.ImportRelative annot)
  {- Arity: 3,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,C(C1(U))><L,U>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   (ds :: forall b. Data.Data.Data b => b -> b)
                   (x0 :: Language.Python.Common.AST.ImportRelative annot1) ->
                 Language.Python.Common.AST.$fDataImportRelative_$cgfoldl
                   @ annot1
                   $dData
                   @ Data.Functor.Identity.Identity
                   (\ @ d
                      @ b
                      ($dData1 :: Data.Data.Data d)
                      (ds1 :: Data.Functor.Identity.Identity (d -> b))
                      (x :: d) ->
                    ds1 `cast` (Data.Functor.Identity.N:Identity[0] <d -> b>_R)
                      (ds @ d $dData1 x))
                     `cast`
                   (forall (d :: <*>_N) (b :: <*>_N).
                    <Data.Data.Data d>_R
                    ->_R <Data.Functor.Identity.Identity (d -> b)>_R
                    ->_R <d>_R
                    ->_R Sym (Data.Functor.Identity.N:Identity[0] <b>_R))
                   Language.Python.Common.AST.$fDataExpr7
                     `cast`
                   (forall (g :: <*>_N).
                    <g>_R ->_R Sym (Data.Functor.Identity.N:Identity[0] <g>_R))
                   x0) -}
e238b2b1c8083226773c0cc96a5fd715
  $fDataImportRelative2 :: [GHC.Fingerprint.Type.Fingerprint]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Fingerprint.Type.Fingerprint
                   Language.Python.Common.AST.$fDataImportRelative3
                   Language.Python.Common.AST.$fDataExpr9) -}
ecf54161f5cd48372b74bca3ee51f812
  $fDataImportRelative3 :: GHC.Fingerprint.Type.Fingerprint
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Fingerprint.Type.Fingerprint
                   6804850529258658464##
                   18227307076689424416##) -}
c2e4e247b6827b27807c809a0bdd499d
  $fDataImportRelative4 :: Data.Data.DataRep
  {- Strictness: m1,
     Unfolding: (Data.Data.AlgRep
                   Language.Python.Common.AST.$fDataImportRelative5) -}
28c35833546dee3c2f410afac6c66101
  $fDataImportRelative5 :: [Data.Data.Constr]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Data.Data.Constr
                   Language.Python.Common.AST.$cImportRelative
                   (GHC.Types.[] @ Data.Data.Constr)) -}
9aeadc7235967867d7cb9c48de13c62a
  $fDataImportRelative6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.Python.Common.AST.$tcImportRelative2) -}
01a50092e1f9a1aefabdff796e5265a4
  $fDataImportRelative7 :: GHC.Fingerprint.Type.Fingerprint
  {- Unfolding: (case Language.Python.Common.AST.$fDataImportRelative_a3 of wild { Data.Typeable.Internal.TrTyCon dt dt1 ds1 ds2 ->
                 GHC.Fingerprint.Type.Fingerprint dt dt1 }) -}
01a50092e1f9a1aefabdff796e5265a4
  $fDataImportRelative_$cdataCast1 ::
    Data.Data.Data annot =>
    forall (t :: * -> *) (c :: * -> *).
    Data.Typeable.Internal.Typeable t =>
    (forall d. Data.Data.Data d => c (t d))
    -> GHC.Base.Maybe
         (c (Language.Python.Common.AST.ImportRelative annot))
  {- Arity: 2, Strictness: <L,U><L,1*U>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   @ t :: * -> *
                   @ c :: * -> *
                   ($dTypeable :: Data.Typeable.Internal.Typeable t) ->
                 let {
                   lvl447 :: GHC.Base.Maybe
                               (t
                                Data.Type.Equality.:~~: Language.Python.Common.AST.ImportRelative)
                   = Data.Typeable.Internal.eqTypeRep
                       @ (* -> *)
                       @ (* -> *)
                       @ t
                       @ Language.Python.Common.AST.ImportRelative
                       $dTypeable
                         `cast`
                       (Data.Typeable.Internal.N:Typeable[0] <* -> *>_N <t>_N)
                       Language.Python.Common.AST.$fDataImportRelative_a3
                 } in
                 \ (f12 :: forall d. Data.Data.Data d => c (t d)) ->
                 case lvl447 of wild {
                   GHC.Base.Nothing
                   -> GHC.Base.Nothing
                        @ (c (Language.Python.Common.AST.ImportRelative annot1))
                   GHC.Base.Just ds
                   -> case ds of wild1 { Data.Type.Equality.HRefl cobox cobox1 ->
                      GHC.Base.Just
                        @ (c (Language.Python.Common.AST.ImportRelative annot1))
                        (f12 @ annot1 $dData)
                          `cast`
                        (<c>_R (Sym cobox1 <annot1>_N)) } }) -}
01a50092e1f9a1aefabdff796e5265a4
  $fDataImportRelative_$cgfoldl ::
    Data.Data.Data annot =>
    forall (c :: * -> *).
    (forall d b. Data.Data.Data d => c (d -> b) -> d -> c b)
    -> (forall g. g -> c g)
    -> Language.Python.Common.AST.ImportRelative annot
    -> c (Language.Python.Common.AST.ImportRelative annot)
  {- Arity: 1, Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   @ c :: * -> * ->
                 let {
                   $dData1 :: Data.Data.Data (Language.Python.Common.AST.Ident annot1)
                   = Language.Python.Common.AST.$fDataIdent @ annot1 $dData
                 } in
                 let {
                   $dData2 :: Data.Data.Data [Language.Python.Common.AST.Ident annot1]
                   = Data.Data.$fData[]
                       @ (Language.Python.Common.AST.Ident annot1)
                       $dData1
                 } in
                 let {
                   $dData3 :: Data.Data.Data
                                (GHC.Base.Maybe (Language.Python.Common.AST.DottedName annot1))
                   = Data.Data.$fDataMaybe
                       @ [Language.Python.Common.AST.Ident annot1]
                       $dData2
                 } in
                 \ (k :: forall d b. Data.Data.Data d => c (d -> b) -> d -> c b)
                   (z :: forall g. g -> c g)
                   (ds :: Language.Python.Common.AST.ImportRelative annot1) ->
                 case ds of wild { Language.Python.Common.AST.ImportRelative a1 a2 a3 ->
                 k @ annot1
                   @ (Language.Python.Common.AST.ImportRelative annot1)
                   $dData
                   (k @ (GHC.Base.Maybe
                           (Language.Python.Common.AST.DottedName annot1))
                      @ (annot1 -> Language.Python.Common.AST.ImportRelative annot1)
                      $dData3
                      (k @ GHC.Types.Int
                         @ (GHC.Base.Maybe (Language.Python.Common.AST.DottedName annot1)
                            -> annot1 -> Language.Python.Common.AST.ImportRelative annot1)
                         Data.Data.$fDataInt
                         (z @ (GHC.Types.Int
                               -> GHC.Base.Maybe (Language.Python.Common.AST.DottedName annot1)
                               -> annot1
                               -> Language.Python.Common.AST.ImportRelative annot1)
                            (Language.Python.Common.AST.ImportRelative @ annot1))
                         a1)
                      a2)
                   a3 }) -}
01a50092e1f9a1aefabdff796e5265a4
  $fDataImportRelative_$cgmapM ::
    Data.Data.Data annot =>
    forall (m :: * -> *).
    GHC.Base.Monad m =>
    (forall d. Data.Data.Data d => d -> m d)
    -> Language.Python.Common.AST.ImportRelative annot
    -> m (Language.Python.Common.AST.ImportRelative annot)
  {- Arity: 3,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,U(A,C(C1(U)),A,U,A)><L,C(C1(U))>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   @ m :: * -> *
                   ($dMonad :: GHC.Base.Monad m)
                   (ds :: forall d. Data.Data.Data d => d -> m d) ->
                 Language.Python.Common.AST.$fDataImportRelative_$cgfoldl
                   @ annot1
                   $dData
                   @ m
                   (\ @ d
                      @ b
                      ($dData1 :: Data.Data.Data d)
                      (c :: m (d -> b))
                      (x :: d) ->
                    let {
                      lvl447 :: m d = ds @ d $dData1 x
                    } in
                    GHC.Base.>>=
                      @ m
                      $dMonad
                      @ (d -> b)
                      @ b
                      c
                      (\ (c' :: d -> b) ->
                       GHC.Base.>>=
                         @ m
                         $dMonad
                         @ d
                         @ b
                         lvl447
                         (\ (x' :: d) -> GHC.Base.return @ m $dMonad @ b (c' x'))))
                   (\ @ g -> GHC.Base.return @ m $dMonad @ g)) -}
01a50092e1f9a1aefabdff796e5265a4
  $fDataImportRelative_$cgmapMo ::
    Data.Data.Data annot =>
    forall (m :: * -> *).
    GHC.Base.MonadPlus m =>
    (forall d. Data.Data.Data d => d -> m d)
    -> Language.Python.Common.AST.ImportRelative annot
    -> m (Language.Python.Common.AST.ImportRelative annot)
  {- Arity: 4,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><S(LS(LC(C(S))LLL)LL),U(A,1*U(A,C(C1(U)),A,C(U),A),1*U,C(C1(U)))><L,C(C1(U))><L,U>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   @ m :: * -> *
                   ($dMonadPlus :: GHC.Base.MonadPlus m)
                   (ds :: forall d. Data.Data.Data d => d -> m d)
                   (eta :: Language.Python.Common.AST.ImportRelative annot1) ->
                 let {
                   $dMonad :: GHC.Base.Monad m = GHC.Base.$p2MonadPlus @ m $dMonadPlus
                 } in
                 let {
                   lvl447 :: m (Language.Python.Common.AST.ImportRelative annot1)
                   = GHC.Base.mzero
                       @ m
                       $dMonadPlus
                       @ (Language.Python.Common.AST.ImportRelative annot1)
                 } in
                 GHC.Base.>>=
                   @ m
                   $dMonad
                   @ (Language.Python.Common.AST.ImportRelative annot1,
                      GHC.Types.Bool)
                   @ (Language.Python.Common.AST.ImportRelative annot1)
                   (Language.Python.Common.AST.$fDataImportRelative_$cgfoldl
                      @ annot1
                      $dData
                      @ (Data.Data.Mp m)
                      (\ @ d
                         @ b
                         ($dData1 :: Data.Data.Data d)
                         (ds1 :: Data.Data.Mp m (d -> b))
                         (y :: d) ->
                       let {
                         lvl448 :: m d = ds @ d $dData1 y
                       } in
                       GHC.Base.>>=
                         @ m
                         $dMonad
                         @ (d -> b, GHC.Types.Bool)
                         @ (b, GHC.Types.Bool)
                         ds1 `cast` (Data.Data.N:Mp[0] <m>_R <d -> b>_N)
                         (\ (ds2 :: (d -> b, GHC.Types.Bool)) ->
                          case ds2 of wild { (,) h b1 ->
                          case b1 of wild1 {
                            GHC.Types.False
                            -> GHC.Base.mplus
                                 @ m
                                 $dMonadPlus
                                 @ (b, GHC.Types.Bool)
                                 (GHC.Base.>>=
                                    @ m
                                    $dMonad
                                    @ d
                                    @ (b, GHC.Types.Bool)
                                    lvl448
                                    (\ (y' :: d) ->
                                     GHC.Base.return
                                       @ m
                                       $dMonad
                                       @ (b, GHC.Types.Bool)
                                       (h y', GHC.Types.True)))
                                 (GHC.Base.return
                                    @ m
                                    $dMonad
                                    @ (b, GHC.Types.Bool)
                                    (h y, GHC.Types.False))
                            GHC.Types.True
                            -> GHC.Base.return
                                 @ m
                                 $dMonad
                                 @ (b, GHC.Types.Bool)
                                 (h y, GHC.Types.True) } }))
                        `cast`
                      (forall (d :: <*>_N) (b :: <*>_N).
                       <Data.Data.Data d>_R
                       ->_R <Data.Data.Mp m (d -> b)>_R
                       ->_R <d>_R
                       ->_R Sym (Data.Data.N:Mp[0] <m>_R <b>_N))
                      (\ @ g (g1 :: g) ->
                       GHC.Base.return
                         @ m
                         $dMonad
                         @ (g, GHC.Types.Bool)
                         (g1, GHC.Types.False))
                        `cast`
                      (forall (g :: <*>_N).
                       <g>_R ->_R Sym (Data.Data.N:Mp[0] <m>_R <g>_N))
                      eta)
                     `cast`
                   (Data.Data.N:Mp[0]
                        <m>_R <Language.Python.Common.AST.ImportRelative annot1>_N)
                   (\ (ds1 :: (Language.Python.Common.AST.ImportRelative annot1,
                               GHC.Types.Bool)) ->
                    case ds1 of wild { (,) x' b ->
                    case b of wild1 {
                      GHC.Types.False -> lvl447
                      GHC.Types.True
                      -> GHC.Base.return
                           @ m
                           $dMonad
                           @ (Language.Python.Common.AST.ImportRelative annot1)
                           x' } })) -}
01a50092e1f9a1aefabdff796e5265a4
  $fDataImportRelative_$cgmapMp ::
    Data.Data.Data annot =>
    forall (m :: * -> *).
    GHC.Base.MonadPlus m =>
    (forall d. Data.Data.Data d => d -> m d)
    -> Language.Python.Common.AST.ImportRelative annot
    -> m (Language.Python.Common.AST.ImportRelative annot)
  {- Arity: 4,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><S(LS(LC(C(S))LLL)LL),U(A,1*U(A,C(C1(U)),A,C(U),A),1*U,C(C1(U)))><L,C(C1(U))><L,U>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   @ m :: * -> *
                   ($dMonadPlus :: GHC.Base.MonadPlus m)
                   (ds :: forall d. Data.Data.Data d => d -> m d)
                   (eta :: Language.Python.Common.AST.ImportRelative annot1) ->
                 let {
                   $dMonad :: GHC.Base.Monad m = GHC.Base.$p2MonadPlus @ m $dMonadPlus
                 } in
                 let {
                   lvl447 :: m (Language.Python.Common.AST.ImportRelative annot1)
                   = GHC.Base.mzero
                       @ m
                       $dMonadPlus
                       @ (Language.Python.Common.AST.ImportRelative annot1)
                 } in
                 GHC.Base.>>=
                   @ m
                   $dMonad
                   @ (Language.Python.Common.AST.ImportRelative annot1,
                      GHC.Types.Bool)
                   @ (Language.Python.Common.AST.ImportRelative annot1)
                   (Language.Python.Common.AST.$fDataImportRelative_$cgfoldl
                      @ annot1
                      $dData
                      @ (Data.Data.Mp m)
                      (\ @ d
                         @ b
                         ($dData1 :: Data.Data.Data d)
                         (ds1 :: Data.Data.Mp m (d -> b))
                         (y :: d) ->
                       let {
                         lvl448 :: m d = ds @ d $dData1 y
                       } in
                       GHC.Base.>>=
                         @ m
                         $dMonad
                         @ (d -> b, GHC.Types.Bool)
                         @ (b, GHC.Types.Bool)
                         ds1 `cast` (Data.Data.N:Mp[0] <m>_R <d -> b>_N)
                         (\ (ds2 :: (d -> b, GHC.Types.Bool)) ->
                          case ds2 of wild { (,) h b1 ->
                          GHC.Base.mplus
                            @ m
                            $dMonadPlus
                            @ (b, GHC.Types.Bool)
                            (GHC.Base.>>=
                               @ m
                               $dMonad
                               @ d
                               @ (b, GHC.Types.Bool)
                               lvl448
                               (\ (y' :: d) ->
                                GHC.Base.return
                                  @ m
                                  $dMonad
                                  @ (b, GHC.Types.Bool)
                                  (h y', GHC.Types.True)))
                            (GHC.Base.return @ m $dMonad @ (b, GHC.Types.Bool) (h y, b1)) }))
                        `cast`
                      (forall (d :: <*>_N) (b :: <*>_N).
                       <Data.Data.Data d>_R
                       ->_R <Data.Data.Mp m (d -> b)>_R
                       ->_R <d>_R
                       ->_R Sym (Data.Data.N:Mp[0] <m>_R <b>_N))
                      (\ @ g (g1 :: g) ->
                       GHC.Base.return
                         @ m
                         $dMonad
                         @ (g, GHC.Types.Bool)
                         (g1, GHC.Types.False))
                        `cast`
                      (forall (g :: <*>_N).
                       <g>_R ->_R Sym (Data.Data.N:Mp[0] <m>_R <g>_N))
                      eta)
                     `cast`
                   (Data.Data.N:Mp[0]
                        <m>_R <Language.Python.Common.AST.ImportRelative annot1>_N)
                   (\ (ds1 :: (Language.Python.Common.AST.ImportRelative annot1,
                               GHC.Types.Bool)) ->
                    case ds1 of wild { (,) x' b ->
                    case b of wild1 {
                      GHC.Types.False -> lvl447
                      GHC.Types.True
                      -> GHC.Base.return
                           @ m
                           $dMonad
                           @ (Language.Python.Common.AST.ImportRelative annot1)
                           x' } })) -}
01a50092e1f9a1aefabdff796e5265a4
  $fDataImportRelative_$cgmapQ ::
    Data.Data.Data annot =>
    forall u.
    (forall d. Data.Data.Data d => d -> u)
    -> Language.Python.Common.AST.ImportRelative annot -> [u]
  {- Arity: 3,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,C(C1(U))><L,U>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   @ u
                   (ds :: forall d. Data.Data.Data d => d -> u)
                   (x0 :: Language.Python.Common.AST.ImportRelative annot1) ->
                 (Language.Python.Common.AST.$fDataImportRelative_$cgfoldl
                    @ annot1
                    $dData
                    @ (Data.Data.Qr [u])
                    (\ @ d
                       @ b
                       ($dData1 :: Data.Data.Data d)
                       (ds1 :: Data.Data.Qr [u] (d -> b))
                       (x :: d)
                       (r1 :: [u]) ->
                     ds1 `cast` (Data.Data.N:Qr[0] <*>_N <[u]>_R <d -> b>_P)
                       (GHC.Types.: @ u (ds @ d $dData1 x) r1))
                      `cast`
                    (forall (d :: <*>_N) (b :: <*>_N).
                     <Data.Data.Data d>_R
                     ->_R <Data.Data.Qr [u] (d -> b)>_R
                     ->_R <d>_R
                     ->_R Sym (Data.Data.N:Qr[0] <*>_N <[u]>_R <b>_P))
                    (Language.Python.Common.AST.$fDataExpr4 @ u)
                      `cast`
                    (forall (g :: <*>_N).
                     <g>_R ->_R Sym (Data.Data.N:Qr[0] <*>_N <[u]>_R <g>_P))
                    x0)
                   `cast`
                 (Data.Data.N:Qr[0]
                      <*>_N <[u]>_R <Language.Python.Common.AST.ImportRelative annot1>_P)
                   (GHC.Types.[] @ u)) -}
01a50092e1f9a1aefabdff796e5265a4
  $fDataImportRelative_$cgmapQi ::
    Data.Data.Data annot =>
    forall u.
    GHC.Types.Int
    -> (forall d. Data.Data.Data d => d -> u)
    -> Language.Python.Common.AST.ImportRelative annot
    -> u
  {- Arity: 4,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,U(U)><L,C(C1(U))><L,U>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   @ u
                   (ds :: GHC.Types.Int)
                   (ds1 :: forall d. Data.Data.Data d => d -> u)
                   (x :: Language.Python.Common.AST.ImportRelative annot1) ->
                 case Language.Python.Common.AST.$fDataImportRelative_$cgfoldl
                        @ annot1
                        $dData
                        @ (Data.Data.Qi u)
                        (\ @ d
                           @ b
                           ($dData1 :: Data.Data.Data d)
                           (ds2 :: Data.Data.Qi u (d -> b))
                           (a2 :: d) ->
                         case ds2 of wild { Data.Data.Qi i' q ->
                         Data.Data.Qi
                           @ *
                           @ u
                           @ b
                           (case i' of wild1 { GHC.Types.I# x1 ->
                            GHC.Types.I# (GHC.Prim.+# x1 1#) })
                           (case ds of wild1 { GHC.Types.I# x1 ->
                            case i' of wild2 { GHC.Types.I# y ->
                            case GHC.Prim.tagToEnum#
                                   @ GHC.Types.Bool
                                   (GHC.Prim.==# x1 y) of wild3 {
                              GHC.Types.False -> q
                              GHC.Types.True -> GHC.Base.Just @ u (ds1 @ d $dData1 a2) } } }) })
                        (Language.Python.Common.AST.$fDataExpr1 @ u)
                        x of wild { Data.Data.Qi ds2 q ->
                 Data.Maybe.fromJust @ u q }) -}
01a50092e1f9a1aefabdff796e5265a4
  $fDataImportRelative_$cgmapQl ::
    Data.Data.Data annot =>
    forall r r'.
    (r -> r' -> r)
    -> r
    -> (forall d. Data.Data.Data d => d -> r')
    -> Language.Python.Common.AST.ImportRelative annot
    -> r
  {- Arity: 4,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,C(C1(U))><L,U><L,C(C1(U))>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   @ r
                   @ r'
                   (ds :: r -> r' -> r)
                   (ds1 :: r)
                   (ds2 :: forall d. Data.Data.Data d => d -> r') ->
                 let {
                   g :: Language.Python.Common.AST.ImportRelative annot1
                        -> Data.Functor.Const.Const
                             r (Language.Python.Common.AST.ImportRelative annot1)
                   = Language.Python.Common.AST.$fDataImportRelative_$cgfoldl
                       @ annot1
                       $dData
                       @ (Data.Functor.Const.Const r)
                       (\ @ d
                          @ b
                          ($dData1 :: Data.Data.Data d)
                          (c :: Data.Functor.Const.Const r (d -> b))
                          (x :: d) ->
                        ds
                          c `cast` (Data.Functor.Const.N:Const[0] <*>_N <r>_R <d -> b>_P)
                          (ds2 @ d $dData1 x))
                         `cast`
                       (forall (d :: <*>_N) (b :: <*>_N).
                        <Data.Data.Data d>_R
                        ->_R <Data.Functor.Const.Const r (d -> b)>_R
                        ->_R <d>_R
                        ->_R Sym (Data.Functor.Const.N:Const[0] <*>_N <r>_R <b>_P))
                       (\ @ g1 (ds3 :: g1) -> ds1)
                         `cast`
                       (forall (g1 :: <*>_N).
                        <g1>_R ->_R Sym (Data.Functor.Const.N:Const[0] <*>_N <r>_R <g1>_P))
                 } in
                 (\ (x :: Language.Python.Common.AST.ImportRelative annot1) -> g x)
                   `cast`
                 (<Language.Python.Common.AST.ImportRelative annot1>_R
                  ->_R Data.Functor.Const.N:Const[0]
                           <*>_N
                           <r>_R
                           <Language.Python.Common.AST.ImportRelative annot1>_P)) -}
01a50092e1f9a1aefabdff796e5265a4
  $fDataImportRelative_$cgmapQr ::
    Data.Data.Data annot =>
    forall r r'.
    (r' -> r -> r)
    -> r
    -> (forall d. Data.Data.Data d => d -> r')
    -> Language.Python.Common.AST.ImportRelative annot
    -> r
  {- Arity: 5,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,C(C1(U))><L,U><L,C(C1(U))><L,U>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   @ r
                   @ r'
                   (ds :: r' -> r -> r)
                   (ds1 :: r)
                   (ds2 :: forall d. Data.Data.Data d => d -> r')
                   (x0 :: Language.Python.Common.AST.ImportRelative annot1) ->
                 (Language.Python.Common.AST.$fDataImportRelative_$cgfoldl
                    @ annot1
                    $dData
                    @ (Data.Data.Qr r)
                    (\ @ d
                       @ b
                       ($dData1 :: Data.Data.Data d)
                       (ds3 :: Data.Data.Qr r (d -> b))
                       (x :: d)
                       (r1 :: r) ->
                     ds3 `cast` (Data.Data.N:Qr[0] <*>_N <r>_R <d -> b>_P)
                       (ds (ds2 @ d $dData1 x) r1))
                      `cast`
                    (forall (d :: <*>_N) (b :: <*>_N).
                     <Data.Data.Data d>_R
                     ->_R <Data.Data.Qr r (d -> b)>_R
                     ->_R <d>_R
                     ->_R Sym (Data.Data.N:Qr[0] <*>_N <r>_R <b>_P))
                    (Language.Python.Common.AST.$fDataExpr5 @ r)
                      `cast`
                    (forall (g :: <*>_N).
                     <g>_R ->_R Sym (Data.Data.N:Qr[0] <*>_N <r>_R <g>_P))
                    x0)
                   `cast`
                 (Data.Data.N:Qr[0]
                      <*>_N <r>_R <Language.Python.Common.AST.ImportRelative annot1>_P)
                   ds1) -}
01a50092e1f9a1aefabdff796e5265a4
  $fDataImportRelative_$cgunfold ::
    Data.Data.Data annot =>
    forall (c :: * -> *).
    (forall b r. Data.Data.Data b => c (b -> r) -> c r)
    -> (forall r. r -> c r)
    -> Data.Data.Constr
    -> c (Language.Python.Common.AST.ImportRelative annot)
  {- Arity: 1, Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   @ c :: * -> * ->
                 let {
                   $dData1 :: Data.Data.Data (Language.Python.Common.AST.Ident annot1)
                   = Language.Python.Common.AST.$fDataIdent @ annot1 $dData
                 } in
                 let {
                   $dData2 :: Data.Data.Data [Language.Python.Common.AST.Ident annot1]
                   = Data.Data.$fData[]
                       @ (Language.Python.Common.AST.Ident annot1)
                       $dData1
                 } in
                 let {
                   $dData3 :: Data.Data.Data
                                (GHC.Base.Maybe (Language.Python.Common.AST.DottedName annot1))
                   = Data.Data.$fDataMaybe
                       @ [Language.Python.Common.AST.Ident annot1]
                       $dData2
                 } in
                 \ (k :: forall b r. Data.Data.Data b => c (b -> r) -> c r)
                   (z :: forall r. r -> c r)
                   (ds :: Data.Data.Constr) ->
                 k @ annot1
                   @ (Language.Python.Common.AST.ImportRelative annot1)
                   $dData
                   (k @ (GHC.Base.Maybe
                           (Language.Python.Common.AST.DottedName annot1))
                      @ (annot1 -> Language.Python.Common.AST.ImportRelative annot1)
                      $dData3
                      (k @ GHC.Types.Int
                         @ (GHC.Base.Maybe (Language.Python.Common.AST.DottedName annot1)
                            -> annot1 -> Language.Python.Common.AST.ImportRelative annot1)
                         Data.Data.$fDataInt
                         (z @ (GHC.Types.Int
                               -> GHC.Base.Maybe (Language.Python.Common.AST.DottedName annot1)
                               -> annot1
                               -> Language.Python.Common.AST.ImportRelative annot1)
                            (Language.Python.Common.AST.ImportRelative @ annot1))))) -}
01a50092e1f9a1aefabdff796e5265a4
  $fDataImportRelative_$cp1Data ::
    Data.Data.Data annot =>
    Data.Typeable.Internal.Typeable
      (Language.Python.Common.AST.ImportRelative annot)
  {- Arity: 1, Strictness: <L,1*U(1*U,A,A,A,A,A,A,A,A,A,A,A,A,A,A)>,
     Unfolding: (\ @ annot1 ($dData :: Data.Data.Data annot1) ->
                 let {
                   b1 :: Data.Typeable.Internal.Typeable annot1
                   = Data.Data.$p1Data @ annot1 $dData
                 } in
                 case GHC.Magic.noinline
                        @ ([GHC.Fingerprint.Type.Fingerprint]
                           -> GHC.Fingerprint.Type.Fingerprint)
                        GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           Language.Python.Common.AST.$fDataImportRelative7
                           (GHC.Types.:
                              @ GHC.Fingerprint.Type.Fingerprint
                              (Data.Typeable.Internal.typeRepFingerprint
                                 @ *
                                 @ annot1
                                 b1 `cast` (Data.Typeable.Internal.N:Typeable[0] <*>_N <annot1>_N))
                              (GHC.Types.[]
                                 @ GHC.Fingerprint.Type.Fingerprint))) of dt { GHC.Fingerprint.Type.Fingerprint dt1 dt2 ->
                 (Data.Typeable.Internal.TrApp
                    @ *
                    @ (Language.Python.Common.AST.ImportRelative annot1)
                    @ *
                    @ Language.Python.Common.AST.ImportRelative
                    @ annot1
                    @~ <Language.Python.Common.AST.ImportRelative annot1>_N
                    dt1
                    dt2
                    Language.Python.Common.AST.$fDataImportRelative_a3
                    b1 `cast` (Data.Typeable.Internal.N:Typeable[0] <*>_N <annot1>_N))
                   `cast`
                 (Sym (Data.Typeable.Internal.N:Typeable[0]) <*>_N <Language.Python.Common.AST.ImportRelative
                                                                      annot1>_N) }) -}
01a50092e1f9a1aefabdff796e5265a4
  $fDataImportRelative_a3 ::
    Data.Typeable.Internal.TypeRep
      Language.Python.Common.AST.ImportRelative
  {- Unfolding: (case GHC.Magic.noinline
                        @ ([GHC.Fingerprint.Type.Fingerprint]
                           -> GHC.Fingerprint.Type.Fingerprint)
                        GHC.Fingerprint.fingerprintFingerprints
                        Language.Python.Common.AST.$fDataImportRelative2 of dt { GHC.Fingerprint.Type.Fingerprint dt1 dt2 ->
                 Data.Typeable.Internal.TrTyCon
                   @ (* -> *)
                   @ Language.Python.Common.AST.ImportRelative
                   dt1
                   dt2
                   Language.Python.Common.AST.$tcImportRelative
                   (GHC.Types.[] @ Data.Typeable.Internal.SomeTypeRep) }) -}
789db2a4b3c023a9cf43afdd1f0c3249
  $fDataModule ::
    Data.Data.Data annot =>
    Data.Data.Data (Language.Python.Common.AST.Module annot)
  DFunId
  {- Arity: 1, Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)>,
     Inline: CONLIKE,
     Unfolding: DFun: @ annot1 (v :: Data.Data.Data annot1).
                  @ (Language.Python.Common.AST.Module annot1)
                  (Language.Python.Common.AST.$fDataModule_$cp1Data @ annot1 v)
                  (Language.Python.Common.AST.$fDataModule_$cgfoldl @ annot1 v)
                  (Language.Python.Common.AST.$fDataModule_$cgunfold @ annot1 v)
                  (\ (ds :: Language.Python.Common.AST.Module annot1) ->
                   Language.Python.Common.AST.$cModule)
                  (\ (ds :: Language.Python.Common.AST.Module annot1) ->
                   Language.Python.Common.AST.$tModule)
                  (Language.Python.Common.AST.$fDataModule_$cdataCast1 @ annot1 v)
                  (\ @ t :: * -> * -> *
                     @ c :: * -> *
                     ($dTypeable :: Data.Typeable.Internal.Typeable t)
                     (ds :: forall d e.
                            (Data.Data.Data d, Data.Data.Data e) =>
                            c (t d e)) ->
                   GHC.Base.Nothing @ (c (Language.Python.Common.AST.Module annot1)))
                  (Language.Python.Common.AST.$fDataModule3 @ annot1 v)
                    `cast`
                  (Trans
                       (<forall b. Data.Data.Data b => b -> b>_R
                        ->_R <Language.Python.Common.AST.Module annot1>_R
                        ->_R Sym (Data.Functor.Identity.N:Identity[0]
                                      (Language.Python.Common.AST.N:Module[0] <annot1>_R)))
                       (<forall b. Data.Data.Data b => b -> b>_R
                        ->_R <Language.Python.Common.AST.Module annot1>_R
                        ->_R Data.Functor.Identity.N:Identity[0]
                                 <Language.Python.Common.AST.Module annot1>_R))
                  (Language.Python.Common.AST.$fDataModule_$cgmapQl @ annot1 v)
                  (Language.Python.Common.AST.$fDataModule_$cgmapQr @ annot1 v)
                  (Language.Python.Common.AST.$fDataModule_$cgmapQ @ annot1 v)
                  (Language.Python.Common.AST.$fDataModule_$cgmapQi @ annot1 v)
                  (Language.Python.Common.AST.$fDataModule_$cgmapM @ annot1 v)
                  (Language.Python.Common.AST.$fDataModule_$cgmapMp @ annot1 v)
                  (Language.Python.Common.AST.$fDataModule_$cgmapMo @ annot1 v) -}
789db2a4b3c023a9cf43afdd1f0c3249
  $fDataModule1 ::
    ([Language.Python.Common.AST.Statement annot]
     -> Language.Python.Common.AST.Module annot,
     GHC.Types.Bool)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (\ @ annot1 ->
                 ((Language.Python.Common.AST.$fDataModule2 @ annot1)
                    `cast`
                  (<[Language.Python.Common.AST.Statement annot1]>_R
                   ->_R Sym (Language.Python.Common.AST.N:Module[0] <annot1>_R)),
                  GHC.Types.False)) -}
df4eaa4f9bcd5227982fa8fef8fc2546
  $fDataModule2 ::
    [Language.Python.Common.AST.Statement annot]
    -> [Language.Python.Common.AST.Statement annot]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, True)
                (\ @ annot1 (v :: [Language.Python.Common.AST.Statement annot1]) ->
                 v) -}
789db2a4b3c023a9cf43afdd1f0c3249
  $fDataModule3 ::
    Data.Data.Data annot =>
    (forall b. Data.Data.Data b => b -> b)
    -> Language.Python.Common.AST.Module annot
    -> [Language.Python.Common.AST.Statement annot]
  {- Arity: 3,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><C(C(S)),1*C1(C1(U))><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   (ds :: forall b. Data.Data.Data b => b -> b)
                   (x0 :: Language.Python.Common.AST.Module annot1) ->
                 ds
                   @ [Language.Python.Common.AST.Statement annot1]
                   (Data.Data.$fData[]
                      @ (Language.Python.Common.AST.Statement annot1)
                      (Language.Python.Common.AST.$fDataStatement @ annot1 $dData))
                   x0 `cast` (Language.Python.Common.AST.N:Module[0] <annot1>_R)) -}
9ac4060e082e241efa132f4df728dcad
  $fDataModule4 :: [GHC.Fingerprint.Type.Fingerprint]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Fingerprint.Type.Fingerprint
                   Language.Python.Common.AST.$fDataModule5
                   Language.Python.Common.AST.$fDataExpr9) -}
94e7ffe908d2d0678850c0e91aa96fbf
  $fDataModule5 :: GHC.Fingerprint.Type.Fingerprint
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Fingerprint.Type.Fingerprint
                   2398960698968220578##
                   16185381389637862158##) -}
b24e77d9d365868c3af7fdc43067b59b
  $fDataModule6 :: Data.Data.DataRep
  {- Strictness: m1,
     Unfolding: (Data.Data.AlgRep
                   Language.Python.Common.AST.$fDataModule7) -}
936aa59b39274c15678e591568c0be66
  $fDataModule7 :: [Data.Data.Constr]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Data.Data.Constr
                   Language.Python.Common.AST.$cModule
                   (GHC.Types.[] @ Data.Data.Constr)) -}
433937dd3ab63ea82cf387d838c7465c
  $fDataModule8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.Python.Common.AST.$tcModule2) -}
789db2a4b3c023a9cf43afdd1f0c3249
  $fDataModule9 :: GHC.Fingerprint.Type.Fingerprint
  {- Unfolding: (case Language.Python.Common.AST.$fDataModule_a3 of wild { Data.Typeable.Internal.TrTyCon dt dt1 ds1 ds2 ->
                 GHC.Fingerprint.Type.Fingerprint dt dt1 }) -}
789db2a4b3c023a9cf43afdd1f0c3249
  $fDataModule_$cdataCast1 ::
    Data.Data.Data annot =>
    forall (t :: * -> *) (c :: * -> *).
    Data.Typeable.Internal.Typeable t =>
    (forall d. Data.Data.Data d => c (t d))
    -> GHC.Base.Maybe (c (Language.Python.Common.AST.Module annot))
  {- Arity: 2, Strictness: <L,U><L,1*U>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   @ t :: * -> *
                   @ c :: * -> *
                   ($dTypeable :: Data.Typeable.Internal.Typeable t) ->
                 let {
                   lvl447 :: GHC.Base.Maybe
                               (t Data.Type.Equality.:~~: Language.Python.Common.AST.Module)
                   = Data.Typeable.Internal.eqTypeRep
                       @ (* -> *)
                       @ (* -> *)
                       @ t
                       @ Language.Python.Common.AST.Module
                       $dTypeable
                         `cast`
                       (Data.Typeable.Internal.N:Typeable[0] <* -> *>_N <t>_N)
                       Language.Python.Common.AST.$fDataModule_a3
                 } in
                 \ (f12 :: forall d. Data.Data.Data d => c (t d)) ->
                 case lvl447 of wild {
                   GHC.Base.Nothing
                   -> GHC.Base.Nothing
                        @ (c (Language.Python.Common.AST.Module annot1))
                   GHC.Base.Just ds
                   -> case ds of wild1 { Data.Type.Equality.HRefl cobox cobox1 ->
                      GHC.Base.Just
                        @ (c (Language.Python.Common.AST.Module annot1))
                        (f12 @ annot1 $dData)
                          `cast`
                        (<c>_R (Sym cobox1 <annot1>_N)) } }) -}
789db2a4b3c023a9cf43afdd1f0c3249
  $fDataModule_$cgfoldl ::
    Data.Data.Data annot =>
    forall (c :: * -> *).
    (forall d b. Data.Data.Data d => c (d -> b) -> d -> c b)
    -> (forall g. g -> c g)
    -> Language.Python.Common.AST.Module annot
    -> c (Language.Python.Common.AST.Module annot)
  {- Arity: 1, Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   @ c :: * -> * ->
                 let {
                   $dData1 :: Data.Data.Data
                                (Language.Python.Common.AST.Statement annot1)
                   = Language.Python.Common.AST.$fDataStatement @ annot1 $dData
                 } in
                 let {
                   $dData2 :: Data.Data.Data
                                [Language.Python.Common.AST.Statement annot1]
                   = Data.Data.$fData[]
                       @ (Language.Python.Common.AST.Statement annot1)
                       $dData1
                 } in
                 \ (k :: forall d b. Data.Data.Data d => c (d -> b) -> d -> c b)
                   (z :: forall g. g -> c g)
                   (ds :: Language.Python.Common.AST.Module annot1) ->
                 k @ [Language.Python.Common.AST.Statement annot1]
                   @ (Language.Python.Common.AST.Module annot1)
                   $dData2
                   (z @ ([Language.Python.Common.AST.Statement annot1]
                         -> Language.Python.Common.AST.Module annot1)
                      (Language.Python.Common.AST.$fDataModule2 @ annot1)
                        `cast`
                      (<[Language.Python.Common.AST.Statement annot1]>_R
                       ->_R Sym (Language.Python.Common.AST.N:Module[0] <annot1>_R)))
                   ds `cast` (Language.Python.Common.AST.N:Module[0] <annot1>_R)) -}
789db2a4b3c023a9cf43afdd1f0c3249
  $fDataModule_$cgmapM ::
    Data.Data.Data annot =>
    forall (m :: * -> *).
    GHC.Base.Monad m =>
    (forall d. Data.Data.Data d => d -> m d)
    -> Language.Python.Common.AST.Module annot
    -> m (Language.Python.Common.AST.Module annot)
  {- Arity: 3,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,U(A,C(C1(U)),A,C(U),A)><L,C(C1(U))>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   @ m :: * -> *
                   ($dMonad :: GHC.Base.Monad m)
                   (ds :: forall d. Data.Data.Data d => d -> m d) ->
                 let {
                   $dData1 :: Data.Data.Data
                                (Language.Python.Common.AST.Statement annot1)
                   = Language.Python.Common.AST.$fDataStatement @ annot1 $dData
                 } in
                 let {
                   $dData2 :: Data.Data.Data
                                [Language.Python.Common.AST.Statement annot1]
                   = Data.Data.$fData[]
                       @ (Language.Python.Common.AST.Statement annot1)
                       $dData1
                 } in
                 let {
                   lvl447 :: m ([Language.Python.Common.AST.Statement annot1]
                                -> Language.Python.Common.AST.Module annot1)
                   = GHC.Base.return
                       @ m
                       $dMonad
                       @ ([Language.Python.Common.AST.Statement annot1]
                          -> Language.Python.Common.AST.Module annot1)
                       (Language.Python.Common.AST.$fDataModule2 @ annot1)
                         `cast`
                       (<[Language.Python.Common.AST.Statement annot1]>_R
                        ->_R Sym (Language.Python.Common.AST.N:Module[0] <annot1>_R))
                 } in
                 \ (ds1 :: Language.Python.Common.AST.Module annot1) ->
                 let {
                   lvl448 :: m [Language.Python.Common.AST.Statement annot1]
                   = ds
                       @ [Language.Python.Common.AST.Statement annot1]
                       $dData2
                       ds1 `cast` (Language.Python.Common.AST.N:Module[0] <annot1>_R)
                 } in
                 GHC.Base.>>=
                   @ m
                   $dMonad
                   @ ([Language.Python.Common.AST.Statement annot1]
                      -> Language.Python.Common.AST.Module annot1)
                   @ (Language.Python.Common.AST.Module annot1)
                   lvl447
                   (\ (c' :: [Language.Python.Common.AST.Statement annot1]
                             -> Language.Python.Common.AST.Module annot1) ->
                    GHC.Base.>>=
                      @ m
                      $dMonad
                      @ [Language.Python.Common.AST.Statement annot1]
                      @ (Language.Python.Common.AST.Module annot1)
                      lvl448
                      (\ (x' :: [Language.Python.Common.AST.Statement annot1]) ->
                       GHC.Base.return
                         @ m
                         $dMonad
                         @ (Language.Python.Common.AST.Module annot1)
                         (c' x')))) -}
789db2a4b3c023a9cf43afdd1f0c3249
  $fDataModule_$cgmapMo ::
    Data.Data.Data annot =>
    forall (m :: * -> *).
    GHC.Base.MonadPlus m =>
    (forall d. Data.Data.Data d => d -> m d)
    -> Language.Python.Common.AST.Module annot
    -> m (Language.Python.Common.AST.Module annot)
  {- Arity: 4,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><S(LS(LC(C(S))LLL)LL),U(A,1*U(A,C(C1(U)),A,C(U),A),1*U,C(C1(U)))><L,1*C1(C1(U))><L,U>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   @ m :: * -> *
                   ($dMonadPlus :: GHC.Base.MonadPlus m)
                   (ds :: forall d. Data.Data.Data d => d -> m d)
                   (eta :: Language.Python.Common.AST.Module annot1) ->
                 let {
                   $dMonad :: GHC.Base.Monad m = GHC.Base.$p2MonadPlus @ m $dMonadPlus
                 } in
                 let {
                   lvl447 :: m (Language.Python.Common.AST.Module annot1)
                   = GHC.Base.mzero
                       @ m
                       $dMonadPlus
                       @ (Language.Python.Common.AST.Module annot1)
                 } in
                 GHC.Base.>>=
                   @ m
                   $dMonad
                   @ (Language.Python.Common.AST.Module annot1, GHC.Types.Bool)
                   @ (Language.Python.Common.AST.Module annot1)
                   (let {
                      lvl448 :: m [Language.Python.Common.AST.Statement annot1]
                      = ds
                          @ [Language.Python.Common.AST.Statement annot1]
                          (Data.Data.$fData[]
                             @ (Language.Python.Common.AST.Statement annot1)
                             (Language.Python.Common.AST.$fDataStatement @ annot1 $dData))
                          eta `cast` (Language.Python.Common.AST.N:Module[0] <annot1>_R)
                    } in
                    GHC.Base.>>=
                      @ m
                      $dMonad
                      @ ([Language.Python.Common.AST.Statement annot1]
                         -> Language.Python.Common.AST.Module annot1,
                         GHC.Types.Bool)
                      @ (Language.Python.Common.AST.Module annot1, GHC.Types.Bool)
                      (GHC.Base.return
                         @ m
                         $dMonad
                         @ ([Language.Python.Common.AST.Statement annot1]
                            -> Language.Python.Common.AST.Module annot1,
                            GHC.Types.Bool)
                         (Language.Python.Common.AST.$fDataModule1 @ annot1))
                      (\ (ds1 :: ([Language.Python.Common.AST.Statement annot1]
                                  -> Language.Python.Common.AST.Module annot1,
                                  GHC.Types.Bool)) ->
                       case ds1 of wild { (,) h b1 ->
                       case b1 of wild1 {
                         GHC.Types.False
                         -> GHC.Base.mplus
                              @ m
                              $dMonadPlus
                              @ (Language.Python.Common.AST.Module annot1, GHC.Types.Bool)
                              (GHC.Base.>>=
                                 @ m
                                 $dMonad
                                 @ [Language.Python.Common.AST.Statement annot1]
                                 @ (Language.Python.Common.AST.Module annot1, GHC.Types.Bool)
                                 lvl448
                                 (\ (y' :: [Language.Python.Common.AST.Statement annot1]) ->
                                  GHC.Base.return
                                    @ m
                                    $dMonad
                                    @ (Language.Python.Common.AST.Module annot1, GHC.Types.Bool)
                                    (h y', GHC.Types.True)))
                              (GHC.Base.return
                                 @ m
                                 $dMonad
                                 @ (Language.Python.Common.AST.Module annot1, GHC.Types.Bool)
                                 (h eta `cast` (Language.Python.Common.AST.N:Module[0] <annot1>_R),
                                  GHC.Types.False))
                         GHC.Types.True
                         -> GHC.Base.return
                              @ m
                              $dMonad
                              @ (Language.Python.Common.AST.Module annot1, GHC.Types.Bool)
                              (h eta `cast` (Language.Python.Common.AST.N:Module[0] <annot1>_R),
                               GHC.Types.True) } }))
                   (\ (ds1 :: (Language.Python.Common.AST.Module annot1,
                               GHC.Types.Bool)) ->
                    case ds1 of wild { (,) x' b ->
                    case b of wild1 {
                      GHC.Types.False -> lvl447
                      GHC.Types.True
                      -> GHC.Base.return
                           @ m
                           $dMonad
                           @ (Language.Python.Common.AST.Module annot1)
                           x' } })) -}
789db2a4b3c023a9cf43afdd1f0c3249
  $fDataModule_$cgmapMp ::
    Data.Data.Data annot =>
    forall (m :: * -> *).
    GHC.Base.MonadPlus m =>
    (forall d. Data.Data.Data d => d -> m d)
    -> Language.Python.Common.AST.Module annot
    -> m (Language.Python.Common.AST.Module annot)
  {- Arity: 4,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><S(LS(LC(C(S))LLL)LL),U(A,1*U(A,C(C1(U)),A,C(U),A),1*U,C(C1(U)))><L,1*C1(C1(U))><L,U>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   @ m :: * -> *
                   ($dMonadPlus :: GHC.Base.MonadPlus m)
                   (ds :: forall d. Data.Data.Data d => d -> m d)
                   (eta :: Language.Python.Common.AST.Module annot1) ->
                 let {
                   $dMonad :: GHC.Base.Monad m = GHC.Base.$p2MonadPlus @ m $dMonadPlus
                 } in
                 let {
                   lvl447 :: m (Language.Python.Common.AST.Module annot1)
                   = GHC.Base.mzero
                       @ m
                       $dMonadPlus
                       @ (Language.Python.Common.AST.Module annot1)
                 } in
                 GHC.Base.>>=
                   @ m
                   $dMonad
                   @ (Language.Python.Common.AST.Module annot1, GHC.Types.Bool)
                   @ (Language.Python.Common.AST.Module annot1)
                   (let {
                      lvl448 :: m [Language.Python.Common.AST.Statement annot1]
                      = ds
                          @ [Language.Python.Common.AST.Statement annot1]
                          (Data.Data.$fData[]
                             @ (Language.Python.Common.AST.Statement annot1)
                             (Language.Python.Common.AST.$fDataStatement @ annot1 $dData))
                          eta `cast` (Language.Python.Common.AST.N:Module[0] <annot1>_R)
                    } in
                    GHC.Base.>>=
                      @ m
                      $dMonad
                      @ ([Language.Python.Common.AST.Statement annot1]
                         -> Language.Python.Common.AST.Module annot1,
                         GHC.Types.Bool)
                      @ (Language.Python.Common.AST.Module annot1, GHC.Types.Bool)
                      (GHC.Base.return
                         @ m
                         $dMonad
                         @ ([Language.Python.Common.AST.Statement annot1]
                            -> Language.Python.Common.AST.Module annot1,
                            GHC.Types.Bool)
                         (Language.Python.Common.AST.$fDataModule1 @ annot1))
                      (\ (ds1 :: ([Language.Python.Common.AST.Statement annot1]
                                  -> Language.Python.Common.AST.Module annot1,
                                  GHC.Types.Bool)) ->
                       case ds1 of wild { (,) h b1 ->
                       GHC.Base.mplus
                         @ m
                         $dMonadPlus
                         @ (Language.Python.Common.AST.Module annot1, GHC.Types.Bool)
                         (GHC.Base.>>=
                            @ m
                            $dMonad
                            @ [Language.Python.Common.AST.Statement annot1]
                            @ (Language.Python.Common.AST.Module annot1, GHC.Types.Bool)
                            lvl448
                            (\ (y' :: [Language.Python.Common.AST.Statement annot1]) ->
                             GHC.Base.return
                               @ m
                               $dMonad
                               @ (Language.Python.Common.AST.Module annot1, GHC.Types.Bool)
                               (h y', GHC.Types.True)))
                         (GHC.Base.return
                            @ m
                            $dMonad
                            @ (Language.Python.Common.AST.Module annot1, GHC.Types.Bool)
                            (h eta `cast` (Language.Python.Common.AST.N:Module[0] <annot1>_R),
                             b1)) }))
                   (\ (ds1 :: (Language.Python.Common.AST.Module annot1,
                               GHC.Types.Bool)) ->
                    case ds1 of wild { (,) x' b ->
                    case b of wild1 {
                      GHC.Types.False -> lvl447
                      GHC.Types.True
                      -> GHC.Base.return
                           @ m
                           $dMonad
                           @ (Language.Python.Common.AST.Module annot1)
                           x' } })) -}
789db2a4b3c023a9cf43afdd1f0c3249
  $fDataModule_$cgmapQ ::
    Data.Data.Data annot =>
    forall u.
    (forall d. Data.Data.Data d => d -> u)
    -> Language.Python.Common.AST.Module annot -> [u]
  {- Arity: 3,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,1*C1(C1(U))><L,U>m2,
     Unfolding: InlineRule (3, True, False)
                (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   @ u
                   (ds :: forall d. Data.Data.Data d => d -> u)
                   (x0 :: Language.Python.Common.AST.Module annot1) ->
                 GHC.Types.:
                   @ u
                   (ds
                      @ [Language.Python.Common.AST.Statement annot1]
                      (Data.Data.$fData[]
                         @ (Language.Python.Common.AST.Statement annot1)
                         (Language.Python.Common.AST.$fDataStatement @ annot1 $dData))
                      x0 `cast` (Language.Python.Common.AST.N:Module[0] <annot1>_R))
                   (GHC.Types.[] @ u)) -}
789db2a4b3c023a9cf43afdd1f0c3249
  $fDataModule_$cgmapQi ::
    Data.Data.Data annot =>
    forall u.
    GHC.Types.Int
    -> (forall d. Data.Data.Data d => d -> u)
    -> Language.Python.Common.AST.Module annot
    -> u
  {- Arity: 4,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><S(S),1*U(1*U)><C(C(S)),1*C1(C1(U))><L,U>,
     Unfolding: InlineRule (4, True, False)
                (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   @ u
                   (ds :: GHC.Types.Int)
                   (ds1 :: forall d. Data.Data.Data d => d -> u)
                   (x :: Language.Python.Common.AST.Module annot1) ->
                 case ds of wild { GHC.Types.I# x1 ->
                 case x1 of wild1 {
                   DEFAULT -> Data.Maybe.fromJust1 @ u
                   0#
                   -> ds1
                        @ [Language.Python.Common.AST.Statement annot1]
                        (Data.Data.$fData[]
                           @ (Language.Python.Common.AST.Statement annot1)
                           (Language.Python.Common.AST.$fDataStatement @ annot1 $dData))
                        x `cast`
                        (Language.Python.Common.AST.N:Module[0] <annot1>_R) } }) -}
789db2a4b3c023a9cf43afdd1f0c3249
  $fDataModule_$cgmapQl ::
    Data.Data.Data annot =>
    forall r r'.
    (r -> r' -> r)
    -> r
    -> (forall d. Data.Data.Data d => d -> r')
    -> Language.Python.Common.AST.Module annot
    -> r
  {- Arity: 4,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,C(C1(U))><L,U><L,C(C1(U))>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   @ r
                   @ r'
                   (ds :: r -> r' -> r)
                   (ds1 :: r)
                   (ds2 :: forall d. Data.Data.Data d => d -> r') ->
                 let {
                   $dData1 :: Data.Data.Data
                                (Language.Python.Common.AST.Statement annot1)
                   = Language.Python.Common.AST.$fDataStatement @ annot1 $dData
                 } in
                 let {
                   $dData2 :: Data.Data.Data
                                [Language.Python.Common.AST.Statement annot1]
                   = Data.Data.$fData[]
                       @ (Language.Python.Common.AST.Statement annot1)
                       $dData1
                 } in
                 \ (x :: Language.Python.Common.AST.Module annot1) ->
                 ds
                   ds1
                   (ds2
                      @ [Language.Python.Common.AST.Statement annot1]
                      $dData2
                      x `cast` (Language.Python.Common.AST.N:Module[0] <annot1>_R))) -}
789db2a4b3c023a9cf43afdd1f0c3249
  $fDataModule_$cgmapQr ::
    Data.Data.Data annot =>
    forall r r'.
    (r' -> r -> r)
    -> r
    -> (forall d. Data.Data.Data d => d -> r')
    -> Language.Python.Common.AST.Module annot
    -> r
  {- Arity: 5,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><C(C(S)),1*C1(C1(U))><L,U><L,1*C1(C1(U))><L,U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   @ r
                   @ r'
                   (ds :: r' -> r -> r)
                   (ds1 :: r)
                   (ds2 :: forall d. Data.Data.Data d => d -> r')
                   (x0 :: Language.Python.Common.AST.Module annot1) ->
                 ds
                   (ds2
                      @ [Language.Python.Common.AST.Statement annot1]
                      (Data.Data.$fData[]
                         @ (Language.Python.Common.AST.Statement annot1)
                         (Language.Python.Common.AST.$fDataStatement @ annot1 $dData))
                      x0 `cast` (Language.Python.Common.AST.N:Module[0] <annot1>_R))
                   ds1) -}
789db2a4b3c023a9cf43afdd1f0c3249
  $fDataModule_$cgunfold ::
    Data.Data.Data annot =>
    forall (c :: * -> *).
    (forall b r. Data.Data.Data b => c (b -> r) -> c r)
    -> (forall r. r -> c r)
    -> Data.Data.Constr
    -> c (Language.Python.Common.AST.Module annot)
  {- Arity: 1, Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   @ c :: * -> * ->
                 let {
                   $dData1 :: Data.Data.Data
                                (Language.Python.Common.AST.Statement annot1)
                   = Language.Python.Common.AST.$fDataStatement @ annot1 $dData
                 } in
                 let {
                   $dData2 :: Data.Data.Data
                                [Language.Python.Common.AST.Statement annot1]
                   = Data.Data.$fData[]
                       @ (Language.Python.Common.AST.Statement annot1)
                       $dData1
                 } in
                 \ (k :: forall b r. Data.Data.Data b => c (b -> r) -> c r)
                   (z :: forall r. r -> c r)
                   (ds :: Data.Data.Constr) ->
                 k @ [Language.Python.Common.AST.Statement annot1]
                   @ (Language.Python.Common.AST.Module annot1)
                   $dData2
                   (z @ ([Language.Python.Common.AST.Statement annot1]
                         -> Language.Python.Common.AST.Module annot1)
                      (Language.Python.Common.AST.$fDataModule2 @ annot1)
                        `cast`
                      (<[Language.Python.Common.AST.Statement annot1]>_R
                       ->_R Sym (Language.Python.Common.AST.N:Module[0] <annot1>_R)))) -}
789db2a4b3c023a9cf43afdd1f0c3249
  $fDataModule_$cp1Data ::
    Data.Data.Data annot =>
    Data.Typeable.Internal.Typeable
      (Language.Python.Common.AST.Module annot)
  {- Arity: 1, Strictness: <L,1*U(1*U,A,A,A,A,A,A,A,A,A,A,A,A,A,A)>,
     Unfolding: (\ @ annot1 ($dData :: Data.Data.Data annot1) ->
                 let {
                   b1 :: Data.Typeable.Internal.Typeable annot1
                   = Data.Data.$p1Data @ annot1 $dData
                 } in
                 case GHC.Magic.noinline
                        @ ([GHC.Fingerprint.Type.Fingerprint]
                           -> GHC.Fingerprint.Type.Fingerprint)
                        GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           Language.Python.Common.AST.$fDataModule9
                           (GHC.Types.:
                              @ GHC.Fingerprint.Type.Fingerprint
                              (Data.Typeable.Internal.typeRepFingerprint
                                 @ *
                                 @ annot1
                                 b1 `cast` (Data.Typeable.Internal.N:Typeable[0] <*>_N <annot1>_N))
                              (GHC.Types.[]
                                 @ GHC.Fingerprint.Type.Fingerprint))) of dt { GHC.Fingerprint.Type.Fingerprint dt1 dt2 ->
                 (Data.Typeable.Internal.TrApp
                    @ *
                    @ (Language.Python.Common.AST.Module annot1)
                    @ *
                    @ Language.Python.Common.AST.Module
                    @ annot1
                    @~ <Language.Python.Common.AST.Module annot1>_N
                    dt1
                    dt2
                    Language.Python.Common.AST.$fDataModule_a3
                    b1 `cast` (Data.Typeable.Internal.N:Typeable[0] <*>_N <annot1>_N))
                   `cast`
                 (Sym (Data.Typeable.Internal.N:Typeable[0]) <*>_N <Language.Python.Common.AST.Module
                                                                      annot1>_N) }) -}
789db2a4b3c023a9cf43afdd1f0c3249
  $fDataModule_a3 ::
    Data.Typeable.Internal.TypeRep Language.Python.Common.AST.Module
  {- Unfolding: (case GHC.Magic.noinline
                        @ ([GHC.Fingerprint.Type.Fingerprint]
                           -> GHC.Fingerprint.Type.Fingerprint)
                        GHC.Fingerprint.fingerprintFingerprints
                        Language.Python.Common.AST.$fDataModule4 of dt { GHC.Fingerprint.Type.Fingerprint dt1 dt2 ->
                 Data.Typeable.Internal.TrTyCon
                   @ (* -> *)
                   @ Language.Python.Common.AST.Module
                   dt1
                   dt2
                   Language.Python.Common.AST.$tcModule
                   (GHC.Types.[] @ Data.Typeable.Internal.SomeTypeRep) }) -}
3e80c1212dbae482ce637a5dc72042ac
  $fDataOp ::
    Data.Data.Data annot =>
    Data.Data.Data (Language.Python.Common.AST.Op annot)
  DFunId
  {- Arity: 1, Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)>,
     Inline: CONLIKE,
     Unfolding: DFun: @ annot1 (v :: Data.Data.Data annot1).
                  @ (Language.Python.Common.AST.Op annot1)
                  (Language.Python.Common.AST.$fDataOp_$cp1Data @ annot1 v)
                  (Language.Python.Common.AST.$fDataOp_$cgfoldl @ annot1 v)
                  (Language.Python.Common.AST.$fDataOp_$cgunfold @ annot1 v)
                  (Language.Python.Common.AST.$fDataOp_$ctoConstr @ annot1 v)
                  (\ (ds :: Language.Python.Common.AST.Op annot1) ->
                   Language.Python.Common.AST.$tOp)
                  (Language.Python.Common.AST.$fDataOp_$cdataCast1 @ annot1 v)
                  (\ @ t :: * -> * -> *
                     @ c :: * -> *
                     ($dTypeable :: Data.Typeable.Internal.Typeable t)
                     (ds :: forall d e.
                            (Data.Data.Data d, Data.Data.Data e) =>
                            c (t d e)) ->
                   GHC.Base.Nothing @ (c (Language.Python.Common.AST.Op annot1)))
                  (Language.Python.Common.AST.$fDataOp2 @ annot1 v)
                    `cast`
                  (<forall b. Data.Data.Data b => b -> b>_R
                   ->_R <Language.Python.Common.AST.Op annot1>_R
                   ->_R Data.Functor.Identity.N:Identity[0]
                            <Language.Python.Common.AST.Op annot1>_R)
                  (Language.Python.Common.AST.$fDataOp1 @ annot1 v)
                    `cast`
                  (forall (r :: <*>_N) (r' :: <*>_N).
                   <r -> r' -> r>_R
                   ->_R <r>_R
                   ->_R <forall d. Data.Data.Data d => d -> r'>_R
                   ->_R <Language.Python.Common.AST.Op annot1>_R
                   ->_R Data.Functor.Const.N:Const[0]
                            <*>_N <r>_R <Language.Python.Common.AST.Op annot1>_P)
                  (Language.Python.Common.AST.$fDataOp_$cgmapQr @ annot1 v)
                  (Language.Python.Common.AST.$fDataOp_$cgmapQ @ annot1 v)
                  (Language.Python.Common.AST.$fDataOp_$cgmapQi @ annot1 v)
                  (Language.Python.Common.AST.$fDataOp_$cgmapM @ annot1 v)
                  (Language.Python.Common.AST.$fDataOp_$cgmapMp @ annot1 v)
                  (Language.Python.Common.AST.$fDataOp_$cgmapMo @ annot1 v) -}
3e80c1212dbae482ce637a5dc72042ac
  $fDataOp1 ::
    Data.Data.Data annot =>
    forall r r'.
    (r -> r' -> r)
    -> r
    -> (forall d. Data.Data.Data d => d -> r')
    -> Language.Python.Common.AST.Op annot
    -> Data.Functor.Const.Const r (Language.Python.Common.AST.Op annot)
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,U><C(C(S)),1*C1(C1(U))><L,1*U><L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   @ r
                   @ r'
                   (ds :: r -> r' -> r)
                   (ds1 :: r)
                   (ds2 :: forall d. Data.Data.Data d => d -> r')
                   (eta :: Language.Python.Common.AST.Op annot1) ->
                 Language.Python.Common.AST.$fDataOp_$cgfoldl
                   @ annot1
                   $dData
                   @ (Data.Functor.Const.Const r)
                   (\ @ d
                      @ b
                      ($dData1 :: Data.Data.Data d)[OneShot]
                      (c :: Data.Functor.Const.Const r (d -> b))[OneShot]
                      (x :: d)[OneShot] ->
                    ds
                      c `cast` (Data.Functor.Const.N:Const[0] <*>_N <r>_R <d -> b>_P)
                      (ds2 @ d $dData1 x))
                     `cast`
                   (forall (d :: <*>_N) (b :: <*>_N).
                    <Data.Data.Data d>_R
                    ->_R <Data.Functor.Const.Const r (d -> b)>_R
                    ->_R <d>_R
                    ->_R Sym (Data.Functor.Const.N:Const[0] <*>_N <r>_R <b>_P))
                   (\ @ g1 (ds3 :: g1)[OneShot] -> ds1)
                     `cast`
                   (forall (g1 :: <*>_N).
                    <g1>_R ->_R Sym (Data.Functor.Const.N:Const[0] <*>_N <r>_R <g1>_P))
                   eta) -}
3e80c1212dbae482ce637a5dc72042ac
  $fDataOp2 ::
    Data.Data.Data annot =>
    (forall b. Data.Data.Data b => b -> b)
    -> Language.Python.Common.AST.Op annot
    -> Data.Functor.Identity.Identity
         (Language.Python.Common.AST.Op annot)
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   (ds :: forall b. Data.Data.Data b => b -> b)
                   (x0 :: Language.Python.Common.AST.Op annot1) ->
                 Language.Python.Common.AST.$fDataOp_$cgfoldl
                   @ annot1
                   $dData
                   @ Data.Functor.Identity.Identity
                   (\ @ d
                      @ b
                      ($dData1 :: Data.Data.Data d)[OneShot]
                      (ds1 :: Data.Functor.Identity.Identity (d -> b))[OneShot]
                      (x :: d)[OneShot] ->
                    ds1 `cast` (Data.Functor.Identity.N:Identity[0] <d -> b>_R)
                      (ds @ d $dData1 x))
                     `cast`
                   (forall (d :: <*>_N) (b :: <*>_N).
                    <Data.Data.Data d>_R
                    ->_R <Data.Functor.Identity.Identity (d -> b)>_R
                    ->_R <d>_R
                    ->_R Sym (Data.Functor.Identity.N:Identity[0] <b>_R))
                   Language.Python.Common.AST.$fDataExpr7
                     `cast`
                   (forall (g :: <*>_N).
                    <g>_R ->_R Sym (Data.Functor.Identity.N:Identity[0] <g>_R))
                   x0) -}
9d7d81fb1ec9ea4b6c0b17d7aa7be49b
  $fDataOp3 :: [GHC.Fingerprint.Type.Fingerprint]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Fingerprint.Type.Fingerprint
                   Language.Python.Common.AST.$fDataOp4
                   Language.Python.Common.AST.$fDataExpr9) -}
fa46558c155844dfe07f399737704196
  $fDataOp4 :: GHC.Fingerprint.Type.Fingerprint
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Fingerprint.Type.Fingerprint
                   3990261431762444287##
                   16954653035293550001##) -}
3e80c1212dbae482ce637a5dc72042ac
  $fDataOp5 :: GHC.Fingerprint.Type.Fingerprint
  {- Unfolding: (case Language.Python.Common.AST.$fDataOp_a3 of wild { Data.Typeable.Internal.TrTyCon dt dt1 ds1 ds2 ->
                 GHC.Fingerprint.Type.Fingerprint dt dt1 }) -}
3e80c1212dbae482ce637a5dc72042ac
  $fDataOp_$cdataCast1 ::
    Data.Data.Data annot =>
    forall (t :: * -> *) (c :: * -> *).
    Data.Typeable.Internal.Typeable t =>
    (forall d. Data.Data.Data d => c (t d))
    -> GHC.Base.Maybe (c (Language.Python.Common.AST.Op annot))
  {- Arity: 2, Strictness: <L,U><L,1*U>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   @ t :: * -> *
                   @ c :: * -> *
                   ($dTypeable :: Data.Typeable.Internal.Typeable t) ->
                 let {
                   lvl447 :: GHC.Base.Maybe
                               (t Data.Type.Equality.:~~: Language.Python.Common.AST.Op)
                   = Data.Typeable.Internal.eqTypeRep
                       @ (* -> *)
                       @ (* -> *)
                       @ t
                       @ Language.Python.Common.AST.Op
                       $dTypeable
                         `cast`
                       (Data.Typeable.Internal.N:Typeable[0] <* -> *>_N <t>_N)
                       Language.Python.Common.AST.$fDataOp_a3
                 } in
                 \ (f12 :: forall d. Data.Data.Data d => c (t d)) ->
                 case lvl447 of wild {
                   GHC.Base.Nothing
                   -> GHC.Base.Nothing @ (c (Language.Python.Common.AST.Op annot1))
                   GHC.Base.Just ds
                   -> case ds of wild1 { Data.Type.Equality.HRefl cobox cobox1 ->
                      GHC.Base.Just
                        @ (c (Language.Python.Common.AST.Op annot1))
                        (f12 @ annot1 $dData)
                          `cast`
                        (<c>_R (Sym cobox1 <annot1>_N)) } }) -}
3e80c1212dbae482ce637a5dc72042ac
  $fDataOp_$cgfoldl ::
    Data.Data.Data annot =>
    forall (c :: * -> *).
    (forall d b. Data.Data.Data d => c (d -> b) -> d -> c b)
    -> (forall g. g -> c g)
    -> Language.Python.Common.AST.Op annot
    -> c (Language.Python.Common.AST.Op annot)
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,U><C(C(C(S))),1*C1(C1(C1(U)))><L,1*C1(U)><S,1*U> -}
3e80c1212dbae482ce637a5dc72042ac
  $fDataOp_$cgmapM ::
    Data.Data.Data annot =>
    forall (m :: * -> *).
    GHC.Base.Monad m =>
    (forall d. Data.Data.Data d => d -> m d)
    -> Language.Python.Common.AST.Op annot
    -> m (Language.Python.Common.AST.Op annot)
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,U><S(LC(C(S))LLL),U(A,C(C1(U)),A,C(U),A)><L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   @ m :: * -> *
                   ($dMonad :: GHC.Base.Monad m)
                   (ds :: forall d. Data.Data.Data d => d -> m d)
                   (eta :: Language.Python.Common.AST.Op annot1) ->
                 Language.Python.Common.AST.$fDataOp_$cgfoldl
                   @ annot1
                   $dData
                   @ m
                   (\ @ d
                      @ b
                      ($dData1 :: Data.Data.Data d)[OneShot]
                      (c :: m (d -> b))[OneShot]
                      (x :: d)[OneShot] ->
                    let {
                      lvl447 :: m d = ds @ d $dData1 x
                    } in
                    GHC.Base.>>=
                      @ m
                      $dMonad
                      @ (d -> b)
                      @ b
                      c
                      (\ (c' :: d -> b) ->
                       GHC.Base.>>=
                         @ m
                         $dMonad
                         @ d
                         @ b
                         lvl447
                         (\ (x' :: d) -> GHC.Base.return @ m $dMonad @ b (c' x'))))
                   (\ @ g -> GHC.Base.return @ m $dMonad @ g)
                   eta) -}
3e80c1212dbae482ce637a5dc72042ac
  $fDataOp_$cgmapMo ::
    Data.Data.Data annot =>
    forall (m :: * -> *).
    GHC.Base.MonadPlus m =>
    (forall d. Data.Data.Data d => d -> m d)
    -> Language.Python.Common.AST.Op annot
    -> m (Language.Python.Common.AST.Op annot)
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,U><S(LS(LC(C(S))LLL)LL),U(A,1*U(A,C(C1(U)),A,C(U),A),1*U,C(C1(U)))><L,1*C1(C1(U))><L,1*U>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   @ m :: * -> *
                   ($dMonadPlus :: GHC.Base.MonadPlus m)
                   (ds :: forall d. Data.Data.Data d => d -> m d)
                   (eta :: Language.Python.Common.AST.Op annot1) ->
                 let {
                   $dMonad :: GHC.Base.Monad m = GHC.Base.$p2MonadPlus @ m $dMonadPlus
                 } in
                 let {
                   lvl447 :: m (Language.Python.Common.AST.Op annot1)
                   = GHC.Base.mzero
                       @ m
                       $dMonadPlus
                       @ (Language.Python.Common.AST.Op annot1)
                 } in
                 GHC.Base.>>=
                   @ m
                   $dMonad
                   @ (Language.Python.Common.AST.Op annot1, GHC.Types.Bool)
                   @ (Language.Python.Common.AST.Op annot1)
                   (Language.Python.Common.AST.$fDataOp_$cgfoldl
                      @ annot1
                      $dData
                      @ (Data.Data.Mp m)
                      (\ @ d
                         @ b
                         ($dData1 :: Data.Data.Data d)[OneShot]
                         (ds1 :: Data.Data.Mp m (d -> b))[OneShot]
                         (y :: d)[OneShot] ->
                       let {
                         lvl448 :: m d = ds @ d $dData1 y
                       } in
                       GHC.Base.>>=
                         @ m
                         $dMonad
                         @ (d -> b, GHC.Types.Bool)
                         @ (b, GHC.Types.Bool)
                         ds1 `cast` (Data.Data.N:Mp[0] <m>_R <d -> b>_N)
                         (\ (ds2 :: (d -> b, GHC.Types.Bool)) ->
                          case ds2 of wild { (,) h b1 ->
                          case b1 of wild1 {
                            GHC.Types.False
                            -> GHC.Base.mplus
                                 @ m
                                 $dMonadPlus
                                 @ (b, GHC.Types.Bool)
                                 (GHC.Base.>>=
                                    @ m
                                    $dMonad
                                    @ d
                                    @ (b, GHC.Types.Bool)
                                    lvl448
                                    (\ (y' :: d) ->
                                     GHC.Base.return
                                       @ m
                                       $dMonad
                                       @ (b, GHC.Types.Bool)
                                       (h y', GHC.Types.True)))
                                 (GHC.Base.return
                                    @ m
                                    $dMonad
                                    @ (b, GHC.Types.Bool)
                                    (h y, GHC.Types.False))
                            GHC.Types.True
                            -> GHC.Base.return
                                 @ m
                                 $dMonad
                                 @ (b, GHC.Types.Bool)
                                 (h y, GHC.Types.True) } }))
                        `cast`
                      (forall (d :: <*>_N) (b :: <*>_N).
                       <Data.Data.Data d>_R
                       ->_R <Data.Data.Mp m (d -> b)>_R
                       ->_R <d>_R
                       ->_R Sym (Data.Data.N:Mp[0] <m>_R <b>_N))
                      (\ @ g (g1 :: g)[OneShot] ->
                       GHC.Base.return
                         @ m
                         $dMonad
                         @ (g, GHC.Types.Bool)
                         (g1, GHC.Types.False))
                        `cast`
                      (forall (g :: <*>_N).
                       <g>_R ->_R Sym (Data.Data.N:Mp[0] <m>_R <g>_N))
                      eta)
                     `cast`
                   (Data.Data.N:Mp[0] <m>_R <Language.Python.Common.AST.Op annot1>_N)
                   (\ (ds1 :: (Language.Python.Common.AST.Op annot1,
                               GHC.Types.Bool)) ->
                    case ds1 of wild { (,) x' b ->
                    case b of wild1 {
                      GHC.Types.False -> lvl447
                      GHC.Types.True
                      -> GHC.Base.return
                           @ m
                           $dMonad
                           @ (Language.Python.Common.AST.Op annot1)
                           x' } })) -}
3e80c1212dbae482ce637a5dc72042ac
  $fDataOp_$cgmapMp ::
    Data.Data.Data annot =>
    forall (m :: * -> *).
    GHC.Base.MonadPlus m =>
    (forall d. Data.Data.Data d => d -> m d)
    -> Language.Python.Common.AST.Op annot
    -> m (Language.Python.Common.AST.Op annot)
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,U><S(LS(LC(C(S))LLL)LL),U(A,1*U(A,C(C1(U)),A,C(U),A),1*U,C(C1(U)))><L,1*C1(C1(U))><L,1*U>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   @ m :: * -> *
                   ($dMonadPlus :: GHC.Base.MonadPlus m)
                   (ds :: forall d. Data.Data.Data d => d -> m d)
                   (eta :: Language.Python.Common.AST.Op annot1) ->
                 let {
                   $dMonad :: GHC.Base.Monad m = GHC.Base.$p2MonadPlus @ m $dMonadPlus
                 } in
                 let {
                   lvl447 :: m (Language.Python.Common.AST.Op annot1)
                   = GHC.Base.mzero
                       @ m
                       $dMonadPlus
                       @ (Language.Python.Common.AST.Op annot1)
                 } in
                 GHC.Base.>>=
                   @ m
                   $dMonad
                   @ (Language.Python.Common.AST.Op annot1, GHC.Types.Bool)
                   @ (Language.Python.Common.AST.Op annot1)
                   (Language.Python.Common.AST.$fDataOp_$cgfoldl
                      @ annot1
                      $dData
                      @ (Data.Data.Mp m)
                      (\ @ d
                         @ b
                         ($dData1 :: Data.Data.Data d)[OneShot]
                         (ds1 :: Data.Data.Mp m (d -> b))[OneShot]
                         (y :: d)[OneShot] ->
                       let {
                         lvl448 :: m d = ds @ d $dData1 y
                       } in
                       GHC.Base.>>=
                         @ m
                         $dMonad
                         @ (d -> b, GHC.Types.Bool)
                         @ (b, GHC.Types.Bool)
                         ds1 `cast` (Data.Data.N:Mp[0] <m>_R <d -> b>_N)
                         (\ (ds2 :: (d -> b, GHC.Types.Bool)) ->
                          case ds2 of wild { (,) h b1 ->
                          GHC.Base.mplus
                            @ m
                            $dMonadPlus
                            @ (b, GHC.Types.Bool)
                            (GHC.Base.>>=
                               @ m
                               $dMonad
                               @ d
                               @ (b, GHC.Types.Bool)
                               lvl448
                               (\ (y' :: d) ->
                                GHC.Base.return
                                  @ m
                                  $dMonad
                                  @ (b, GHC.Types.Bool)
                                  (h y', GHC.Types.True)))
                            (GHC.Base.return @ m $dMonad @ (b, GHC.Types.Bool) (h y, b1)) }))
                        `cast`
                      (forall (d :: <*>_N) (b :: <*>_N).
                       <Data.Data.Data d>_R
                       ->_R <Data.Data.Mp m (d -> b)>_R
                       ->_R <d>_R
                       ->_R Sym (Data.Data.N:Mp[0] <m>_R <b>_N))
                      (\ @ g (g1 :: g)[OneShot] ->
                       GHC.Base.return
                         @ m
                         $dMonad
                         @ (g, GHC.Types.Bool)
                         (g1, GHC.Types.False))
                        `cast`
                      (forall (g :: <*>_N).
                       <g>_R ->_R Sym (Data.Data.N:Mp[0] <m>_R <g>_N))
                      eta)
                     `cast`
                   (Data.Data.N:Mp[0] <m>_R <Language.Python.Common.AST.Op annot1>_N)
                   (\ (ds1 :: (Language.Python.Common.AST.Op annot1,
                               GHC.Types.Bool)) ->
                    case ds1 of wild { (,) x' b ->
                    case b of wild1 {
                      GHC.Types.False -> lvl447
                      GHC.Types.True
                      -> GHC.Base.return
                           @ m
                           $dMonad
                           @ (Language.Python.Common.AST.Op annot1)
                           x' } })) -}
3e80c1212dbae482ce637a5dc72042ac
  $fDataOp_$cgmapQ ::
    Data.Data.Data annot =>
    forall u.
    (forall d. Data.Data.Data d => d -> u)
    -> Language.Python.Common.AST.Op annot -> [u]
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><L,C(C1(U))><S,1*U>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   @ u
                   (ds :: forall d. Data.Data.Data d => d -> u)
                   (x0 :: Language.Python.Common.AST.Op annot1) ->
                 (Language.Python.Common.AST.$fDataOp_$cgfoldl
                    @ annot1
                    $dData
                    @ (Data.Data.Qr [u])
                    (\ @ d
                       @ b
                       ($dData1 :: Data.Data.Data d)[OneShot]
                       (ds1 :: Data.Data.Qr [u] (d -> b))[OneShot]
                       (x :: d)[OneShot]
                       (r1 :: [u]) ->
                     ds1 `cast` (Data.Data.N:Qr[0] <*>_N <[u]>_R <d -> b>_P)
                       (GHC.Types.: @ u (ds @ d $dData1 x) r1))
                      `cast`
                    (forall (d :: <*>_N) (b :: <*>_N).
                     <Data.Data.Data d>_R
                     ->_R <Data.Data.Qr [u] (d -> b)>_R
                     ->_R <d>_R
                     ->_R Sym (Data.Data.N:Qr[0] <*>_N <[u]>_R <b>_P))
                    (Language.Python.Common.AST.$fDataExpr4 @ u)
                      `cast`
                    (forall (g :: <*>_N).
                     <g>_R ->_R Sym (Data.Data.N:Qr[0] <*>_N <[u]>_R <g>_P))
                    x0)
                   `cast`
                 (Data.Data.N:Qr[0]
                      <*>_N <[u]>_R <Language.Python.Common.AST.Op annot1>_P)
                   (GHC.Types.[] @ u)) -}
3e80c1212dbae482ce637a5dc72042ac
  $fDataOp_$cgmapQi ::
    Data.Data.Data annot =>
    forall u.
    GHC.Types.Int
    -> (forall d. Data.Data.Data d => d -> u)
    -> Language.Python.Common.AST.Op annot
    -> u
  {- Arity: 4, Strictness: <L,U><L,1*U(U)><L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   @ u
                   (ds :: GHC.Types.Int)
                   (ds1 :: forall d. Data.Data.Data d => d -> u)
                   (x :: Language.Python.Common.AST.Op annot1) ->
                 case Language.Python.Common.AST.$fDataOp_$cgfoldl
                        @ annot1
                        $dData
                        @ (Data.Data.Qi u)
                        (\ @ d
                           @ b
                           ($dData1 :: Data.Data.Data d)[OneShot]
                           (ds2 :: Data.Data.Qi u (d -> b))[OneShot]
                           (a2 :: d)[OneShot] ->
                         case ds2 of wild { Data.Data.Qi i' q ->
                         Data.Data.Qi
                           @ *
                           @ u
                           @ b
                           (case i' of wild1 { GHC.Types.I# x1 ->
                            GHC.Types.I# (GHC.Prim.+# x1 1#) })
                           (case ds of wild1 { GHC.Types.I# x1 ->
                            case i' of wild2 { GHC.Types.I# y ->
                            case GHC.Prim.tagToEnum#
                                   @ GHC.Types.Bool
                                   (GHC.Prim.==# x1 y) of wild3 {
                              GHC.Types.False -> q
                              GHC.Types.True -> GHC.Base.Just @ u (ds1 @ d $dData1 a2) } } }) })
                        (Language.Python.Common.AST.$fDataExpr1 @ u)
                        x of wild { Data.Data.Qi ds2 q ->
                 Data.Maybe.fromJust @ u q }) -}
3e80c1212dbae482ce637a5dc72042ac
  $fDataOp_$cgmapQr ::
    Data.Data.Data annot =>
    forall r r'.
    (r' -> r -> r)
    -> r
    -> (forall d. Data.Data.Data d => d -> r')
    -> Language.Python.Common.AST.Op annot
    -> r
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,U><L,C(C1(U))><L,U><L,C(C1(U))><S,1*U>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   @ r
                   @ r'
                   (ds :: r' -> r -> r)
                   (ds1 :: r)
                   (ds2 :: forall d. Data.Data.Data d => d -> r')
                   (x0 :: Language.Python.Common.AST.Op annot1) ->
                 (Language.Python.Common.AST.$fDataOp_$cgfoldl
                    @ annot1
                    $dData
                    @ (Data.Data.Qr r)
                    (\ @ d
                       @ b
                       ($dData1 :: Data.Data.Data d)[OneShot]
                       (ds3 :: Data.Data.Qr r (d -> b))[OneShot]
                       (x :: d)[OneShot]
                       (r1 :: r) ->
                     ds3 `cast` (Data.Data.N:Qr[0] <*>_N <r>_R <d -> b>_P)
                       (ds (ds2 @ d $dData1 x) r1))
                      `cast`
                    (forall (d :: <*>_N) (b :: <*>_N).
                     <Data.Data.Data d>_R
                     ->_R <Data.Data.Qr r (d -> b)>_R
                     ->_R <d>_R
                     ->_R Sym (Data.Data.N:Qr[0] <*>_N <r>_R <b>_P))
                    (Language.Python.Common.AST.$fDataExpr5 @ r)
                      `cast`
                    (forall (g :: <*>_N).
                     <g>_R ->_R Sym (Data.Data.N:Qr[0] <*>_N <r>_R <g>_P))
                    x0)
                   `cast`
                 (Data.Data.N:Qr[0]
                      <*>_N <r>_R <Language.Python.Common.AST.Op annot1>_P)
                   ds1) -}
3e80c1212dbae482ce637a5dc72042ac
  $fDataOp_$cgunfold ::
    Data.Data.Data annot =>
    forall (c :: * -> *).
    (forall b r. Data.Data.Data b => c (b -> r) -> c r)
    -> (forall r. r -> c r)
    -> Data.Data.Constr
    -> c (Language.Python.Common.AST.Op annot)
  {- Arity: 4,
     Strictness: <L,U><C(C(S)),1*C1(C1(U))><L,1*C1(U)><S(SLLLL),1*U(1*U,A,A,A,1*U(1*U,A))>,
     Inline: [0],
     Unfolding: InlineRule (4, True, False)
                (\ @ annot1
                   (w :: Data.Data.Data annot1)
                   @ c :: * -> *
                   (w249 :: forall b r. Data.Data.Data b => c (b -> r) -> c r)
                   (w250 :: forall r. r -> c r)
                   (w251 :: Data.Data.Constr) ->
                 case w251 of ww { Data.Data.Constr ww1 ww2 ww3 ww4 ww5 ->
                 Language.Python.Common.AST.$w$cgunfold1
                   @ annot1
                   w
                   @ c
                   w249
                   w250
                   ww1
                   ww5 }) -}
3e80c1212dbae482ce637a5dc72042ac
  $fDataOp_$cp1Data ::
    Data.Data.Data annot =>
    Data.Typeable.Internal.Typeable
      (Language.Python.Common.AST.Op annot)
  {- Arity: 1, Strictness: <L,1*U(1*U,A,A,A,A,A,A,A,A,A,A,A,A,A,A)>,
     Unfolding: (\ @ annot1 ($dData :: Data.Data.Data annot1) ->
                 let {
                   b1 :: Data.Typeable.Internal.Typeable annot1
                   = Data.Data.$p1Data @ annot1 $dData
                 } in
                 case GHC.Magic.noinline
                        @ ([GHC.Fingerprint.Type.Fingerprint]
                           -> GHC.Fingerprint.Type.Fingerprint)
                        GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           Language.Python.Common.AST.$fDataOp5
                           (GHC.Types.:
                              @ GHC.Fingerprint.Type.Fingerprint
                              (Data.Typeable.Internal.typeRepFingerprint
                                 @ *
                                 @ annot1
                                 b1 `cast` (Data.Typeable.Internal.N:Typeable[0] <*>_N <annot1>_N))
                              (GHC.Types.[]
                                 @ GHC.Fingerprint.Type.Fingerprint))) of dt { GHC.Fingerprint.Type.Fingerprint dt1 dt2 ->
                 (Data.Typeable.Internal.TrApp
                    @ *
                    @ (Language.Python.Common.AST.Op annot1)
                    @ *
                    @ Language.Python.Common.AST.Op
                    @ annot1
                    @~ <Language.Python.Common.AST.Op annot1>_N
                    dt1
                    dt2
                    Language.Python.Common.AST.$fDataOp_a3
                    b1 `cast` (Data.Typeable.Internal.N:Typeable[0] <*>_N <annot1>_N))
                   `cast`
                 (Sym (Data.Typeable.Internal.N:Typeable[0]) <*>_N <Language.Python.Common.AST.Op
                                                                      annot1>_N) }) -}
3e80c1212dbae482ce637a5dc72042ac
  $fDataOp_$ctoConstr ::
    Data.Data.Data annot =>
    Language.Python.Common.AST.Op annot -> Data.Data.Constr
  {- Arity: 2, Strictness: <L,A><S,1*U>m, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ @ annot1
                   (w :: Data.Data.Data annot1)
                   (w249 :: Language.Python.Common.AST.Op annot1) ->
                 case w249 of wild {
                   Language.Python.Common.AST.And ds
                   -> Language.Python.Common.AST.$cAnd
                   Language.Python.Common.AST.Or ds -> Language.Python.Common.AST.$cOr
                   Language.Python.Common.AST.Not ds
                   -> Language.Python.Common.AST.$cNot
                   Language.Python.Common.AST.Exponent ds
                   -> Language.Python.Common.AST.$cExponent
                   Language.Python.Common.AST.LessThan ds
                   -> Language.Python.Common.AST.$cLessThan
                   Language.Python.Common.AST.GreaterThan ds
                   -> Language.Python.Common.AST.$cGreaterThan
                   Language.Python.Common.AST.Equality ds
                   -> Language.Python.Common.AST.$cEquality
                   Language.Python.Common.AST.GreaterThanEquals ds
                   -> Language.Python.Common.AST.$cGreaterThanEquals
                   Language.Python.Common.AST.LessThanEquals ds
                   -> Language.Python.Common.AST.$cLessThanEquals
                   Language.Python.Common.AST.NotEquals ds
                   -> Language.Python.Common.AST.$cNotEquals
                   Language.Python.Common.AST.NotEqualsV2 ds
                   -> Language.Python.Common.AST.$cNotEqualsV2
                   Language.Python.Common.AST.In ds -> Language.Python.Common.AST.$cIn
                   Language.Python.Common.AST.Is ds -> Language.Python.Common.AST.$cIs
                   Language.Python.Common.AST.IsNot ds
                   -> Language.Python.Common.AST.$cIsNot
                   Language.Python.Common.AST.NotIn ds
                   -> Language.Python.Common.AST.$cNotIn
                   Language.Python.Common.AST.BinaryOr ds
                   -> Language.Python.Common.AST.$cBinaryOr
                   Language.Python.Common.AST.Xor ds
                   -> Language.Python.Common.AST.$cXor
                   Language.Python.Common.AST.BinaryAnd ds
                   -> Language.Python.Common.AST.$cBinaryAnd
                   Language.Python.Common.AST.ShiftLeft ds
                   -> Language.Python.Common.AST.$cShiftLeft
                   Language.Python.Common.AST.ShiftRight ds
                   -> Language.Python.Common.AST.$cShiftRight
                   Language.Python.Common.AST.Multiply ds
                   -> Language.Python.Common.AST.$cMultiply
                   Language.Python.Common.AST.Plus ds
                   -> Language.Python.Common.AST.$cPlus
                   Language.Python.Common.AST.Minus ds
                   -> Language.Python.Common.AST.$cMinus
                   Language.Python.Common.AST.Divide ds
                   -> Language.Python.Common.AST.$cDivide
                   Language.Python.Common.AST.FloorDivide ds
                   -> Language.Python.Common.AST.$cFloorDivide
                   Language.Python.Common.AST.MatrixMult ds
                   -> Language.Python.Common.AST.$cMatrixMult
                   Language.Python.Common.AST.Invert ds
                   -> Language.Python.Common.AST.$cInvert
                   Language.Python.Common.AST.Modulo ds
                   -> Language.Python.Common.AST.$cModulo }) -}
3e80c1212dbae482ce637a5dc72042ac
  $fDataOp_a3 ::
    Data.Typeable.Internal.TypeRep Language.Python.Common.AST.Op
  {- Unfolding: (case GHC.Magic.noinline
                        @ ([GHC.Fingerprint.Type.Fingerprint]
                           -> GHC.Fingerprint.Type.Fingerprint)
                        GHC.Fingerprint.fingerprintFingerprints
                        Language.Python.Common.AST.$fDataOp3 of dt { GHC.Fingerprint.Type.Fingerprint dt1 dt2 ->
                 Data.Typeable.Internal.TrTyCon
                   @ (* -> *)
                   @ Language.Python.Common.AST.Op
                   dt1
                   dt2
                   Language.Python.Common.AST.$tcOp
                   (GHC.Types.[] @ Data.Typeable.Internal.SomeTypeRep) }) -}
77aacf63ade2d28a10031365ad257b9f
  $fDataParamTuple ::
    Data.Data.Data annot =>
    Data.Data.Data (Language.Python.Common.AST.ParamTuple annot)
  DFunId
  {- Arity: 1, Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)>,
     Inline: CONLIKE,
     Unfolding: DFun: @ annot1 (v :: Data.Data.Data annot1).
                  @ (Language.Python.Common.AST.ParamTuple annot1)
                  (Language.Python.Common.AST.$fDataParamTuple_$cp1Data @ annot1 v)
                  (Language.Python.Common.AST.$fDataParamTuple_$cgfoldl @ annot1 v)
                  (Language.Python.Common.AST.$fDataParamTuple_$cgunfold @ annot1 v)
                  (\ (ds :: Language.Python.Common.AST.ParamTuple annot1) ->
                   case ds of wild {
                     Language.Python.Common.AST.ParamTupleName ds1 ds2
                     -> Language.Python.Common.AST.$cParamTupleName
                     Language.Python.Common.AST.ParamTuple ds1 ds2
                     -> Language.Python.Common.AST.$cParamTuple })
                  (\ (ds :: Language.Python.Common.AST.ParamTuple annot1) ->
                   Language.Python.Common.AST.$tParamTuple)
                  (Language.Python.Common.AST.$fDataParamTuple_$cdataCast1
                     @ annot1
                     v)
                  (\ @ t :: * -> * -> *
                     @ c :: * -> *
                     ($dTypeable :: Data.Typeable.Internal.Typeable t)
                     (ds :: forall d e.
                            (Data.Data.Data d, Data.Data.Data e) =>
                            c (t d e)) ->
                   GHC.Base.Nothing
                     @ (c (Language.Python.Common.AST.ParamTuple annot1)))
                  (Language.Python.Common.AST.$fDataParamTuple1 @ annot1 v)
                    `cast`
                  (<forall b. Data.Data.Data b => b -> b>_R
                   ->_R <Language.Python.Common.AST.ParamTuple annot1>_R
                   ->_R Data.Functor.Identity.N:Identity[0]
                            <Language.Python.Common.AST.ParamTuple annot1>_R)
                  (Language.Python.Common.AST.$fDataParamTuple_$cgmapQl @ annot1 v)
                  (Language.Python.Common.AST.$fDataParamTuple_$cgmapQr @ annot1 v)
                  (Language.Python.Common.AST.$fDataParamTuple_$cgmapQ @ annot1 v)
                  (Language.Python.Common.AST.$fDataParamTuple_$cgmapQi @ annot1 v)
                  (Language.Python.Common.AST.$fDataParamTuple_$cgmapM @ annot1 v)
                  (Language.Python.Common.AST.$fDataParamTuple_$cgmapMp @ annot1 v)
                  (Language.Python.Common.AST.$fDataParamTuple_$cgmapMo
                     @ annot1
                     v) -}
77aacf63ade2d28a10031365ad257b9f
  $fDataParamTuple1 ::
    Data.Data.Data annot =>
    (forall b. Data.Data.Data b => b -> b)
    -> Language.Python.Common.AST.ParamTuple annot
    -> Data.Functor.Identity.Identity
         (Language.Python.Common.AST.ParamTuple annot)
  {- Arity: 3,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,C(C1(U))><L,U> -}
755670166d6a76b585d16357def44212
  $fDataParamTuple2 :: [GHC.Fingerprint.Type.Fingerprint]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Fingerprint.Type.Fingerprint
                   Language.Python.Common.AST.$fDataParamTuple3
                   Language.Python.Common.AST.$fDataExpr9) -}
68e47428ad13a2e7a96bc4ac5981a224
  $fDataParamTuple3 :: GHC.Fingerprint.Type.Fingerprint
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Fingerprint.Type.Fingerprint
                   17012758104538018182##
                   7406008632732611318##) -}
77aacf63ade2d28a10031365ad257b9f
  $fDataParamTuple4 :: GHC.Fingerprint.Type.Fingerprint
  {- Unfolding: (case Language.Python.Common.AST.$fDataParamTuple_a3 of wild { Data.Typeable.Internal.TrTyCon dt dt1 ds1 ds2 ->
                 GHC.Fingerprint.Type.Fingerprint dt dt1 }) -}
77aacf63ade2d28a10031365ad257b9f
  $fDataParamTuple_$cdataCast1 ::
    Data.Data.Data annot =>
    forall (t :: * -> *) (c :: * -> *).
    Data.Typeable.Internal.Typeable t =>
    (forall d. Data.Data.Data d => c (t d))
    -> GHC.Base.Maybe (c (Language.Python.Common.AST.ParamTuple annot))
  {- Arity: 2, Strictness: <L,U><L,1*U>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   @ t :: * -> *
                   @ c :: * -> *
                   ($dTypeable :: Data.Typeable.Internal.Typeable t) ->
                 let {
                   lvl447 :: GHC.Base.Maybe
                               (t Data.Type.Equality.:~~: Language.Python.Common.AST.ParamTuple)
                   = Data.Typeable.Internal.eqTypeRep
                       @ (* -> *)
                       @ (* -> *)
                       @ t
                       @ Language.Python.Common.AST.ParamTuple
                       $dTypeable
                         `cast`
                       (Data.Typeable.Internal.N:Typeable[0] <* -> *>_N <t>_N)
                       Language.Python.Common.AST.$fDataParamTuple_a3
                 } in
                 \ (f12 :: forall d. Data.Data.Data d => c (t d)) ->
                 case lvl447 of wild {
                   GHC.Base.Nothing
                   -> GHC.Base.Nothing
                        @ (c (Language.Python.Common.AST.ParamTuple annot1))
                   GHC.Base.Just ds
                   -> case ds of wild1 { Data.Type.Equality.HRefl cobox cobox1 ->
                      GHC.Base.Just
                        @ (c (Language.Python.Common.AST.ParamTuple annot1))
                        (f12 @ annot1 $dData)
                          `cast`
                        (<c>_R (Sym cobox1 <annot1>_N)) } }) -}
77aacf63ade2d28a10031365ad257b9f
  $fDataParamTuple_$cgfoldl ::
    Data.Data.Data annot =>
    forall (c :: * -> *).
    (forall d b. Data.Data.Data d => c (d -> b) -> d -> c b)
    -> (forall g. g -> c g)
    -> Language.Python.Common.AST.ParamTuple annot
    -> c (Language.Python.Common.AST.ParamTuple annot)
  {- Arity: 1, Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)> -}
77aacf63ade2d28a10031365ad257b9f
  $fDataParamTuple_$cgmapM ::
    Data.Data.Data annot =>
    forall (m :: * -> *).
    GHC.Base.Monad m =>
    (forall d. Data.Data.Data d => d -> m d)
    -> Language.Python.Common.AST.ParamTuple annot
    -> m (Language.Python.Common.AST.ParamTuple annot)
  {- Arity: 3,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,U(A,C(C1(U)),A,U,A)><L,C(C1(U))> -}
77aacf63ade2d28a10031365ad257b9f
  $fDataParamTuple_$cgmapMo ::
    Data.Data.Data annot =>
    forall (m :: * -> *).
    GHC.Base.MonadPlus m =>
    (forall d. Data.Data.Data d => d -> m d)
    -> Language.Python.Common.AST.ParamTuple annot
    -> m (Language.Python.Common.AST.ParamTuple annot)
  {- Arity: 4,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><S(LS(LC(C(S))LLL)LL),U(A,1*U(A,C(C1(U)),A,C(U),A),1*U,C(C1(U)))><L,C(C1(U))><L,U> -}
77aacf63ade2d28a10031365ad257b9f
  $fDataParamTuple_$cgmapMp ::
    Data.Data.Data annot =>
    forall (m :: * -> *).
    GHC.Base.MonadPlus m =>
    (forall d. Data.Data.Data d => d -> m d)
    -> Language.Python.Common.AST.ParamTuple annot
    -> m (Language.Python.Common.AST.ParamTuple annot)
  {- Arity: 4,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><S(LS(LC(C(S))LLL)LL),U(A,1*U(A,C(C1(U)),A,C(U),A),1*U,C(C1(U)))><L,C(C1(U))><L,U> -}
77aacf63ade2d28a10031365ad257b9f
  $fDataParamTuple_$cgmapQ ::
    Data.Data.Data annot =>
    forall u.
    (forall d. Data.Data.Data d => d -> u)
    -> Language.Python.Common.AST.ParamTuple annot -> [u]
  {- Arity: 3,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,C(C1(U))> -}
77aacf63ade2d28a10031365ad257b9f
  $fDataParamTuple_$cgmapQi ::
    Data.Data.Data annot =>
    forall u.
    GHC.Types.Int
    -> (forall d. Data.Data.Data d => d -> u)
    -> Language.Python.Common.AST.ParamTuple annot
    -> u
  {- Arity: 4,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,U(U)><L,C(C1(U))><L,U> -}
77aacf63ade2d28a10031365ad257b9f
  $fDataParamTuple_$cgmapQl ::
    Data.Data.Data annot =>
    forall r r'.
    (r -> r' -> r)
    -> r
    -> (forall d. Data.Data.Data d => d -> r')
    -> Language.Python.Common.AST.ParamTuple annot
    -> r
  {- Arity: 4,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,C(C1(U))><L,U><L,C(C1(U))> -}
77aacf63ade2d28a10031365ad257b9f
  $fDataParamTuple_$cgmapQr ::
    Data.Data.Data annot =>
    forall r r'.
    (r' -> r -> r)
    -> r
    -> (forall d. Data.Data.Data d => d -> r')
    -> Language.Python.Common.AST.ParamTuple annot
    -> r
  {- Arity: 5,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,C(C1(U))><L,U><L,C(C1(U))><L,U> -}
77aacf63ade2d28a10031365ad257b9f
  $fDataParamTuple_$cgunfold ::
    Data.Data.Data annot =>
    forall (c :: * -> *).
    (forall b r. Data.Data.Data b => c (b -> r) -> c r)
    -> (forall r. r -> c r)
    -> Data.Data.Constr
    -> c (Language.Python.Common.AST.ParamTuple annot)
  {- Arity: 1, Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)> -}
77aacf63ade2d28a10031365ad257b9f
  $fDataParamTuple_$cp1Data ::
    Data.Data.Data annot =>
    Data.Typeable.Internal.Typeable
      (Language.Python.Common.AST.ParamTuple annot)
  {- Arity: 1, Strictness: <L,1*U(1*U,A,A,A,A,A,A,A,A,A,A,A,A,A,A)>,
     Unfolding: (\ @ annot1 ($dData :: Data.Data.Data annot1) ->
                 let {
                   b1 :: Data.Typeable.Internal.Typeable annot1
                   = Data.Data.$p1Data @ annot1 $dData
                 } in
                 case GHC.Magic.noinline
                        @ ([GHC.Fingerprint.Type.Fingerprint]
                           -> GHC.Fingerprint.Type.Fingerprint)
                        GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           Language.Python.Common.AST.$fDataParamTuple4
                           (GHC.Types.:
                              @ GHC.Fingerprint.Type.Fingerprint
                              (Data.Typeable.Internal.typeRepFingerprint
                                 @ *
                                 @ annot1
                                 b1 `cast` (Data.Typeable.Internal.N:Typeable[0] <*>_N <annot1>_N))
                              (GHC.Types.[]
                                 @ GHC.Fingerprint.Type.Fingerprint))) of dt { GHC.Fingerprint.Type.Fingerprint dt1 dt2 ->
                 (Data.Typeable.Internal.TrApp
                    @ *
                    @ (Language.Python.Common.AST.ParamTuple annot1)
                    @ *
                    @ Language.Python.Common.AST.ParamTuple
                    @ annot1
                    @~ <Language.Python.Common.AST.ParamTuple annot1>_N
                    dt1
                    dt2
                    Language.Python.Common.AST.$fDataParamTuple_a3
                    b1 `cast` (Data.Typeable.Internal.N:Typeable[0] <*>_N <annot1>_N))
                   `cast`
                 (Sym (Data.Typeable.Internal.N:Typeable[0]) <*>_N <Language.Python.Common.AST.ParamTuple
                                                                      annot1>_N) }) -}
77aacf63ade2d28a10031365ad257b9f
  $fDataParamTuple_a3 ::
    Data.Typeable.Internal.TypeRep
      Language.Python.Common.AST.ParamTuple
  {- Unfolding: (case GHC.Magic.noinline
                        @ ([GHC.Fingerprint.Type.Fingerprint]
                           -> GHC.Fingerprint.Type.Fingerprint)
                        GHC.Fingerprint.fingerprintFingerprints
                        Language.Python.Common.AST.$fDataParamTuple2 of dt { GHC.Fingerprint.Type.Fingerprint dt1 dt2 ->
                 Data.Typeable.Internal.TrTyCon
                   @ (* -> *)
                   @ Language.Python.Common.AST.ParamTuple
                   dt1
                   dt2
                   Language.Python.Common.AST.$tcParamTuple
                   (GHC.Types.[] @ Data.Typeable.Internal.SomeTypeRep) }) -}
94dde4ffceed0a2a13daed020b6576e1
  $fDataParameter ::
    Data.Data.Data annot =>
    Data.Data.Data (Language.Python.Common.AST.Parameter annot)
  DFunId
  {- Arity: 1, Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)>,
     Inline: CONLIKE,
     Unfolding: DFun: @ annot1 (v :: Data.Data.Data annot1).
                  @ (Language.Python.Common.AST.Parameter annot1)
                  (Language.Python.Common.AST.$fDataParameter_$cp1Data @ annot1 v)
                  (Language.Python.Common.AST.$fDataParameter_$cgfoldl @ annot1 v)
                  (Language.Python.Common.AST.$fDataParameter_$cgunfold @ annot1 v)
                  (Language.Python.Common.AST.$fDataParameter_$ctoConstr @ annot1 v)
                  (\ (ds :: Language.Python.Common.AST.Parameter annot1) ->
                   Language.Python.Common.AST.$tParameter)
                  (Language.Python.Common.AST.$fDataParameter_$cdataCast1 @ annot1 v)
                  (\ @ t :: * -> * -> *
                     @ c :: * -> *
                     ($dTypeable :: Data.Typeable.Internal.Typeable t)
                     (ds :: forall d e.
                            (Data.Data.Data d, Data.Data.Data e) =>
                            c (t d e)) ->
                   GHC.Base.Nothing
                     @ (c (Language.Python.Common.AST.Parameter annot1)))
                  (Language.Python.Common.AST.$fDataParameter1 @ annot1 v)
                    `cast`
                  (<forall b. Data.Data.Data b => b -> b>_R
                   ->_R <Language.Python.Common.AST.Parameter annot1>_R
                   ->_R Data.Functor.Identity.N:Identity[0]
                            <Language.Python.Common.AST.Parameter annot1>_R)
                  (Language.Python.Common.AST.$fDataParameter_$cgmapQl @ annot1 v)
                  (Language.Python.Common.AST.$fDataParameter_$cgmapQr @ annot1 v)
                  (Language.Python.Common.AST.$fDataParameter_$cgmapQ @ annot1 v)
                  (Language.Python.Common.AST.$fDataParameter_$cgmapQi @ annot1 v)
                  (Language.Python.Common.AST.$fDataParameter_$cgmapM @ annot1 v)
                  (Language.Python.Common.AST.$fDataParameter_$cgmapMp @ annot1 v)
                  (Language.Python.Common.AST.$fDataParameter_$cgmapMo @ annot1 v) -}
94dde4ffceed0a2a13daed020b6576e1
  $fDataParameter1 ::
    Data.Data.Data annot =>
    (forall b. Data.Data.Data b => b -> b)
    -> Language.Python.Common.AST.Parameter annot
    -> Data.Functor.Identity.Identity
         (Language.Python.Common.AST.Parameter annot)
  {- Arity: 3,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,C(C1(U))><L,U>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   (ds :: forall b. Data.Data.Data b => b -> b)
                   (x0 :: Language.Python.Common.AST.Parameter annot1) ->
                 Language.Python.Common.AST.$fDataParameter_$cgfoldl
                   @ annot1
                   $dData
                   @ Data.Functor.Identity.Identity
                   (\ @ d
                      @ b
                      ($dData1 :: Data.Data.Data d)
                      (ds1 :: Data.Functor.Identity.Identity (d -> b))
                      (x :: d) ->
                    ds1 `cast` (Data.Functor.Identity.N:Identity[0] <d -> b>_R)
                      (ds @ d $dData1 x))
                     `cast`
                   (forall (d :: <*>_N) (b :: <*>_N).
                    <Data.Data.Data d>_R
                    ->_R <Data.Functor.Identity.Identity (d -> b)>_R
                    ->_R <d>_R
                    ->_R Sym (Data.Functor.Identity.N:Identity[0] <b>_R))
                   Language.Python.Common.AST.$fDataExpr7
                     `cast`
                   (forall (g :: <*>_N).
                    <g>_R ->_R Sym (Data.Functor.Identity.N:Identity[0] <g>_R))
                   x0) -}
26b85b36fede6025be404c413f5ae1ae
  $fDataParameter2 :: [GHC.Fingerprint.Type.Fingerprint]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Fingerprint.Type.Fingerprint
                   Language.Python.Common.AST.$fDataParameter3
                   Language.Python.Common.AST.$fDataExpr9) -}
c4ec6341020d6b16e0c1b0574eb73d5e
  $fDataParameter3 :: GHC.Fingerprint.Type.Fingerprint
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Fingerprint.Type.Fingerprint
                   3688376214353372634##
                   18105998702967587122##) -}
94dde4ffceed0a2a13daed020b6576e1
  $fDataParameter4 :: GHC.Fingerprint.Type.Fingerprint
  {- Unfolding: (case Language.Python.Common.AST.$fDataParameter_a3 of wild { Data.Typeable.Internal.TrTyCon dt dt1 ds1 ds2 ->
                 GHC.Fingerprint.Type.Fingerprint dt dt1 }) -}
94dde4ffceed0a2a13daed020b6576e1
  $fDataParameter_$cdataCast1 ::
    Data.Data.Data annot =>
    forall (t :: * -> *) (c :: * -> *).
    Data.Typeable.Internal.Typeable t =>
    (forall d. Data.Data.Data d => c (t d))
    -> GHC.Base.Maybe (c (Language.Python.Common.AST.Parameter annot))
  {- Arity: 2, Strictness: <L,U><L,1*U>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   @ t :: * -> *
                   @ c :: * -> *
                   ($dTypeable :: Data.Typeable.Internal.Typeable t) ->
                 let {
                   lvl447 :: GHC.Base.Maybe
                               (t Data.Type.Equality.:~~: Language.Python.Common.AST.Parameter)
                   = Data.Typeable.Internal.eqTypeRep
                       @ (* -> *)
                       @ (* -> *)
                       @ t
                       @ Language.Python.Common.AST.Parameter
                       $dTypeable
                         `cast`
                       (Data.Typeable.Internal.N:Typeable[0] <* -> *>_N <t>_N)
                       Language.Python.Common.AST.$fDataParameter_a3
                 } in
                 \ (f12 :: forall d. Data.Data.Data d => c (t d)) ->
                 case lvl447 of wild {
                   GHC.Base.Nothing
                   -> GHC.Base.Nothing
                        @ (c (Language.Python.Common.AST.Parameter annot1))
                   GHC.Base.Just ds
                   -> case ds of wild1 { Data.Type.Equality.HRefl cobox cobox1 ->
                      GHC.Base.Just
                        @ (c (Language.Python.Common.AST.Parameter annot1))
                        (f12 @ annot1 $dData)
                          `cast`
                        (<c>_R (Sym cobox1 <annot1>_N)) } }) -}
94dde4ffceed0a2a13daed020b6576e1
  $fDataParameter_$cgfoldl ::
    Data.Data.Data annot =>
    forall (c :: * -> *).
    (forall d b. Data.Data.Data d => c (d -> b) -> d -> c b)
    -> (forall g. g -> c g)
    -> Language.Python.Common.AST.Parameter annot
    -> c (Language.Python.Common.AST.Parameter annot)
  {- Arity: 1, Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)> -}
94dde4ffceed0a2a13daed020b6576e1
  $fDataParameter_$cgmapM ::
    Data.Data.Data annot =>
    forall (m :: * -> *).
    GHC.Base.Monad m =>
    (forall d. Data.Data.Data d => d -> m d)
    -> Language.Python.Common.AST.Parameter annot
    -> m (Language.Python.Common.AST.Parameter annot)
  {- Arity: 3,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,U(A,C(C1(U)),A,U,A)><L,C(C1(U))>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   @ m :: * -> *
                   ($dMonad :: GHC.Base.Monad m)
                   (ds :: forall d. Data.Data.Data d => d -> m d) ->
                 Language.Python.Common.AST.$fDataParameter_$cgfoldl
                   @ annot1
                   $dData
                   @ m
                   (\ @ d
                      @ b
                      ($dData1 :: Data.Data.Data d)
                      (c :: m (d -> b))
                      (x :: d) ->
                    let {
                      lvl447 :: m d = ds @ d $dData1 x
                    } in
                    GHC.Base.>>=
                      @ m
                      $dMonad
                      @ (d -> b)
                      @ b
                      c
                      (\ (c' :: d -> b) ->
                       GHC.Base.>>=
                         @ m
                         $dMonad
                         @ d
                         @ b
                         lvl447
                         (\ (x' :: d) -> GHC.Base.return @ m $dMonad @ b (c' x'))))
                   (\ @ g -> GHC.Base.return @ m $dMonad @ g)) -}
94dde4ffceed0a2a13daed020b6576e1
  $fDataParameter_$cgmapMo ::
    Data.Data.Data annot =>
    forall (m :: * -> *).
    GHC.Base.MonadPlus m =>
    (forall d. Data.Data.Data d => d -> m d)
    -> Language.Python.Common.AST.Parameter annot
    -> m (Language.Python.Common.AST.Parameter annot)
  {- Arity: 4,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><S(LS(LC(C(S))LLL)LL),U(A,1*U(A,C(C1(U)),A,C(U),A),1*U,C(C1(U)))><L,C(C1(U))><L,U>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   @ m :: * -> *
                   ($dMonadPlus :: GHC.Base.MonadPlus m)
                   (ds :: forall d. Data.Data.Data d => d -> m d)
                   (eta :: Language.Python.Common.AST.Parameter annot1) ->
                 let {
                   $dMonad :: GHC.Base.Monad m = GHC.Base.$p2MonadPlus @ m $dMonadPlus
                 } in
                 let {
                   lvl447 :: m (Language.Python.Common.AST.Parameter annot1)
                   = GHC.Base.mzero
                       @ m
                       $dMonadPlus
                       @ (Language.Python.Common.AST.Parameter annot1)
                 } in
                 GHC.Base.>>=
                   @ m
                   $dMonad
                   @ (Language.Python.Common.AST.Parameter annot1, GHC.Types.Bool)
                   @ (Language.Python.Common.AST.Parameter annot1)
                   (Language.Python.Common.AST.$fDataParameter_$cgfoldl
                      @ annot1
                      $dData
                      @ (Data.Data.Mp m)
                      (\ @ d
                         @ b
                         ($dData1 :: Data.Data.Data d)
                         (ds1 :: Data.Data.Mp m (d -> b))
                         (y :: d) ->
                       let {
                         lvl448 :: m d = ds @ d $dData1 y
                       } in
                       GHC.Base.>>=
                         @ m
                         $dMonad
                         @ (d -> b, GHC.Types.Bool)
                         @ (b, GHC.Types.Bool)
                         ds1 `cast` (Data.Data.N:Mp[0] <m>_R <d -> b>_N)
                         (\ (ds2 :: (d -> b, GHC.Types.Bool)) ->
                          case ds2 of wild { (,) h b1 ->
                          case b1 of wild1 {
                            GHC.Types.False
                            -> GHC.Base.mplus
                                 @ m
                                 $dMonadPlus
                                 @ (b, GHC.Types.Bool)
                                 (GHC.Base.>>=
                                    @ m
                                    $dMonad
                                    @ d
                                    @ (b, GHC.Types.Bool)
                                    lvl448
                                    (\ (y' :: d) ->
                                     GHC.Base.return
                                       @ m
                                       $dMonad
                                       @ (b, GHC.Types.Bool)
                                       (h y', GHC.Types.True)))
                                 (GHC.Base.return
                                    @ m
                                    $dMonad
                                    @ (b, GHC.Types.Bool)
                                    (h y, GHC.Types.False))
                            GHC.Types.True
                            -> GHC.Base.return
                                 @ m
                                 $dMonad
                                 @ (b, GHC.Types.Bool)
                                 (h y, GHC.Types.True) } }))
                        `cast`
                      (forall (d :: <*>_N) (b :: <*>_N).
                       <Data.Data.Data d>_R
                       ->_R <Data.Data.Mp m (d -> b)>_R
                       ->_R <d>_R
                       ->_R Sym (Data.Data.N:Mp[0] <m>_R <b>_N))
                      (\ @ g (g1 :: g) ->
                       GHC.Base.return
                         @ m
                         $dMonad
                         @ (g, GHC.Types.Bool)
                         (g1, GHC.Types.False))
                        `cast`
                      (forall (g :: <*>_N).
                       <g>_R ->_R Sym (Data.Data.N:Mp[0] <m>_R <g>_N))
                      eta)
                     `cast`
                   (Data.Data.N:Mp[0]
                        <m>_R <Language.Python.Common.AST.Parameter annot1>_N)
                   (\ (ds1 :: (Language.Python.Common.AST.Parameter annot1,
                               GHC.Types.Bool)) ->
                    case ds1 of wild { (,) x' b ->
                    case b of wild1 {
                      GHC.Types.False -> lvl447
                      GHC.Types.True
                      -> GHC.Base.return
                           @ m
                           $dMonad
                           @ (Language.Python.Common.AST.Parameter annot1)
                           x' } })) -}
94dde4ffceed0a2a13daed020b6576e1
  $fDataParameter_$cgmapMp ::
    Data.Data.Data annot =>
    forall (m :: * -> *).
    GHC.Base.MonadPlus m =>
    (forall d. Data.Data.Data d => d -> m d)
    -> Language.Python.Common.AST.Parameter annot
    -> m (Language.Python.Common.AST.Parameter annot)
  {- Arity: 4,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><S(LS(LC(C(S))LLL)LL),U(A,1*U(A,C(C1(U)),A,C(U),A),1*U,C(C1(U)))><L,C(C1(U))><L,U>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   @ m :: * -> *
                   ($dMonadPlus :: GHC.Base.MonadPlus m)
                   (ds :: forall d. Data.Data.Data d => d -> m d)
                   (eta :: Language.Python.Common.AST.Parameter annot1) ->
                 let {
                   $dMonad :: GHC.Base.Monad m = GHC.Base.$p2MonadPlus @ m $dMonadPlus
                 } in
                 let {
                   lvl447 :: m (Language.Python.Common.AST.Parameter annot1)
                   = GHC.Base.mzero
                       @ m
                       $dMonadPlus
                       @ (Language.Python.Common.AST.Parameter annot1)
                 } in
                 GHC.Base.>>=
                   @ m
                   $dMonad
                   @ (Language.Python.Common.AST.Parameter annot1, GHC.Types.Bool)
                   @ (Language.Python.Common.AST.Parameter annot1)
                   (Language.Python.Common.AST.$fDataParameter_$cgfoldl
                      @ annot1
                      $dData
                      @ (Data.Data.Mp m)
                      (\ @ d
                         @ b
                         ($dData1 :: Data.Data.Data d)
                         (ds1 :: Data.Data.Mp m (d -> b))
                         (y :: d) ->
                       let {
                         lvl448 :: m d = ds @ d $dData1 y
                       } in
                       GHC.Base.>>=
                         @ m
                         $dMonad
                         @ (d -> b, GHC.Types.Bool)
                         @ (b, GHC.Types.Bool)
                         ds1 `cast` (Data.Data.N:Mp[0] <m>_R <d -> b>_N)
                         (\ (ds2 :: (d -> b, GHC.Types.Bool)) ->
                          case ds2 of wild { (,) h b1 ->
                          GHC.Base.mplus
                            @ m
                            $dMonadPlus
                            @ (b, GHC.Types.Bool)
                            (GHC.Base.>>=
                               @ m
                               $dMonad
                               @ d
                               @ (b, GHC.Types.Bool)
                               lvl448
                               (\ (y' :: d) ->
                                GHC.Base.return
                                  @ m
                                  $dMonad
                                  @ (b, GHC.Types.Bool)
                                  (h y', GHC.Types.True)))
                            (GHC.Base.return @ m $dMonad @ (b, GHC.Types.Bool) (h y, b1)) }))
                        `cast`
                      (forall (d :: <*>_N) (b :: <*>_N).
                       <Data.Data.Data d>_R
                       ->_R <Data.Data.Mp m (d -> b)>_R
                       ->_R <d>_R
                       ->_R Sym (Data.Data.N:Mp[0] <m>_R <b>_N))
                      (\ @ g (g1 :: g) ->
                       GHC.Base.return
                         @ m
                         $dMonad
                         @ (g, GHC.Types.Bool)
                         (g1, GHC.Types.False))
                        `cast`
                      (forall (g :: <*>_N).
                       <g>_R ->_R Sym (Data.Data.N:Mp[0] <m>_R <g>_N))
                      eta)
                     `cast`
                   (Data.Data.N:Mp[0]
                        <m>_R <Language.Python.Common.AST.Parameter annot1>_N)
                   (\ (ds1 :: (Language.Python.Common.AST.Parameter annot1,
                               GHC.Types.Bool)) ->
                    case ds1 of wild { (,) x' b ->
                    case b of wild1 {
                      GHC.Types.False -> lvl447
                      GHC.Types.True
                      -> GHC.Base.return
                           @ m
                           $dMonad
                           @ (Language.Python.Common.AST.Parameter annot1)
                           x' } })) -}
94dde4ffceed0a2a13daed020b6576e1
  $fDataParameter_$cgmapQ ::
    Data.Data.Data annot =>
    forall u.
    (forall d. Data.Data.Data d => d -> u)
    -> Language.Python.Common.AST.Parameter annot -> [u]
  {- Arity: 3,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,C(C1(U))><L,U>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   @ u
                   (ds :: forall d. Data.Data.Data d => d -> u)
                   (x0 :: Language.Python.Common.AST.Parameter annot1) ->
                 (Language.Python.Common.AST.$fDataParameter_$cgfoldl
                    @ annot1
                    $dData
                    @ (Data.Data.Qr [u])
                    (\ @ d
                       @ b
                       ($dData1 :: Data.Data.Data d)
                       (ds1 :: Data.Data.Qr [u] (d -> b))
                       (x :: d)
                       (r1 :: [u]) ->
                     ds1 `cast` (Data.Data.N:Qr[0] <*>_N <[u]>_R <d -> b>_P)
                       (GHC.Types.: @ u (ds @ d $dData1 x) r1))
                      `cast`
                    (forall (d :: <*>_N) (b :: <*>_N).
                     <Data.Data.Data d>_R
                     ->_R <Data.Data.Qr [u] (d -> b)>_R
                     ->_R <d>_R
                     ->_R Sym (Data.Data.N:Qr[0] <*>_N <[u]>_R <b>_P))
                    (Language.Python.Common.AST.$fDataExpr4 @ u)
                      `cast`
                    (forall (g :: <*>_N).
                     <g>_R ->_R Sym (Data.Data.N:Qr[0] <*>_N <[u]>_R <g>_P))
                    x0)
                   `cast`
                 (Data.Data.N:Qr[0]
                      <*>_N <[u]>_R <Language.Python.Common.AST.Parameter annot1>_P)
                   (GHC.Types.[] @ u)) -}
94dde4ffceed0a2a13daed020b6576e1
  $fDataParameter_$cgmapQi ::
    Data.Data.Data annot =>
    forall u.
    GHC.Types.Int
    -> (forall d. Data.Data.Data d => d -> u)
    -> Language.Python.Common.AST.Parameter annot
    -> u
  {- Arity: 4,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,U(U)><L,C(C1(U))><L,U>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   @ u
                   (ds :: GHC.Types.Int)
                   (ds1 :: forall d. Data.Data.Data d => d -> u)
                   (x :: Language.Python.Common.AST.Parameter annot1) ->
                 case Language.Python.Common.AST.$fDataParameter_$cgfoldl
                        @ annot1
                        $dData
                        @ (Data.Data.Qi u)
                        (\ @ d
                           @ b
                           ($dData1 :: Data.Data.Data d)
                           (ds2 :: Data.Data.Qi u (d -> b))
                           (a2 :: d) ->
                         case ds2 of wild { Data.Data.Qi i' q ->
                         Data.Data.Qi
                           @ *
                           @ u
                           @ b
                           (case i' of wild1 { GHC.Types.I# x1 ->
                            GHC.Types.I# (GHC.Prim.+# x1 1#) })
                           (case ds of wild1 { GHC.Types.I# x1 ->
                            case i' of wild2 { GHC.Types.I# y ->
                            case GHC.Prim.tagToEnum#
                                   @ GHC.Types.Bool
                                   (GHC.Prim.==# x1 y) of wild3 {
                              GHC.Types.False -> q
                              GHC.Types.True -> GHC.Base.Just @ u (ds1 @ d $dData1 a2) } } }) })
                        (Language.Python.Common.AST.$fDataExpr1 @ u)
                        x of wild { Data.Data.Qi ds2 q ->
                 Data.Maybe.fromJust @ u q }) -}
94dde4ffceed0a2a13daed020b6576e1
  $fDataParameter_$cgmapQl ::
    Data.Data.Data annot =>
    forall r r'.
    (r -> r' -> r)
    -> r
    -> (forall d. Data.Data.Data d => d -> r')
    -> Language.Python.Common.AST.Parameter annot
    -> r
  {- Arity: 4,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,C(C1(U))><L,U><L,C(C1(U))>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   @ r
                   @ r'
                   (ds :: r -> r' -> r)
                   (ds1 :: r)
                   (ds2 :: forall d. Data.Data.Data d => d -> r') ->
                 let {
                   g :: Language.Python.Common.AST.Parameter annot1
                        -> Data.Functor.Const.Const
                             r (Language.Python.Common.AST.Parameter annot1)
                   = Language.Python.Common.AST.$fDataParameter_$cgfoldl
                       @ annot1
                       $dData
                       @ (Data.Functor.Const.Const r)
                       (\ @ d
                          @ b
                          ($dData1 :: Data.Data.Data d)
                          (c :: Data.Functor.Const.Const r (d -> b))
                          (x :: d) ->
                        ds
                          c `cast` (Data.Functor.Const.N:Const[0] <*>_N <r>_R <d -> b>_P)
                          (ds2 @ d $dData1 x))
                         `cast`
                       (forall (d :: <*>_N) (b :: <*>_N).
                        <Data.Data.Data d>_R
                        ->_R <Data.Functor.Const.Const r (d -> b)>_R
                        ->_R <d>_R
                        ->_R Sym (Data.Functor.Const.N:Const[0] <*>_N <r>_R <b>_P))
                       (\ @ g1 (ds3 :: g1) -> ds1)
                         `cast`
                       (forall (g1 :: <*>_N).
                        <g1>_R ->_R Sym (Data.Functor.Const.N:Const[0] <*>_N <r>_R <g1>_P))
                 } in
                 (\ (x :: Language.Python.Common.AST.Parameter annot1) -> g x)
                   `cast`
                 (<Language.Python.Common.AST.Parameter annot1>_R
                  ->_R Data.Functor.Const.N:Const[0]
                           <*>_N <r>_R <Language.Python.Common.AST.Parameter annot1>_P)) -}
94dde4ffceed0a2a13daed020b6576e1
  $fDataParameter_$cgmapQr ::
    Data.Data.Data annot =>
    forall r r'.
    (r' -> r -> r)
    -> r
    -> (forall d. Data.Data.Data d => d -> r')
    -> Language.Python.Common.AST.Parameter annot
    -> r
  {- Arity: 5,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,C(C1(U))><L,U><L,C(C1(U))><L,U>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   @ r
                   @ r'
                   (ds :: r' -> r -> r)
                   (ds1 :: r)
                   (ds2 :: forall d. Data.Data.Data d => d -> r')
                   (x0 :: Language.Python.Common.AST.Parameter annot1) ->
                 (Language.Python.Common.AST.$fDataParameter_$cgfoldl
                    @ annot1
                    $dData
                    @ (Data.Data.Qr r)
                    (\ @ d
                       @ b
                       ($dData1 :: Data.Data.Data d)
                       (ds3 :: Data.Data.Qr r (d -> b))
                       (x :: d)
                       (r1 :: r) ->
                     ds3 `cast` (Data.Data.N:Qr[0] <*>_N <r>_R <d -> b>_P)
                       (ds (ds2 @ d $dData1 x) r1))
                      `cast`
                    (forall (d :: <*>_N) (b :: <*>_N).
                     <Data.Data.Data d>_R
                     ->_R <Data.Data.Qr r (d -> b)>_R
                     ->_R <d>_R
                     ->_R Sym (Data.Data.N:Qr[0] <*>_N <r>_R <b>_P))
                    (Language.Python.Common.AST.$fDataExpr5 @ r)
                      `cast`
                    (forall (g :: <*>_N).
                     <g>_R ->_R Sym (Data.Data.N:Qr[0] <*>_N <r>_R <g>_P))
                    x0)
                   `cast`
                 (Data.Data.N:Qr[0]
                      <*>_N <r>_R <Language.Python.Common.AST.Parameter annot1>_P)
                   ds1) -}
94dde4ffceed0a2a13daed020b6576e1
  $fDataParameter_$cgunfold ::
    Data.Data.Data annot =>
    forall (c :: * -> *).
    (forall b r. Data.Data.Data b => c (b -> r) -> c r)
    -> (forall r. r -> c r)
    -> Data.Data.Constr
    -> c (Language.Python.Common.AST.Parameter annot)
  {- Arity: 1, Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   @ c :: * -> * ->
                 let {
                   $dData1 :: Data.Data.Data
                                (Language.Python.Common.AST.ParamTuple annot1)
                   = Language.Python.Common.AST.$fDataParamTuple @ annot1 $dData
                 } in
                 let {
                   $dData2 :: Data.Data.Data (Language.Python.Common.AST.Ident annot1)
                   = Language.Python.Common.AST.$fDataIdent @ annot1 $dData
                 } in
                 let {
                   $dData3 :: Data.Data.Data (Language.Python.Common.AST.Expr annot1)
                   = Language.Python.Common.AST.$fDataExpr @ annot1 $dData
                 } in
                 let {
                   $dData4 :: Data.Data.Data
                                (GHC.Base.Maybe (Language.Python.Common.AST.Expr annot1))
                   = Data.Data.$fDataMaybe
                       @ (Language.Python.Common.AST.Expr annot1)
                       $dData3
                 } in
                 \ (k :: forall b r. Data.Data.Data b => c (b -> r) -> c r)
                   (z :: forall r. r -> c r)
                   (c1 :: Data.Data.Constr) ->
                 case c1 of wild { Data.Data.Constr ds ds1 ds2 ds3 ds4 ->
                 case ds of wild1 {
                   DEFAULT
                   -> case ds4 of ww6 { Data.Data.DataType ww7 ww8 ->
                      case Data.Data.$wlvl ww7
                      ret_ty (c (Language.Python.Common.AST.Parameter annot1))
                      of {} }
                   Data.Data.AlgConstr idx
                   -> case idx of wild2 { GHC.Types.I# ds7 ->
                      case ds7 of ds8 {
                        DEFAULT
                        -> k @ annot1
                             @ (Language.Python.Common.AST.Parameter annot1)
                             $dData
                             (k @ (GHC.Base.Maybe (Language.Python.Common.AST.Expr annot1))
                                @ (annot1 -> Language.Python.Common.AST.Parameter annot1)
                                $dData4
                                (k @ (Language.Python.Common.AST.ParamTuple annot1)
                                   @ (GHC.Base.Maybe (Language.Python.Common.AST.Expr annot1)
                                      -> annot1 -> Language.Python.Common.AST.Parameter annot1)
                                   $dData1
                                   (z @ (Language.Python.Common.AST.ParamTuple annot1
                                         -> GHC.Base.Maybe (Language.Python.Common.AST.Expr annot1)
                                         -> annot1
                                         -> Language.Python.Common.AST.Parameter annot1)
                                      (Language.Python.Common.AST.UnPackTuple @ annot1))))
                        1#
                        -> k @ annot1
                             @ (Language.Python.Common.AST.Parameter annot1)
                             $dData
                             (k @ (GHC.Base.Maybe (Language.Python.Common.AST.Expr annot1))
                                @ (annot1 -> Language.Python.Common.AST.Parameter annot1)
                                $dData4
                                (k @ (GHC.Base.Maybe (Language.Python.Common.AST.Expr annot1))
                                   @ (GHC.Base.Maybe (Language.Python.Common.AST.Expr annot1)
                                      -> annot1 -> Language.Python.Common.AST.Parameter annot1)
                                   $dData4
                                   (k @ (Language.Python.Common.AST.Ident annot1)
                                      @ (GHC.Base.Maybe (Language.Python.Common.AST.Expr annot1)
                                         -> GHC.Base.Maybe (Language.Python.Common.AST.Expr annot1)
                                         -> annot1
                                         -> Language.Python.Common.AST.Parameter annot1)
                                      $dData2
                                      (z @ (Language.Python.Common.AST.Ident annot1
                                            -> GHC.Base.Maybe
                                                 (Language.Python.Common.AST.Expr annot1)
                                            -> GHC.Base.Maybe
                                                 (Language.Python.Common.AST.Expr annot1)
                                            -> annot1
                                            -> Language.Python.Common.AST.Parameter annot1)
                                         (Language.Python.Common.AST.Param @ annot1)))))
                        2#
                        -> k @ annot1
                             @ (Language.Python.Common.AST.Parameter annot1)
                             $dData
                             (k @ (GHC.Base.Maybe (Language.Python.Common.AST.Expr annot1))
                                @ (annot1 -> Language.Python.Common.AST.Parameter annot1)
                                $dData4
                                (k @ (Language.Python.Common.AST.Ident annot1)
                                   @ (GHC.Base.Maybe (Language.Python.Common.AST.Expr annot1)
                                      -> annot1 -> Language.Python.Common.AST.Parameter annot1)
                                   $dData2
                                   (z @ (Language.Python.Common.AST.Ident annot1
                                         -> GHC.Base.Maybe (Language.Python.Common.AST.Expr annot1)
                                         -> annot1
                                         -> Language.Python.Common.AST.Parameter annot1)
                                      (Language.Python.Common.AST.VarArgsPos @ annot1))))
                        3#
                        -> k @ annot1
                             @ (Language.Python.Common.AST.Parameter annot1)
                             $dData
                             (k @ (GHC.Base.Maybe (Language.Python.Common.AST.Expr annot1))
                                @ (annot1 -> Language.Python.Common.AST.Parameter annot1)
                                $dData4
                                (k @ (Language.Python.Common.AST.Ident annot1)
                                   @ (GHC.Base.Maybe (Language.Python.Common.AST.Expr annot1)
                                      -> annot1 -> Language.Python.Common.AST.Parameter annot1)
                                   $dData2
                                   (z @ (Language.Python.Common.AST.Ident annot1
                                         -> GHC.Base.Maybe (Language.Python.Common.AST.Expr annot1)
                                         -> annot1
                                         -> Language.Python.Common.AST.Parameter annot1)
                                      (Language.Python.Common.AST.VarArgsKeyword @ annot1))))
                        4#
                        -> k @ annot1
                             @ (Language.Python.Common.AST.Parameter annot1)
                             $dData
                             (z @ (annot1 -> Language.Python.Common.AST.Parameter annot1)
                                (Language.Python.Common.AST.EndPositional @ annot1)) } } } }) -}
94dde4ffceed0a2a13daed020b6576e1
  $fDataParameter_$cp1Data ::
    Data.Data.Data annot =>
    Data.Typeable.Internal.Typeable
      (Language.Python.Common.AST.Parameter annot)
  {- Arity: 1, Strictness: <L,1*U(1*U,A,A,A,A,A,A,A,A,A,A,A,A,A,A)>,
     Unfolding: (\ @ annot1 ($dData :: Data.Data.Data annot1) ->
                 let {
                   b1 :: Data.Typeable.Internal.Typeable annot1
                   = Data.Data.$p1Data @ annot1 $dData
                 } in
                 case GHC.Magic.noinline
                        @ ([GHC.Fingerprint.Type.Fingerprint]
                           -> GHC.Fingerprint.Type.Fingerprint)
                        GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           Language.Python.Common.AST.$fDataParameter4
                           (GHC.Types.:
                              @ GHC.Fingerprint.Type.Fingerprint
                              (Data.Typeable.Internal.typeRepFingerprint
                                 @ *
                                 @ annot1
                                 b1 `cast` (Data.Typeable.Internal.N:Typeable[0] <*>_N <annot1>_N))
                              (GHC.Types.[]
                                 @ GHC.Fingerprint.Type.Fingerprint))) of dt { GHC.Fingerprint.Type.Fingerprint dt1 dt2 ->
                 (Data.Typeable.Internal.TrApp
                    @ *
                    @ (Language.Python.Common.AST.Parameter annot1)
                    @ *
                    @ Language.Python.Common.AST.Parameter
                    @ annot1
                    @~ <Language.Python.Common.AST.Parameter annot1>_N
                    dt1
                    dt2
                    Language.Python.Common.AST.$fDataParameter_a3
                    b1 `cast` (Data.Typeable.Internal.N:Typeable[0] <*>_N <annot1>_N))
                   `cast`
                 (Sym (Data.Typeable.Internal.N:Typeable[0]) <*>_N <Language.Python.Common.AST.Parameter
                                                                      annot1>_N) }) -}
94dde4ffceed0a2a13daed020b6576e1
  $fDataParameter_$ctoConstr ::
    Data.Data.Data annot =>
    Language.Python.Common.AST.Parameter annot -> Data.Data.Constr
  {- Arity: 2, Strictness: <L,A><S,1*U>m,
     Unfolding: InlineRule (2, True, False)
                (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   (ds :: Language.Python.Common.AST.Parameter annot1) ->
                 case ds of wild {
                   Language.Python.Common.AST.Param ds1 ds2 ds3 ds4
                   -> Language.Python.Common.AST.$cParam
                   Language.Python.Common.AST.VarArgsPos ds1 ds2 ds3
                   -> Language.Python.Common.AST.$cVarArgsPos
                   Language.Python.Common.AST.VarArgsKeyword ds1 ds2 ds3
                   -> Language.Python.Common.AST.$cVarArgsKeyword
                   Language.Python.Common.AST.EndPositional ds1
                   -> Language.Python.Common.AST.$cEndPositional
                   Language.Python.Common.AST.UnPackTuple ds1 ds2 ds3
                   -> Language.Python.Common.AST.$cUnPackTuple }) -}
94dde4ffceed0a2a13daed020b6576e1
  $fDataParameter_a3 ::
    Data.Typeable.Internal.TypeRep Language.Python.Common.AST.Parameter
  {- Unfolding: (case GHC.Magic.noinline
                        @ ([GHC.Fingerprint.Type.Fingerprint]
                           -> GHC.Fingerprint.Type.Fingerprint)
                        GHC.Fingerprint.fingerprintFingerprints
                        Language.Python.Common.AST.$fDataParameter2 of dt { GHC.Fingerprint.Type.Fingerprint dt1 dt2 ->
                 Data.Typeable.Internal.TrTyCon
                   @ (* -> *)
                   @ Language.Python.Common.AST.Parameter
                   dt1
                   dt2
                   Language.Python.Common.AST.$tcParameter
                   (GHC.Types.[] @ Data.Typeable.Internal.SomeTypeRep) }) -}
40b646133484efeda0b61064c970b83c
  $fDataRaiseExpr ::
    Data.Data.Data annot =>
    Data.Data.Data (Language.Python.Common.AST.RaiseExpr annot)
  DFunId
  {- Arity: 1, Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)>,
     Inline: CONLIKE,
     Unfolding: DFun: @ annot1 (v :: Data.Data.Data annot1).
                  @ (Language.Python.Common.AST.RaiseExpr annot1)
                  (Language.Python.Common.AST.$fDataRaiseExpr_$cp1Data @ annot1 v)
                  (Language.Python.Common.AST.$fDataRaiseExpr_$cgfoldl @ annot1 v)
                  (Language.Python.Common.AST.$fDataRaiseExpr_$cgunfold @ annot1 v)
                  (\ (ds :: Language.Python.Common.AST.RaiseExpr annot1) ->
                   case ds of wild {
                     Language.Python.Common.AST.RaiseV3 ds1
                     -> Language.Python.Common.AST.$cRaiseV3
                     Language.Python.Common.AST.RaiseV2 ds1
                     -> Language.Python.Common.AST.$cRaiseV2 })
                  (\ (ds :: Language.Python.Common.AST.RaiseExpr annot1) ->
                   Language.Python.Common.AST.$tRaiseExpr)
                  (Language.Python.Common.AST.$fDataRaiseExpr_$cdataCast1 @ annot1 v)
                  (\ @ t :: * -> * -> *
                     @ c :: * -> *
                     ($dTypeable :: Data.Typeable.Internal.Typeable t)
                     (ds :: forall d e.
                            (Data.Data.Data d, Data.Data.Data e) =>
                            c (t d e)) ->
                   GHC.Base.Nothing
                     @ (c (Language.Python.Common.AST.RaiseExpr annot1)))
                  (Language.Python.Common.AST.$fDataRaiseExpr1 @ annot1 v)
                    `cast`
                  (<forall b. Data.Data.Data b => b -> b>_R
                   ->_R <Language.Python.Common.AST.RaiseExpr annot1>_R
                   ->_R Data.Functor.Identity.N:Identity[0]
                            <Language.Python.Common.AST.RaiseExpr annot1>_R)
                  (Language.Python.Common.AST.$fDataRaiseExpr_$cgmapQl @ annot1 v)
                  (Language.Python.Common.AST.$fDataRaiseExpr_$cgmapQr @ annot1 v)
                  (Language.Python.Common.AST.$fDataRaiseExpr_$cgmapQ @ annot1 v)
                  (Language.Python.Common.AST.$fDataRaiseExpr_$cgmapQi @ annot1 v)
                  (Language.Python.Common.AST.$fDataRaiseExpr_$cgmapM @ annot1 v)
                  (Language.Python.Common.AST.$fDataRaiseExpr_$cgmapMp @ annot1 v)
                  (Language.Python.Common.AST.$fDataRaiseExpr_$cgmapMo @ annot1 v) -}
40b646133484efeda0b61064c970b83c
  $fDataRaiseExpr1 ::
    Data.Data.Data annot =>
    (forall b. Data.Data.Data b => b -> b)
    -> Language.Python.Common.AST.RaiseExpr annot
    -> Data.Functor.Identity.Identity
         (Language.Python.Common.AST.RaiseExpr annot)
  {- Arity: 3,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,C(C1(U))><L,U>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   (ds :: forall b. Data.Data.Data b => b -> b)
                   (x0 :: Language.Python.Common.AST.RaiseExpr annot1) ->
                 Language.Python.Common.AST.$fDataRaiseExpr_$cgfoldl
                   @ annot1
                   $dData
                   @ Data.Functor.Identity.Identity
                   (\ @ d
                      @ b
                      ($dData1 :: Data.Data.Data d)
                      (ds1 :: Data.Functor.Identity.Identity (d -> b))
                      (x :: d) ->
                    ds1 `cast` (Data.Functor.Identity.N:Identity[0] <d -> b>_R)
                      (ds @ d $dData1 x))
                     `cast`
                   (forall (d :: <*>_N) (b :: <*>_N).
                    <Data.Data.Data d>_R
                    ->_R <Data.Functor.Identity.Identity (d -> b)>_R
                    ->_R <d>_R
                    ->_R Sym (Data.Functor.Identity.N:Identity[0] <b>_R))
                   Language.Python.Common.AST.$fDataExpr7
                     `cast`
                   (forall (g :: <*>_N).
                    <g>_R ->_R Sym (Data.Functor.Identity.N:Identity[0] <g>_R))
                   x0) -}
a9cf9249c1547d8c85bef26994c55e60
  $fDataRaiseExpr2 :: [GHC.Fingerprint.Type.Fingerprint]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Fingerprint.Type.Fingerprint
                   Language.Python.Common.AST.$fDataRaiseExpr3
                   Language.Python.Common.AST.$fDataExpr9) -}
7ba628fd4e46143392f28c462a6c3e8f
  $fDataRaiseExpr3 :: GHC.Fingerprint.Type.Fingerprint
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Fingerprint.Type.Fingerprint
                   8912218851552818799##
                   12005689890530845372##) -}
40b646133484efeda0b61064c970b83c
  $fDataRaiseExpr4 :: GHC.Fingerprint.Type.Fingerprint
  {- Unfolding: (case Language.Python.Common.AST.$fDataRaiseExpr_a3 of wild { Data.Typeable.Internal.TrTyCon dt dt1 ds1 ds2 ->
                 GHC.Fingerprint.Type.Fingerprint dt dt1 }) -}
40b646133484efeda0b61064c970b83c
  $fDataRaiseExpr_$cdataCast1 ::
    Data.Data.Data annot =>
    forall (t :: * -> *) (c :: * -> *).
    Data.Typeable.Internal.Typeable t =>
    (forall d. Data.Data.Data d => c (t d))
    -> GHC.Base.Maybe (c (Language.Python.Common.AST.RaiseExpr annot))
  {- Arity: 2, Strictness: <L,U><L,1*U>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   @ t :: * -> *
                   @ c :: * -> *
                   ($dTypeable :: Data.Typeable.Internal.Typeable t) ->
                 let {
                   lvl447 :: GHC.Base.Maybe
                               (t Data.Type.Equality.:~~: Language.Python.Common.AST.RaiseExpr)
                   = Data.Typeable.Internal.eqTypeRep
                       @ (* -> *)
                       @ (* -> *)
                       @ t
                       @ Language.Python.Common.AST.RaiseExpr
                       $dTypeable
                         `cast`
                       (Data.Typeable.Internal.N:Typeable[0] <* -> *>_N <t>_N)
                       Language.Python.Common.AST.$fDataRaiseExpr_a3
                 } in
                 \ (f12 :: forall d. Data.Data.Data d => c (t d)) ->
                 case lvl447 of wild {
                   GHC.Base.Nothing
                   -> GHC.Base.Nothing
                        @ (c (Language.Python.Common.AST.RaiseExpr annot1))
                   GHC.Base.Just ds
                   -> case ds of wild1 { Data.Type.Equality.HRefl cobox cobox1 ->
                      GHC.Base.Just
                        @ (c (Language.Python.Common.AST.RaiseExpr annot1))
                        (f12 @ annot1 $dData)
                          `cast`
                        (<c>_R (Sym cobox1 <annot1>_N)) } }) -}
40b646133484efeda0b61064c970b83c
  $fDataRaiseExpr_$cgfoldl ::
    Data.Data.Data annot =>
    forall (c :: * -> *).
    (forall d b. Data.Data.Data d => c (d -> b) -> d -> c b)
    -> (forall g. g -> c g)
    -> Language.Python.Common.AST.RaiseExpr annot
    -> c (Language.Python.Common.AST.RaiseExpr annot)
  {- Arity: 1, Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   @ c :: * -> * ->
                 let {
                   $dData1 :: Data.Data.Data (Language.Python.Common.AST.Expr annot1)
                   = Language.Python.Common.AST.$fDataExpr @ annot1 $dData
                 } in
                 let {
                   $dData2 :: Data.Data.Data
                                (GHC.Base.Maybe (Language.Python.Common.AST.Expr annot1))
                   = Data.Data.$fDataMaybe
                       @ (Language.Python.Common.AST.Expr annot1)
                       $dData1
                 } in
                 let {
                   $dData3 :: Data.Data.Data
                                (Language.Python.Common.AST.Expr annot1,
                                 GHC.Base.Maybe (Language.Python.Common.AST.Expr annot1))
                   = Data.Data.$fData(,)
                       @ (Language.Python.Common.AST.Expr annot1)
                       @ (GHC.Base.Maybe (Language.Python.Common.AST.Expr annot1))
                       $dData1
                       $dData2
                 } in
                 let {
                   $dData4 :: Data.Data.Data
                                (GHC.Base.Maybe
                                   (Language.Python.Common.AST.Expr annot1,
                                    GHC.Base.Maybe (Language.Python.Common.AST.Expr annot1)))
                   = Data.Data.$fDataMaybe
                       @ (Language.Python.Common.AST.Expr annot1,
                          GHC.Base.Maybe (Language.Python.Common.AST.Expr annot1))
                       $dData3
                 } in
                 let {
                   $dData5 :: Data.Data.Data
                                (Language.Python.Common.AST.Expr annot1,
                                 GHC.Base.Maybe
                                   (Language.Python.Common.AST.Expr annot1,
                                    GHC.Base.Maybe (Language.Python.Common.AST.Expr annot1)))
                   = Data.Data.$fData(,)
                       @ (Language.Python.Common.AST.Expr annot1)
                       @ (GHC.Base.Maybe
                            (Language.Python.Common.AST.Expr annot1,
                             GHC.Base.Maybe (Language.Python.Common.AST.Expr annot1)))
                       $dData1
                       $dData4
                 } in
                 let {
                   $dData6 :: Data.Data.Data
                                (GHC.Base.Maybe
                                   (Language.Python.Common.AST.Expr annot1,
                                    GHC.Base.Maybe
                                      (Language.Python.Common.AST.Expr annot1,
                                       GHC.Base.Maybe (Language.Python.Common.AST.Expr annot1))))
                   = Data.Data.$fDataMaybe
                       @ (Language.Python.Common.AST.Expr annot1,
                          GHC.Base.Maybe
                            (Language.Python.Common.AST.Expr annot1,
                             GHC.Base.Maybe (Language.Python.Common.AST.Expr annot1)))
                       $dData5
                 } in
                 \ (k :: forall d b. Data.Data.Data d => c (d -> b) -> d -> c b)
                   (z :: forall g. g -> c g)
                   (ds :: Language.Python.Common.AST.RaiseExpr annot1) ->
                 case ds of wild {
                   Language.Python.Common.AST.RaiseV3 a1
                   -> k @ (GHC.Base.Maybe
                             (Language.Python.Common.AST.Expr annot1,
                              GHC.Base.Maybe (Language.Python.Common.AST.Expr annot1)))
                        @ (Language.Python.Common.AST.RaiseExpr annot1)
                        $dData4
                        (z @ (GHC.Base.Maybe
                                (Language.Python.Common.AST.Expr annot1,
                                 GHC.Base.Maybe (Language.Python.Common.AST.Expr annot1))
                              -> Language.Python.Common.AST.RaiseExpr annot1)
                           (Language.Python.Common.AST.RaiseV3 @ annot1))
                        a1
                   Language.Python.Common.AST.RaiseV2 a1
                   -> k @ (GHC.Base.Maybe
                             (Language.Python.Common.AST.Expr annot1,
                              GHC.Base.Maybe
                                (Language.Python.Common.AST.Expr annot1,
                                 GHC.Base.Maybe (Language.Python.Common.AST.Expr annot1))))
                        @ (Language.Python.Common.AST.RaiseExpr annot1)
                        $dData6
                        (z @ (GHC.Base.Maybe
                                (Language.Python.Common.AST.Expr annot1,
                                 GHC.Base.Maybe
                                   (Language.Python.Common.AST.Expr annot1,
                                    GHC.Base.Maybe (Language.Python.Common.AST.Expr annot1)))
                              -> Language.Python.Common.AST.RaiseExpr annot1)
                           (Language.Python.Common.AST.RaiseV2 @ annot1))
                        a1 }) -}
40b646133484efeda0b61064c970b83c
  $fDataRaiseExpr_$cgmapM ::
    Data.Data.Data annot =>
    forall (m :: * -> *).
    GHC.Base.Monad m =>
    (forall d. Data.Data.Data d => d -> m d)
    -> Language.Python.Common.AST.RaiseExpr annot
    -> m (Language.Python.Common.AST.RaiseExpr annot)
  {- Arity: 3,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,U(A,C(C1(U)),A,U,A)><L,C(C1(U))>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   @ m :: * -> *
                   ($dMonad :: GHC.Base.Monad m)
                   (ds :: forall d. Data.Data.Data d => d -> m d) ->
                 Language.Python.Common.AST.$fDataRaiseExpr_$cgfoldl
                   @ annot1
                   $dData
                   @ m
                   (\ @ d
                      @ b
                      ($dData1 :: Data.Data.Data d)
                      (c :: m (d -> b))
                      (x :: d) ->
                    let {
                      lvl447 :: m d = ds @ d $dData1 x
                    } in
                    GHC.Base.>>=
                      @ m
                      $dMonad
                      @ (d -> b)
                      @ b
                      c
                      (\ (c' :: d -> b) ->
                       GHC.Base.>>=
                         @ m
                         $dMonad
                         @ d
                         @ b
                         lvl447
                         (\ (x' :: d) -> GHC.Base.return @ m $dMonad @ b (c' x'))))
                   (\ @ g -> GHC.Base.return @ m $dMonad @ g)) -}
40b646133484efeda0b61064c970b83c
  $fDataRaiseExpr_$cgmapMo ::
    Data.Data.Data annot =>
    forall (m :: * -> *).
    GHC.Base.MonadPlus m =>
    (forall d. Data.Data.Data d => d -> m d)
    -> Language.Python.Common.AST.RaiseExpr annot
    -> m (Language.Python.Common.AST.RaiseExpr annot)
  {- Arity: 4,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><S(LS(LC(C(S))LLL)LL),U(A,1*U(A,C(C1(U)),A,C(U),A),1*U,C(C1(U)))><L,C(C1(U))><L,U>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   @ m :: * -> *
                   ($dMonadPlus :: GHC.Base.MonadPlus m)
                   (ds :: forall d. Data.Data.Data d => d -> m d)
                   (eta :: Language.Python.Common.AST.RaiseExpr annot1) ->
                 let {
                   $dMonad :: GHC.Base.Monad m = GHC.Base.$p2MonadPlus @ m $dMonadPlus
                 } in
                 let {
                   lvl447 :: m (Language.Python.Common.AST.RaiseExpr annot1)
                   = GHC.Base.mzero
                       @ m
                       $dMonadPlus
                       @ (Language.Python.Common.AST.RaiseExpr annot1)
                 } in
                 GHC.Base.>>=
                   @ m
                   $dMonad
                   @ (Language.Python.Common.AST.RaiseExpr annot1, GHC.Types.Bool)
                   @ (Language.Python.Common.AST.RaiseExpr annot1)
                   (Language.Python.Common.AST.$fDataRaiseExpr_$cgfoldl
                      @ annot1
                      $dData
                      @ (Data.Data.Mp m)
                      (\ @ d
                         @ b
                         ($dData1 :: Data.Data.Data d)
                         (ds1 :: Data.Data.Mp m (d -> b))
                         (y :: d) ->
                       let {
                         lvl448 :: m d = ds @ d $dData1 y
                       } in
                       GHC.Base.>>=
                         @ m
                         $dMonad
                         @ (d -> b, GHC.Types.Bool)
                         @ (b, GHC.Types.Bool)
                         ds1 `cast` (Data.Data.N:Mp[0] <m>_R <d -> b>_N)
                         (\ (ds2 :: (d -> b, GHC.Types.Bool)) ->
                          case ds2 of wild { (,) h b1 ->
                          case b1 of wild1 {
                            GHC.Types.False
                            -> GHC.Base.mplus
                                 @ m
                                 $dMonadPlus
                                 @ (b, GHC.Types.Bool)
                                 (GHC.Base.>>=
                                    @ m
                                    $dMonad
                                    @ d
                                    @ (b, GHC.Types.Bool)
                                    lvl448
                                    (\ (y' :: d) ->
                                     GHC.Base.return
                                       @ m
                                       $dMonad
                                       @ (b, GHC.Types.Bool)
                                       (h y', GHC.Types.True)))
                                 (GHC.Base.return
                                    @ m
                                    $dMonad
                                    @ (b, GHC.Types.Bool)
                                    (h y, GHC.Types.False))
                            GHC.Types.True
                            -> GHC.Base.return
                                 @ m
                                 $dMonad
                                 @ (b, GHC.Types.Bool)
                                 (h y, GHC.Types.True) } }))
                        `cast`
                      (forall (d :: <*>_N) (b :: <*>_N).
                       <Data.Data.Data d>_R
                       ->_R <Data.Data.Mp m (d -> b)>_R
                       ->_R <d>_R
                       ->_R Sym (Data.Data.N:Mp[0] <m>_R <b>_N))
                      (\ @ g (g1 :: g) ->
                       GHC.Base.return
                         @ m
                         $dMonad
                         @ (g, GHC.Types.Bool)
                         (g1, GHC.Types.False))
                        `cast`
                      (forall (g :: <*>_N).
                       <g>_R ->_R Sym (Data.Data.N:Mp[0] <m>_R <g>_N))
                      eta)
                     `cast`
                   (Data.Data.N:Mp[0]
                        <m>_R <Language.Python.Common.AST.RaiseExpr annot1>_N)
                   (\ (ds1 :: (Language.Python.Common.AST.RaiseExpr annot1,
                               GHC.Types.Bool)) ->
                    case ds1 of wild { (,) x' b ->
                    case b of wild1 {
                      GHC.Types.False -> lvl447
                      GHC.Types.True
                      -> GHC.Base.return
                           @ m
                           $dMonad
                           @ (Language.Python.Common.AST.RaiseExpr annot1)
                           x' } })) -}
40b646133484efeda0b61064c970b83c
  $fDataRaiseExpr_$cgmapMp ::
    Data.Data.Data annot =>
    forall (m :: * -> *).
    GHC.Base.MonadPlus m =>
    (forall d. Data.Data.Data d => d -> m d)
    -> Language.Python.Common.AST.RaiseExpr annot
    -> m (Language.Python.Common.AST.RaiseExpr annot)
  {- Arity: 4,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><S(LS(LC(C(S))LLL)LL),U(A,1*U(A,C(C1(U)),A,C(U),A),1*U,C(C1(U)))><L,C(C1(U))><L,U>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   @ m :: * -> *
                   ($dMonadPlus :: GHC.Base.MonadPlus m)
                   (ds :: forall d. Data.Data.Data d => d -> m d)
                   (eta :: Language.Python.Common.AST.RaiseExpr annot1) ->
                 let {
                   $dMonad :: GHC.Base.Monad m = GHC.Base.$p2MonadPlus @ m $dMonadPlus
                 } in
                 let {
                   lvl447 :: m (Language.Python.Common.AST.RaiseExpr annot1)
                   = GHC.Base.mzero
                       @ m
                       $dMonadPlus
                       @ (Language.Python.Common.AST.RaiseExpr annot1)
                 } in
                 GHC.Base.>>=
                   @ m
                   $dMonad
                   @ (Language.Python.Common.AST.RaiseExpr annot1, GHC.Types.Bool)
                   @ (Language.Python.Common.AST.RaiseExpr annot1)
                   (Language.Python.Common.AST.$fDataRaiseExpr_$cgfoldl
                      @ annot1
                      $dData
                      @ (Data.Data.Mp m)
                      (\ @ d
                         @ b
                         ($dData1 :: Data.Data.Data d)
                         (ds1 :: Data.Data.Mp m (d -> b))
                         (y :: d) ->
                       let {
                         lvl448 :: m d = ds @ d $dData1 y
                       } in
                       GHC.Base.>>=
                         @ m
                         $dMonad
                         @ (d -> b, GHC.Types.Bool)
                         @ (b, GHC.Types.Bool)
                         ds1 `cast` (Data.Data.N:Mp[0] <m>_R <d -> b>_N)
                         (\ (ds2 :: (d -> b, GHC.Types.Bool)) ->
                          case ds2 of wild { (,) h b1 ->
                          GHC.Base.mplus
                            @ m
                            $dMonadPlus
                            @ (b, GHC.Types.Bool)
                            (GHC.Base.>>=
                               @ m
                               $dMonad
                               @ d
                               @ (b, GHC.Types.Bool)
                               lvl448
                               (\ (y' :: d) ->
                                GHC.Base.return
                                  @ m
                                  $dMonad
                                  @ (b, GHC.Types.Bool)
                                  (h y', GHC.Types.True)))
                            (GHC.Base.return @ m $dMonad @ (b, GHC.Types.Bool) (h y, b1)) }))
                        `cast`
                      (forall (d :: <*>_N) (b :: <*>_N).
                       <Data.Data.Data d>_R
                       ->_R <Data.Data.Mp m (d -> b)>_R
                       ->_R <d>_R
                       ->_R Sym (Data.Data.N:Mp[0] <m>_R <b>_N))
                      (\ @ g (g1 :: g) ->
                       GHC.Base.return
                         @ m
                         $dMonad
                         @ (g, GHC.Types.Bool)
                         (g1, GHC.Types.False))
                        `cast`
                      (forall (g :: <*>_N).
                       <g>_R ->_R Sym (Data.Data.N:Mp[0] <m>_R <g>_N))
                      eta)
                     `cast`
                   (Data.Data.N:Mp[0]
                        <m>_R <Language.Python.Common.AST.RaiseExpr annot1>_N)
                   (\ (ds1 :: (Language.Python.Common.AST.RaiseExpr annot1,
                               GHC.Types.Bool)) ->
                    case ds1 of wild { (,) x' b ->
                    case b of wild1 {
                      GHC.Types.False -> lvl447
                      GHC.Types.True
                      -> GHC.Base.return
                           @ m
                           $dMonad
                           @ (Language.Python.Common.AST.RaiseExpr annot1)
                           x' } })) -}
40b646133484efeda0b61064c970b83c
  $fDataRaiseExpr_$cgmapQ ::
    Data.Data.Data annot =>
    forall u.
    (forall d. Data.Data.Data d => d -> u)
    -> Language.Python.Common.AST.RaiseExpr annot -> [u]
  {- Arity: 3,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,C(C1(U))><L,U>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   @ u
                   (ds :: forall d. Data.Data.Data d => d -> u)
                   (x0 :: Language.Python.Common.AST.RaiseExpr annot1) ->
                 (Language.Python.Common.AST.$fDataRaiseExpr_$cgfoldl
                    @ annot1
                    $dData
                    @ (Data.Data.Qr [u])
                    (\ @ d
                       @ b
                       ($dData1 :: Data.Data.Data d)
                       (ds1 :: Data.Data.Qr [u] (d -> b))
                       (x :: d)
                       (r1 :: [u]) ->
                     ds1 `cast` (Data.Data.N:Qr[0] <*>_N <[u]>_R <d -> b>_P)
                       (GHC.Types.: @ u (ds @ d $dData1 x) r1))
                      `cast`
                    (forall (d :: <*>_N) (b :: <*>_N).
                     <Data.Data.Data d>_R
                     ->_R <Data.Data.Qr [u] (d -> b)>_R
                     ->_R <d>_R
                     ->_R Sym (Data.Data.N:Qr[0] <*>_N <[u]>_R <b>_P))
                    (Language.Python.Common.AST.$fDataExpr4 @ u)
                      `cast`
                    (forall (g :: <*>_N).
                     <g>_R ->_R Sym (Data.Data.N:Qr[0] <*>_N <[u]>_R <g>_P))
                    x0)
                   `cast`
                 (Data.Data.N:Qr[0]
                      <*>_N <[u]>_R <Language.Python.Common.AST.RaiseExpr annot1>_P)
                   (GHC.Types.[] @ u)) -}
40b646133484efeda0b61064c970b83c
  $fDataRaiseExpr_$cgmapQi ::
    Data.Data.Data annot =>
    forall u.
    GHC.Types.Int
    -> (forall d. Data.Data.Data d => d -> u)
    -> Language.Python.Common.AST.RaiseExpr annot
    -> u
  {- Arity: 4,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,U(U)><L,C(C1(U))><L,U>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   @ u
                   (ds :: GHC.Types.Int)
                   (ds1 :: forall d. Data.Data.Data d => d -> u)
                   (x :: Language.Python.Common.AST.RaiseExpr annot1) ->
                 case Language.Python.Common.AST.$fDataRaiseExpr_$cgfoldl
                        @ annot1
                        $dData
                        @ (Data.Data.Qi u)
                        (\ @ d
                           @ b
                           ($dData1 :: Data.Data.Data d)
                           (ds2 :: Data.Data.Qi u (d -> b))
                           (a2 :: d) ->
                         case ds2 of wild { Data.Data.Qi i' q ->
                         Data.Data.Qi
                           @ *
                           @ u
                           @ b
                           (case i' of wild1 { GHC.Types.I# x1 ->
                            GHC.Types.I# (GHC.Prim.+# x1 1#) })
                           (case ds of wild1 { GHC.Types.I# x1 ->
                            case i' of wild2 { GHC.Types.I# y ->
                            case GHC.Prim.tagToEnum#
                                   @ GHC.Types.Bool
                                   (GHC.Prim.==# x1 y) of wild3 {
                              GHC.Types.False -> q
                              GHC.Types.True -> GHC.Base.Just @ u (ds1 @ d $dData1 a2) } } }) })
                        (Language.Python.Common.AST.$fDataExpr1 @ u)
                        x of wild { Data.Data.Qi ds2 q ->
                 Data.Maybe.fromJust @ u q }) -}
40b646133484efeda0b61064c970b83c
  $fDataRaiseExpr_$cgmapQl ::
    Data.Data.Data annot =>
    forall r r'.
    (r -> r' -> r)
    -> r
    -> (forall d. Data.Data.Data d => d -> r')
    -> Language.Python.Common.AST.RaiseExpr annot
    -> r
  {- Arity: 4,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,C(C1(U))><L,U><L,C(C1(U))>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   @ r
                   @ r'
                   (ds :: r -> r' -> r)
                   (ds1 :: r)
                   (ds2 :: forall d. Data.Data.Data d => d -> r') ->
                 let {
                   g :: Language.Python.Common.AST.RaiseExpr annot1
                        -> Data.Functor.Const.Const
                             r (Language.Python.Common.AST.RaiseExpr annot1)
                   = Language.Python.Common.AST.$fDataRaiseExpr_$cgfoldl
                       @ annot1
                       $dData
                       @ (Data.Functor.Const.Const r)
                       (\ @ d
                          @ b
                          ($dData1 :: Data.Data.Data d)
                          (c :: Data.Functor.Const.Const r (d -> b))
                          (x :: d) ->
                        ds
                          c `cast` (Data.Functor.Const.N:Const[0] <*>_N <r>_R <d -> b>_P)
                          (ds2 @ d $dData1 x))
                         `cast`
                       (forall (d :: <*>_N) (b :: <*>_N).
                        <Data.Data.Data d>_R
                        ->_R <Data.Functor.Const.Const r (d -> b)>_R
                        ->_R <d>_R
                        ->_R Sym (Data.Functor.Const.N:Const[0] <*>_N <r>_R <b>_P))
                       (\ @ g1 (ds3 :: g1) -> ds1)
                         `cast`
                       (forall (g1 :: <*>_N).
                        <g1>_R ->_R Sym (Data.Functor.Const.N:Const[0] <*>_N <r>_R <g1>_P))
                 } in
                 (\ (x :: Language.Python.Common.AST.RaiseExpr annot1) -> g x)
                   `cast`
                 (<Language.Python.Common.AST.RaiseExpr annot1>_R
                  ->_R Data.Functor.Const.N:Const[0]
                           <*>_N <r>_R <Language.Python.Common.AST.RaiseExpr annot1>_P)) -}
40b646133484efeda0b61064c970b83c
  $fDataRaiseExpr_$cgmapQr ::
    Data.Data.Data annot =>
    forall r r'.
    (r' -> r -> r)
    -> r
    -> (forall d. Data.Data.Data d => d -> r')
    -> Language.Python.Common.AST.RaiseExpr annot
    -> r
  {- Arity: 5,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,C(C1(U))><L,U><L,C(C1(U))><L,U>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   @ r
                   @ r'
                   (ds :: r' -> r -> r)
                   (ds1 :: r)
                   (ds2 :: forall d. Data.Data.Data d => d -> r')
                   (x0 :: Language.Python.Common.AST.RaiseExpr annot1) ->
                 (Language.Python.Common.AST.$fDataRaiseExpr_$cgfoldl
                    @ annot1
                    $dData
                    @ (Data.Data.Qr r)
                    (\ @ d
                       @ b
                       ($dData1 :: Data.Data.Data d)
                       (ds3 :: Data.Data.Qr r (d -> b))
                       (x :: d)
                       (r1 :: r) ->
                     ds3 `cast` (Data.Data.N:Qr[0] <*>_N <r>_R <d -> b>_P)
                       (ds (ds2 @ d $dData1 x) r1))
                      `cast`
                    (forall (d :: <*>_N) (b :: <*>_N).
                     <Data.Data.Data d>_R
                     ->_R <Data.Data.Qr r (d -> b)>_R
                     ->_R <d>_R
                     ->_R Sym (Data.Data.N:Qr[0] <*>_N <r>_R <b>_P))
                    (Language.Python.Common.AST.$fDataExpr5 @ r)
                      `cast`
                    (forall (g :: <*>_N).
                     <g>_R ->_R Sym (Data.Data.N:Qr[0] <*>_N <r>_R <g>_P))
                    x0)
                   `cast`
                 (Data.Data.N:Qr[0]
                      <*>_N <r>_R <Language.Python.Common.AST.RaiseExpr annot1>_P)
                   ds1) -}
40b646133484efeda0b61064c970b83c
  $fDataRaiseExpr_$cgunfold ::
    Data.Data.Data annot =>
    forall (c :: * -> *).
    (forall b r. Data.Data.Data b => c (b -> r) -> c r)
    -> (forall r. r -> c r)
    -> Data.Data.Constr
    -> c (Language.Python.Common.AST.RaiseExpr annot)
  {- Arity: 1, Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   @ c :: * -> * ->
                 let {
                   $dData1 :: Data.Data.Data (Language.Python.Common.AST.Expr annot1)
                   = Language.Python.Common.AST.$fDataExpr @ annot1 $dData
                 } in
                 let {
                   $dData2 :: Data.Data.Data
                                (GHC.Base.Maybe (Language.Python.Common.AST.Expr annot1))
                   = Data.Data.$fDataMaybe
                       @ (Language.Python.Common.AST.Expr annot1)
                       $dData1
                 } in
                 let {
                   $dData3 :: Data.Data.Data
                                (Language.Python.Common.AST.Expr annot1,
                                 GHC.Base.Maybe (Language.Python.Common.AST.Expr annot1))
                   = Data.Data.$fData(,)
                       @ (Language.Python.Common.AST.Expr annot1)
                       @ (GHC.Base.Maybe (Language.Python.Common.AST.Expr annot1))
                       $dData1
                       $dData2
                 } in
                 let {
                   $dData4 :: Data.Data.Data
                                (GHC.Base.Maybe
                                   (Language.Python.Common.AST.Expr annot1,
                                    GHC.Base.Maybe (Language.Python.Common.AST.Expr annot1)))
                   = Data.Data.$fDataMaybe
                       @ (Language.Python.Common.AST.Expr annot1,
                          GHC.Base.Maybe (Language.Python.Common.AST.Expr annot1))
                       $dData3
                 } in
                 let {
                   $dData5 :: Data.Data.Data
                                (Language.Python.Common.AST.Expr annot1,
                                 GHC.Base.Maybe
                                   (Language.Python.Common.AST.Expr annot1,
                                    GHC.Base.Maybe (Language.Python.Common.AST.Expr annot1)))
                   = Data.Data.$fData(,)
                       @ (Language.Python.Common.AST.Expr annot1)
                       @ (GHC.Base.Maybe
                            (Language.Python.Common.AST.Expr annot1,
                             GHC.Base.Maybe (Language.Python.Common.AST.Expr annot1)))
                       $dData1
                       $dData4
                 } in
                 let {
                   $dData6 :: Data.Data.Data
                                (GHC.Base.Maybe
                                   (Language.Python.Common.AST.Expr annot1,
                                    GHC.Base.Maybe
                                      (Language.Python.Common.AST.Expr annot1,
                                       GHC.Base.Maybe (Language.Python.Common.AST.Expr annot1))))
                   = Data.Data.$fDataMaybe
                       @ (Language.Python.Common.AST.Expr annot1,
                          GHC.Base.Maybe
                            (Language.Python.Common.AST.Expr annot1,
                             GHC.Base.Maybe (Language.Python.Common.AST.Expr annot1)))
                       $dData5
                 } in
                 \ (k :: forall b r. Data.Data.Data b => c (b -> r) -> c r)
                   (z :: forall r. r -> c r)
                   (c1 :: Data.Data.Constr) ->
                 case c1 of wild { Data.Data.Constr ds ds1 ds2 ds3 ds4 ->
                 case ds of wild1 {
                   DEFAULT
                   -> case ds4 of ww6 { Data.Data.DataType ww7 ww8 ->
                      case Data.Data.$wlvl ww7
                      ret_ty (c (Language.Python.Common.AST.RaiseExpr annot1))
                      of {} }
                   Data.Data.AlgConstr idx
                   -> case idx of wild2 { GHC.Types.I# ds7 ->
                      case ds7 of ds8 {
                        DEFAULT
                        -> k @ (GHC.Base.Maybe
                                  (Language.Python.Common.AST.Expr annot1,
                                   GHC.Base.Maybe
                                     (Language.Python.Common.AST.Expr annot1,
                                      GHC.Base.Maybe (Language.Python.Common.AST.Expr annot1))))
                             @ (Language.Python.Common.AST.RaiseExpr annot1)
                             $dData6
                             (z @ (GHC.Base.Maybe
                                     (Language.Python.Common.AST.Expr annot1,
                                      GHC.Base.Maybe
                                        (Language.Python.Common.AST.Expr annot1,
                                         GHC.Base.Maybe (Language.Python.Common.AST.Expr annot1)))
                                   -> Language.Python.Common.AST.RaiseExpr annot1)
                                (Language.Python.Common.AST.RaiseV2 @ annot1))
                        1#
                        -> k @ (GHC.Base.Maybe
                                  (Language.Python.Common.AST.Expr annot1,
                                   GHC.Base.Maybe (Language.Python.Common.AST.Expr annot1)))
                             @ (Language.Python.Common.AST.RaiseExpr annot1)
                             $dData4
                             (z @ (GHC.Base.Maybe
                                     (Language.Python.Common.AST.Expr annot1,
                                      GHC.Base.Maybe (Language.Python.Common.AST.Expr annot1))
                                   -> Language.Python.Common.AST.RaiseExpr annot1)
                                (Language.Python.Common.AST.RaiseV3 @ annot1)) } } } }) -}
40b646133484efeda0b61064c970b83c
  $fDataRaiseExpr_$cp1Data ::
    Data.Data.Data annot =>
    Data.Typeable.Internal.Typeable
      (Language.Python.Common.AST.RaiseExpr annot)
  {- Arity: 1, Strictness: <L,1*U(1*U,A,A,A,A,A,A,A,A,A,A,A,A,A,A)>,
     Unfolding: (\ @ annot1 ($dData :: Data.Data.Data annot1) ->
                 let {
                   b1 :: Data.Typeable.Internal.Typeable annot1
                   = Data.Data.$p1Data @ annot1 $dData
                 } in
                 case GHC.Magic.noinline
                        @ ([GHC.Fingerprint.Type.Fingerprint]
                           -> GHC.Fingerprint.Type.Fingerprint)
                        GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           Language.Python.Common.AST.$fDataRaiseExpr4
                           (GHC.Types.:
                              @ GHC.Fingerprint.Type.Fingerprint
                              (Data.Typeable.Internal.typeRepFingerprint
                                 @ *
                                 @ annot1
                                 b1 `cast` (Data.Typeable.Internal.N:Typeable[0] <*>_N <annot1>_N))
                              (GHC.Types.[]
                                 @ GHC.Fingerprint.Type.Fingerprint))) of dt { GHC.Fingerprint.Type.Fingerprint dt1 dt2 ->
                 (Data.Typeable.Internal.TrApp
                    @ *
                    @ (Language.Python.Common.AST.RaiseExpr annot1)
                    @ *
                    @ Language.Python.Common.AST.RaiseExpr
                    @ annot1
                    @~ <Language.Python.Common.AST.RaiseExpr annot1>_N
                    dt1
                    dt2
                    Language.Python.Common.AST.$fDataRaiseExpr_a3
                    b1 `cast` (Data.Typeable.Internal.N:Typeable[0] <*>_N <annot1>_N))
                   `cast`
                 (Sym (Data.Typeable.Internal.N:Typeable[0]) <*>_N <Language.Python.Common.AST.RaiseExpr
                                                                      annot1>_N) }) -}
40b646133484efeda0b61064c970b83c
  $fDataRaiseExpr_a3 ::
    Data.Typeable.Internal.TypeRep Language.Python.Common.AST.RaiseExpr
  {- Unfolding: (case GHC.Magic.noinline
                        @ ([GHC.Fingerprint.Type.Fingerprint]
                           -> GHC.Fingerprint.Type.Fingerprint)
                        GHC.Fingerprint.fingerprintFingerprints
                        Language.Python.Common.AST.$fDataRaiseExpr2 of dt { GHC.Fingerprint.Type.Fingerprint dt1 dt2 ->
                 Data.Typeable.Internal.TrTyCon
                   @ (* -> *)
                   @ Language.Python.Common.AST.RaiseExpr
                   dt1
                   dt2
                   Language.Python.Common.AST.$tcRaiseExpr
                   (GHC.Types.[] @ Data.Typeable.Internal.SomeTypeRep) }) -}
94dde4ffceed0a2a13daed020b6576e1
  $fDataSlice ::
    Data.Data.Data annot =>
    Data.Data.Data (Language.Python.Common.AST.Slice annot)
  DFunId
  {- Arity: 1, Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)>,
     Inline: CONLIKE,
     Unfolding: DFun: @ annot1 (v :: Data.Data.Data annot1).
                  @ (Language.Python.Common.AST.Slice annot1)
                  (Language.Python.Common.AST.$fDataSlice_$cp1Data @ annot1 v)
                  (Language.Python.Common.AST.$fDataSlice_$cgfoldl @ annot1 v)
                  (Language.Python.Common.AST.$fDataSlice_$cgunfold @ annot1 v)
                  (\ (ds :: Language.Python.Common.AST.Slice annot1) ->
                   case ds of wild {
                     Language.Python.Common.AST.SliceProper ds1 ds2 ds3 ds4
                     -> Language.Python.Common.AST.$cSliceProper
                     Language.Python.Common.AST.SliceExpr ds1 ds2
                     -> Language.Python.Common.AST.$cSliceExpr
                     Language.Python.Common.AST.SliceEllipsis ds1
                     -> Language.Python.Common.AST.$cSliceEllipsis })
                  (\ (ds :: Language.Python.Common.AST.Slice annot1) ->
                   Language.Python.Common.AST.$tSlice)
                  (Language.Python.Common.AST.$fDataSlice_$cdataCast1 @ annot1 v)
                  (\ @ t :: * -> * -> *
                     @ c :: * -> *
                     ($dTypeable :: Data.Typeable.Internal.Typeable t)
                     (ds :: forall d e.
                            (Data.Data.Data d, Data.Data.Data e) =>
                            c (t d e)) ->
                   GHC.Base.Nothing @ (c (Language.Python.Common.AST.Slice annot1)))
                  (Language.Python.Common.AST.$fDataSlice1 @ annot1 v)
                    `cast`
                  (<forall b. Data.Data.Data b => b -> b>_R
                   ->_R <Language.Python.Common.AST.Slice annot1>_R
                   ->_R Data.Functor.Identity.N:Identity[0]
                            <Language.Python.Common.AST.Slice annot1>_R)
                  (Language.Python.Common.AST.$fDataSlice_$cgmapQl @ annot1 v)
                  (Language.Python.Common.AST.$fDataSlice_$cgmapQr @ annot1 v)
                  (Language.Python.Common.AST.$fDataSlice_$cgmapQ @ annot1 v)
                  (Language.Python.Common.AST.$fDataSlice_$cgmapQi @ annot1 v)
                  (Language.Python.Common.AST.$fDataSlice_$cgmapM @ annot1 v)
                  (Language.Python.Common.AST.$fDataSlice_$cgmapMp @ annot1 v)
                  (Language.Python.Common.AST.$fDataSlice_$cgmapMo @ annot1 v) -}
94dde4ffceed0a2a13daed020b6576e1
  $fDataSlice1 ::
    Data.Data.Data annot =>
    (forall b. Data.Data.Data b => b -> b)
    -> Language.Python.Common.AST.Slice annot
    -> Data.Functor.Identity.Identity
         (Language.Python.Common.AST.Slice annot)
  {- Arity: 3,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,C(C1(U))><L,U>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   (ds :: forall b. Data.Data.Data b => b -> b)
                   (x0 :: Language.Python.Common.AST.Slice annot1) ->
                 Language.Python.Common.AST.$fDataSlice_$cgfoldl
                   @ annot1
                   $dData
                   @ Data.Functor.Identity.Identity
                   (\ @ d
                      @ b
                      ($dData1 :: Data.Data.Data d)
                      (ds1 :: Data.Functor.Identity.Identity (d -> b))
                      (x :: d) ->
                    ds1 `cast` (Data.Functor.Identity.N:Identity[0] <d -> b>_R)
                      (ds @ d $dData1 x))
                     `cast`
                   (forall (d :: <*>_N) (b :: <*>_N).
                    <Data.Data.Data d>_R
                    ->_R <Data.Functor.Identity.Identity (d -> b)>_R
                    ->_R <d>_R
                    ->_R Sym (Data.Functor.Identity.N:Identity[0] <b>_R))
                   Language.Python.Common.AST.$fDataExpr7
                     `cast`
                   (forall (g :: <*>_N).
                    <g>_R ->_R Sym (Data.Functor.Identity.N:Identity[0] <g>_R))
                   x0) -}
a5572eef80ba21d1c1c66e02233f3f71
  $fDataSlice2 :: [GHC.Fingerprint.Type.Fingerprint]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Fingerprint.Type.Fingerprint
                   Language.Python.Common.AST.$fDataSlice3
                   Language.Python.Common.AST.$fDataExpr9) -}
f6e38e46fc8938f690de52655fac15dc
  $fDataSlice3 :: GHC.Fingerprint.Type.Fingerprint
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Fingerprint.Type.Fingerprint
                   10517644633188245717##
                   5192320171370186527##) -}
94dde4ffceed0a2a13daed020b6576e1
  $fDataSlice4 :: GHC.Fingerprint.Type.Fingerprint
  {- Unfolding: (case Language.Python.Common.AST.$fDataSlice_a3 of wild { Data.Typeable.Internal.TrTyCon dt dt1 ds1 ds2 ->
                 GHC.Fingerprint.Type.Fingerprint dt dt1 }) -}
94dde4ffceed0a2a13daed020b6576e1
  $fDataSlice_$cdataCast1 ::
    Data.Data.Data annot =>
    forall (t :: * -> *) (c :: * -> *).
    Data.Typeable.Internal.Typeable t =>
    (forall d. Data.Data.Data d => c (t d))
    -> GHC.Base.Maybe (c (Language.Python.Common.AST.Slice annot))
  {- Arity: 2, Strictness: <L,U><L,1*U>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   @ t :: * -> *
                   @ c :: * -> *
                   ($dTypeable :: Data.Typeable.Internal.Typeable t) ->
                 let {
                   lvl447 :: GHC.Base.Maybe
                               (t Data.Type.Equality.:~~: Language.Python.Common.AST.Slice)
                   = Data.Typeable.Internal.eqTypeRep
                       @ (* -> *)
                       @ (* -> *)
                       @ t
                       @ Language.Python.Common.AST.Slice
                       $dTypeable
                         `cast`
                       (Data.Typeable.Internal.N:Typeable[0] <* -> *>_N <t>_N)
                       Language.Python.Common.AST.$fDataSlice_a3
                 } in
                 \ (f12 :: forall d. Data.Data.Data d => c (t d)) ->
                 case lvl447 of wild {
                   GHC.Base.Nothing
                   -> GHC.Base.Nothing @ (c (Language.Python.Common.AST.Slice annot1))
                   GHC.Base.Just ds
                   -> case ds of wild1 { Data.Type.Equality.HRefl cobox cobox1 ->
                      GHC.Base.Just
                        @ (c (Language.Python.Common.AST.Slice annot1))
                        (f12 @ annot1 $dData)
                          `cast`
                        (<c>_R (Sym cobox1 <annot1>_N)) } }) -}
94dde4ffceed0a2a13daed020b6576e1
  $fDataSlice_$cgfoldl ::
    Data.Data.Data annot =>
    forall (c :: * -> *).
    (forall d b. Data.Data.Data d => c (d -> b) -> d -> c b)
    -> (forall g. g -> c g)
    -> Language.Python.Common.AST.Slice annot
    -> c (Language.Python.Common.AST.Slice annot)
  {- Arity: 1, Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   @ c :: * -> * ->
                 let {
                   $dData1 :: Data.Data.Data (Language.Python.Common.AST.Expr annot1)
                   = Language.Python.Common.AST.$fDataExpr @ annot1 $dData
                 } in
                 let {
                   $dData2 :: Data.Data.Data
                                (GHC.Base.Maybe (Language.Python.Common.AST.Expr annot1))
                   = Data.Data.$fDataMaybe
                       @ (Language.Python.Common.AST.Expr annot1)
                       $dData1
                 } in
                 let {
                   $dData3 :: Data.Data.Data
                                (GHC.Base.Maybe
                                   (GHC.Base.Maybe (Language.Python.Common.AST.Expr annot1)))
                   = Data.Data.$fDataMaybe
                       @ (GHC.Base.Maybe (Language.Python.Common.AST.Expr annot1))
                       $dData2
                 } in
                 \ (k :: forall d b. Data.Data.Data d => c (d -> b) -> d -> c b)
                   (z :: forall g. g -> c g)
                   (ds :: Language.Python.Common.AST.Slice annot1) ->
                 case ds of wild {
                   Language.Python.Common.AST.SliceProper a1 a2 a3 a4
                   -> k @ annot1
                        @ (Language.Python.Common.AST.Slice annot1)
                        $dData
                        (k @ (GHC.Base.Maybe
                                (GHC.Base.Maybe (Language.Python.Common.AST.Expr annot1)))
                           @ (annot1 -> Language.Python.Common.AST.Slice annot1)
                           $dData3
                           (k @ (GHC.Base.Maybe (Language.Python.Common.AST.Expr annot1))
                              @ (GHC.Base.Maybe
                                   (GHC.Base.Maybe (Language.Python.Common.AST.Expr annot1))
                                 -> annot1 -> Language.Python.Common.AST.Slice annot1)
                              $dData2
                              (k @ (GHC.Base.Maybe (Language.Python.Common.AST.Expr annot1))
                                 @ (GHC.Base.Maybe (Language.Python.Common.AST.Expr annot1)
                                    -> GHC.Base.Maybe
                                         (GHC.Base.Maybe (Language.Python.Common.AST.Expr annot1))
                                    -> annot1
                                    -> Language.Python.Common.AST.Slice annot1)
                                 $dData2
                                 (z @ (GHC.Base.Maybe (Language.Python.Common.AST.Expr annot1)
                                       -> GHC.Base.Maybe (Language.Python.Common.AST.Expr annot1)
                                       -> GHC.Base.Maybe
                                            (GHC.Base.Maybe
                                               (Language.Python.Common.AST.Expr annot1))
                                       -> annot1
                                       -> Language.Python.Common.AST.Slice annot1)
                                    (Language.Python.Common.AST.SliceProper @ annot1))
                                 a1)
                              a2)
                           a3)
                        a4
                   Language.Python.Common.AST.SliceExpr a1 a2
                   -> k @ annot1
                        @ (Language.Python.Common.AST.Slice annot1)
                        $dData
                        (k @ (Language.Python.Common.AST.Expr annot1)
                           @ (annot1 -> Language.Python.Common.AST.Slice annot1)
                           $dData1
                           (z @ (Language.Python.Common.AST.Expr annot1
                                 -> annot1 -> Language.Python.Common.AST.Slice annot1)
                              (Language.Python.Common.AST.SliceExpr @ annot1))
                           a1)
                        a2
                   Language.Python.Common.AST.SliceEllipsis a1
                   -> k @ annot1
                        @ (Language.Python.Common.AST.Slice annot1)
                        $dData
                        (z @ (annot1 -> Language.Python.Common.AST.Slice annot1)
                           (Language.Python.Common.AST.SliceEllipsis @ annot1))
                        a1 }) -}
94dde4ffceed0a2a13daed020b6576e1
  $fDataSlice_$cgmapM ::
    Data.Data.Data annot =>
    forall (m :: * -> *).
    GHC.Base.Monad m =>
    (forall d. Data.Data.Data d => d -> m d)
    -> Language.Python.Common.AST.Slice annot
    -> m (Language.Python.Common.AST.Slice annot)
  {- Arity: 3,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,U(A,C(C1(U)),A,U,A)><L,C(C1(U))>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   @ m :: * -> *
                   ($dMonad :: GHC.Base.Monad m)
                   (ds :: forall d. Data.Data.Data d => d -> m d) ->
                 Language.Python.Common.AST.$fDataSlice_$cgfoldl
                   @ annot1
                   $dData
                   @ m
                   (\ @ d
                      @ b
                      ($dData1 :: Data.Data.Data d)
                      (c :: m (d -> b))
                      (x :: d) ->
                    let {
                      lvl447 :: m d = ds @ d $dData1 x
                    } in
                    GHC.Base.>>=
                      @ m
                      $dMonad
                      @ (d -> b)
                      @ b
                      c
                      (\ (c' :: d -> b) ->
                       GHC.Base.>>=
                         @ m
                         $dMonad
                         @ d
                         @ b
                         lvl447
                         (\ (x' :: d) -> GHC.Base.return @ m $dMonad @ b (c' x'))))
                   (\ @ g -> GHC.Base.return @ m $dMonad @ g)) -}
94dde4ffceed0a2a13daed020b6576e1
  $fDataSlice_$cgmapMo ::
    Data.Data.Data annot =>
    forall (m :: * -> *).
    GHC.Base.MonadPlus m =>
    (forall d. Data.Data.Data d => d -> m d)
    -> Language.Python.Common.AST.Slice annot
    -> m (Language.Python.Common.AST.Slice annot)
  {- Arity: 4,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><S(LS(LC(C(S))LLL)LL),U(A,1*U(A,C(C1(U)),A,C(U),A),1*U,C(C1(U)))><L,C(C1(U))><L,U>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   @ m :: * -> *
                   ($dMonadPlus :: GHC.Base.MonadPlus m)
                   (ds :: forall d. Data.Data.Data d => d -> m d)
                   (eta :: Language.Python.Common.AST.Slice annot1) ->
                 let {
                   $dMonad :: GHC.Base.Monad m = GHC.Base.$p2MonadPlus @ m $dMonadPlus
                 } in
                 let {
                   lvl447 :: m (Language.Python.Common.AST.Slice annot1)
                   = GHC.Base.mzero
                       @ m
                       $dMonadPlus
                       @ (Language.Python.Common.AST.Slice annot1)
                 } in
                 GHC.Base.>>=
                   @ m
                   $dMonad
                   @ (Language.Python.Common.AST.Slice annot1, GHC.Types.Bool)
                   @ (Language.Python.Common.AST.Slice annot1)
                   (Language.Python.Common.AST.$fDataSlice_$cgfoldl
                      @ annot1
                      $dData
                      @ (Data.Data.Mp m)
                      (\ @ d
                         @ b
                         ($dData1 :: Data.Data.Data d)
                         (ds1 :: Data.Data.Mp m (d -> b))
                         (y :: d) ->
                       let {
                         lvl448 :: m d = ds @ d $dData1 y
                       } in
                       GHC.Base.>>=
                         @ m
                         $dMonad
                         @ (d -> b, GHC.Types.Bool)
                         @ (b, GHC.Types.Bool)
                         ds1 `cast` (Data.Data.N:Mp[0] <m>_R <d -> b>_N)
                         (\ (ds2 :: (d -> b, GHC.Types.Bool)) ->
                          case ds2 of wild { (,) h b1 ->
                          case b1 of wild1 {
                            GHC.Types.False
                            -> GHC.Base.mplus
                                 @ m
                                 $dMonadPlus
                                 @ (b, GHC.Types.Bool)
                                 (GHC.Base.>>=
                                    @ m
                                    $dMonad
                                    @ d
                                    @ (b, GHC.Types.Bool)
                                    lvl448
                                    (\ (y' :: d) ->
                                     GHC.Base.return
                                       @ m
                                       $dMonad
                                       @ (b, GHC.Types.Bool)
                                       (h y', GHC.Types.True)))
                                 (GHC.Base.return
                                    @ m
                                    $dMonad
                                    @ (b, GHC.Types.Bool)
                                    (h y, GHC.Types.False))
                            GHC.Types.True
                            -> GHC.Base.return
                                 @ m
                                 $dMonad
                                 @ (b, GHC.Types.Bool)
                                 (h y, GHC.Types.True) } }))
                        `cast`
                      (forall (d :: <*>_N) (b :: <*>_N).
                       <Data.Data.Data d>_R
                       ->_R <Data.Data.Mp m (d -> b)>_R
                       ->_R <d>_R
                       ->_R Sym (Data.Data.N:Mp[0] <m>_R <b>_N))
                      (\ @ g (g1 :: g) ->
                       GHC.Base.return
                         @ m
                         $dMonad
                         @ (g, GHC.Types.Bool)
                         (g1, GHC.Types.False))
                        `cast`
                      (forall (g :: <*>_N).
                       <g>_R ->_R Sym (Data.Data.N:Mp[0] <m>_R <g>_N))
                      eta)
                     `cast`
                   (Data.Data.N:Mp[0]
                        <m>_R <Language.Python.Common.AST.Slice annot1>_N)
                   (\ (ds1 :: (Language.Python.Common.AST.Slice annot1,
                               GHC.Types.Bool)) ->
                    case ds1 of wild { (,) x' b ->
                    case b of wild1 {
                      GHC.Types.False -> lvl447
                      GHC.Types.True
                      -> GHC.Base.return
                           @ m
                           $dMonad
                           @ (Language.Python.Common.AST.Slice annot1)
                           x' } })) -}
94dde4ffceed0a2a13daed020b6576e1
  $fDataSlice_$cgmapMp ::
    Data.Data.Data annot =>
    forall (m :: * -> *).
    GHC.Base.MonadPlus m =>
    (forall d. Data.Data.Data d => d -> m d)
    -> Language.Python.Common.AST.Slice annot
    -> m (Language.Python.Common.AST.Slice annot)
  {- Arity: 4,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><S(LS(LC(C(S))LLL)LL),U(A,1*U(A,C(C1(U)),A,C(U),A),1*U,C(C1(U)))><L,C(C1(U))><L,U>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   @ m :: * -> *
                   ($dMonadPlus :: GHC.Base.MonadPlus m)
                   (ds :: forall d. Data.Data.Data d => d -> m d)
                   (eta :: Language.Python.Common.AST.Slice annot1) ->
                 let {
                   $dMonad :: GHC.Base.Monad m = GHC.Base.$p2MonadPlus @ m $dMonadPlus
                 } in
                 let {
                   lvl447 :: m (Language.Python.Common.AST.Slice annot1)
                   = GHC.Base.mzero
                       @ m
                       $dMonadPlus
                       @ (Language.Python.Common.AST.Slice annot1)
                 } in
                 GHC.Base.>>=
                   @ m
                   $dMonad
                   @ (Language.Python.Common.AST.Slice annot1, GHC.Types.Bool)
                   @ (Language.Python.Common.AST.Slice annot1)
                   (Language.Python.Common.AST.$fDataSlice_$cgfoldl
                      @ annot1
                      $dData
                      @ (Data.Data.Mp m)
                      (\ @ d
                         @ b
                         ($dData1 :: Data.Data.Data d)
                         (ds1 :: Data.Data.Mp m (d -> b))
                         (y :: d) ->
                       let {
                         lvl448 :: m d = ds @ d $dData1 y
                       } in
                       GHC.Base.>>=
                         @ m
                         $dMonad
                         @ (d -> b, GHC.Types.Bool)
                         @ (b, GHC.Types.Bool)
                         ds1 `cast` (Data.Data.N:Mp[0] <m>_R <d -> b>_N)
                         (\ (ds2 :: (d -> b, GHC.Types.Bool)) ->
                          case ds2 of wild { (,) h b1 ->
                          GHC.Base.mplus
                            @ m
                            $dMonadPlus
                            @ (b, GHC.Types.Bool)
                            (GHC.Base.>>=
                               @ m
                               $dMonad
                               @ d
                               @ (b, GHC.Types.Bool)
                               lvl448
                               (\ (y' :: d) ->
                                GHC.Base.return
                                  @ m
                                  $dMonad
                                  @ (b, GHC.Types.Bool)
                                  (h y', GHC.Types.True)))
                            (GHC.Base.return @ m $dMonad @ (b, GHC.Types.Bool) (h y, b1)) }))
                        `cast`
                      (forall (d :: <*>_N) (b :: <*>_N).
                       <Data.Data.Data d>_R
                       ->_R <Data.Data.Mp m (d -> b)>_R
                       ->_R <d>_R
                       ->_R Sym (Data.Data.N:Mp[0] <m>_R <b>_N))
                      (\ @ g (g1 :: g) ->
                       GHC.Base.return
                         @ m
                         $dMonad
                         @ (g, GHC.Types.Bool)
                         (g1, GHC.Types.False))
                        `cast`
                      (forall (g :: <*>_N).
                       <g>_R ->_R Sym (Data.Data.N:Mp[0] <m>_R <g>_N))
                      eta)
                     `cast`
                   (Data.Data.N:Mp[0]
                        <m>_R <Language.Python.Common.AST.Slice annot1>_N)
                   (\ (ds1 :: (Language.Python.Common.AST.Slice annot1,
                               GHC.Types.Bool)) ->
                    case ds1 of wild { (,) x' b ->
                    case b of wild1 {
                      GHC.Types.False -> lvl447
                      GHC.Types.True
                      -> GHC.Base.return
                           @ m
                           $dMonad
                           @ (Language.Python.Common.AST.Slice annot1)
                           x' } })) -}
94dde4ffceed0a2a13daed020b6576e1
  $fDataSlice_$cgmapQ ::
    Data.Data.Data annot =>
    forall u.
    (forall d. Data.Data.Data d => d -> u)
    -> Language.Python.Common.AST.Slice annot -> [u]
  {- Arity: 3,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,C(C1(U))><L,U>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   @ u
                   (ds :: forall d. Data.Data.Data d => d -> u)
                   (x0 :: Language.Python.Common.AST.Slice annot1) ->
                 (Language.Python.Common.AST.$fDataSlice_$cgfoldl
                    @ annot1
                    $dData
                    @ (Data.Data.Qr [u])
                    (\ @ d
                       @ b
                       ($dData1 :: Data.Data.Data d)
                       (ds1 :: Data.Data.Qr [u] (d -> b))
                       (x :: d)
                       (r1 :: [u]) ->
                     ds1 `cast` (Data.Data.N:Qr[0] <*>_N <[u]>_R <d -> b>_P)
                       (GHC.Types.: @ u (ds @ d $dData1 x) r1))
                      `cast`
                    (forall (d :: <*>_N) (b :: <*>_N).
                     <Data.Data.Data d>_R
                     ->_R <Data.Data.Qr [u] (d -> b)>_R
                     ->_R <d>_R
                     ->_R Sym (Data.Data.N:Qr[0] <*>_N <[u]>_R <b>_P))
                    (Language.Python.Common.AST.$fDataExpr4 @ u)
                      `cast`
                    (forall (g :: <*>_N).
                     <g>_R ->_R Sym (Data.Data.N:Qr[0] <*>_N <[u]>_R <g>_P))
                    x0)
                   `cast`
                 (Data.Data.N:Qr[0]
                      <*>_N <[u]>_R <Language.Python.Common.AST.Slice annot1>_P)
                   (GHC.Types.[] @ u)) -}
94dde4ffceed0a2a13daed020b6576e1
  $fDataSlice_$cgmapQi ::
    Data.Data.Data annot =>
    forall u.
    GHC.Types.Int
    -> (forall d. Data.Data.Data d => d -> u)
    -> Language.Python.Common.AST.Slice annot
    -> u
  {- Arity: 4,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,U(U)><L,C(C1(U))><L,U>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   @ u
                   (ds :: GHC.Types.Int)
                   (ds1 :: forall d. Data.Data.Data d => d -> u)
                   (x :: Language.Python.Common.AST.Slice annot1) ->
                 case Language.Python.Common.AST.$fDataSlice_$cgfoldl
                        @ annot1
                        $dData
                        @ (Data.Data.Qi u)
                        (\ @ d
                           @ b
                           ($dData1 :: Data.Data.Data d)
                           (ds2 :: Data.Data.Qi u (d -> b))
                           (a2 :: d) ->
                         case ds2 of wild { Data.Data.Qi i' q ->
                         Data.Data.Qi
                           @ *
                           @ u
                           @ b
                           (case i' of wild1 { GHC.Types.I# x1 ->
                            GHC.Types.I# (GHC.Prim.+# x1 1#) })
                           (case ds of wild1 { GHC.Types.I# x1 ->
                            case i' of wild2 { GHC.Types.I# y ->
                            case GHC.Prim.tagToEnum#
                                   @ GHC.Types.Bool
                                   (GHC.Prim.==# x1 y) of wild3 {
                              GHC.Types.False -> q
                              GHC.Types.True -> GHC.Base.Just @ u (ds1 @ d $dData1 a2) } } }) })
                        (Language.Python.Common.AST.$fDataExpr1 @ u)
                        x of wild { Data.Data.Qi ds2 q ->
                 Data.Maybe.fromJust @ u q }) -}
94dde4ffceed0a2a13daed020b6576e1
  $fDataSlice_$cgmapQl ::
    Data.Data.Data annot =>
    forall r r'.
    (r -> r' -> r)
    -> r
    -> (forall d. Data.Data.Data d => d -> r')
    -> Language.Python.Common.AST.Slice annot
    -> r
  {- Arity: 4,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,C(C1(U))><L,U><L,C(C1(U))>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   @ r
                   @ r'
                   (ds :: r -> r' -> r)
                   (ds1 :: r)
                   (ds2 :: forall d. Data.Data.Data d => d -> r') ->
                 let {
                   g :: Language.Python.Common.AST.Slice annot1
                        -> Data.Functor.Const.Const
                             r (Language.Python.Common.AST.Slice annot1)
                   = Language.Python.Common.AST.$fDataSlice_$cgfoldl
                       @ annot1
                       $dData
                       @ (Data.Functor.Const.Const r)
                       (\ @ d
                          @ b
                          ($dData1 :: Data.Data.Data d)
                          (c :: Data.Functor.Const.Const r (d -> b))
                          (x :: d) ->
                        ds
                          c `cast` (Data.Functor.Const.N:Const[0] <*>_N <r>_R <d -> b>_P)
                          (ds2 @ d $dData1 x))
                         `cast`
                       (forall (d :: <*>_N) (b :: <*>_N).
                        <Data.Data.Data d>_R
                        ->_R <Data.Functor.Const.Const r (d -> b)>_R
                        ->_R <d>_R
                        ->_R Sym (Data.Functor.Const.N:Const[0] <*>_N <r>_R <b>_P))
                       (\ @ g1 (ds3 :: g1) -> ds1)
                         `cast`
                       (forall (g1 :: <*>_N).
                        <g1>_R ->_R Sym (Data.Functor.Const.N:Const[0] <*>_N <r>_R <g1>_P))
                 } in
                 (\ (x :: Language.Python.Common.AST.Slice annot1) -> g x)
                   `cast`
                 (<Language.Python.Common.AST.Slice annot1>_R
                  ->_R Data.Functor.Const.N:Const[0]
                           <*>_N <r>_R <Language.Python.Common.AST.Slice annot1>_P)) -}
94dde4ffceed0a2a13daed020b6576e1
  $fDataSlice_$cgmapQr ::
    Data.Data.Data annot =>
    forall r r'.
    (r' -> r -> r)
    -> r
    -> (forall d. Data.Data.Data d => d -> r')
    -> Language.Python.Common.AST.Slice annot
    -> r
  {- Arity: 5,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,C(C1(U))><L,U><L,C(C1(U))><L,U>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   @ r
                   @ r'
                   (ds :: r' -> r -> r)
                   (ds1 :: r)
                   (ds2 :: forall d. Data.Data.Data d => d -> r')
                   (x0 :: Language.Python.Common.AST.Slice annot1) ->
                 (Language.Python.Common.AST.$fDataSlice_$cgfoldl
                    @ annot1
                    $dData
                    @ (Data.Data.Qr r)
                    (\ @ d
                       @ b
                       ($dData1 :: Data.Data.Data d)
                       (ds3 :: Data.Data.Qr r (d -> b))
                       (x :: d)
                       (r1 :: r) ->
                     ds3 `cast` (Data.Data.N:Qr[0] <*>_N <r>_R <d -> b>_P)
                       (ds (ds2 @ d $dData1 x) r1))
                      `cast`
                    (forall (d :: <*>_N) (b :: <*>_N).
                     <Data.Data.Data d>_R
                     ->_R <Data.Data.Qr r (d -> b)>_R
                     ->_R <d>_R
                     ->_R Sym (Data.Data.N:Qr[0] <*>_N <r>_R <b>_P))
                    (Language.Python.Common.AST.$fDataExpr5 @ r)
                      `cast`
                    (forall (g :: <*>_N).
                     <g>_R ->_R Sym (Data.Data.N:Qr[0] <*>_N <r>_R <g>_P))
                    x0)
                   `cast`
                 (Data.Data.N:Qr[0]
                      <*>_N <r>_R <Language.Python.Common.AST.Slice annot1>_P)
                   ds1) -}
94dde4ffceed0a2a13daed020b6576e1
  $fDataSlice_$cgunfold ::
    Data.Data.Data annot =>
    forall (c :: * -> *).
    (forall b r. Data.Data.Data b => c (b -> r) -> c r)
    -> (forall r. r -> c r)
    -> Data.Data.Constr
    -> c (Language.Python.Common.AST.Slice annot)
  {- Arity: 1, Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   @ c :: * -> * ->
                 let {
                   $dData1 :: Data.Data.Data (Language.Python.Common.AST.Expr annot1)
                   = Language.Python.Common.AST.$fDataExpr @ annot1 $dData
                 } in
                 let {
                   $dData2 :: Data.Data.Data
                                (GHC.Base.Maybe (Language.Python.Common.AST.Expr annot1))
                   = Data.Data.$fDataMaybe
                       @ (Language.Python.Common.AST.Expr annot1)
                       $dData1
                 } in
                 let {
                   $dData3 :: Data.Data.Data
                                (GHC.Base.Maybe
                                   (GHC.Base.Maybe (Language.Python.Common.AST.Expr annot1)))
                   = Data.Data.$fDataMaybe
                       @ (GHC.Base.Maybe (Language.Python.Common.AST.Expr annot1))
                       $dData2
                 } in
                 \ (k :: forall b r. Data.Data.Data b => c (b -> r) -> c r)
                   (z :: forall r. r -> c r)
                   (c1 :: Data.Data.Constr) ->
                 case c1 of wild { Data.Data.Constr ds ds1 ds2 ds3 ds4 ->
                 case ds of wild1 {
                   DEFAULT
                   -> case ds4 of ww6 { Data.Data.DataType ww7 ww8 ->
                      case Data.Data.$wlvl ww7
                      ret_ty (c (Language.Python.Common.AST.Slice annot1))
                      of {} }
                   Data.Data.AlgConstr idx
                   -> case idx of wild2 { GHC.Types.I# ds7 ->
                      case ds7 of ds8 {
                        DEFAULT
                        -> k @ annot1
                             @ (Language.Python.Common.AST.Slice annot1)
                             $dData
                             (z @ (annot1 -> Language.Python.Common.AST.Slice annot1)
                                (Language.Python.Common.AST.SliceEllipsis @ annot1))
                        1#
                        -> k @ annot1
                             @ (Language.Python.Common.AST.Slice annot1)
                             $dData
                             (k @ (GHC.Base.Maybe
                                     (GHC.Base.Maybe (Language.Python.Common.AST.Expr annot1)))
                                @ (annot1 -> Language.Python.Common.AST.Slice annot1)
                                $dData3
                                (k @ (GHC.Base.Maybe (Language.Python.Common.AST.Expr annot1))
                                   @ (GHC.Base.Maybe
                                        (GHC.Base.Maybe (Language.Python.Common.AST.Expr annot1))
                                      -> annot1 -> Language.Python.Common.AST.Slice annot1)
                                   $dData2
                                   (k @ (GHC.Base.Maybe (Language.Python.Common.AST.Expr annot1))
                                      @ (GHC.Base.Maybe (Language.Python.Common.AST.Expr annot1)
                                         -> GHC.Base.Maybe
                                              (GHC.Base.Maybe
                                                 (Language.Python.Common.AST.Expr annot1))
                                         -> annot1
                                         -> Language.Python.Common.AST.Slice annot1)
                                      $dData2
                                      (z @ (GHC.Base.Maybe (Language.Python.Common.AST.Expr annot1)
                                            -> GHC.Base.Maybe
                                                 (Language.Python.Common.AST.Expr annot1)
                                            -> GHC.Base.Maybe
                                                 (GHC.Base.Maybe
                                                    (Language.Python.Common.AST.Expr annot1))
                                            -> annot1
                                            -> Language.Python.Common.AST.Slice annot1)
                                         (Language.Python.Common.AST.SliceProper @ annot1)))))
                        2#
                        -> k @ annot1
                             @ (Language.Python.Common.AST.Slice annot1)
                             $dData
                             (k @ (Language.Python.Common.AST.Expr annot1)
                                @ (annot1 -> Language.Python.Common.AST.Slice annot1)
                                $dData1
                                (z @ (Language.Python.Common.AST.Expr annot1
                                      -> annot1 -> Language.Python.Common.AST.Slice annot1)
                                   (Language.Python.Common.AST.SliceExpr @ annot1))) } } } }) -}
94dde4ffceed0a2a13daed020b6576e1
  $fDataSlice_$cp1Data ::
    Data.Data.Data annot =>
    Data.Typeable.Internal.Typeable
      (Language.Python.Common.AST.Slice annot)
  {- Arity: 1, Strictness: <L,1*U(1*U,A,A,A,A,A,A,A,A,A,A,A,A,A,A)>,
     Unfolding: (\ @ annot1 ($dData :: Data.Data.Data annot1) ->
                 let {
                   b1 :: Data.Typeable.Internal.Typeable annot1
                   = Data.Data.$p1Data @ annot1 $dData
                 } in
                 case GHC.Magic.noinline
                        @ ([GHC.Fingerprint.Type.Fingerprint]
                           -> GHC.Fingerprint.Type.Fingerprint)
                        GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           Language.Python.Common.AST.$fDataSlice4
                           (GHC.Types.:
                              @ GHC.Fingerprint.Type.Fingerprint
                              (Data.Typeable.Internal.typeRepFingerprint
                                 @ *
                                 @ annot1
                                 b1 `cast` (Data.Typeable.Internal.N:Typeable[0] <*>_N <annot1>_N))
                              (GHC.Types.[]
                                 @ GHC.Fingerprint.Type.Fingerprint))) of dt { GHC.Fingerprint.Type.Fingerprint dt1 dt2 ->
                 (Data.Typeable.Internal.TrApp
                    @ *
                    @ (Language.Python.Common.AST.Slice annot1)
                    @ *
                    @ Language.Python.Common.AST.Slice
                    @ annot1
                    @~ <Language.Python.Common.AST.Slice annot1>_N
                    dt1
                    dt2
                    Language.Python.Common.AST.$fDataSlice_a3
                    b1 `cast` (Data.Typeable.Internal.N:Typeable[0] <*>_N <annot1>_N))
                   `cast`
                 (Sym (Data.Typeable.Internal.N:Typeable[0]) <*>_N <Language.Python.Common.AST.Slice
                                                                      annot1>_N) }) -}
94dde4ffceed0a2a13daed020b6576e1
  $fDataSlice_a3 ::
    Data.Typeable.Internal.TypeRep Language.Python.Common.AST.Slice
  {- Unfolding: (case GHC.Magic.noinline
                        @ ([GHC.Fingerprint.Type.Fingerprint]
                           -> GHC.Fingerprint.Type.Fingerprint)
                        GHC.Fingerprint.fingerprintFingerprints
                        Language.Python.Common.AST.$fDataSlice2 of dt { GHC.Fingerprint.Type.Fingerprint dt1 dt2 ->
                 Data.Typeable.Internal.TrTyCon
                   @ (* -> *)
                   @ Language.Python.Common.AST.Slice
                   dt1
                   dt2
                   Language.Python.Common.AST.$tcSlice
                   (GHC.Types.[] @ Data.Typeable.Internal.SomeTypeRep) }) -}
cf431e64d114ff48b3a5eb8fda819c32
  $fDataStatement ::
    Data.Data.Data annot =>
    Data.Data.Data (Language.Python.Common.AST.Statement annot)
  DFunId
  {- Arity: 1, Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)>,
     Inline: CONLIKE,
     Unfolding: DFun: @ annot1 (v :: Data.Data.Data annot1).
                  @ (Language.Python.Common.AST.Statement annot1)
                  (Language.Python.Common.AST.$fDataStatement_$cp1Data @ annot1 v)
                  (Language.Python.Common.AST.$fDataStatement_$cgfoldl @ annot1 v)
                  (Language.Python.Common.AST.$fDataStatement_$cgunfold @ annot1 v)
                  (Language.Python.Common.AST.$fDataStatement_$ctoConstr @ annot1 v)
                  (\ (ds :: Language.Python.Common.AST.Statement annot1) ->
                   Language.Python.Common.AST.$tStatement)
                  (Language.Python.Common.AST.$fDataStatement_$cdataCast1 @ annot1 v)
                  (\ @ t :: * -> * -> *
                     @ c :: * -> *
                     ($dTypeable :: Data.Typeable.Internal.Typeable t)
                     (ds :: forall d e.
                            (Data.Data.Data d, Data.Data.Data e) =>
                            c (t d e)) ->
                   GHC.Base.Nothing
                     @ (c (Language.Python.Common.AST.Statement annot1)))
                  (Language.Python.Common.AST.$fDataStatement1 @ annot1 v)
                    `cast`
                  (<forall b. Data.Data.Data b => b -> b>_R
                   ->_R <Language.Python.Common.AST.Statement annot1>_R
                   ->_R Data.Functor.Identity.N:Identity[0]
                            <Language.Python.Common.AST.Statement annot1>_R)
                  (Language.Python.Common.AST.$fDataStatement_$cgmapQl @ annot1 v)
                  (Language.Python.Common.AST.$fDataStatement_$cgmapQr @ annot1 v)
                  (Language.Python.Common.AST.$fDataStatement_$cgmapQ @ annot1 v)
                  (Language.Python.Common.AST.$fDataStatement_$cgmapQi @ annot1 v)
                  (Language.Python.Common.AST.$fDataStatement_$cgmapM @ annot1 v)
                  (Language.Python.Common.AST.$fDataStatement_$cgmapMp @ annot1 v)
                  (Language.Python.Common.AST.$fDataStatement_$cgmapMo @ annot1 v) -}
cf431e64d114ff48b3a5eb8fda819c32
  $fDataStatement1 ::
    Data.Data.Data annot =>
    (forall b. Data.Data.Data b => b -> b)
    -> Language.Python.Common.AST.Statement annot
    -> Data.Functor.Identity.Identity
         (Language.Python.Common.AST.Statement annot)
  {- Arity: 3,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,C(C1(U))><L,U>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   (ds :: forall b. Data.Data.Data b => b -> b)
                   (x0 :: Language.Python.Common.AST.Statement annot1) ->
                 Language.Python.Common.AST.$fDataStatement_$cgfoldl
                   @ annot1
                   $dData
                   @ Data.Functor.Identity.Identity
                   (\ @ d
                      @ b
                      ($dData1 :: Data.Data.Data d)
                      (ds1 :: Data.Functor.Identity.Identity (d -> b))
                      (x :: d) ->
                    ds1 `cast` (Data.Functor.Identity.N:Identity[0] <d -> b>_R)
                      (ds @ d $dData1 x))
                     `cast`
                   (forall (d :: <*>_N) (b :: <*>_N).
                    <Data.Data.Data d>_R
                    ->_R <Data.Functor.Identity.Identity (d -> b)>_R
                    ->_R <d>_R
                    ->_R Sym (Data.Functor.Identity.N:Identity[0] <b>_R))
                   Language.Python.Common.AST.$fDataExpr7
                     `cast`
                   (forall (g :: <*>_N).
                    <g>_R ->_R Sym (Data.Functor.Identity.N:Identity[0] <g>_R))
                   x0) -}
4bf106c1d26c43a4e2e515d6b51c1f08
  $fDataStatement2 :: [GHC.Fingerprint.Type.Fingerprint]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Fingerprint.Type.Fingerprint
                   Language.Python.Common.AST.$fDataStatement3
                   Language.Python.Common.AST.$fDataExpr9) -}
ae5eaf05b2491f170c04d47a08e15bb8
  $fDataStatement3 :: GHC.Fingerprint.Type.Fingerprint
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Fingerprint.Type.Fingerprint
                   9577790383485871097##
                   10693021544823291074##) -}
cf431e64d114ff48b3a5eb8fda819c32
  $fDataStatement4 :: GHC.Fingerprint.Type.Fingerprint
  {- Unfolding: (case Language.Python.Common.AST.$fDataStatement_a3 of wild { Data.Typeable.Internal.TrTyCon dt dt1 ds1 ds2 ->
                 GHC.Fingerprint.Type.Fingerprint dt dt1 }) -}
cf431e64d114ff48b3a5eb8fda819c32
  $fDataStatement_$cdataCast1 ::
    Data.Data.Data annot =>
    forall (t :: * -> *) (c :: * -> *).
    Data.Typeable.Internal.Typeable t =>
    (forall d. Data.Data.Data d => c (t d))
    -> GHC.Base.Maybe (c (Language.Python.Common.AST.Statement annot))
  {- Arity: 2, Strictness: <L,U><L,1*U>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   @ t :: * -> *
                   @ c :: * -> *
                   ($dTypeable :: Data.Typeable.Internal.Typeable t) ->
                 let {
                   lvl447 :: GHC.Base.Maybe
                               (t Data.Type.Equality.:~~: Language.Python.Common.AST.Statement)
                   = Data.Typeable.Internal.eqTypeRep
                       @ (* -> *)
                       @ (* -> *)
                       @ t
                       @ Language.Python.Common.AST.Statement
                       $dTypeable
                         `cast`
                       (Data.Typeable.Internal.N:Typeable[0] <* -> *>_N <t>_N)
                       Language.Python.Common.AST.$fDataStatement_a3
                 } in
                 \ (f12 :: forall d. Data.Data.Data d => c (t d)) ->
                 case lvl447 of wild {
                   GHC.Base.Nothing
                   -> GHC.Base.Nothing
                        @ (c (Language.Python.Common.AST.Statement annot1))
                   GHC.Base.Just ds
                   -> case ds of wild1 { Data.Type.Equality.HRefl cobox cobox1 ->
                      GHC.Base.Just
                        @ (c (Language.Python.Common.AST.Statement annot1))
                        (f12 @ annot1 $dData)
                          `cast`
                        (<c>_R (Sym cobox1 <annot1>_N)) } }) -}
cf431e64d114ff48b3a5eb8fda819c32
  $fDataStatement_$cgfoldl ::
    Data.Data.Data annot =>
    forall (c :: * -> *).
    (forall d b. Data.Data.Data d => c (d -> b) -> d -> c b)
    -> (forall g. g -> c g)
    -> Language.Python.Common.AST.Statement annot
    -> c (Language.Python.Common.AST.Statement annot)
  {- Arity: 1, Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)> -}
cf431e64d114ff48b3a5eb8fda819c32
  $fDataStatement_$cgmapM ::
    Data.Data.Data annot =>
    forall (m :: * -> *).
    GHC.Base.Monad m =>
    (forall d. Data.Data.Data d => d -> m d)
    -> Language.Python.Common.AST.Statement annot
    -> m (Language.Python.Common.AST.Statement annot)
  {- Arity: 3,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,U(A,C(C1(U)),A,U,A)><L,C(C1(U))>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   @ m :: * -> *
                   ($dMonad :: GHC.Base.Monad m)
                   (ds :: forall d. Data.Data.Data d => d -> m d) ->
                 Language.Python.Common.AST.$fDataStatement_$cgfoldl
                   @ annot1
                   $dData
                   @ m
                   (\ @ d
                      @ b
                      ($dData1 :: Data.Data.Data d)
                      (c :: m (d -> b))
                      (x :: d) ->
                    let {
                      lvl447 :: m d = ds @ d $dData1 x
                    } in
                    GHC.Base.>>=
                      @ m
                      $dMonad
                      @ (d -> b)
                      @ b
                      c
                      (\ (c' :: d -> b) ->
                       GHC.Base.>>=
                         @ m
                         $dMonad
                         @ d
                         @ b
                         lvl447
                         (\ (x' :: d) -> GHC.Base.return @ m $dMonad @ b (c' x'))))
                   (\ @ g -> GHC.Base.return @ m $dMonad @ g)) -}
cf431e64d114ff48b3a5eb8fda819c32
  $fDataStatement_$cgmapMo ::
    Data.Data.Data annot =>
    forall (m :: * -> *).
    GHC.Base.MonadPlus m =>
    (forall d. Data.Data.Data d => d -> m d)
    -> Language.Python.Common.AST.Statement annot
    -> m (Language.Python.Common.AST.Statement annot)
  {- Arity: 4,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><S(LS(LC(C(S))LLL)LL),U(A,1*U(A,C(C1(U)),A,C(U),A),1*U,C(C1(U)))><L,C(C1(U))><L,U>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   @ m :: * -> *
                   ($dMonadPlus :: GHC.Base.MonadPlus m)
                   (ds :: forall d. Data.Data.Data d => d -> m d)
                   (eta :: Language.Python.Common.AST.Statement annot1) ->
                 let {
                   $dMonad :: GHC.Base.Monad m = GHC.Base.$p2MonadPlus @ m $dMonadPlus
                 } in
                 let {
                   lvl447 :: m (Language.Python.Common.AST.Statement annot1)
                   = GHC.Base.mzero
                       @ m
                       $dMonadPlus
                       @ (Language.Python.Common.AST.Statement annot1)
                 } in
                 GHC.Base.>>=
                   @ m
                   $dMonad
                   @ (Language.Python.Common.AST.Statement annot1, GHC.Types.Bool)
                   @ (Language.Python.Common.AST.Statement annot1)
                   (Language.Python.Common.AST.$fDataStatement_$cgfoldl
                      @ annot1
                      $dData
                      @ (Data.Data.Mp m)
                      (\ @ d
                         @ b
                         ($dData1 :: Data.Data.Data d)
                         (ds1 :: Data.Data.Mp m (d -> b))
                         (y :: d) ->
                       let {
                         lvl448 :: m d = ds @ d $dData1 y
                       } in
                       GHC.Base.>>=
                         @ m
                         $dMonad
                         @ (d -> b, GHC.Types.Bool)
                         @ (b, GHC.Types.Bool)
                         ds1 `cast` (Data.Data.N:Mp[0] <m>_R <d -> b>_N)
                         (\ (ds2 :: (d -> b, GHC.Types.Bool)) ->
                          case ds2 of wild { (,) h b1 ->
                          case b1 of wild1 {
                            GHC.Types.False
                            -> GHC.Base.mplus
                                 @ m
                                 $dMonadPlus
                                 @ (b, GHC.Types.Bool)
                                 (GHC.Base.>>=
                                    @ m
                                    $dMonad
                                    @ d
                                    @ (b, GHC.Types.Bool)
                                    lvl448
                                    (\ (y' :: d) ->
                                     GHC.Base.return
                                       @ m
                                       $dMonad
                                       @ (b, GHC.Types.Bool)
                                       (h y', GHC.Types.True)))
                                 (GHC.Base.return
                                    @ m
                                    $dMonad
                                    @ (b, GHC.Types.Bool)
                                    (h y, GHC.Types.False))
                            GHC.Types.True
                            -> GHC.Base.return
                                 @ m
                                 $dMonad
                                 @ (b, GHC.Types.Bool)
                                 (h y, GHC.Types.True) } }))
                        `cast`
                      (forall (d :: <*>_N) (b :: <*>_N).
                       <Data.Data.Data d>_R
                       ->_R <Data.Data.Mp m (d -> b)>_R
                       ->_R <d>_R
                       ->_R Sym (Data.Data.N:Mp[0] <m>_R <b>_N))
                      (\ @ g (g1 :: g) ->
                       GHC.Base.return
                         @ m
                         $dMonad
                         @ (g, GHC.Types.Bool)
                         (g1, GHC.Types.False))
                        `cast`
                      (forall (g :: <*>_N).
                       <g>_R ->_R Sym (Data.Data.N:Mp[0] <m>_R <g>_N))
                      eta)
                     `cast`
                   (Data.Data.N:Mp[0]
                        <m>_R <Language.Python.Common.AST.Statement annot1>_N)
                   (\ (ds1 :: (Language.Python.Common.AST.Statement annot1,
                               GHC.Types.Bool)) ->
                    case ds1 of wild { (,) x' b ->
                    case b of wild1 {
                      GHC.Types.False -> lvl447
                      GHC.Types.True
                      -> GHC.Base.return
                           @ m
                           $dMonad
                           @ (Language.Python.Common.AST.Statement annot1)
                           x' } })) -}
cf431e64d114ff48b3a5eb8fda819c32
  $fDataStatement_$cgmapMp ::
    Data.Data.Data annot =>
    forall (m :: * -> *).
    GHC.Base.MonadPlus m =>
    (forall d. Data.Data.Data d => d -> m d)
    -> Language.Python.Common.AST.Statement annot
    -> m (Language.Python.Common.AST.Statement annot)
  {- Arity: 4,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><S(LS(LC(C(S))LLL)LL),U(A,1*U(A,C(C1(U)),A,C(U),A),1*U,C(C1(U)))><L,C(C1(U))><L,U>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   @ m :: * -> *
                   ($dMonadPlus :: GHC.Base.MonadPlus m)
                   (ds :: forall d. Data.Data.Data d => d -> m d)
                   (eta :: Language.Python.Common.AST.Statement annot1) ->
                 let {
                   $dMonad :: GHC.Base.Monad m = GHC.Base.$p2MonadPlus @ m $dMonadPlus
                 } in
                 let {
                   lvl447 :: m (Language.Python.Common.AST.Statement annot1)
                   = GHC.Base.mzero
                       @ m
                       $dMonadPlus
                       @ (Language.Python.Common.AST.Statement annot1)
                 } in
                 GHC.Base.>>=
                   @ m
                   $dMonad
                   @ (Language.Python.Common.AST.Statement annot1, GHC.Types.Bool)
                   @ (Language.Python.Common.AST.Statement annot1)
                   (Language.Python.Common.AST.$fDataStatement_$cgfoldl
                      @ annot1
                      $dData
                      @ (Data.Data.Mp m)
                      (\ @ d
                         @ b
                         ($dData1 :: Data.Data.Data d)
                         (ds1 :: Data.Data.Mp m (d -> b))
                         (y :: d) ->
                       let {
                         lvl448 :: m d = ds @ d $dData1 y
                       } in
                       GHC.Base.>>=
                         @ m
                         $dMonad
                         @ (d -> b, GHC.Types.Bool)
                         @ (b, GHC.Types.Bool)
                         ds1 `cast` (Data.Data.N:Mp[0] <m>_R <d -> b>_N)
                         (\ (ds2 :: (d -> b, GHC.Types.Bool)) ->
                          case ds2 of wild { (,) h b1 ->
                          GHC.Base.mplus
                            @ m
                            $dMonadPlus
                            @ (b, GHC.Types.Bool)
                            (GHC.Base.>>=
                               @ m
                               $dMonad
                               @ d
                               @ (b, GHC.Types.Bool)
                               lvl448
                               (\ (y' :: d) ->
                                GHC.Base.return
                                  @ m
                                  $dMonad
                                  @ (b, GHC.Types.Bool)
                                  (h y', GHC.Types.True)))
                            (GHC.Base.return @ m $dMonad @ (b, GHC.Types.Bool) (h y, b1)) }))
                        `cast`
                      (forall (d :: <*>_N) (b :: <*>_N).
                       <Data.Data.Data d>_R
                       ->_R <Data.Data.Mp m (d -> b)>_R
                       ->_R <d>_R
                       ->_R Sym (Data.Data.N:Mp[0] <m>_R <b>_N))
                      (\ @ g (g1 :: g) ->
                       GHC.Base.return
                         @ m
                         $dMonad
                         @ (g, GHC.Types.Bool)
                         (g1, GHC.Types.False))
                        `cast`
                      (forall (g :: <*>_N).
                       <g>_R ->_R Sym (Data.Data.N:Mp[0] <m>_R <g>_N))
                      eta)
                     `cast`
                   (Data.Data.N:Mp[0]
                        <m>_R <Language.Python.Common.AST.Statement annot1>_N)
                   (\ (ds1 :: (Language.Python.Common.AST.Statement annot1,
                               GHC.Types.Bool)) ->
                    case ds1 of wild { (,) x' b ->
                    case b of wild1 {
                      GHC.Types.False -> lvl447
                      GHC.Types.True
                      -> GHC.Base.return
                           @ m
                           $dMonad
                           @ (Language.Python.Common.AST.Statement annot1)
                           x' } })) -}
cf431e64d114ff48b3a5eb8fda819c32
  $fDataStatement_$cgmapQ ::
    Data.Data.Data annot =>
    forall u.
    (forall d. Data.Data.Data d => d -> u)
    -> Language.Python.Common.AST.Statement annot -> [u]
  {- Arity: 3,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,C(C1(U))><L,U>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   @ u
                   (ds :: forall d. Data.Data.Data d => d -> u)
                   (x0 :: Language.Python.Common.AST.Statement annot1) ->
                 (Language.Python.Common.AST.$fDataStatement_$cgfoldl
                    @ annot1
                    $dData
                    @ (Data.Data.Qr [u])
                    (\ @ d
                       @ b
                       ($dData1 :: Data.Data.Data d)
                       (ds1 :: Data.Data.Qr [u] (d -> b))
                       (x :: d)
                       (r1 :: [u]) ->
                     ds1 `cast` (Data.Data.N:Qr[0] <*>_N <[u]>_R <d -> b>_P)
                       (GHC.Types.: @ u (ds @ d $dData1 x) r1))
                      `cast`
                    (forall (d :: <*>_N) (b :: <*>_N).
                     <Data.Data.Data d>_R
                     ->_R <Data.Data.Qr [u] (d -> b)>_R
                     ->_R <d>_R
                     ->_R Sym (Data.Data.N:Qr[0] <*>_N <[u]>_R <b>_P))
                    (Language.Python.Common.AST.$fDataExpr4 @ u)
                      `cast`
                    (forall (g :: <*>_N).
                     <g>_R ->_R Sym (Data.Data.N:Qr[0] <*>_N <[u]>_R <g>_P))
                    x0)
                   `cast`
                 (Data.Data.N:Qr[0]
                      <*>_N <[u]>_R <Language.Python.Common.AST.Statement annot1>_P)
                   (GHC.Types.[] @ u)) -}
cf431e64d114ff48b3a5eb8fda819c32
  $fDataStatement_$cgmapQi ::
    Data.Data.Data annot =>
    forall u.
    GHC.Types.Int
    -> (forall d. Data.Data.Data d => d -> u)
    -> Language.Python.Common.AST.Statement annot
    -> u
  {- Arity: 4,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,U(U)><L,C(C1(U))><L,U>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   @ u
                   (ds :: GHC.Types.Int)
                   (ds1 :: forall d. Data.Data.Data d => d -> u)
                   (x :: Language.Python.Common.AST.Statement annot1) ->
                 case Language.Python.Common.AST.$fDataStatement_$cgfoldl
                        @ annot1
                        $dData
                        @ (Data.Data.Qi u)
                        (\ @ d
                           @ b
                           ($dData1 :: Data.Data.Data d)
                           (ds2 :: Data.Data.Qi u (d -> b))
                           (a2 :: d) ->
                         case ds2 of wild { Data.Data.Qi i' q ->
                         Data.Data.Qi
                           @ *
                           @ u
                           @ b
                           (case i' of wild1 { GHC.Types.I# x1 ->
                            GHC.Types.I# (GHC.Prim.+# x1 1#) })
                           (case ds of wild1 { GHC.Types.I# x1 ->
                            case i' of wild2 { GHC.Types.I# y ->
                            case GHC.Prim.tagToEnum#
                                   @ GHC.Types.Bool
                                   (GHC.Prim.==# x1 y) of wild3 {
                              GHC.Types.False -> q
                              GHC.Types.True -> GHC.Base.Just @ u (ds1 @ d $dData1 a2) } } }) })
                        (Language.Python.Common.AST.$fDataExpr1 @ u)
                        x of wild { Data.Data.Qi ds2 q ->
                 Data.Maybe.fromJust @ u q }) -}
cf431e64d114ff48b3a5eb8fda819c32
  $fDataStatement_$cgmapQl ::
    Data.Data.Data annot =>
    forall r r'.
    (r -> r' -> r)
    -> r
    -> (forall d. Data.Data.Data d => d -> r')
    -> Language.Python.Common.AST.Statement annot
    -> r
  {- Arity: 4,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,C(C1(U))><L,U><L,C(C1(U))>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   @ r
                   @ r'
                   (ds :: r -> r' -> r)
                   (ds1 :: r)
                   (ds2 :: forall d. Data.Data.Data d => d -> r') ->
                 let {
                   g :: Language.Python.Common.AST.Statement annot1
                        -> Data.Functor.Const.Const
                             r (Language.Python.Common.AST.Statement annot1)
                   = Language.Python.Common.AST.$fDataStatement_$cgfoldl
                       @ annot1
                       $dData
                       @ (Data.Functor.Const.Const r)
                       (\ @ d
                          @ b
                          ($dData1 :: Data.Data.Data d)
                          (c :: Data.Functor.Const.Const r (d -> b))
                          (x :: d) ->
                        ds
                          c `cast` (Data.Functor.Const.N:Const[0] <*>_N <r>_R <d -> b>_P)
                          (ds2 @ d $dData1 x))
                         `cast`
                       (forall (d :: <*>_N) (b :: <*>_N).
                        <Data.Data.Data d>_R
                        ->_R <Data.Functor.Const.Const r (d -> b)>_R
                        ->_R <d>_R
                        ->_R Sym (Data.Functor.Const.N:Const[0] <*>_N <r>_R <b>_P))
                       (\ @ g1 (ds3 :: g1) -> ds1)
                         `cast`
                       (forall (g1 :: <*>_N).
                        <g1>_R ->_R Sym (Data.Functor.Const.N:Const[0] <*>_N <r>_R <g1>_P))
                 } in
                 (\ (x :: Language.Python.Common.AST.Statement annot1) -> g x)
                   `cast`
                 (<Language.Python.Common.AST.Statement annot1>_R
                  ->_R Data.Functor.Const.N:Const[0]
                           <*>_N <r>_R <Language.Python.Common.AST.Statement annot1>_P)) -}
cf431e64d114ff48b3a5eb8fda819c32
  $fDataStatement_$cgmapQr ::
    Data.Data.Data annot =>
    forall r r'.
    (r' -> r -> r)
    -> r
    -> (forall d. Data.Data.Data d => d -> r')
    -> Language.Python.Common.AST.Statement annot
    -> r
  {- Arity: 5,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,C(C1(U))><L,U><L,C(C1(U))><L,U>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   @ r
                   @ r'
                   (ds :: r' -> r -> r)
                   (ds1 :: r)
                   (ds2 :: forall d. Data.Data.Data d => d -> r')
                   (x0 :: Language.Python.Common.AST.Statement annot1) ->
                 (Language.Python.Common.AST.$fDataStatement_$cgfoldl
                    @ annot1
                    $dData
                    @ (Data.Data.Qr r)
                    (\ @ d
                       @ b
                       ($dData1 :: Data.Data.Data d)
                       (ds3 :: Data.Data.Qr r (d -> b))
                       (x :: d)
                       (r1 :: r) ->
                     ds3 `cast` (Data.Data.N:Qr[0] <*>_N <r>_R <d -> b>_P)
                       (ds (ds2 @ d $dData1 x) r1))
                      `cast`
                    (forall (d :: <*>_N) (b :: <*>_N).
                     <Data.Data.Data d>_R
                     ->_R <Data.Data.Qr r (d -> b)>_R
                     ->_R <d>_R
                     ->_R Sym (Data.Data.N:Qr[0] <*>_N <r>_R <b>_P))
                    (Language.Python.Common.AST.$fDataExpr5 @ r)
                      `cast`
                    (forall (g :: <*>_N).
                     <g>_R ->_R Sym (Data.Data.N:Qr[0] <*>_N <r>_R <g>_P))
                    x0)
                   `cast`
                 (Data.Data.N:Qr[0]
                      <*>_N <r>_R <Language.Python.Common.AST.Statement annot1>_P)
                   ds1) -}
cf431e64d114ff48b3a5eb8fda819c32
  $fDataStatement_$cgunfold ::
    Data.Data.Data annot =>
    forall (c :: * -> *).
    (forall b r. Data.Data.Data b => c (b -> r) -> c r)
    -> (forall r. r -> c r)
    -> Data.Data.Constr
    -> c (Language.Python.Common.AST.Statement annot)
  {- Arity: 1, Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)> -}
cf431e64d114ff48b3a5eb8fda819c32
  $fDataStatement_$cp1Data ::
    Data.Data.Data annot =>
    Data.Typeable.Internal.Typeable
      (Language.Python.Common.AST.Statement annot)
  {- Arity: 1, Strictness: <L,1*U(1*U,A,A,A,A,A,A,A,A,A,A,A,A,A,A)>,
     Unfolding: (\ @ annot1 ($dData :: Data.Data.Data annot1) ->
                 let {
                   b1 :: Data.Typeable.Internal.Typeable annot1
                   = Data.Data.$p1Data @ annot1 $dData
                 } in
                 case GHC.Magic.noinline
                        @ ([GHC.Fingerprint.Type.Fingerprint]
                           -> GHC.Fingerprint.Type.Fingerprint)
                        GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           Language.Python.Common.AST.$fDataStatement4
                           (GHC.Types.:
                              @ GHC.Fingerprint.Type.Fingerprint
                              (Data.Typeable.Internal.typeRepFingerprint
                                 @ *
                                 @ annot1
                                 b1 `cast` (Data.Typeable.Internal.N:Typeable[0] <*>_N <annot1>_N))
                              (GHC.Types.[]
                                 @ GHC.Fingerprint.Type.Fingerprint))) of dt { GHC.Fingerprint.Type.Fingerprint dt1 dt2 ->
                 (Data.Typeable.Internal.TrApp
                    @ *
                    @ (Language.Python.Common.AST.Statement annot1)
                    @ *
                    @ Language.Python.Common.AST.Statement
                    @ annot1
                    @~ <Language.Python.Common.AST.Statement annot1>_N
                    dt1
                    dt2
                    Language.Python.Common.AST.$fDataStatement_a3
                    b1 `cast` (Data.Typeable.Internal.N:Typeable[0] <*>_N <annot1>_N))
                   `cast`
                 (Sym (Data.Typeable.Internal.N:Typeable[0]) <*>_N <Language.Python.Common.AST.Statement
                                                                      annot1>_N) }) -}
cf431e64d114ff48b3a5eb8fda819c32
  $fDataStatement_$ctoConstr ::
    Data.Data.Data annot =>
    Language.Python.Common.AST.Statement annot -> Data.Data.Constr
  {- Arity: 2, Strictness: <L,A><S,1*U>m, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ @ annot1
                   (w :: Data.Data.Data annot1)
                   (w249 :: Language.Python.Common.AST.Statement annot1) ->
                 case w249 of wild {
                   Language.Python.Common.AST.Import ds ds1
                   -> Language.Python.Common.AST.$cImport
                   Language.Python.Common.AST.FromImport ds ds1 ds2
                   -> Language.Python.Common.AST.$cFromImport
                   Language.Python.Common.AST.While ds ds1 ds2 ds3
                   -> Language.Python.Common.AST.$cWhile
                   Language.Python.Common.AST.For ds ds1 ds2 ds3 ds4
                   -> Language.Python.Common.AST.$cFor
                   Language.Python.Common.AST.AsyncFor ds ds1
                   -> Language.Python.Common.AST.$cAsyncFor
                   Language.Python.Common.AST.Fun ds ds1 ds2 ds3 ds4
                   -> Language.Python.Common.AST.$cFun
                   Language.Python.Common.AST.AsyncFun ds ds1
                   -> Language.Python.Common.AST.$cAsyncFun
                   Language.Python.Common.AST.Class ds ds1 ds2 ds3
                   -> Language.Python.Common.AST.$cClass
                   Language.Python.Common.AST.Conditional ds ds1 ds2
                   -> Language.Python.Common.AST.$cConditional
                   Language.Python.Common.AST.Assign ds ds1 ds2
                   -> Language.Python.Common.AST.$cAssign
                   Language.Python.Common.AST.AugmentedAssign ds ds1 ds2 ds3
                   -> Language.Python.Common.AST.$cAugmentedAssign
                   Language.Python.Common.AST.AnnotatedAssign ds ds1 ds2 ds3
                   -> Language.Python.Common.AST.$cAnnotatedAssign
                   Language.Python.Common.AST.Decorated ds ds1 ds2
                   -> Language.Python.Common.AST.$cDecorated
                   Language.Python.Common.AST.Return ds ds1
                   -> Language.Python.Common.AST.$cReturn
                   Language.Python.Common.AST.Try ds ds1 ds2 ds3 ds4
                   -> Language.Python.Common.AST.$cTry
                   Language.Python.Common.AST.Raise ds ds1
                   -> Language.Python.Common.AST.$cRaise
                   Language.Python.Common.AST.With ds ds1 ds2
                   -> Language.Python.Common.AST.$cWith
                   Language.Python.Common.AST.AsyncWith ds ds1
                   -> Language.Python.Common.AST.$cAsyncWith
                   Language.Python.Common.AST.Pass ds
                   -> Language.Python.Common.AST.$cPass
                   Language.Python.Common.AST.Break ds
                   -> Language.Python.Common.AST.$cBreak
                   Language.Python.Common.AST.Continue ds
                   -> Language.Python.Common.AST.$cContinue
                   Language.Python.Common.AST.Delete ds ds1
                   -> Language.Python.Common.AST.$cDelete
                   Language.Python.Common.AST.StmtExpr ds ds1
                   -> Language.Python.Common.AST.$cStmtExpr
                   Language.Python.Common.AST.Global ds ds1
                   -> Language.Python.Common.AST.$cGlobal
                   Language.Python.Common.AST.NonLocal ds ds1
                   -> Language.Python.Common.AST.$cNonLocal
                   Language.Python.Common.AST.Assert ds ds1
                   -> Language.Python.Common.AST.$cAssert
                   Language.Python.Common.AST.Print ds ds1 ds2 ds3
                   -> Language.Python.Common.AST.$cPrint
                   Language.Python.Common.AST.Exec ds ds1 ds2
                   -> Language.Python.Common.AST.$cExec }) -}
cf431e64d114ff48b3a5eb8fda819c32
  $fDataStatement_a3 ::
    Data.Typeable.Internal.TypeRep Language.Python.Common.AST.Statement
  {- Unfolding: (case GHC.Magic.noinline
                        @ ([GHC.Fingerprint.Type.Fingerprint]
                           -> GHC.Fingerprint.Type.Fingerprint)
                        GHC.Fingerprint.fingerprintFingerprints
                        Language.Python.Common.AST.$fDataStatement2 of dt { GHC.Fingerprint.Type.Fingerprint dt1 dt2 ->
                 Data.Typeable.Internal.TrTyCon
                   @ (* -> *)
                   @ Language.Python.Common.AST.Statement
                   dt1
                   dt2
                   Language.Python.Common.AST.$tcStatement
                   (GHC.Types.[] @ Data.Typeable.Internal.SomeTypeRep) }) -}
94dde4ffceed0a2a13daed020b6576e1
  $fDataYieldArg ::
    Data.Data.Data annot =>
    Data.Data.Data (Language.Python.Common.AST.YieldArg annot)
  DFunId
  {- Arity: 1, Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)>,
     Inline: CONLIKE,
     Unfolding: DFun: @ annot1 (v :: Data.Data.Data annot1).
                  @ (Language.Python.Common.AST.YieldArg annot1)
                  (Language.Python.Common.AST.$fDataYieldArg_$cp1Data @ annot1 v)
                  (Language.Python.Common.AST.$fDataYieldArg_$cgfoldl @ annot1 v)
                  (Language.Python.Common.AST.$fDataYieldArg_$cgunfold @ annot1 v)
                  (\ (ds :: Language.Python.Common.AST.YieldArg annot1) ->
                   case ds of wild {
                     Language.Python.Common.AST.YieldFrom ds1 ds2
                     -> Language.Python.Common.AST.$cYieldFrom
                     Language.Python.Common.AST.YieldExpr ds1
                     -> Language.Python.Common.AST.$cYieldExpr })
                  (\ (ds :: Language.Python.Common.AST.YieldArg annot1) ->
                   Language.Python.Common.AST.$tYieldArg)
                  (Language.Python.Common.AST.$fDataYieldArg_$cdataCast1 @ annot1 v)
                  (\ @ t :: * -> * -> *
                     @ c :: * -> *
                     ($dTypeable :: Data.Typeable.Internal.Typeable t)
                     (ds :: forall d e.
                            (Data.Data.Data d, Data.Data.Data e) =>
                            c (t d e)) ->
                   GHC.Base.Nothing
                     @ (c (Language.Python.Common.AST.YieldArg annot1)))
                  (Language.Python.Common.AST.$fDataYieldArg1 @ annot1 v)
                    `cast`
                  (<forall b. Data.Data.Data b => b -> b>_R
                   ->_R <Language.Python.Common.AST.YieldArg annot1>_R
                   ->_R Data.Functor.Identity.N:Identity[0]
                            <Language.Python.Common.AST.YieldArg annot1>_R)
                  (Language.Python.Common.AST.$fDataYieldArg_$cgmapQl @ annot1 v)
                  (Language.Python.Common.AST.$fDataYieldArg_$cgmapQr @ annot1 v)
                  (Language.Python.Common.AST.$fDataYieldArg_$cgmapQ @ annot1 v)
                  (Language.Python.Common.AST.$fDataYieldArg_$cgmapQi @ annot1 v)
                  (Language.Python.Common.AST.$fDataYieldArg_$cgmapM @ annot1 v)
                  (Language.Python.Common.AST.$fDataYieldArg_$cgmapMp @ annot1 v)
                  (Language.Python.Common.AST.$fDataYieldArg_$cgmapMo @ annot1 v) -}
94dde4ffceed0a2a13daed020b6576e1
  $fDataYieldArg1 ::
    Data.Data.Data annot =>
    (forall b. Data.Data.Data b => b -> b)
    -> Language.Python.Common.AST.YieldArg annot
    -> Data.Functor.Identity.Identity
         (Language.Python.Common.AST.YieldArg annot)
  {- Arity: 3,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,C(C1(U))><L,U>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   (ds :: forall b. Data.Data.Data b => b -> b)
                   (x0 :: Language.Python.Common.AST.YieldArg annot1) ->
                 Language.Python.Common.AST.$fDataYieldArg_$cgfoldl
                   @ annot1
                   $dData
                   @ Data.Functor.Identity.Identity
                   (\ @ d
                      @ b
                      ($dData1 :: Data.Data.Data d)
                      (ds1 :: Data.Functor.Identity.Identity (d -> b))
                      (x :: d) ->
                    ds1 `cast` (Data.Functor.Identity.N:Identity[0] <d -> b>_R)
                      (ds @ d $dData1 x))
                     `cast`
                   (forall (d :: <*>_N) (b :: <*>_N).
                    <Data.Data.Data d>_R
                    ->_R <Data.Functor.Identity.Identity (d -> b)>_R
                    ->_R <d>_R
                    ->_R Sym (Data.Functor.Identity.N:Identity[0] <b>_R))
                   Language.Python.Common.AST.$fDataExpr7
                     `cast`
                   (forall (g :: <*>_N).
                    <g>_R ->_R Sym (Data.Functor.Identity.N:Identity[0] <g>_R))
                   x0) -}
439ea754130a7ce70c7d6798c40ba06f
  $fDataYieldArg2 :: [GHC.Fingerprint.Type.Fingerprint]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Fingerprint.Type.Fingerprint
                   Language.Python.Common.AST.$fDataYieldArg3
                   Language.Python.Common.AST.$fDataExpr9) -}
57c5b3bf3d83918c18c964751965f6da
  $fDataYieldArg3 :: GHC.Fingerprint.Type.Fingerprint
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Fingerprint.Type.Fingerprint
                   14231717463824147329##
                   2523457981428365377##) -}
94dde4ffceed0a2a13daed020b6576e1
  $fDataYieldArg4 :: GHC.Fingerprint.Type.Fingerprint
  {- Unfolding: (case Language.Python.Common.AST.$fDataYieldArg_a3 of wild { Data.Typeable.Internal.TrTyCon dt dt1 ds1 ds2 ->
                 GHC.Fingerprint.Type.Fingerprint dt dt1 }) -}
94dde4ffceed0a2a13daed020b6576e1
  $fDataYieldArg_$cdataCast1 ::
    Data.Data.Data annot =>
    forall (t :: * -> *) (c :: * -> *).
    Data.Typeable.Internal.Typeable t =>
    (forall d. Data.Data.Data d => c (t d))
    -> GHC.Base.Maybe (c (Language.Python.Common.AST.YieldArg annot))
  {- Arity: 2, Strictness: <L,U><L,1*U>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   @ t :: * -> *
                   @ c :: * -> *
                   ($dTypeable :: Data.Typeable.Internal.Typeable t) ->
                 let {
                   lvl447 :: GHC.Base.Maybe
                               (t Data.Type.Equality.:~~: Language.Python.Common.AST.YieldArg)
                   = Data.Typeable.Internal.eqTypeRep
                       @ (* -> *)
                       @ (* -> *)
                       @ t
                       @ Language.Python.Common.AST.YieldArg
                       $dTypeable
                         `cast`
                       (Data.Typeable.Internal.N:Typeable[0] <* -> *>_N <t>_N)
                       Language.Python.Common.AST.$fDataYieldArg_a3
                 } in
                 \ (f12 :: forall d. Data.Data.Data d => c (t d)) ->
                 case lvl447 of wild {
                   GHC.Base.Nothing
                   -> GHC.Base.Nothing
                        @ (c (Language.Python.Common.AST.YieldArg annot1))
                   GHC.Base.Just ds
                   -> case ds of wild1 { Data.Type.Equality.HRefl cobox cobox1 ->
                      GHC.Base.Just
                        @ (c (Language.Python.Common.AST.YieldArg annot1))
                        (f12 @ annot1 $dData)
                          `cast`
                        (<c>_R (Sym cobox1 <annot1>_N)) } }) -}
94dde4ffceed0a2a13daed020b6576e1
  $fDataYieldArg_$cgfoldl ::
    Data.Data.Data annot =>
    forall (c :: * -> *).
    (forall d b. Data.Data.Data d => c (d -> b) -> d -> c b)
    -> (forall g. g -> c g)
    -> Language.Python.Common.AST.YieldArg annot
    -> c (Language.Python.Common.AST.YieldArg annot)
  {- Arity: 1, Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   @ c :: * -> * ->
                 let {
                   $dData1 :: Data.Data.Data (Language.Python.Common.AST.Expr annot1)
                   = Language.Python.Common.AST.$fDataExpr @ annot1 $dData
                 } in
                 \ (k :: forall d b. Data.Data.Data d => c (d -> b) -> d -> c b)
                   (z :: forall g. g -> c g)
                   (ds :: Language.Python.Common.AST.YieldArg annot1) ->
                 case ds of wild {
                   Language.Python.Common.AST.YieldFrom a1 a2
                   -> k @ annot1
                        @ (Language.Python.Common.AST.YieldArg annot1)
                        $dData
                        (k @ (Language.Python.Common.AST.Expr annot1)
                           @ (annot1 -> Language.Python.Common.AST.YieldArg annot1)
                           $dData1
                           (z @ (Language.Python.Common.AST.Expr annot1
                                 -> annot1 -> Language.Python.Common.AST.YieldArg annot1)
                              (Language.Python.Common.AST.YieldFrom @ annot1))
                           a1)
                        a2
                   Language.Python.Common.AST.YieldExpr a1
                   -> k @ (Language.Python.Common.AST.Expr annot1)
                        @ (Language.Python.Common.AST.YieldArg annot1)
                        $dData1
                        (z @ (Language.Python.Common.AST.Expr annot1
                              -> Language.Python.Common.AST.YieldArg annot1)
                           (Language.Python.Common.AST.YieldExpr @ annot1))
                        a1 }) -}
94dde4ffceed0a2a13daed020b6576e1
  $fDataYieldArg_$cgmapM ::
    Data.Data.Data annot =>
    forall (m :: * -> *).
    GHC.Base.Monad m =>
    (forall d. Data.Data.Data d => d -> m d)
    -> Language.Python.Common.AST.YieldArg annot
    -> m (Language.Python.Common.AST.YieldArg annot)
  {- Arity: 3,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,U(A,C(C1(U)),A,U,A)><L,C(C1(U))>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   @ m :: * -> *
                   ($dMonad :: GHC.Base.Monad m)
                   (ds :: forall d. Data.Data.Data d => d -> m d) ->
                 Language.Python.Common.AST.$fDataYieldArg_$cgfoldl
                   @ annot1
                   $dData
                   @ m
                   (\ @ d
                      @ b
                      ($dData1 :: Data.Data.Data d)
                      (c :: m (d -> b))
                      (x :: d) ->
                    let {
                      lvl447 :: m d = ds @ d $dData1 x
                    } in
                    GHC.Base.>>=
                      @ m
                      $dMonad
                      @ (d -> b)
                      @ b
                      c
                      (\ (c' :: d -> b) ->
                       GHC.Base.>>=
                         @ m
                         $dMonad
                         @ d
                         @ b
                         lvl447
                         (\ (x' :: d) -> GHC.Base.return @ m $dMonad @ b (c' x'))))
                   (\ @ g -> GHC.Base.return @ m $dMonad @ g)) -}
94dde4ffceed0a2a13daed020b6576e1
  $fDataYieldArg_$cgmapMo ::
    Data.Data.Data annot =>
    forall (m :: * -> *).
    GHC.Base.MonadPlus m =>
    (forall d. Data.Data.Data d => d -> m d)
    -> Language.Python.Common.AST.YieldArg annot
    -> m (Language.Python.Common.AST.YieldArg annot)
  {- Arity: 4,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><S(LS(LC(C(S))LLL)LL),U(A,1*U(A,C(C1(U)),A,C(U),A),1*U,C(C1(U)))><L,C(C1(U))><L,U>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   @ m :: * -> *
                   ($dMonadPlus :: GHC.Base.MonadPlus m)
                   (ds :: forall d. Data.Data.Data d => d -> m d)
                   (eta :: Language.Python.Common.AST.YieldArg annot1) ->
                 let {
                   $dMonad :: GHC.Base.Monad m = GHC.Base.$p2MonadPlus @ m $dMonadPlus
                 } in
                 let {
                   lvl447 :: m (Language.Python.Common.AST.YieldArg annot1)
                   = GHC.Base.mzero
                       @ m
                       $dMonadPlus
                       @ (Language.Python.Common.AST.YieldArg annot1)
                 } in
                 GHC.Base.>>=
                   @ m
                   $dMonad
                   @ (Language.Python.Common.AST.YieldArg annot1, GHC.Types.Bool)
                   @ (Language.Python.Common.AST.YieldArg annot1)
                   (Language.Python.Common.AST.$fDataYieldArg_$cgfoldl
                      @ annot1
                      $dData
                      @ (Data.Data.Mp m)
                      (\ @ d
                         @ b
                         ($dData1 :: Data.Data.Data d)
                         (ds1 :: Data.Data.Mp m (d -> b))
                         (y :: d) ->
                       let {
                         lvl448 :: m d = ds @ d $dData1 y
                       } in
                       GHC.Base.>>=
                         @ m
                         $dMonad
                         @ (d -> b, GHC.Types.Bool)
                         @ (b, GHC.Types.Bool)
                         ds1 `cast` (Data.Data.N:Mp[0] <m>_R <d -> b>_N)
                         (\ (ds2 :: (d -> b, GHC.Types.Bool)) ->
                          case ds2 of wild { (,) h b1 ->
                          case b1 of wild1 {
                            GHC.Types.False
                            -> GHC.Base.mplus
                                 @ m
                                 $dMonadPlus
                                 @ (b, GHC.Types.Bool)
                                 (GHC.Base.>>=
                                    @ m
                                    $dMonad
                                    @ d
                                    @ (b, GHC.Types.Bool)
                                    lvl448
                                    (\ (y' :: d) ->
                                     GHC.Base.return
                                       @ m
                                       $dMonad
                                       @ (b, GHC.Types.Bool)
                                       (h y', GHC.Types.True)))
                                 (GHC.Base.return
                                    @ m
                                    $dMonad
                                    @ (b, GHC.Types.Bool)
                                    (h y, GHC.Types.False))
                            GHC.Types.True
                            -> GHC.Base.return
                                 @ m
                                 $dMonad
                                 @ (b, GHC.Types.Bool)
                                 (h y, GHC.Types.True) } }))
                        `cast`
                      (forall (d :: <*>_N) (b :: <*>_N).
                       <Data.Data.Data d>_R
                       ->_R <Data.Data.Mp m (d -> b)>_R
                       ->_R <d>_R
                       ->_R Sym (Data.Data.N:Mp[0] <m>_R <b>_N))
                      (\ @ g (g1 :: g) ->
                       GHC.Base.return
                         @ m
                         $dMonad
                         @ (g, GHC.Types.Bool)
                         (g1, GHC.Types.False))
                        `cast`
                      (forall (g :: <*>_N).
                       <g>_R ->_R Sym (Data.Data.N:Mp[0] <m>_R <g>_N))
                      eta)
                     `cast`
                   (Data.Data.N:Mp[0]
                        <m>_R <Language.Python.Common.AST.YieldArg annot1>_N)
                   (\ (ds1 :: (Language.Python.Common.AST.YieldArg annot1,
                               GHC.Types.Bool)) ->
                    case ds1 of wild { (,) x' b ->
                    case b of wild1 {
                      GHC.Types.False -> lvl447
                      GHC.Types.True
                      -> GHC.Base.return
                           @ m
                           $dMonad
                           @ (Language.Python.Common.AST.YieldArg annot1)
                           x' } })) -}
94dde4ffceed0a2a13daed020b6576e1
  $fDataYieldArg_$cgmapMp ::
    Data.Data.Data annot =>
    forall (m :: * -> *).
    GHC.Base.MonadPlus m =>
    (forall d. Data.Data.Data d => d -> m d)
    -> Language.Python.Common.AST.YieldArg annot
    -> m (Language.Python.Common.AST.YieldArg annot)
  {- Arity: 4,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><S(LS(LC(C(S))LLL)LL),U(A,1*U(A,C(C1(U)),A,C(U),A),1*U,C(C1(U)))><L,C(C1(U))><L,U>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   @ m :: * -> *
                   ($dMonadPlus :: GHC.Base.MonadPlus m)
                   (ds :: forall d. Data.Data.Data d => d -> m d)
                   (eta :: Language.Python.Common.AST.YieldArg annot1) ->
                 let {
                   $dMonad :: GHC.Base.Monad m = GHC.Base.$p2MonadPlus @ m $dMonadPlus
                 } in
                 let {
                   lvl447 :: m (Language.Python.Common.AST.YieldArg annot1)
                   = GHC.Base.mzero
                       @ m
                       $dMonadPlus
                       @ (Language.Python.Common.AST.YieldArg annot1)
                 } in
                 GHC.Base.>>=
                   @ m
                   $dMonad
                   @ (Language.Python.Common.AST.YieldArg annot1, GHC.Types.Bool)
                   @ (Language.Python.Common.AST.YieldArg annot1)
                   (Language.Python.Common.AST.$fDataYieldArg_$cgfoldl
                      @ annot1
                      $dData
                      @ (Data.Data.Mp m)
                      (\ @ d
                         @ b
                         ($dData1 :: Data.Data.Data d)
                         (ds1 :: Data.Data.Mp m (d -> b))
                         (y :: d) ->
                       let {
                         lvl448 :: m d = ds @ d $dData1 y
                       } in
                       GHC.Base.>>=
                         @ m
                         $dMonad
                         @ (d -> b, GHC.Types.Bool)
                         @ (b, GHC.Types.Bool)
                         ds1 `cast` (Data.Data.N:Mp[0] <m>_R <d -> b>_N)
                         (\ (ds2 :: (d -> b, GHC.Types.Bool)) ->
                          case ds2 of wild { (,) h b1 ->
                          GHC.Base.mplus
                            @ m
                            $dMonadPlus
                            @ (b, GHC.Types.Bool)
                            (GHC.Base.>>=
                               @ m
                               $dMonad
                               @ d
                               @ (b, GHC.Types.Bool)
                               lvl448
                               (\ (y' :: d) ->
                                GHC.Base.return
                                  @ m
                                  $dMonad
                                  @ (b, GHC.Types.Bool)
                                  (h y', GHC.Types.True)))
                            (GHC.Base.return @ m $dMonad @ (b, GHC.Types.Bool) (h y, b1)) }))
                        `cast`
                      (forall (d :: <*>_N) (b :: <*>_N).
                       <Data.Data.Data d>_R
                       ->_R <Data.Data.Mp m (d -> b)>_R
                       ->_R <d>_R
                       ->_R Sym (Data.Data.N:Mp[0] <m>_R <b>_N))
                      (\ @ g (g1 :: g) ->
                       GHC.Base.return
                         @ m
                         $dMonad
                         @ (g, GHC.Types.Bool)
                         (g1, GHC.Types.False))
                        `cast`
                      (forall (g :: <*>_N).
                       <g>_R ->_R Sym (Data.Data.N:Mp[0] <m>_R <g>_N))
                      eta)
                     `cast`
                   (Data.Data.N:Mp[0]
                        <m>_R <Language.Python.Common.AST.YieldArg annot1>_N)
                   (\ (ds1 :: (Language.Python.Common.AST.YieldArg annot1,
                               GHC.Types.Bool)) ->
                    case ds1 of wild { (,) x' b ->
                    case b of wild1 {
                      GHC.Types.False -> lvl447
                      GHC.Types.True
                      -> GHC.Base.return
                           @ m
                           $dMonad
                           @ (Language.Python.Common.AST.YieldArg annot1)
                           x' } })) -}
94dde4ffceed0a2a13daed020b6576e1
  $fDataYieldArg_$cgmapQ ::
    Data.Data.Data annot =>
    forall u.
    (forall d. Data.Data.Data d => d -> u)
    -> Language.Python.Common.AST.YieldArg annot -> [u]
  {- Arity: 3,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,C(C1(U))><L,U>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   @ u
                   (ds :: forall d. Data.Data.Data d => d -> u)
                   (x0 :: Language.Python.Common.AST.YieldArg annot1) ->
                 (Language.Python.Common.AST.$fDataYieldArg_$cgfoldl
                    @ annot1
                    $dData
                    @ (Data.Data.Qr [u])
                    (\ @ d
                       @ b
                       ($dData1 :: Data.Data.Data d)
                       (ds1 :: Data.Data.Qr [u] (d -> b))
                       (x :: d)
                       (r1 :: [u]) ->
                     ds1 `cast` (Data.Data.N:Qr[0] <*>_N <[u]>_R <d -> b>_P)
                       (GHC.Types.: @ u (ds @ d $dData1 x) r1))
                      `cast`
                    (forall (d :: <*>_N) (b :: <*>_N).
                     <Data.Data.Data d>_R
                     ->_R <Data.Data.Qr [u] (d -> b)>_R
                     ->_R <d>_R
                     ->_R Sym (Data.Data.N:Qr[0] <*>_N <[u]>_R <b>_P))
                    (Language.Python.Common.AST.$fDataExpr4 @ u)
                      `cast`
                    (forall (g :: <*>_N).
                     <g>_R ->_R Sym (Data.Data.N:Qr[0] <*>_N <[u]>_R <g>_P))
                    x0)
                   `cast`
                 (Data.Data.N:Qr[0]
                      <*>_N <[u]>_R <Language.Python.Common.AST.YieldArg annot1>_P)
                   (GHC.Types.[] @ u)) -}
94dde4ffceed0a2a13daed020b6576e1
  $fDataYieldArg_$cgmapQi ::
    Data.Data.Data annot =>
    forall u.
    GHC.Types.Int
    -> (forall d. Data.Data.Data d => d -> u)
    -> Language.Python.Common.AST.YieldArg annot
    -> u
  {- Arity: 4,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,U(U)><L,C(C1(U))><L,U>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   @ u
                   (ds :: GHC.Types.Int)
                   (ds1 :: forall d. Data.Data.Data d => d -> u)
                   (x :: Language.Python.Common.AST.YieldArg annot1) ->
                 case Language.Python.Common.AST.$fDataYieldArg_$cgfoldl
                        @ annot1
                        $dData
                        @ (Data.Data.Qi u)
                        (\ @ d
                           @ b
                           ($dData1 :: Data.Data.Data d)
                           (ds2 :: Data.Data.Qi u (d -> b))
                           (a2 :: d) ->
                         case ds2 of wild { Data.Data.Qi i' q ->
                         Data.Data.Qi
                           @ *
                           @ u
                           @ b
                           (case i' of wild1 { GHC.Types.I# x1 ->
                            GHC.Types.I# (GHC.Prim.+# x1 1#) })
                           (case ds of wild1 { GHC.Types.I# x1 ->
                            case i' of wild2 { GHC.Types.I# y ->
                            case GHC.Prim.tagToEnum#
                                   @ GHC.Types.Bool
                                   (GHC.Prim.==# x1 y) of wild3 {
                              GHC.Types.False -> q
                              GHC.Types.True -> GHC.Base.Just @ u (ds1 @ d $dData1 a2) } } }) })
                        (Language.Python.Common.AST.$fDataExpr1 @ u)
                        x of wild { Data.Data.Qi ds2 q ->
                 Data.Maybe.fromJust @ u q }) -}
94dde4ffceed0a2a13daed020b6576e1
  $fDataYieldArg_$cgmapQl ::
    Data.Data.Data annot =>
    forall r r'.
    (r -> r' -> r)
    -> r
    -> (forall d. Data.Data.Data d => d -> r')
    -> Language.Python.Common.AST.YieldArg annot
    -> r
  {- Arity: 4,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,C(C1(U))><L,U><L,C(C1(U))>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   @ r
                   @ r'
                   (ds :: r -> r' -> r)
                   (ds1 :: r)
                   (ds2 :: forall d. Data.Data.Data d => d -> r') ->
                 let {
                   g :: Language.Python.Common.AST.YieldArg annot1
                        -> Data.Functor.Const.Const
                             r (Language.Python.Common.AST.YieldArg annot1)
                   = Language.Python.Common.AST.$fDataYieldArg_$cgfoldl
                       @ annot1
                       $dData
                       @ (Data.Functor.Const.Const r)
                       (\ @ d
                          @ b
                          ($dData1 :: Data.Data.Data d)
                          (c :: Data.Functor.Const.Const r (d -> b))
                          (x :: d) ->
                        ds
                          c `cast` (Data.Functor.Const.N:Const[0] <*>_N <r>_R <d -> b>_P)
                          (ds2 @ d $dData1 x))
                         `cast`
                       (forall (d :: <*>_N) (b :: <*>_N).
                        <Data.Data.Data d>_R
                        ->_R <Data.Functor.Const.Const r (d -> b)>_R
                        ->_R <d>_R
                        ->_R Sym (Data.Functor.Const.N:Const[0] <*>_N <r>_R <b>_P))
                       (\ @ g1 (ds3 :: g1) -> ds1)
                         `cast`
                       (forall (g1 :: <*>_N).
                        <g1>_R ->_R Sym (Data.Functor.Const.N:Const[0] <*>_N <r>_R <g1>_P))
                 } in
                 (\ (x :: Language.Python.Common.AST.YieldArg annot1) -> g x)
                   `cast`
                 (<Language.Python.Common.AST.YieldArg annot1>_R
                  ->_R Data.Functor.Const.N:Const[0]
                           <*>_N <r>_R <Language.Python.Common.AST.YieldArg annot1>_P)) -}
94dde4ffceed0a2a13daed020b6576e1
  $fDataYieldArg_$cgmapQr ::
    Data.Data.Data annot =>
    forall r r'.
    (r' -> r -> r)
    -> r
    -> (forall d. Data.Data.Data d => d -> r')
    -> Language.Python.Common.AST.YieldArg annot
    -> r
  {- Arity: 5,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,C(C1(U))><L,U><L,C(C1(U))><L,U>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   @ r
                   @ r'
                   (ds :: r' -> r -> r)
                   (ds1 :: r)
                   (ds2 :: forall d. Data.Data.Data d => d -> r')
                   (x0 :: Language.Python.Common.AST.YieldArg annot1) ->
                 (Language.Python.Common.AST.$fDataYieldArg_$cgfoldl
                    @ annot1
                    $dData
                    @ (Data.Data.Qr r)
                    (\ @ d
                       @ b
                       ($dData1 :: Data.Data.Data d)
                       (ds3 :: Data.Data.Qr r (d -> b))
                       (x :: d)
                       (r1 :: r) ->
                     ds3 `cast` (Data.Data.N:Qr[0] <*>_N <r>_R <d -> b>_P)
                       (ds (ds2 @ d $dData1 x) r1))
                      `cast`
                    (forall (d :: <*>_N) (b :: <*>_N).
                     <Data.Data.Data d>_R
                     ->_R <Data.Data.Qr r (d -> b)>_R
                     ->_R <d>_R
                     ->_R Sym (Data.Data.N:Qr[0] <*>_N <r>_R <b>_P))
                    (Language.Python.Common.AST.$fDataExpr5 @ r)
                      `cast`
                    (forall (g :: <*>_N).
                     <g>_R ->_R Sym (Data.Data.N:Qr[0] <*>_N <r>_R <g>_P))
                    x0)
                   `cast`
                 (Data.Data.N:Qr[0]
                      <*>_N <r>_R <Language.Python.Common.AST.YieldArg annot1>_P)
                   ds1) -}
94dde4ffceed0a2a13daed020b6576e1
  $fDataYieldArg_$cgunfold ::
    Data.Data.Data annot =>
    forall (c :: * -> *).
    (forall b r. Data.Data.Data b => c (b -> r) -> c r)
    -> (forall r. r -> c r)
    -> Data.Data.Constr
    -> c (Language.Python.Common.AST.YieldArg annot)
  {- Arity: 1, Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)>,
     Unfolding: (\ @ annot1
                   ($dData :: Data.Data.Data annot1)
                   @ c :: * -> * ->
                 let {
                   $dData1 :: Data.Data.Data (Language.Python.Common.AST.Expr annot1)
                   = Language.Python.Common.AST.$fDataExpr @ annot1 $dData
                 } in
                 \ (k :: forall b r. Data.Data.Data b => c (b -> r) -> c r)
                   (z :: forall r. r -> c r)
                   (c1 :: Data.Data.Constr) ->
                 case c1 of wild { Data.Data.Constr ds ds1 ds2 ds3 ds4 ->
                 case ds of wild1 {
                   DEFAULT
                   -> case ds4 of ww6 { Data.Data.DataType ww7 ww8 ->
                      case Data.Data.$wlvl ww7
                      ret_ty (c (Language.Python.Common.AST.YieldArg annot1))
                      of {} }
                   Data.Data.AlgConstr idx
                   -> case idx of wild2 { GHC.Types.I# ds7 ->
                      case ds7 of ds8 {
                        DEFAULT
                        -> k @ (Language.Python.Common.AST.Expr annot1)
                             @ (Language.Python.Common.AST.YieldArg annot1)
                             $dData1
                             (z @ (Language.Python.Common.AST.Expr annot1
                                   -> Language.Python.Common.AST.YieldArg annot1)
                                (Language.Python.Common.AST.YieldExpr @ annot1))
                        1#
                        -> k @ annot1
                             @ (Language.Python.Common.AST.YieldArg annot1)
                             $dData
                             (k @ (Language.Python.Common.AST.Expr annot1)
                                @ (annot1 -> Language.Python.Common.AST.YieldArg annot1)
                                $dData1
                                (z @ (Language.Python.Common.AST.Expr annot1
                                      -> annot1 -> Language.Python.Common.AST.YieldArg annot1)
                                   (Language.Python.Common.AST.YieldFrom @ annot1))) } } } }) -}
94dde4ffceed0a2a13daed020b6576e1
  $fDataYieldArg_$cp1Data ::
    Data.Data.Data annot =>
    Data.Typeable.Internal.Typeable
      (Language.Python.Common.AST.YieldArg annot)
  {- Arity: 1, Strictness: <L,1*U(1*U,A,A,A,A,A,A,A,A,A,A,A,A,A,A)>,
     Unfolding: (\ @ annot1 ($dData :: Data.Data.Data annot1) ->
                 let {
                   b1 :: Data.Typeable.Internal.Typeable annot1
                   = Data.Data.$p1Data @ annot1 $dData
                 } in
                 case GHC.Magic.noinline
                        @ ([GHC.Fingerprint.Type.Fingerprint]
                           -> GHC.Fingerprint.Type.Fingerprint)
                        GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           Language.Python.Common.AST.$fDataYieldArg4
                           (GHC.Types.:
                              @ GHC.Fingerprint.Type.Fingerprint
                              (Data.Typeable.Internal.typeRepFingerprint
                                 @ *
                                 @ annot1
                                 b1 `cast` (Data.Typeable.Internal.N:Typeable[0] <*>_N <annot1>_N))
                              (GHC.Types.[]
                                 @ GHC.Fingerprint.Type.Fingerprint))) of dt { GHC.Fingerprint.Type.Fingerprint dt1 dt2 ->
                 (Data.Typeable.Internal.TrApp
                    @ *
                    @ (Language.Python.Common.AST.YieldArg annot1)
                    @ *
                    @ Language.Python.Common.AST.YieldArg
                    @ annot1
                    @~ <Language.Python.Common.AST.YieldArg annot1>_N
                    dt1
                    dt2
                    Language.Python.Common.AST.$fDataYieldArg_a3
                    b1 `cast` (Data.Typeable.Internal.N:Typeable[0] <*>_N <annot1>_N))
                   `cast`
                 (Sym (Data.Typeable.Internal.N:Typeable[0]) <*>_N <Language.Python.Common.AST.YieldArg
                                                                      annot1>_N) }) -}
94dde4ffceed0a2a13daed020b6576e1
  $fDataYieldArg_a3 ::
    Data.Typeable.Internal.TypeRep Language.Python.Common.AST.YieldArg
  {- Unfolding: (case GHC.Magic.noinline
                        @ ([GHC.Fingerprint.Type.Fingerprint]
                           -> GHC.Fingerprint.Type.Fingerprint)
                        GHC.Fingerprint.fingerprintFingerprints
                        Language.Python.Common.AST.$fDataYieldArg2 of dt { GHC.Fingerprint.Type.Fingerprint dt1 dt2 ->
                 Data.Typeable.Internal.TrTyCon
                   @ (* -> *)
                   @ Language.Python.Common.AST.YieldArg
                   dt1
                   dt2
                   Language.Python.Common.AST.$tcYieldArg
                   (GHC.Types.[] @ Data.Typeable.Internal.SomeTypeRep) }) -}
94dde4ffceed0a2a13daed020b6576e1
  $fEqArgument ::
    GHC.Classes.Eq annot =>
    GHC.Classes.Eq (Language.Python.Common.AST.Argument annot)
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(C(C1(U)),A)>m,
     Inline: CONLIKE,
     Unfolding: DFun: @ annot1 (v :: GHC.Classes.Eq annot1).
                  @ (Language.Python.Common.AST.Argument annot1)
                  (Language.Python.Common.AST.$fEqArgument_$c== @ annot1 v)
                  (Language.Python.Common.AST.$fEqArgument_$c/= @ annot1 v) -}
94dde4ffceed0a2a13daed020b6576e1
  $fEqArgument_$c/= ::
    GHC.Classes.Eq annot =>
    Language.Python.Common.AST.Argument annot
    -> Language.Python.Common.AST.Argument annot -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A)><S,1*U><S,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ annot1
                   ($dEq :: GHC.Classes.Eq annot1)
                   (a :: Language.Python.Common.AST.Argument annot1)
                   (b :: Language.Python.Common.AST.Argument annot1) ->
                 case Language.Python.Common.AST.$fEqArgument_$c==
                        @ annot1
                        $dEq
                        a
                        b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
94dde4ffceed0a2a13daed020b6576e1
  $fEqArgument_$c== ::
    GHC.Classes.Eq annot =>
    Language.Python.Common.AST.Argument annot
    -> Language.Python.Common.AST.Argument annot -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A)><S,1*U><S,1*U>,
     Unfolding: (\ @ annot1
                   ($dEq :: GHC.Classes.Eq annot1)
                   (ds :: Language.Python.Common.AST.Argument annot1)
                   (ds1 :: Language.Python.Common.AST.Argument annot1) ->
                 case ds of wild {
                   Language.Python.Common.AST.ArgExpr a1 a2
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.Python.Common.AST.ArgExpr b1 b4
                        -> case Language.Python.Common.AST.$fEqArgument_$c==1
                                  @ annot1
                                  $dEq
                                  a1
                                  b1 of wild2 {
                             GHC.Types.False -> GHC.Types.False
                             GHC.Types.True -> GHC.Classes.== @ annot1 $dEq a2 b4 } }
                   Language.Python.Common.AST.ArgVarArgsPos a1 a2
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.Python.Common.AST.ArgVarArgsPos b1 b4
                        -> case Language.Python.Common.AST.$fEqArgument_$c==1
                                  @ annot1
                                  $dEq
                                  a1
                                  b1 of wild2 {
                             GHC.Types.False -> GHC.Types.False
                             GHC.Types.True -> GHC.Classes.== @ annot1 $dEq a2 b4 } }
                   Language.Python.Common.AST.ArgVarArgsKeyword a1 a2
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.Python.Common.AST.ArgVarArgsKeyword b1 b4
                        -> case Language.Python.Common.AST.$fEqArgument_$c==1
                                  @ annot1
                                  $dEq
                                  a1
                                  b1 of wild2 {
                             GHC.Types.False -> GHC.Types.False
                             GHC.Types.True -> GHC.Classes.== @ annot1 $dEq a2 b4 } }
                   Language.Python.Common.AST.ArgKeyword a1 a2 a3
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.Python.Common.AST.ArgKeyword b1 b4 b3
                        -> case a1 of wild2 { Language.Python.Common.AST.Ident a4 a5 ->
                           case b1 of wild3 { Language.Python.Common.AST.Ident b5 b6 ->
                           case GHC.Base.eqString a4 b5 of wild4 {
                             GHC.Types.False -> GHC.Types.False
                             GHC.Types.True
                             -> case GHC.Classes.== @ annot1 $dEq a5 b6 of wild5 {
                                  GHC.Types.False -> GHC.Types.False
                                  GHC.Types.True
                                  -> case Language.Python.Common.AST.$fEqArgument_$c==1
                                            @ annot1
                                            $dEq
                                            a2
                                            b4 of wild6 {
                                       GHC.Types.False -> GHC.Types.False
                                       GHC.Types.True
                                       -> GHC.Classes.== @ annot1 $dEq a3 b3 } } } } } } }) -}
94dde4ffceed0a2a13daed020b6576e1
  $fEqArgument_$c==1 ::
    GHC.Classes.Eq annot =>
    Language.Python.Common.AST.Expr annot
    -> Language.Python.Common.AST.Expr annot -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(C(C1(U)),A)> -}
f55a81e56367dca5b5d86dd1548fd97f
  $fEqAssignOp ::
    GHC.Classes.Eq annot =>
    GHC.Classes.Eq (Language.Python.Common.AST.AssignOp annot)
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(C(C1(U)),A)>m,
     Inline: CONLIKE,
     Unfolding: DFun: @ annot1 (v :: GHC.Classes.Eq annot1).
                  @ (Language.Python.Common.AST.AssignOp annot1)
                  (Language.Python.Common.AST.$fEqAssignOp_$c== @ annot1 v)
                  (Language.Python.Common.AST.$fEqAssignOp_$c/= @ annot1 v) -}
f55a81e56367dca5b5d86dd1548fd97f
  $fEqAssignOp_$c/= ::
    GHC.Classes.Eq annot =>
    Language.Python.Common.AST.AssignOp annot
    -> Language.Python.Common.AST.AssignOp annot -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><S,1*U><S,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ annot1
                   ($dEq :: GHC.Classes.Eq annot1)
                   (a :: Language.Python.Common.AST.AssignOp annot1)
                   (b :: Language.Python.Common.AST.AssignOp annot1) ->
                 case Language.Python.Common.AST.$fEqAssignOp_$c==
                        @ annot1
                        $dEq
                        a
                        b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
f55a81e56367dca5b5d86dd1548fd97f
  $fEqAssignOp_$c== ::
    GHC.Classes.Eq annot =>
    Language.Python.Common.AST.AssignOp annot
    -> Language.Python.Common.AST.AssignOp annot -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><S,1*U><S,1*U> -}
94dde4ffceed0a2a13daed020b6576e1
  $fEqCompFor ::
    GHC.Classes.Eq annot =>
    GHC.Classes.Eq (Language.Python.Common.AST.CompFor annot)
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(C(C1(U)),A)>m,
     Inline: CONLIKE,
     Unfolding: DFun: @ annot1 (v :: GHC.Classes.Eq annot1).
                  @ (Language.Python.Common.AST.CompFor annot1)
                  (Language.Python.Common.AST.$fEqCompFor_$c== @ annot1 v)
                  (Language.Python.Common.AST.$fEqCompFor_$c/= @ annot1 v) -}
94dde4ffceed0a2a13daed020b6576e1
  $fEqCompFor_$c/= ::
    GHC.Classes.Eq annot =>
    Language.Python.Common.AST.CompFor annot
    -> Language.Python.Common.AST.CompFor annot -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U(C(C1(U)),A)><L,U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ annot1
                   ($dEq :: GHC.Classes.Eq annot1)
                   (a :: Language.Python.Common.AST.CompFor annot1)
                   (b :: Language.Python.Common.AST.CompFor annot1) ->
                 case Language.Python.Common.AST.$fEqCompFor_$c==
                        @ annot1
                        $dEq
                        a
                        b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
94dde4ffceed0a2a13daed020b6576e1
  $fEqCompFor_$c== ::
    GHC.Classes.Eq annot =>
    Language.Python.Common.AST.CompFor annot
    -> Language.Python.Common.AST.CompFor annot -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(C(C1(U)),A)> -}
94dde4ffceed0a2a13daed020b6576e1
  $fEqCompIf ::
    GHC.Classes.Eq annot =>
    GHC.Classes.Eq (Language.Python.Common.AST.CompIf annot)
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(C(C1(U)),A)>m,
     Inline: CONLIKE,
     Unfolding: DFun: @ annot1 (v :: GHC.Classes.Eq annot1).
                  @ (Language.Python.Common.AST.CompIf annot1)
                  (Language.Python.Common.AST.$fEqCompIf_$c== @ annot1 v)
                  (Language.Python.Common.AST.$fEqCompIf_$c/= @ annot1 v) -}
94dde4ffceed0a2a13daed020b6576e1
  $fEqCompIf_$c/= ::
    GHC.Classes.Eq annot =>
    Language.Python.Common.AST.CompIf annot
    -> Language.Python.Common.AST.CompIf annot -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A)><S,1*U(U,1*U,U)><S,1*U(U,1*U,U)>,
     Unfolding: InlineRule (3, True, False)
                (\ @ annot1
                   ($dEq :: GHC.Classes.Eq annot1)
                   (a :: Language.Python.Common.AST.CompIf annot1)
                   (b :: Language.Python.Common.AST.CompIf annot1) ->
                 case Language.Python.Common.AST.$fEqCompIf_$c==
                        @ annot1
                        $dEq
                        a
                        b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
94dde4ffceed0a2a13daed020b6576e1
  $fEqCompIf_$c== ::
    GHC.Classes.Eq annot =>
    Language.Python.Common.AST.CompIf annot
    -> Language.Python.Common.AST.CompIf annot -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A)><S,1*U(U,1*U,U)><S,1*U(U,1*U,U)>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ @ annot1
                   (w :: GHC.Classes.Eq annot1)
                   (w249 :: Language.Python.Common.AST.CompIf annot1)
                   (w250 :: Language.Python.Common.AST.CompIf annot1) ->
                 case w249 of ww { Language.Python.Common.AST.CompIf ww1 ww2 ww3 ->
                 case w250 of ww4 { Language.Python.Common.AST.CompIf ww5 ww6 ww7 ->
                 Language.Python.Common.AST.$w$c==
                   @ annot1
                   w
                   ww1
                   ww2
                   ww3
                   ww5
                   ww6
                   ww7 } }) -}
94dde4ffceed0a2a13daed020b6576e1
  $fEqCompIter ::
    GHC.Classes.Eq annot =>
    GHC.Classes.Eq (Language.Python.Common.AST.CompIter annot)
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(C(C1(U)),A)>m,
     Inline: CONLIKE,
     Unfolding: DFun: @ annot1 (v :: GHC.Classes.Eq annot1).
                  @ (Language.Python.Common.AST.CompIter annot1)
                  (Language.Python.Common.AST.$fEqCompIter_$c== @ annot1 v)
                  (Language.Python.Common.AST.$fEqCompIter_$c/= @ annot1 v) -}
94dde4ffceed0a2a13daed020b6576e1
  $fEqCompIter_$c/= ::
    GHC.Classes.Eq annot =>
    Language.Python.Common.AST.CompIter annot
    -> Language.Python.Common.AST.CompIter annot -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A)><S,1*U><S,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ annot1
                   ($dEq :: GHC.Classes.Eq annot1)
                   (a :: Language.Python.Common.AST.CompIter annot1)
                   (b :: Language.Python.Common.AST.CompIter annot1) ->
                 case Language.Python.Common.AST.$fEqCompIter_$c==
                        @ annot1
                        $dEq
                        a
                        b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
94dde4ffceed0a2a13daed020b6576e1
  $fEqCompIter_$c== ::
    GHC.Classes.Eq annot =>
    Language.Python.Common.AST.CompIter annot
    -> Language.Python.Common.AST.CompIter annot -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A)><S,1*U><S,1*U> -}
94dde4ffceed0a2a13daed020b6576e1
  $fEqComprehension ::
    GHC.Classes.Eq annot =>
    GHC.Classes.Eq (Language.Python.Common.AST.Comprehension annot)
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(C(C1(U)),A)>m,
     Inline: CONLIKE,
     Unfolding: DFun: @ annot1 (v :: GHC.Classes.Eq annot1).
                  @ (Language.Python.Common.AST.Comprehension annot1)
                  (Language.Python.Common.AST.$fEqComprehension_$c== @ annot1 v)
                  (Language.Python.Common.AST.$fEqComprehension_$c/= @ annot1 v) -}
94dde4ffceed0a2a13daed020b6576e1
  $fEqComprehensionExpr ::
    GHC.Classes.Eq annot =>
    GHC.Classes.Eq (Language.Python.Common.AST.ComprehensionExpr annot)
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(C(C1(U)),A)>m,
     Inline: CONLIKE,
     Unfolding: DFun: @ annot1 (v :: GHC.Classes.Eq annot1).
                  @ (Language.Python.Common.AST.ComprehensionExpr annot1)
                  (Language.Python.Common.AST.$fEqComprehension_$c==1 @ annot1 v)
                  (Language.Python.Common.AST.$fEqComprehensionExpr_$c/=
                     @ annot1
                     v) -}
94dde4ffceed0a2a13daed020b6576e1
  $fEqComprehensionExpr_$c/= ::
    GHC.Classes.Eq annot =>
    Language.Python.Common.AST.ComprehensionExpr annot
    -> Language.Python.Common.AST.ComprehensionExpr annot
    -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A)><S,1*U><S,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ annot1
                   ($dEq :: GHC.Classes.Eq annot1)
                   (a :: Language.Python.Common.AST.ComprehensionExpr annot1)
                   (b :: Language.Python.Common.AST.ComprehensionExpr annot1) ->
                 case Language.Python.Common.AST.$fEqComprehension_$c==1
                        @ annot1
                        $dEq
                        a
                        b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
94dde4ffceed0a2a13daed020b6576e1
  $fEqComprehension_$c/= ::
    GHC.Classes.Eq annot =>
    Language.Python.Common.AST.Comprehension annot
    -> Language.Python.Common.AST.Comprehension annot -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A)><S(SLL),1*U(1*U,U,U)><S(SLL),1*U(1*U,U,U)>,
     Unfolding: InlineRule (3, True, False)
                (\ @ annot1
                   ($dEq :: GHC.Classes.Eq annot1)
                   (a :: Language.Python.Common.AST.Comprehension annot1)
                   (b :: Language.Python.Common.AST.Comprehension annot1) ->
                 case Language.Python.Common.AST.$fEqComprehension_$c==
                        @ annot1
                        $dEq
                        a
                        b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
94dde4ffceed0a2a13daed020b6576e1
  $fEqComprehension_$c== ::
    GHC.Classes.Eq annot =>
    Language.Python.Common.AST.Comprehension annot
    -> Language.Python.Common.AST.Comprehension annot -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A)><S(SLL),1*U(1*U,U,U)><S(SLL),1*U(1*U,U,U)>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ @ annot1
                   (w :: GHC.Classes.Eq annot1)
                   (w249 :: Language.Python.Common.AST.Comprehension annot1)
                   (w250 :: Language.Python.Common.AST.Comprehension annot1) ->
                 case w249 of ww { Language.Python.Common.AST.Comprehension ww1 ww2 ww3 ->
                 case w250 of ww4 { Language.Python.Common.AST.Comprehension ww5 ww6 ww7 ->
                 Language.Python.Common.AST.$w$c==1
                   @ annot1
                   w
                   ww1
                   ww2
                   ww3
                   ww5
                   ww6
                   ww7 } }) -}
94dde4ffceed0a2a13daed020b6576e1
  $fEqComprehension_$c==1 ::
    GHC.Classes.Eq annot =>
    Language.Python.Common.AST.ComprehensionExpr annot
    -> Language.Python.Common.AST.ComprehensionExpr annot
    -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A)><S,1*U><S,1*U>,
     Unfolding: (\ @ annot1
                   ($dEq :: GHC.Classes.Eq annot1)
                   (ds :: Language.Python.Common.AST.ComprehensionExpr annot1)
                   (ds1 :: Language.Python.Common.AST.ComprehensionExpr annot1) ->
                 case ds of wild {
                   Language.Python.Common.AST.ComprehensionExpr a1
                   -> case ds1 of wild1 {
                        Language.Python.Common.AST.ComprehensionExpr b1
                        -> Language.Python.Common.AST.$fEqArgument_$c==1
                             @ annot1
                             $dEq
                             a1
                             b1
                        Language.Python.Common.AST.ComprehensionDict ipv
                        -> GHC.Types.False }
                   Language.Python.Common.AST.ComprehensionDict a1
                   -> case ds1 of wild1 {
                        Language.Python.Common.AST.ComprehensionExpr ipv -> GHC.Types.False
                        Language.Python.Common.AST.ComprehensionDict b1
                        -> Language.Python.Common.AST.$fEqComprehension_$c==2
                             @ annot1
                             $dEq
                             a1
                             b1 } }) -}
94dde4ffceed0a2a13daed020b6576e1
  $fEqComprehension_$c==2 ::
    GHC.Classes.Eq annot =>
    Language.Python.Common.AST.DictKeyDatumList annot
    -> Language.Python.Common.AST.DictKeyDatumList annot
    -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A)><S,1*U><S,1*U>,
     Unfolding: (\ @ annot1
                   ($dEq :: GHC.Classes.Eq annot1)
                   (ds :: Language.Python.Common.AST.DictKeyDatumList annot1)
                   (ds1 :: Language.Python.Common.AST.DictKeyDatumList annot1) ->
                 case ds of wild {
                   Language.Python.Common.AST.DictMappingPair a1 a2
                   -> case ds1 of wild1 {
                        Language.Python.Common.AST.DictMappingPair b1 b4
                        -> case Language.Python.Common.AST.$fEqArgument_$c==1
                                  @ annot1
                                  $dEq
                                  a1
                                  b1 of wild2 {
                             GHC.Types.False -> GHC.Types.False
                             GHC.Types.True
                             -> Language.Python.Common.AST.$fEqArgument_$c==1
                                  @ annot1
                                  $dEq
                                  a2
                                  b4 }
                        Language.Python.Common.AST.DictUnpacking ipv -> GHC.Types.False }
                   Language.Python.Common.AST.DictUnpacking a1
                   -> case ds1 of wild1 {
                        Language.Python.Common.AST.DictMappingPair ipv ipv1
                        -> GHC.Types.False
                        Language.Python.Common.AST.DictUnpacking b1
                        -> Language.Python.Common.AST.$fEqArgument_$c==1
                             @ annot1
                             $dEq
                             a1
                             b1 } }) -}
6e1ab2fb537d2522edcf9b3f967431ea
  $fEqDecorator ::
    GHC.Classes.Eq annot =>
    GHC.Classes.Eq (Language.Python.Common.AST.Decorator annot)
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(C(C1(U)),A)>m,
     Inline: CONLIKE,
     Unfolding: DFun: @ annot1 (v :: GHC.Classes.Eq annot1).
                  @ (Language.Python.Common.AST.Decorator annot1)
                  (Language.Python.Common.AST.$fEqDecorator_$c== @ annot1 v)
                  (Language.Python.Common.AST.$fEqDecorator_$c/= @ annot1 v) -}
6e1ab2fb537d2522edcf9b3f967431ea
  $fEqDecorator_$c/= ::
    GHC.Classes.Eq annot =>
    Language.Python.Common.AST.Decorator annot
    -> Language.Python.Common.AST.Decorator annot -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U(C(C1(U)),A)><L,U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ annot1
                   ($dEq :: GHC.Classes.Eq annot1)
                   (a :: Language.Python.Common.AST.Decorator annot1)
                   (b :: Language.Python.Common.AST.Decorator annot1) ->
                 case Language.Python.Common.AST.$fEqDecorator_$c==
                        @ annot1
                        $dEq
                        a
                        b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
6e1ab2fb537d2522edcf9b3f967431ea
  $fEqDecorator_$c== ::
    GHC.Classes.Eq annot =>
    Language.Python.Common.AST.Decorator annot
    -> Language.Python.Common.AST.Decorator annot -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(C(C1(U)),A)>,
     Unfolding: (\ @ annot1 ($dEq :: GHC.Classes.Eq annot1) ->
                 let {
                   $dEq1 :: GHC.Classes.Eq
                              (Language.Python.Common.AST.Argument annot1)
                   = Language.Python.Common.AST.$fEqArgument @ annot1 $dEq
                 } in
                 let {
                   $dEq2 :: GHC.Classes.Eq (Language.Python.Common.AST.Ident annot1)
                   = Language.Python.Common.AST.$fEqIdent @ annot1 $dEq
                 } in
                 \ (ds :: Language.Python.Common.AST.Decorator annot1)
                   (ds1 :: Language.Python.Common.AST.Decorator annot1) ->
                 case ds of wild { Language.Python.Common.AST.Decorator a1 a2 a3 ->
                 case ds1 of wild1 { Language.Python.Common.AST.Decorator b1 b4 b3 ->
                 case GHC.Classes.$fEq[]_$c==
                        @ (Language.Python.Common.AST.Ident annot1)
                        $dEq2
                        a1
                        b1 of wild2 {
                   GHC.Types.False -> GHC.Types.False
                   GHC.Types.True
                   -> case GHC.Classes.$fEq[]_$c==
                             @ (Language.Python.Common.AST.Argument annot1)
                             $dEq1
                             a2
                             b4 of wild3 {
                        GHC.Types.False -> GHC.Types.False
                        GHC.Types.True -> GHC.Classes.== @ annot1 $dEq a3 b3 } } } }) -}
94dde4ffceed0a2a13daed020b6576e1
  $fEqDictKeyDatumList ::
    GHC.Classes.Eq annot =>
    GHC.Classes.Eq (Language.Python.Common.AST.DictKeyDatumList annot)
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(C(C1(U)),A)>m,
     Inline: CONLIKE,
     Unfolding: DFun: @ annot1 (v :: GHC.Classes.Eq annot1).
                  @ (Language.Python.Common.AST.DictKeyDatumList annot1)
                  (Language.Python.Common.AST.$fEqComprehension_$c==2 @ annot1 v)
                  (Language.Python.Common.AST.$fEqDictKeyDatumList_$c/=
                     @ annot1
                     v) -}
94dde4ffceed0a2a13daed020b6576e1
  $fEqDictKeyDatumList_$c/= ::
    GHC.Classes.Eq annot =>
    Language.Python.Common.AST.DictKeyDatumList annot
    -> Language.Python.Common.AST.DictKeyDatumList annot
    -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A)><S,1*U><S,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ annot1
                   ($dEq :: GHC.Classes.Eq annot1)
                   (a :: Language.Python.Common.AST.DictKeyDatumList annot1)
                   (b :: Language.Python.Common.AST.DictKeyDatumList annot1) ->
                 case Language.Python.Common.AST.$fEqComprehension_$c==2
                        @ annot1
                        $dEq
                        a
                        b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
54ad83b54b9c0dd8bf180da8d82f4195
  $fEqExceptClause ::
    GHC.Classes.Eq annot =>
    GHC.Classes.Eq (Language.Python.Common.AST.ExceptClause annot)
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(C(C1(U)),A)>m,
     Inline: CONLIKE,
     Unfolding: DFun: @ annot1 (v :: GHC.Classes.Eq annot1).
                  @ (Language.Python.Common.AST.ExceptClause annot1)
                  (Language.Python.Common.AST.$fEqExceptClause_$c== @ annot1 v)
                  (Language.Python.Common.AST.$fEqExceptClause_$c/= @ annot1 v) -}
54ad83b54b9c0dd8bf180da8d82f4195
  $fEqExceptClause_$c/= ::
    GHC.Classes.Eq annot =>
    Language.Python.Common.AST.ExceptClause annot
    -> Language.Python.Common.AST.ExceptClause annot -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A)><S(SL),1*U(1*U,U)><S(SL),1*U(1*U,U)>,
     Unfolding: InlineRule (3, True, False)
                (\ @ annot1
                   ($dEq :: GHC.Classes.Eq annot1)
                   (a :: Language.Python.Common.AST.ExceptClause annot1)
                   (b :: Language.Python.Common.AST.ExceptClause annot1) ->
                 case Language.Python.Common.AST.$fEqExceptClause_$c==
                        @ annot1
                        $dEq
                        a
                        b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
54ad83b54b9c0dd8bf180da8d82f4195
  $fEqExceptClause_$c== ::
    GHC.Classes.Eq annot =>
    Language.Python.Common.AST.ExceptClause annot
    -> Language.Python.Common.AST.ExceptClause annot -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A)><S(SL),1*U(1*U,U)><S(SL),1*U(1*U,U)>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ @ annot1
                   (w :: GHC.Classes.Eq annot1)
                   (w249 :: Language.Python.Common.AST.ExceptClause annot1)
                   (w250 :: Language.Python.Common.AST.ExceptClause annot1) ->
                 case w249 of ww { Language.Python.Common.AST.ExceptClause ww1 ww2 ->
                 case w250 of ww3 { Language.Python.Common.AST.ExceptClause ww4 ww5 ->
                 Language.Python.Common.AST.$w$c==2
                   @ annot1
                   w
                   ww1
                   ww2
                   ww4
                   ww5 } }) -}
94dde4ffceed0a2a13daed020b6576e1
  $fEqExpr ::
    GHC.Classes.Eq annot =>
    GHC.Classes.Eq (Language.Python.Common.AST.Expr annot)
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(C(C1(U)),A)>m,
     Inline: CONLIKE,
     Unfolding: DFun: @ annot1 (v :: GHC.Classes.Eq annot1).
                  @ (Language.Python.Common.AST.Expr annot1)
                  (Language.Python.Common.AST.$fEqArgument_$c==1 @ annot1 v)
                  (Language.Python.Common.AST.$fEqExpr_$c/= @ annot1 v) -}
94dde4ffceed0a2a13daed020b6576e1
  $fEqExpr_$c/= ::
    GHC.Classes.Eq annot =>
    Language.Python.Common.AST.Expr annot
    -> Language.Python.Common.AST.Expr annot -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U(C(C1(U)),A)><L,U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ annot1
                   ($dEq :: GHC.Classes.Eq annot1)
                   (a :: Language.Python.Common.AST.Expr annot1)
                   (b :: Language.Python.Common.AST.Expr annot1) ->
                 case Language.Python.Common.AST.$fEqArgument_$c==1
                        @ annot1
                        $dEq
                        a
                        b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
73d811e85ab4018f7789c4c4421a9fde
  $fEqFromItem ::
    GHC.Classes.Eq annot =>
    GHC.Classes.Eq (Language.Python.Common.AST.FromItem annot)
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(C(C1(U)),A)>m,
     Inline: CONLIKE,
     Unfolding: DFun: @ annot1 (v :: GHC.Classes.Eq annot1).
                  @ (Language.Python.Common.AST.FromItem annot1)
                  (Language.Python.Common.AST.$fEqFromItem_$c== @ annot1 v)
                  (Language.Python.Common.AST.$fEqFromItem_$c/= @ annot1 v) -}
73d811e85ab4018f7789c4c4421a9fde
  $fEqFromItem_$c/= ::
    GHC.Classes.Eq annot =>
    Language.Python.Common.AST.FromItem annot
    -> Language.Python.Common.AST.FromItem annot -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A)><S(S(SL)LL),1*U(1*U(U,U),1*U,U)><S(S(SL)LL),1*U(1*U(U,U),1*U,U)>,
     Unfolding: InlineRule (3, True, False)
                (\ @ annot1
                   ($dEq :: GHC.Classes.Eq annot1)
                   (a :: Language.Python.Common.AST.FromItem annot1)
                   (b :: Language.Python.Common.AST.FromItem annot1) ->
                 case Language.Python.Common.AST.$fEqFromItem_$c==
                        @ annot1
                        $dEq
                        a
                        b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
73d811e85ab4018f7789c4c4421a9fde
  $fEqFromItem_$c== ::
    GHC.Classes.Eq annot =>
    Language.Python.Common.AST.FromItem annot
    -> Language.Python.Common.AST.FromItem annot -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A)><S(S(SL)LL),1*U(1*U(U,U),1*U,U)><S(S(SL)LL),1*U(1*U(U,U),1*U,U)>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ @ annot1
                   (w :: GHC.Classes.Eq annot1)
                   (w249 :: Language.Python.Common.AST.FromItem annot1)
                   (w250 :: Language.Python.Common.AST.FromItem annot1) ->
                 case w249 of ww { Language.Python.Common.AST.FromItem ww1 ww2 ww3 ->
                 case ww1 of ww4 { Language.Python.Common.AST.Ident ww5 ww6 ->
                 case w250 of ww7 { Language.Python.Common.AST.FromItem ww8 ww9 ww10 ->
                 case ww8 of ww11 { Language.Python.Common.AST.Ident ww12 ww13 ->
                 Language.Python.Common.AST.$w$c==3
                   @ annot1
                   w
                   ww5
                   ww6
                   ww2
                   ww3
                   ww12
                   ww13
                   ww9
                   ww10 } } } }) -}
e3cd8a0dc8214c8f5ef60ed5a9ac11ef
  $fEqFromItems ::
    GHC.Classes.Eq annot =>
    GHC.Classes.Eq (Language.Python.Common.AST.FromItems annot)
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(C(C1(U)),A)>m,
     Inline: CONLIKE,
     Unfolding: DFun: @ annot1 (v :: GHC.Classes.Eq annot1).
                  @ (Language.Python.Common.AST.FromItems annot1)
                  (Language.Python.Common.AST.$fEqFromItems_$c== @ annot1 v)
                  (Language.Python.Common.AST.$fEqFromItems_$c/= @ annot1 v) -}
e3cd8a0dc8214c8f5ef60ed5a9ac11ef
  $fEqFromItems_$c/= ::
    GHC.Classes.Eq annot =>
    Language.Python.Common.AST.FromItems annot
    -> Language.Python.Common.AST.FromItems annot -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U(C(C1(U)),A)><L,U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ annot1
                   ($dEq :: GHC.Classes.Eq annot1)
                   (a :: Language.Python.Common.AST.FromItems annot1)
                   (b :: Language.Python.Common.AST.FromItems annot1) ->
                 case Language.Python.Common.AST.$fEqFromItems_$c==
                        @ annot1
                        $dEq
                        a
                        b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
e3cd8a0dc8214c8f5ef60ed5a9ac11ef
  $fEqFromItems_$c== ::
    GHC.Classes.Eq annot =>
    Language.Python.Common.AST.FromItems annot
    -> Language.Python.Common.AST.FromItems annot -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(C(C1(U)),A)>,
     Unfolding: (\ @ annot1 ($dEq :: GHC.Classes.Eq annot1) ->
                 let {
                   $dEq1 :: GHC.Classes.Eq
                              (Language.Python.Common.AST.FromItem annot1)
                   = Language.Python.Common.AST.$fEqFromItem @ annot1 $dEq
                 } in
                 \ (ds :: Language.Python.Common.AST.FromItems annot1)
                   (ds1 :: Language.Python.Common.AST.FromItems annot1) ->
                 case ds of wild {
                   Language.Python.Common.AST.ImportEverything a1
                   -> case ds1 of wild1 {
                        Language.Python.Common.AST.ImportEverything b1
                        -> GHC.Classes.== @ annot1 $dEq a1 b1
                        Language.Python.Common.AST.FromItems ipv ipv1 -> GHC.Types.False }
                   Language.Python.Common.AST.FromItems a1 a2
                   -> case ds1 of wild1 {
                        Language.Python.Common.AST.ImportEverything ipv -> GHC.Types.False
                        Language.Python.Common.AST.FromItems b1 b4
                        -> case GHC.Classes.$fEq[]_$c==
                                  @ (Language.Python.Common.AST.FromItem annot1)
                                  $dEq1
                                  a1
                                  b1 of wild2 {
                             GHC.Types.False -> GHC.Types.False
                             GHC.Types.True -> GHC.Classes.== @ annot1 $dEq a2 b4 } } }) -}
cf431e64d114ff48b3a5eb8fda819c32
  $fEqHandler ::
    GHC.Classes.Eq annot =>
    GHC.Classes.Eq (Language.Python.Common.AST.Handler annot)
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(C(C1(U)),A)>m,
     Inline: CONLIKE,
     Unfolding: DFun: @ annot1 (v :: GHC.Classes.Eq annot1).
                  @ (Language.Python.Common.AST.Handler annot1)
                  (Language.Python.Common.AST.$fEqHandler_$c== @ annot1 v)
                  (Language.Python.Common.AST.$fEqHandler_$c/= @ annot1 v) -}
cf431e64d114ff48b3a5eb8fda819c32
  $fEqHandler_$c/= ::
    GHC.Classes.Eq annot =>
    Language.Python.Common.AST.Handler annot
    -> Language.Python.Common.AST.Handler annot -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U(C(C1(U)),A)><L,U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ annot1
                   ($dEq :: GHC.Classes.Eq annot1)
                   (a :: Language.Python.Common.AST.Handler annot1)
                   (b :: Language.Python.Common.AST.Handler annot1) ->
                 case Language.Python.Common.AST.$fEqHandler_$c==
                        @ annot1
                        $dEq
                        a
                        b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
cf431e64d114ff48b3a5eb8fda819c32
  $fEqHandler_$c== ::
    GHC.Classes.Eq annot =>
    Language.Python.Common.AST.Handler annot
    -> Language.Python.Common.AST.Handler annot -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(C(C1(U)),A)>,
     Unfolding: (\ @ annot1 ($dEq :: GHC.Classes.Eq annot1) ->
                 let {
                   $dEq1 :: GHC.Classes.Eq
                              (Language.Python.Common.AST.Statement annot1)
                   = Language.Python.Common.AST.$fEqStatement @ annot1 $dEq
                 } in
                 \ (ds :: Language.Python.Common.AST.Handler annot1)
                   (ds1 :: Language.Python.Common.AST.Handler annot1) ->
                 case ds of wild { Language.Python.Common.AST.Handler a1 a2 a3 ->
                 case ds1 of wild1 { Language.Python.Common.AST.Handler b1 b4 b3 ->
                 case a1 of ww { Language.Python.Common.AST.ExceptClause ww1 ww2 ->
                 case b1 of ww3 { Language.Python.Common.AST.ExceptClause ww4 ww5 ->
                 case Language.Python.Common.AST.$w$c==2
                        @ annot1
                        $dEq
                        ww1
                        ww2
                        ww4
                        ww5 of wild2 {
                   GHC.Types.False -> GHC.Types.False
                   GHC.Types.True
                   -> case GHC.Classes.$fEq[]_$c==
                             @ (Language.Python.Common.AST.Statement annot1)
                             $dEq1
                             a2
                             b4 of wild3 {
                        GHC.Types.False -> GHC.Types.False
                        GHC.Types.True
                        -> GHC.Classes.== @ annot1 $dEq a3 b3 } } } } } }) -}
6aab1d6f902c3e0dbc09c99c8605e197
  $fEqIdent ::
    GHC.Classes.Eq annot =>
    GHC.Classes.Eq (Language.Python.Common.AST.Ident annot)
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(C(C1(U)),A)>m,
     Inline: CONLIKE,
     Unfolding: DFun: @ annot1 (v :: GHC.Classes.Eq annot1).
                  @ (Language.Python.Common.AST.Ident annot1)
                  (Language.Python.Common.AST.$fEqIdent_$c== @ annot1 v)
                  (Language.Python.Common.AST.$fEqIdent_$c/= @ annot1 v) -}
6aab1d6f902c3e0dbc09c99c8605e197
  $fEqIdent_$c/= ::
    GHC.Classes.Eq annot =>
    Language.Python.Common.AST.Ident annot
    -> Language.Python.Common.AST.Ident annot -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><S(SL),1*U(U,U)><S(SL),1*U(U,U)>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ @ annot1
                   (w :: GHC.Classes.Eq annot1)
                   (w249 :: Language.Python.Common.AST.Ident annot1)
                   (w250 :: Language.Python.Common.AST.Ident annot1) ->
                 case w249 of ww { Language.Python.Common.AST.Ident ww1 ww2 ->
                 case w250 of ww3 { Language.Python.Common.AST.Ident ww4 ww5 ->
                 case GHC.Base.eqString ww1 ww4 of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True
                   -> case GHC.Classes.== @ annot1 w ww2 ww5 of wild1 {
                        GHC.Types.False -> GHC.Types.True
                        GHC.Types.True -> GHC.Types.False } } } }) -}
6aab1d6f902c3e0dbc09c99c8605e197
  $fEqIdent_$c== ::
    GHC.Classes.Eq annot =>
    Language.Python.Common.AST.Ident annot
    -> Language.Python.Common.AST.Ident annot -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><S(SL),1*U(U,U)><S(SL),1*U(U,U)>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ @ annot1
                   (w :: GHC.Classes.Eq annot1)
                   (w249 :: Language.Python.Common.AST.Ident annot1)
                   (w250 :: Language.Python.Common.AST.Ident annot1) ->
                 case w249 of ww { Language.Python.Common.AST.Ident ww1 ww2 ->
                 case w250 of ww3 { Language.Python.Common.AST.Ident ww4 ww5 ->
                 case GHC.Base.eqString ww1 ww4 of wild {
                   GHC.Types.False -> GHC.Types.False
                   GHC.Types.True -> GHC.Classes.== @ annot1 w ww2 ww5 } } }) -}
283607fc44cb0ad26a76914defc72d00
  $fEqImportItem ::
    GHC.Classes.Eq annot =>
    GHC.Classes.Eq (Language.Python.Common.AST.ImportItem annot)
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(C(C1(U)),A)>m,
     Inline: CONLIKE,
     Unfolding: DFun: @ annot1 (v :: GHC.Classes.Eq annot1).
                  @ (Language.Python.Common.AST.ImportItem annot1)
                  (Language.Python.Common.AST.$fEqImportItem_$c== @ annot1 v)
                  (Language.Python.Common.AST.$fEqImportItem_$c/= @ annot1 v) -}
283607fc44cb0ad26a76914defc72d00
  $fEqImportItem_$c/= ::
    GHC.Classes.Eq annot =>
    Language.Python.Common.AST.ImportItem annot
    -> Language.Python.Common.AST.ImportItem annot -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U(C(C1(U)),A)><L,U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ annot1
                   ($dEq :: GHC.Classes.Eq annot1)
                   (a :: Language.Python.Common.AST.ImportItem annot1)
                   (b :: Language.Python.Common.AST.ImportItem annot1) ->
                 case Language.Python.Common.AST.$fEqImportItem_$c==
                        @ annot1
                        $dEq
                        a
                        b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
283607fc44cb0ad26a76914defc72d00
  $fEqImportItem_$c== ::
    GHC.Classes.Eq annot =>
    Language.Python.Common.AST.ImportItem annot
    -> Language.Python.Common.AST.ImportItem annot -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(C(C1(U)),A)>,
     Unfolding: (\ @ annot1 ($dEq :: GHC.Classes.Eq annot1) ->
                 let {
                   $dEq1 :: GHC.Classes.Eq (Language.Python.Common.AST.Ident annot1)
                   = Language.Python.Common.AST.$fEqIdent @ annot1 $dEq
                 } in
                 \ (ds :: Language.Python.Common.AST.ImportItem annot1)
                   (ds1 :: Language.Python.Common.AST.ImportItem annot1) ->
                 case ds of wild { Language.Python.Common.AST.ImportItem a1 a2 a3 ->
                 case ds1 of wild1 { Language.Python.Common.AST.ImportItem b1 b4 b3 ->
                 case GHC.Classes.$fEq[]_$c==
                        @ (Language.Python.Common.AST.Ident annot1)
                        $dEq1
                        a1
                        b1 of wild2 {
                   GHC.Types.False -> GHC.Types.False
                   GHC.Types.True
                   -> case a2 of wild3 {
                        GHC.Base.Nothing
                        -> case b4 of wild4 {
                             GHC.Base.Nothing -> GHC.Classes.== @ annot1 $dEq a3 b3
                             GHC.Base.Just ipv -> GHC.Types.False }
                        GHC.Base.Just a4
                        -> case b4 of wild4 {
                             GHC.Base.Nothing -> GHC.Types.False
                             GHC.Base.Just b5
                             -> case a4 of wild5 { Language.Python.Common.AST.Ident a5 a6 ->
                                case b5 of wild6 { Language.Python.Common.AST.Ident b6 b7 ->
                                case GHC.Base.eqString a5 b6 of wild7 {
                                  GHC.Types.False -> GHC.Types.False
                                  GHC.Types.True
                                  -> case GHC.Classes.== @ annot1 $dEq a6 b7 of wild8 {
                                       GHC.Types.False -> GHC.Types.False
                                       GHC.Types.True
                                       -> GHC.Classes.== @ annot1 $dEq a3 b3 } } } } } } } } }) -}
01a50092e1f9a1aefabdff796e5265a4
  $fEqImportRelative ::
    GHC.Classes.Eq annot =>
    GHC.Classes.Eq (Language.Python.Common.AST.ImportRelative annot)
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(C(C1(U)),A)>m,
     Inline: CONLIKE,
     Unfolding: DFun: @ annot1 (v :: GHC.Classes.Eq annot1).
                  @ (Language.Python.Common.AST.ImportRelative annot1)
                  (Language.Python.Common.AST.$fEqImportRelative_$c== @ annot1 v)
                  (Language.Python.Common.AST.$fEqImportRelative_$c/= @ annot1 v) -}
01a50092e1f9a1aefabdff796e5265a4
  $fEqImportRelative_$c/= ::
    GHC.Classes.Eq annot =>
    Language.Python.Common.AST.ImportRelative annot
    -> Language.Python.Common.AST.ImportRelative annot
    -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U(C(C1(U)),A)><L,U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ annot1
                   ($dEq :: GHC.Classes.Eq annot1)
                   (a :: Language.Python.Common.AST.ImportRelative annot1)
                   (b :: Language.Python.Common.AST.ImportRelative annot1) ->
                 case Language.Python.Common.AST.$fEqImportRelative_$c==
                        @ annot1
                        $dEq
                        a
                        b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
01a50092e1f9a1aefabdff796e5265a4
  $fEqImportRelative_$c== ::
    GHC.Classes.Eq annot =>
    Language.Python.Common.AST.ImportRelative annot
    -> Language.Python.Common.AST.ImportRelative annot
    -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(C(C1(U)),A)>,
     Unfolding: (\ @ annot1 ($dEq :: GHC.Classes.Eq annot1) ->
                 let {
                   $dEq1 :: GHC.Classes.Eq (Language.Python.Common.AST.Ident annot1)
                   = Language.Python.Common.AST.$fEqIdent @ annot1 $dEq
                 } in
                 \ (ds :: Language.Python.Common.AST.ImportRelative annot1)
                   (ds1 :: Language.Python.Common.AST.ImportRelative annot1) ->
                 case ds of wild { Language.Python.Common.AST.ImportRelative a1 a2 a3 ->
                 case ds1 of wild1 { Language.Python.Common.AST.ImportRelative b1 b4 b3 ->
                 case a1 of wild2 { GHC.Types.I# x ->
                 case b1 of wild3 { GHC.Types.I# y ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.==# x y) of wild4 {
                   GHC.Types.False -> GHC.Types.False
                   GHC.Types.True
                   -> case a2 of wild5 {
                        GHC.Base.Nothing
                        -> case b4 of wild6 {
                             GHC.Base.Nothing -> GHC.Classes.== @ annot1 $dEq a3 b3
                             GHC.Base.Just ipv -> GHC.Types.False }
                        GHC.Base.Just a4
                        -> case b4 of wild6 {
                             GHC.Base.Nothing -> GHC.Types.False
                             GHC.Base.Just b5
                             -> case GHC.Classes.$fEq[]_$c==
                                       @ (Language.Python.Common.AST.Ident annot1)
                                       $dEq1
                                       a4
                                       b5 of wild7 {
                                  GHC.Types.False -> GHC.Types.False
                                  GHC.Types.True
                                  -> GHC.Classes.== @ annot1 $dEq a3 b3 } } } } } } } }) -}
789db2a4b3c023a9cf43afdd1f0c3249
  $fEqModule ::
    GHC.Classes.Eq annot =>
    GHC.Classes.Eq (Language.Python.Common.AST.Module annot)
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(C(C1(U)),A)>m,
     Inline: CONLIKE,
     Unfolding: DFun: @ annot1 (v :: GHC.Classes.Eq annot1).
                  @ (Language.Python.Common.AST.Module annot1)
                  (GHC.Classes.$fEq[]_$c==
                     @ (Language.Python.Common.AST.Statement annot1)
                     (Language.Python.Common.AST.$fEqStatement @ annot1 v))
                    `cast`
                  (Sym (Language.Python.Common.AST.N:Module[0] <annot1>_R)
                   ->_R Sym (Language.Python.Common.AST.N:Module[0] <annot1>_R)
                   ->_R <GHC.Types.Bool>_R)
                  (GHC.Classes.$fEq[]_$c/=
                     @ (Language.Python.Common.AST.Statement annot1)
                     (Language.Python.Common.AST.$fEqStatement @ annot1 v))
                    `cast`
                  (Sym (Language.Python.Common.AST.N:Module[0] <annot1>_R)
                   ->_R Sym (Language.Python.Common.AST.N:Module[0] <annot1>_R)
                   ->_R <GHC.Types.Bool>_R) -}
3e80c1212dbae482ce637a5dc72042ac
  $fEqOp ::
    GHC.Classes.Eq annot =>
    GHC.Classes.Eq (Language.Python.Common.AST.Op annot)
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(C(C1(U)),A)>m,
     Inline: CONLIKE,
     Unfolding: DFun: @ annot1 (v :: GHC.Classes.Eq annot1).
                  @ (Language.Python.Common.AST.Op annot1)
                  (Language.Python.Common.AST.$fEqOp_$c== @ annot1 v)
                  (Language.Python.Common.AST.$fEqOp_$c/= @ annot1 v) -}
3e80c1212dbae482ce637a5dc72042ac
  $fEqOp_$c/= ::
    GHC.Classes.Eq annot =>
    Language.Python.Common.AST.Op annot
    -> Language.Python.Common.AST.Op annot -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><S,1*U><S,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ annot1
                   ($dEq :: GHC.Classes.Eq annot1)
                   (a :: Language.Python.Common.AST.Op annot1)
                   (b :: Language.Python.Common.AST.Op annot1) ->
                 case Language.Python.Common.AST.$fEqOp_$c==
                        @ annot1
                        $dEq
                        a
                        b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
3e80c1212dbae482ce637a5dc72042ac
  $fEqOp_$c== ::
    GHC.Classes.Eq annot =>
    Language.Python.Common.AST.Op annot
    -> Language.Python.Common.AST.Op annot -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><S,1*U><S,1*U> -}
77aacf63ade2d28a10031365ad257b9f
  $fEqParamTuple ::
    GHC.Classes.Eq annot =>
    GHC.Classes.Eq (Language.Python.Common.AST.ParamTuple annot)
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(C(C1(U)),A)>m,
     Inline: CONLIKE,
     Unfolding: DFun: @ annot1 (v :: GHC.Classes.Eq annot1).
                  @ (Language.Python.Common.AST.ParamTuple annot1)
                  (Language.Python.Common.AST.$fEqParamTuple_$c== @ annot1 v)
                  (Language.Python.Common.AST.$fEqParamTuple_$c/= @ annot1 v) -}
77aacf63ade2d28a10031365ad257b9f
  $fEqParamTuple_$c/= ::
    GHC.Classes.Eq annot =>
    Language.Python.Common.AST.ParamTuple annot
    -> Language.Python.Common.AST.ParamTuple annot -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U(C(C1(U)),A)><L,U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ annot1
                   ($dEq :: GHC.Classes.Eq annot1)
                   (a :: Language.Python.Common.AST.ParamTuple annot1)
                   (b :: Language.Python.Common.AST.ParamTuple annot1) ->
                 case Language.Python.Common.AST.$fEqParamTuple_$c==
                        @ annot1
                        $dEq
                        a
                        b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
77aacf63ade2d28a10031365ad257b9f
  $fEqParamTuple_$c== ::
    GHC.Classes.Eq annot =>
    Language.Python.Common.AST.ParamTuple annot
    -> Language.Python.Common.AST.ParamTuple annot -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(C(C1(U)),A)> -}
94dde4ffceed0a2a13daed020b6576e1
  $fEqParameter ::
    GHC.Classes.Eq annot =>
    GHC.Classes.Eq (Language.Python.Common.AST.Parameter annot)
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(C(C1(U)),A)>m,
     Inline: CONLIKE,
     Unfolding: DFun: @ annot1 (v :: GHC.Classes.Eq annot1).
                  @ (Language.Python.Common.AST.Parameter annot1)
                  (Language.Python.Common.AST.$fEqParameter_$c== @ annot1 v)
                  (Language.Python.Common.AST.$fEqParameter_$c/= @ annot1 v) -}
94dde4ffceed0a2a13daed020b6576e1
  $fEqParameter_$c/= ::
    GHC.Classes.Eq annot =>
    Language.Python.Common.AST.Parameter annot
    -> Language.Python.Common.AST.Parameter annot -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A)><S,1*U><S,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ annot1
                   ($dEq :: GHC.Classes.Eq annot1)
                   (a :: Language.Python.Common.AST.Parameter annot1)
                   (b :: Language.Python.Common.AST.Parameter annot1) ->
                 case Language.Python.Common.AST.$fEqParameter_$c==
                        @ annot1
                        $dEq
                        a
                        b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
94dde4ffceed0a2a13daed020b6576e1
  $fEqParameter_$c== ::
    GHC.Classes.Eq annot =>
    Language.Python.Common.AST.Parameter annot
    -> Language.Python.Common.AST.Parameter annot -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A)><S,1*U><S,1*U> -}
40b646133484efeda0b61064c970b83c
  $fEqRaiseExpr ::
    GHC.Classes.Eq annot =>
    GHC.Classes.Eq (Language.Python.Common.AST.RaiseExpr annot)
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(C(C1(U)),A)>m,
     Inline: CONLIKE,
     Unfolding: DFun: @ annot1 (v :: GHC.Classes.Eq annot1).
                  @ (Language.Python.Common.AST.RaiseExpr annot1)
                  (Language.Python.Common.AST.$fEqRaiseExpr_$c== @ annot1 v)
                  (Language.Python.Common.AST.$fEqRaiseExpr_$c/= @ annot1 v) -}
40b646133484efeda0b61064c970b83c
  $fEqRaiseExpr_$c/= ::
    GHC.Classes.Eq annot =>
    Language.Python.Common.AST.RaiseExpr annot
    -> Language.Python.Common.AST.RaiseExpr annot -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A)><S,1*U><S,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ annot1
                   ($dEq :: GHC.Classes.Eq annot1)
                   (a :: Language.Python.Common.AST.RaiseExpr annot1)
                   (b :: Language.Python.Common.AST.RaiseExpr annot1) ->
                 case Language.Python.Common.AST.$fEqRaiseExpr_$c==
                        @ annot1
                        $dEq
                        a
                        b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
40b646133484efeda0b61064c970b83c
  $fEqRaiseExpr_$c== ::
    GHC.Classes.Eq annot =>
    Language.Python.Common.AST.RaiseExpr annot
    -> Language.Python.Common.AST.RaiseExpr annot -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A)><S,1*U><S,1*U>,
     Unfolding: (\ @ annot1
                   ($dEq :: GHC.Classes.Eq annot1)
                   (ds :: Language.Python.Common.AST.RaiseExpr annot1)
                   (ds1 :: Language.Python.Common.AST.RaiseExpr annot1) ->
                 case ds of wild {
                   Language.Python.Common.AST.RaiseV3 a1
                   -> case ds1 of wild1 {
                        Language.Python.Common.AST.RaiseV3 b1
                        -> case a1 of wild2 {
                             GHC.Base.Nothing
                             -> case b1 of wild3 {
                                  GHC.Base.Nothing -> GHC.Types.True
                                  GHC.Base.Just ipv -> GHC.Types.False }
                             GHC.Base.Just a2
                             -> case b1 of wild3 {
                                  GHC.Base.Nothing -> GHC.Types.False
                                  GHC.Base.Just b4
                                  -> case a2 of ww { (,) ww1 ww2 ->
                                     case b4 of ww3 { (,) ww4 ww5 ->
                                     case Language.Python.Common.AST.$fEqArgument_$c==1
                                            @ annot1
                                            $dEq
                                            ww1
                                            ww4 of wild4 {
                                       GHC.Types.False -> GHC.Types.False
                                       GHC.Types.True
                                       -> case ww2 of wild5 {
                                            GHC.Base.Nothing
                                            -> case ww5 of wild6 {
                                                 GHC.Base.Nothing -> GHC.Types.True
                                                 GHC.Base.Just ipv -> GHC.Types.False }
                                            GHC.Base.Just a3
                                            -> case ww5 of wild6 {
                                                 GHC.Base.Nothing -> GHC.Types.False
                                                 GHC.Base.Just b5
                                                 -> Language.Python.Common.AST.$fEqArgument_$c==1
                                                      @ annot1
                                                      $dEq
                                                      a3
                                                      b5 } } } } } } }
                        Language.Python.Common.AST.RaiseV2 ipv -> GHC.Types.False }
                   Language.Python.Common.AST.RaiseV2 a1
                   -> case ds1 of wild1 {
                        Language.Python.Common.AST.RaiseV3 ipv -> GHC.Types.False
                        Language.Python.Common.AST.RaiseV2 b1
                        -> case a1 of wild2 {
                             GHC.Base.Nothing
                             -> case b1 of wild3 {
                                  GHC.Base.Nothing -> GHC.Types.True
                                  GHC.Base.Just ipv -> GHC.Types.False }
                             GHC.Base.Just a2
                             -> case b1 of wild3 {
                                  GHC.Base.Nothing -> GHC.Types.False
                                  GHC.Base.Just b4
                                  -> case a2 of ww { (,) ww1 ww2 ->
                                     case b4 of ww3 { (,) ww4 ww5 ->
                                     case Language.Python.Common.AST.$fEqArgument_$c==1
                                            @ annot1
                                            $dEq
                                            ww1
                                            ww4 of wild4 {
                                       GHC.Types.False -> GHC.Types.False
                                       GHC.Types.True
                                       -> case ww2 of wild5 {
                                            GHC.Base.Nothing
                                            -> case ww5 of wild6 {
                                                 GHC.Base.Nothing -> GHC.Types.True
                                                 GHC.Base.Just ipv -> GHC.Types.False }
                                            GHC.Base.Just a3
                                            -> case ww5 of wild6 {
                                                 GHC.Base.Nothing -> GHC.Types.False
                                                 GHC.Base.Just b5
                                                 -> case a3 of ww7 { (,) ww8 ww9 ->
                                                    case b5 of ww10 { (,) ww11 ww12 ->
                                                    case Language.Python.Common.AST.$fEqArgument_$c==1
                                                           @ annot1
                                                           $dEq
                                                           ww8
                                                           ww11 of wild7 {
                                                      GHC.Types.False -> GHC.Types.False
                                                      GHC.Types.True
                                                      -> case ww9 of wild8 {
                                                           GHC.Base.Nothing
                                                           -> case ww12 of wild9 {
                                                                GHC.Base.Nothing -> GHC.Types.True
                                                                GHC.Base.Just ipv
                                                                -> GHC.Types.False }
                                                           GHC.Base.Just a4
                                                           -> case ww12 of wild9 {
                                                                GHC.Base.Nothing -> GHC.Types.False
                                                                GHC.Base.Just b6
                                                                -> Language.Python.Common.AST.$fEqArgument_$c==1
                                                                     @ annot1
                                                                     $dEq
                                                                     a4
                                                                     b6 } } } } } } } } } } } } } }) -}
94dde4ffceed0a2a13daed020b6576e1
  $fEqSlice ::
    GHC.Classes.Eq annot =>
    GHC.Classes.Eq (Language.Python.Common.AST.Slice annot)
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(C(C1(U)),A)>m,
     Inline: CONLIKE,
     Unfolding: DFun: @ annot1 (v :: GHC.Classes.Eq annot1).
                  @ (Language.Python.Common.AST.Slice annot1)
                  (Language.Python.Common.AST.$fEqSlice_$c== @ annot1 v)
                  (Language.Python.Common.AST.$fEqSlice_$c/= @ annot1 v) -}
94dde4ffceed0a2a13daed020b6576e1
  $fEqSlice_$c/= ::
    GHC.Classes.Eq annot =>
    Language.Python.Common.AST.Slice annot
    -> Language.Python.Common.AST.Slice annot -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A)><S,1*U><S,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ annot1
                   ($dEq :: GHC.Classes.Eq annot1)
                   (a :: Language.Python.Common.AST.Slice annot1)
                   (b :: Language.Python.Common.AST.Slice annot1) ->
                 case Language.Python.Common.AST.$fEqSlice_$c==
                        @ annot1
                        $dEq
                        a
                        b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
94dde4ffceed0a2a13daed020b6576e1
  $fEqSlice_$c== ::
    GHC.Classes.Eq annot =>
    Language.Python.Common.AST.Slice annot
    -> Language.Python.Common.AST.Slice annot -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A)><S,1*U><S,1*U>,
     Unfolding: (\ @ annot1
                   ($dEq :: GHC.Classes.Eq annot1)
                   (ds :: Language.Python.Common.AST.Slice annot1)
                   (ds1 :: Language.Python.Common.AST.Slice annot1) ->
                 case ds of wild {
                   Language.Python.Common.AST.SliceProper a1 a2 a3 a4
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.Python.Common.AST.SliceProper b1 b4 b3 b5
                        -> let {
                             $j :: GHC.Types.Bool <join 0>
                             = let {
                                 $j1 :: GHC.Types.Bool <join 0>
                                 = case a3 of wild2 {
                                     GHC.Base.Nothing
                                     -> case b3 of wild3 {
                                          GHC.Base.Nothing -> GHC.Classes.== @ annot1 $dEq a4 b5
                                          GHC.Base.Just ipv -> GHC.Types.False }
                                     GHC.Base.Just a7
                                     -> case b3 of wild3 {
                                          GHC.Base.Nothing -> GHC.Types.False
                                          GHC.Base.Just b6
                                          -> case a7 of wild4 {
                                               GHC.Base.Nothing
                                               -> case b6 of wild5 {
                                                    GHC.Base.Nothing
                                                    -> GHC.Classes.== @ annot1 $dEq a4 b5
                                                    GHC.Base.Just ipv -> GHC.Types.False }
                                               GHC.Base.Just a8
                                               -> case b6 of wild5 {
                                                    GHC.Base.Nothing -> GHC.Types.False
                                                    GHC.Base.Just b7
                                                    -> case Language.Python.Common.AST.$fEqArgument_$c==1
                                                              @ annot1
                                                              $dEq
                                                              a8
                                                              b7 of wild6 {
                                                         GHC.Types.False -> GHC.Types.False
                                                         GHC.Types.True
                                                         -> GHC.Classes.==
                                                              @ annot1
                                                              $dEq
                                                              a4
                                                              b5 } } } } }
                               } in
                               case a2 of wild2 {
                                 GHC.Base.Nothing
                                 -> case b4 of wild3 {
                                      GHC.Base.Nothing -> $j1 GHC.Base.Just ipv -> GHC.Types.False }
                                 GHC.Base.Just a7
                                 -> case b4 of wild3 {
                                      GHC.Base.Nothing -> GHC.Types.False
                                      GHC.Base.Just b6
                                      -> case Language.Python.Common.AST.$fEqArgument_$c==1
                                                @ annot1
                                                $dEq
                                                a7
                                                b6 of wild4 {
                                           GHC.Types.False -> GHC.Types.False
                                           GHC.Types.True -> $j1 } } }
                           } in
                           case a1 of wild2 {
                             GHC.Base.Nothing
                             -> case b1 of wild3 {
                                  GHC.Base.Nothing -> $j GHC.Base.Just ipv -> GHC.Types.False }
                             GHC.Base.Just a7
                             -> case b1 of wild3 {
                                  GHC.Base.Nothing -> GHC.Types.False
                                  GHC.Base.Just b6
                                  -> case Language.Python.Common.AST.$fEqArgument_$c==1
                                            @ annot1
                                            $dEq
                                            a7
                                            b6 of wild4 {
                                       GHC.Types.False -> GHC.Types.False
                                       GHC.Types.True -> $j } } } }
                   Language.Python.Common.AST.SliceExpr a1 a2
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.Python.Common.AST.SliceExpr b1 b4
                        -> case Language.Python.Common.AST.$fEqArgument_$c==1
                                  @ annot1
                                  $dEq
                                  a1
                                  b1 of wild2 {
                             GHC.Types.False -> GHC.Types.False
                             GHC.Types.True -> GHC.Classes.== @ annot1 $dEq a2 b4 } }
                   Language.Python.Common.AST.SliceEllipsis a1
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.Python.Common.AST.SliceEllipsis b1
                        -> GHC.Classes.== @ annot1 $dEq a1 b1 } }) -}
cf431e64d114ff48b3a5eb8fda819c32
  $fEqStatement ::
    GHC.Classes.Eq annot =>
    GHC.Classes.Eq (Language.Python.Common.AST.Statement annot)
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(C(C1(U)),A)>m,
     Inline: CONLIKE,
     Unfolding: DFun: @ annot1 (v :: GHC.Classes.Eq annot1).
                  @ (Language.Python.Common.AST.Statement annot1)
                  (Language.Python.Common.AST.$fEqStatement_$c== @ annot1 v)
                  (Language.Python.Common.AST.$fEqStatement_$c/= @ annot1 v) -}
cf431e64d114ff48b3a5eb8fda819c32
  $fEqStatement_$c/= ::
    GHC.Classes.Eq annot =>
    Language.Python.Common.AST.Statement annot
    -> Language.Python.Common.AST.Statement annot -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U(C(C1(U)),A)><L,U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ annot1
                   ($dEq :: GHC.Classes.Eq annot1)
                   (a :: Language.Python.Common.AST.Statement annot1)
                   (b :: Language.Python.Common.AST.Statement annot1) ->
                 case Language.Python.Common.AST.$fEqStatement_$c==
                        @ annot1
                        $dEq
                        a
                        b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
cf431e64d114ff48b3a5eb8fda819c32
  $fEqStatement_$c== ::
    GHC.Classes.Eq annot =>
    Language.Python.Common.AST.Statement annot
    -> Language.Python.Common.AST.Statement annot -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(C(C1(U)),A)> -}
94dde4ffceed0a2a13daed020b6576e1
  $fEqYieldArg ::
    GHC.Classes.Eq annot =>
    GHC.Classes.Eq (Language.Python.Common.AST.YieldArg annot)
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(C(C1(U)),A)>m,
     Inline: CONLIKE,
     Unfolding: DFun: @ annot1 (v :: GHC.Classes.Eq annot1).
                  @ (Language.Python.Common.AST.YieldArg annot1)
                  (Language.Python.Common.AST.$fEqYieldArg_$c== @ annot1 v)
                  (Language.Python.Common.AST.$fEqYieldArg_$c/= @ annot1 v) -}
94dde4ffceed0a2a13daed020b6576e1
  $fEqYieldArg_$c/= ::
    GHC.Classes.Eq annot =>
    Language.Python.Common.AST.YieldArg annot
    -> Language.Python.Common.AST.YieldArg annot -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A)><S,1*U><S,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ annot1
                   ($dEq :: GHC.Classes.Eq annot1)
                   (a :: Language.Python.Common.AST.YieldArg annot1)
                   (b :: Language.Python.Common.AST.YieldArg annot1) ->
                 case Language.Python.Common.AST.$fEqYieldArg_$c==
                        @ annot1
                        $dEq
                        a
                        b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
94dde4ffceed0a2a13daed020b6576e1
  $fEqYieldArg_$c== ::
    GHC.Classes.Eq annot =>
    Language.Python.Common.AST.YieldArg annot
    -> Language.Python.Common.AST.YieldArg annot -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A)><S,1*U><S,1*U>,
     Unfolding: (\ @ annot1
                   ($dEq :: GHC.Classes.Eq annot1)
                   (ds :: Language.Python.Common.AST.YieldArg annot1)
                   (ds1 :: Language.Python.Common.AST.YieldArg annot1) ->
                 case ds of wild {
                   Language.Python.Common.AST.YieldFrom a1 a2
                   -> case ds1 of wild1 {
                        Language.Python.Common.AST.YieldFrom b1 b4
                        -> case Language.Python.Common.AST.$fEqArgument_$c==1
                                  @ annot1
                                  $dEq
                                  a1
                                  b1 of wild2 {
                             GHC.Types.False -> GHC.Types.False
                             GHC.Types.True -> GHC.Classes.== @ annot1 $dEq a2 b4 }
                        Language.Python.Common.AST.YieldExpr ipv -> GHC.Types.False }
                   Language.Python.Common.AST.YieldExpr a1
                   -> case ds1 of wild1 {
                        Language.Python.Common.AST.YieldFrom ipv ipv1 -> GHC.Types.False
                        Language.Python.Common.AST.YieldExpr b1
                        -> Language.Python.Common.AST.$fEqArgument_$c==1
                             @ annot1
                             $dEq
                             a1
                             b1 } }) -}
94dde4ffceed0a2a13daed020b6576e1
  $fFunctorArgument ::
    GHC.Base.Functor Language.Python.Common.AST.Argument
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.Python.Common.AST.Argument
                  Language.Python.Common.AST.$fFunctorArgument_$cfmap
                  Language.Python.Common.AST.$fFunctorArgument_$c<$ -}
94dde4ffceed0a2a13daed020b6576e1
  $fFunctorArgument_$c<$ ::
    a
    -> Language.Python.Common.AST.Argument b
    -> Language.Python.Common.AST.Argument a
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U>,
     Unfolding: (\ @ a
                   @ b
                   (z :: a)
                   (ds :: Language.Python.Common.AST.Argument b) ->
                 case ds of wild {
                   Language.Python.Common.AST.ArgExpr a1 a2
                   -> Language.Python.Common.AST.ArgExpr
                        @ a
                        (Language.Python.Common.AST.$fFunctorArgument_$c<$1 @ a @ b z a1)
                        z
                   Language.Python.Common.AST.ArgVarArgsPos a1 a2
                   -> Language.Python.Common.AST.ArgVarArgsPos
                        @ a
                        (Language.Python.Common.AST.$fFunctorArgument_$c<$1 @ a @ b z a1)
                        z
                   Language.Python.Common.AST.ArgVarArgsKeyword a1 a2
                   -> Language.Python.Common.AST.ArgVarArgsKeyword
                        @ a
                        (Language.Python.Common.AST.$fFunctorArgument_$c<$1 @ a @ b z a1)
                        z
                   Language.Python.Common.AST.ArgKeyword a1 a2 a3
                   -> Language.Python.Common.AST.ArgKeyword
                        @ a
                        (case a1 of wild1 { Language.Python.Common.AST.Ident a4 a5 ->
                         Language.Python.Common.AST.Ident @ a a4 z })
                        (Language.Python.Common.AST.$fFunctorArgument_$c<$1 @ a @ b z a2)
                        z }) -}
94dde4ffceed0a2a13daed020b6576e1
  $fFunctorArgument_$c<$1 ::
    a
    -> Language.Python.Common.AST.Expr b
    -> Language.Python.Common.AST.Expr a
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U> -}
94dde4ffceed0a2a13daed020b6576e1
  $fFunctorArgument_$cfmap ::
    (a -> b)
    -> Language.Python.Common.AST.Argument a
    -> Language.Python.Common.AST.Argument b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,C(U)><S,1*U>,
     Unfolding: (\ @ a
                   @ b
                   (f12 :: a -> b)
                   (ds :: Language.Python.Common.AST.Argument a) ->
                 case ds of wild {
                   Language.Python.Common.AST.ArgExpr a1 a2
                   -> Language.Python.Common.AST.ArgExpr
                        @ b
                        (Language.Python.Common.AST.$fFunctorArgument_$cfmap2
                           @ a
                           @ b
                           f12
                           a1)
                        (f12 a2)
                   Language.Python.Common.AST.ArgVarArgsPos a1 a2
                   -> Language.Python.Common.AST.ArgVarArgsPos
                        @ b
                        (Language.Python.Common.AST.$fFunctorArgument_$cfmap2
                           @ a
                           @ b
                           f12
                           a1)
                        (f12 a2)
                   Language.Python.Common.AST.ArgVarArgsKeyword a1 a2
                   -> Language.Python.Common.AST.ArgVarArgsKeyword
                        @ b
                        (Language.Python.Common.AST.$fFunctorArgument_$cfmap2
                           @ a
                           @ b
                           f12
                           a1)
                        (f12 a2)
                   Language.Python.Common.AST.ArgKeyword a1 a2 a3
                   -> Language.Python.Common.AST.ArgKeyword
                        @ b
                        (Language.Python.Common.AST.$fFunctorArgument_$cfmap1
                           @ a
                           @ b
                           f12
                           a1)
                        (Language.Python.Common.AST.$fFunctorArgument_$cfmap2
                           @ a
                           @ b
                           f12
                           a2)
                        (f12 a3) }) -}
6aab1d6f902c3e0dbc09c99c8605e197
  $fFunctorArgument_$cfmap1 ::
    (a -> b)
    -> Language.Python.Common.AST.Ident a
    -> Language.Python.Common.AST.Ident b
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,1*C1(U)><S(SL),1*U(U,U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   @ b
                   (f12 :: a -> b)
                   (ds :: Language.Python.Common.AST.Ident a) ->
                 case ds of wild { Language.Python.Common.AST.Ident a1 a2 ->
                 Language.Python.Common.AST.Ident @ b a1 (f12 a2) }) -}
94dde4ffceed0a2a13daed020b6576e1
  $fFunctorArgument_$cfmap2 ::
    (a -> b)
    -> Language.Python.Common.AST.Expr a
    -> Language.Python.Common.AST.Expr b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,C(U)><S,1*U> -}
f55a81e56367dca5b5d86dd1548fd97f
  $fFunctorAssignOp ::
    GHC.Base.Functor Language.Python.Common.AST.AssignOp
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.Python.Common.AST.AssignOp
                  Language.Python.Common.AST.$fFunctorAssignOp_$cfmap
                  Language.Python.Common.AST.$fFunctorAssignOp_$c<$ -}
f55a81e56367dca5b5d86dd1548fd97f
  $fFunctorAssignOp_$c<$ ::
    a
    -> Language.Python.Common.AST.AssignOp b
    -> Language.Python.Common.AST.AssignOp a
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U>,
     Unfolding: (\ @ a
                   @ b
                   (z :: a)
                   (ds :: Language.Python.Common.AST.AssignOp b) ->
                 case ds of wild {
                   Language.Python.Common.AST.PlusAssign a1
                   -> Language.Python.Common.AST.PlusAssign @ a z
                   Language.Python.Common.AST.MinusAssign a1
                   -> Language.Python.Common.AST.MinusAssign @ a z
                   Language.Python.Common.AST.MultAssign a1
                   -> Language.Python.Common.AST.MultAssign @ a z
                   Language.Python.Common.AST.DivAssign a1
                   -> Language.Python.Common.AST.DivAssign @ a z
                   Language.Python.Common.AST.ModAssign a1
                   -> Language.Python.Common.AST.ModAssign @ a z
                   Language.Python.Common.AST.PowAssign a1
                   -> Language.Python.Common.AST.PowAssign @ a z
                   Language.Python.Common.AST.BinAndAssign a1
                   -> Language.Python.Common.AST.BinAndAssign @ a z
                   Language.Python.Common.AST.BinOrAssign a1
                   -> Language.Python.Common.AST.BinOrAssign @ a z
                   Language.Python.Common.AST.BinXorAssign a1
                   -> Language.Python.Common.AST.BinXorAssign @ a z
                   Language.Python.Common.AST.LeftShiftAssign a1
                   -> Language.Python.Common.AST.LeftShiftAssign @ a z
                   Language.Python.Common.AST.RightShiftAssign a1
                   -> Language.Python.Common.AST.RightShiftAssign @ a z
                   Language.Python.Common.AST.FloorDivAssign a1
                   -> Language.Python.Common.AST.FloorDivAssign @ a z
                   Language.Python.Common.AST.MatrixMultAssign a1
                   -> Language.Python.Common.AST.MatrixMultAssign @ a z }) -}
f55a81e56367dca5b5d86dd1548fd97f
  $fFunctorAssignOp_$cfmap ::
    (a -> b)
    -> Language.Python.Common.AST.AssignOp a
    -> Language.Python.Common.AST.AssignOp b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(U)><S,1*U>,
     Unfolding: (\ @ a
                   @ b
                   (f12 :: a -> b)
                   (ds :: Language.Python.Common.AST.AssignOp a) ->
                 case ds of wild {
                   Language.Python.Common.AST.PlusAssign a1
                   -> Language.Python.Common.AST.PlusAssign @ b (f12 a1)
                   Language.Python.Common.AST.MinusAssign a1
                   -> Language.Python.Common.AST.MinusAssign @ b (f12 a1)
                   Language.Python.Common.AST.MultAssign a1
                   -> Language.Python.Common.AST.MultAssign @ b (f12 a1)
                   Language.Python.Common.AST.DivAssign a1
                   -> Language.Python.Common.AST.DivAssign @ b (f12 a1)
                   Language.Python.Common.AST.ModAssign a1
                   -> Language.Python.Common.AST.ModAssign @ b (f12 a1)
                   Language.Python.Common.AST.PowAssign a1
                   -> Language.Python.Common.AST.PowAssign @ b (f12 a1)
                   Language.Python.Common.AST.BinAndAssign a1
                   -> Language.Python.Common.AST.BinAndAssign @ b (f12 a1)
                   Language.Python.Common.AST.BinOrAssign a1
                   -> Language.Python.Common.AST.BinOrAssign @ b (f12 a1)
                   Language.Python.Common.AST.BinXorAssign a1
                   -> Language.Python.Common.AST.BinXorAssign @ b (f12 a1)
                   Language.Python.Common.AST.LeftShiftAssign a1
                   -> Language.Python.Common.AST.LeftShiftAssign @ b (f12 a1)
                   Language.Python.Common.AST.RightShiftAssign a1
                   -> Language.Python.Common.AST.RightShiftAssign @ b (f12 a1)
                   Language.Python.Common.AST.FloorDivAssign a1
                   -> Language.Python.Common.AST.FloorDivAssign @ b (f12 a1)
                   Language.Python.Common.AST.MatrixMultAssign a1
                   -> Language.Python.Common.AST.MatrixMultAssign @ b (f12 a1) }) -}
94dde4ffceed0a2a13daed020b6576e1
  $fFunctorCompFor ::
    GHC.Base.Functor Language.Python.Common.AST.CompFor
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.Python.Common.AST.CompFor
                  Language.Python.Common.AST.$fFunctorCompFor_$cfmap
                  Language.Python.Common.AST.$fFunctorCompFor_$c<$ -}
94dde4ffceed0a2a13daed020b6576e1
  $fFunctorCompFor_$c<$ ::
    a
    -> Language.Python.Common.AST.CompFor b
    -> Language.Python.Common.AST.CompFor a
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U><S,1*U(U,1*U,1*U,1*U,A)>m, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   @ b
                   (w :: a)
                   (w249 :: Language.Python.Common.AST.CompFor b) ->
                 case w249 of ww { Language.Python.Common.AST.CompFor ww1 ww2 ww3 ww4 ww5 ->
                 Language.Python.Common.AST.CompFor
                   @ a
                   ww1
                   (GHC.Base.map
                      @ (Language.Python.Common.AST.Expr b)
                      @ (Language.Python.Common.AST.Expr a)
                      (Language.Python.Common.AST.$fFunctorArgument_$c<$1 @ a @ b w)
                      ww2)
                   (Language.Python.Common.AST.$fFunctorArgument_$c<$1 @ a @ b w ww3)
                   (case ww4 of wild {
                      GHC.Base.Nothing
                      -> GHC.Base.Nothing @ (Language.Python.Common.AST.CompIter a)
                      GHC.Base.Just a1
                      -> GHC.Base.Just
                           @ (Language.Python.Common.AST.CompIter a)
                           (Language.Python.Common.AST.$fFunctorCompFor_$c<$1 @ a @ b w a1) })
                   w }) -}
94dde4ffceed0a2a13daed020b6576e1
  $fFunctorCompFor_$c<$1 ::
    a
    -> Language.Python.Common.AST.CompIter b
    -> Language.Python.Common.AST.CompIter a
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U> -}
94dde4ffceed0a2a13daed020b6576e1
  $fFunctorCompFor_$cfmap ::
    (a -> b)
    -> Language.Python.Common.AST.CompFor a
    -> Language.Python.Common.AST.CompFor b
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,C(U)><S,1*U(U,1*U,1*U,1*U,U)>m, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   @ b
                   (w :: a -> b)
                   (w249 :: Language.Python.Common.AST.CompFor a) ->
                 case w249 of ww { Language.Python.Common.AST.CompFor ww1 ww2 ww3 ww4 ww5 ->
                 Language.Python.Common.AST.CompFor
                   @ b
                   ww1
                   (GHC.Base.map
                      @ (Language.Python.Common.AST.Expr a)
                      @ (Language.Python.Common.AST.Expr b)
                      (Language.Python.Common.AST.$fFunctorArgument_$cfmap2 @ a @ b w)
                      ww2)
                   (Language.Python.Common.AST.$fFunctorArgument_$cfmap2
                      @ a
                      @ b
                      w
                      ww3)
                   (case ww4 of wild {
                      GHC.Base.Nothing
                      -> GHC.Base.Nothing @ (Language.Python.Common.AST.CompIter b)
                      GHC.Base.Just a1
                      -> GHC.Base.Just
                           @ (Language.Python.Common.AST.CompIter b)
                           (Language.Python.Common.AST.$fFunctorCompFor_$cfmap1
                              @ a
                              @ b
                              w
                              a1) })
                   (w ww5) }) -}
94dde4ffceed0a2a13daed020b6576e1
  $fFunctorCompFor_$cfmap1 ::
    (a -> b)
    -> Language.Python.Common.AST.CompIter a
    -> Language.Python.Common.AST.CompIter b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,C(U)><S,1*U> -}
94dde4ffceed0a2a13daed020b6576e1
  $fFunctorCompIf ::
    GHC.Base.Functor Language.Python.Common.AST.CompIf
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.Python.Common.AST.CompIf
                  Language.Python.Common.AST.$fFunctorCompIf_$cfmap
                  Language.Python.Common.AST.$fFunctorCompIf_$c<$ -}
94dde4ffceed0a2a13daed020b6576e1
  $fFunctorCompIf_$c<$ ::
    a
    -> Language.Python.Common.AST.CompIf b
    -> Language.Python.Common.AST.CompIf a
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U(1*U,1*U,A)>m,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   @ b
                   (w :: a)
                   (w249 :: Language.Python.Common.AST.CompIf b) ->
                 case w249 of ww { Language.Python.Common.AST.CompIf ww1 ww2 ww3 ->
                 Language.Python.Common.AST.CompIf
                   @ a
                   (Language.Python.Common.AST.$fFunctorArgument_$c<$1 @ a @ b w ww1)
                   (case ww2 of wild {
                      GHC.Base.Nothing
                      -> GHC.Base.Nothing @ (Language.Python.Common.AST.CompIter a)
                      GHC.Base.Just a1
                      -> GHC.Base.Just
                           @ (Language.Python.Common.AST.CompIter a)
                           (Language.Python.Common.AST.$fFunctorCompFor_$c<$1 @ a @ b w a1) })
                   w }) -}
94dde4ffceed0a2a13daed020b6576e1
  $fFunctorCompIf_$cfmap ::
    (a -> b)
    -> Language.Python.Common.AST.CompIf a
    -> Language.Python.Common.AST.CompIf b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,C(U)><S,1*U(1*U,1*U,U)>m,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   @ b
                   (w :: a -> b)
                   (w249 :: Language.Python.Common.AST.CompIf a) ->
                 case w249 of ww { Language.Python.Common.AST.CompIf ww1 ww2 ww3 ->
                 Language.Python.Common.AST.CompIf
                   @ b
                   (Language.Python.Common.AST.$fFunctorArgument_$cfmap2
                      @ a
                      @ b
                      w
                      ww1)
                   (case ww2 of wild {
                      GHC.Base.Nothing
                      -> GHC.Base.Nothing @ (Language.Python.Common.AST.CompIter b)
                      GHC.Base.Just a1
                      -> GHC.Base.Just
                           @ (Language.Python.Common.AST.CompIter b)
                           (Language.Python.Common.AST.$fFunctorCompFor_$cfmap1
                              @ a
                              @ b
                              w
                              a1) })
                   (w ww3) }) -}
94dde4ffceed0a2a13daed020b6576e1
  $fFunctorCompIter ::
    GHC.Base.Functor Language.Python.Common.AST.CompIter
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.Python.Common.AST.CompIter
                  Language.Python.Common.AST.$fFunctorCompFor_$cfmap1
                  Language.Python.Common.AST.$fFunctorCompFor_$c<$1 -}
94dde4ffceed0a2a13daed020b6576e1
  $fFunctorComprehension ::
    GHC.Base.Functor Language.Python.Common.AST.Comprehension
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.Python.Common.AST.Comprehension
                  Language.Python.Common.AST.$fFunctorComprehension_$cfmap
                  Language.Python.Common.AST.$fFunctorComprehension_$c<$ -}
94dde4ffceed0a2a13daed020b6576e1
  $fFunctorComprehensionExpr ::
    GHC.Base.Functor Language.Python.Common.AST.ComprehensionExpr
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.Python.Common.AST.ComprehensionExpr
                  Language.Python.Common.AST.$fFunctorComprehension_$cfmap1
                  Language.Python.Common.AST.$fFunctorComprehension_$c<$1 -}
94dde4ffceed0a2a13daed020b6576e1
  $fFunctorComprehension_$c<$ ::
    a
    -> Language.Python.Common.AST.Comprehension b
    -> Language.Python.Common.AST.Comprehension a
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U><S,1*U(1*U,1*U(U,1*U,1*U,1*U,A),A)>m,
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   @ b
                   (z :: a)
                   (ds :: Language.Python.Common.AST.Comprehension b) ->
                 case ds of wild { Language.Python.Common.AST.Comprehension a1 a2 a3 ->
                 Language.Python.Common.AST.Comprehension
                   @ a
                   (Language.Python.Common.AST.$fFunctorComprehension_$c<$1
                      @ a
                      @ b
                      z
                      a1)
                   (Language.Python.Common.AST.$fFunctorCompFor_$c<$ @ a @ b z a2)
                   z }) -}
94dde4ffceed0a2a13daed020b6576e1
  $fFunctorComprehension_$c<$1 ::
    a
    -> Language.Python.Common.AST.ComprehensionExpr b
    -> Language.Python.Common.AST.ComprehensionExpr a
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U>,
     Unfolding: (\ @ a
                   @ b
                   (z :: a)
                   (ds :: Language.Python.Common.AST.ComprehensionExpr b) ->
                 case ds of wild {
                   Language.Python.Common.AST.ComprehensionExpr a1
                   -> Language.Python.Common.AST.ComprehensionExpr
                        @ a
                        (Language.Python.Common.AST.$fFunctorArgument_$c<$1 @ a @ b z a1)
                   Language.Python.Common.AST.ComprehensionDict a1
                   -> Language.Python.Common.AST.ComprehensionDict
                        @ a
                        (Language.Python.Common.AST.$fFunctorComprehension_$c<$2
                           @ a
                           @ b
                           z
                           a1) }) -}
94dde4ffceed0a2a13daed020b6576e1
  $fFunctorComprehension_$c<$2 ::
    a
    -> Language.Python.Common.AST.DictKeyDatumList b
    -> Language.Python.Common.AST.DictKeyDatumList a
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U>,
     Unfolding: (\ @ a
                   @ b
                   (z :: a)
                   (ds :: Language.Python.Common.AST.DictKeyDatumList b) ->
                 case ds of wild {
                   Language.Python.Common.AST.DictMappingPair a1 a2
                   -> Language.Python.Common.AST.DictMappingPair
                        @ a
                        (Language.Python.Common.AST.$fFunctorArgument_$c<$1 @ a @ b z a1)
                        (Language.Python.Common.AST.$fFunctorArgument_$c<$1 @ a @ b z a2)
                   Language.Python.Common.AST.DictUnpacking a1
                   -> Language.Python.Common.AST.DictUnpacking
                        @ a
                        (Language.Python.Common.AST.$fFunctorArgument_$c<$1
                           @ a
                           @ b
                           z
                           a1) }) -}
94dde4ffceed0a2a13daed020b6576e1
  $fFunctorComprehension_$cfmap ::
    (a -> b)
    -> Language.Python.Common.AST.Comprehension a
    -> Language.Python.Common.AST.Comprehension b
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,C(U)><S,1*U(1*U,1*U(U,1*U,1*U,1*U,U),U)>m,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   @ b
                   (w :: a -> b)
                   (w249 :: Language.Python.Common.AST.Comprehension a) ->
                 case w249 of ww { Language.Python.Common.AST.Comprehension ww1 ww2 ww3 ->
                 Language.Python.Common.AST.Comprehension
                   @ b
                   (Language.Python.Common.AST.$fFunctorComprehension_$cfmap1
                      @ a
                      @ b
                      w
                      ww1)
                   (Language.Python.Common.AST.$fFunctorCompFor_$cfmap @ a @ b w ww2)
                   (w ww3) }) -}
94dde4ffceed0a2a13daed020b6576e1
  $fFunctorComprehension_$cfmap1 ::
    (a -> b)
    -> Language.Python.Common.AST.ComprehensionExpr a
    -> Language.Python.Common.AST.ComprehensionExpr b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,C(U)><S,1*U>,
     Unfolding: (\ @ a
                   @ b
                   (f12 :: a -> b)
                   (ds :: Language.Python.Common.AST.ComprehensionExpr a) ->
                 case ds of wild {
                   Language.Python.Common.AST.ComprehensionExpr a1
                   -> Language.Python.Common.AST.ComprehensionExpr
                        @ b
                        (Language.Python.Common.AST.$fFunctorArgument_$cfmap2
                           @ a
                           @ b
                           f12
                           a1)
                   Language.Python.Common.AST.ComprehensionDict a1
                   -> Language.Python.Common.AST.ComprehensionDict
                        @ b
                        (Language.Python.Common.AST.$fFunctorComprehension_$cfmap2
                           @ a
                           @ b
                           f12
                           a1) }) -}
94dde4ffceed0a2a13daed020b6576e1
  $fFunctorComprehension_$cfmap2 ::
    (a -> b)
    -> Language.Python.Common.AST.DictKeyDatumList a
    -> Language.Python.Common.AST.DictKeyDatumList b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,C(U)><S,1*U>,
     Unfolding: (\ @ a
                   @ b
                   (f12 :: a -> b)
                   (ds :: Language.Python.Common.AST.DictKeyDatumList a) ->
                 case ds of wild {
                   Language.Python.Common.AST.DictMappingPair a1 a2
                   -> Language.Python.Common.AST.DictMappingPair
                        @ b
                        (Language.Python.Common.AST.$fFunctorArgument_$cfmap2
                           @ a
                           @ b
                           f12
                           a1)
                        (Language.Python.Common.AST.$fFunctorArgument_$cfmap2
                           @ a
                           @ b
                           f12
                           a2)
                   Language.Python.Common.AST.DictUnpacking a1
                   -> Language.Python.Common.AST.DictUnpacking
                        @ b
                        (Language.Python.Common.AST.$fFunctorArgument_$cfmap2
                           @ a
                           @ b
                           f12
                           a1) }) -}
6e1ab2fb537d2522edcf9b3f967431ea
  $fFunctorDecorator ::
    GHC.Base.Functor Language.Python.Common.AST.Decorator
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.Python.Common.AST.Decorator
                  Language.Python.Common.AST.$fFunctorDecorator_$cfmap
                  Language.Python.Common.AST.$fFunctorDecorator_$c<$ -}
6e1ab2fb537d2522edcf9b3f967431ea
  $fFunctorDecorator_$c<$ ::
    a
    -> Language.Python.Common.AST.Decorator b
    -> Language.Python.Common.AST.Decorator a
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U(1*U,1*U,A)>m,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   @ b
                   (w :: a)
                   (w249 :: Language.Python.Common.AST.Decorator b) ->
                 case w249 of ww { Language.Python.Common.AST.Decorator ww1 ww2 ww3 ->
                 Language.Python.Common.AST.Decorator
                   @ a
                   (GHC.Base.map
                      @ (Language.Python.Common.AST.Ident b)
                      @ (Language.Python.Common.AST.Ident a)
                      (\ (ds :: Language.Python.Common.AST.Ident b) ->
                       case ds of wild { Language.Python.Common.AST.Ident a1 a2 ->
                       Language.Python.Common.AST.Ident @ a a1 w })
                      ww1)
                   (GHC.Base.map
                      @ (Language.Python.Common.AST.Argument b)
                      @ (Language.Python.Common.AST.Argument a)
                      (Language.Python.Common.AST.$fFunctorArgument_$c<$ @ a @ b w)
                      ww2)
                   w }) -}
6e1ab2fb537d2522edcf9b3f967431ea
  $fFunctorDecorator_$cfmap ::
    (a -> b)
    -> Language.Python.Common.AST.Decorator a
    -> Language.Python.Common.AST.Decorator b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,C(U)><S,1*U(1*U,1*U,U)>m,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   @ b
                   (w :: a -> b)
                   (w249 :: Language.Python.Common.AST.Decorator a) ->
                 case w249 of ww { Language.Python.Common.AST.Decorator ww1 ww2 ww3 ->
                 Language.Python.Common.AST.Decorator
                   @ b
                   (GHC.Base.map
                      @ (Language.Python.Common.AST.Ident a)
                      @ (Language.Python.Common.AST.Ident b)
                      (Language.Python.Common.AST.$fFunctorArgument_$cfmap1 @ a @ b w)
                      ww1)
                   (GHC.Base.map
                      @ (Language.Python.Common.AST.Argument a)
                      @ (Language.Python.Common.AST.Argument b)
                      (Language.Python.Common.AST.$fFunctorArgument_$cfmap @ a @ b w)
                      ww2)
                   (w ww3) }) -}
94dde4ffceed0a2a13daed020b6576e1
  $fFunctorDictKeyDatumList ::
    GHC.Base.Functor Language.Python.Common.AST.DictKeyDatumList
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.Python.Common.AST.DictKeyDatumList
                  Language.Python.Common.AST.$fFunctorComprehension_$cfmap2
                  Language.Python.Common.AST.$fFunctorComprehension_$c<$2 -}
54ad83b54b9c0dd8bf180da8d82f4195
  $fFunctorExceptClause ::
    GHC.Base.Functor Language.Python.Common.AST.ExceptClause
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.Python.Common.AST.ExceptClause
                  Language.Python.Common.AST.$fFunctorExceptClause_$cfmap
                  Language.Python.Common.AST.$fFunctorExceptClause_$c<$ -}
54ad83b54b9c0dd8bf180da8d82f4195
  $fFunctorExceptClause_$c<$ ::
    a
    -> Language.Python.Common.AST.ExceptClause b
    -> Language.Python.Common.AST.ExceptClause a
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U(1*U,A)>m,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   @ b
                   (w :: a)
                   (w249 :: Language.Python.Common.AST.ExceptClause b) ->
                 case w249 of ww { Language.Python.Common.AST.ExceptClause ww1 ww2 ->
                 case Language.Python.Common.AST.$w$c<$
                        @ a
                        @ b
                        w
                        ww1 of ww3 { (#,#) ww4 ww5 ->
                 Language.Python.Common.AST.ExceptClause @ a ww4 ww5 } }) -}
54ad83b54b9c0dd8bf180da8d82f4195
  $fFunctorExceptClause_$cfmap ::
    (a -> b)
    -> Language.Python.Common.AST.ExceptClause a
    -> Language.Python.Common.AST.ExceptClause b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,C(U)><S,1*U(1*U,U)>m,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   @ b
                   (w :: a -> b)
                   (w249 :: Language.Python.Common.AST.ExceptClause a) ->
                 case w249 of ww { Language.Python.Common.AST.ExceptClause ww1 ww2 ->
                 case Language.Python.Common.AST.$w$cfmap
                        @ a
                        @ b
                        w
                        ww1
                        ww2 of ww3 { (#,#) ww4 ww5 ->
                 Language.Python.Common.AST.ExceptClause @ b ww4 ww5 } }) -}
94dde4ffceed0a2a13daed020b6576e1
  $fFunctorExpr :: GHC.Base.Functor Language.Python.Common.AST.Expr
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.Python.Common.AST.Expr
                  Language.Python.Common.AST.$fFunctorArgument_$cfmap2
                  Language.Python.Common.AST.$fFunctorArgument_$c<$1 -}
73d811e85ab4018f7789c4c4421a9fde
  $fFunctorFromItem ::
    GHC.Base.Functor Language.Python.Common.AST.FromItem
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.Python.Common.AST.FromItem
                  Language.Python.Common.AST.$fFunctorFromItem_$cfmap
                  Language.Python.Common.AST.$fFunctorFromItem_$c<$ -}
73d811e85ab4018f7789c4c4421a9fde
  $fFunctorFromItem_$c<$ ::
    a
    -> Language.Python.Common.AST.FromItem b
    -> Language.Python.Common.AST.FromItem a
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U><S,1*U(1*U(U,A),1*U,A)>m,
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   @ b
                   (z :: a)
                   (ds :: Language.Python.Common.AST.FromItem b) ->
                 case ds of wild { Language.Python.Common.AST.FromItem a1 a2 a3 ->
                 Language.Python.Common.AST.FromItem
                   @ a
                   (case a1 of wild1 { Language.Python.Common.AST.Ident a4 a5 ->
                    Language.Python.Common.AST.Ident @ a a4 z })
                   (case a2 of wild1 {
                      GHC.Base.Nothing
                      -> GHC.Base.Nothing @ (Language.Python.Common.AST.Ident a)
                      GHC.Base.Just a4
                      -> GHC.Base.Just
                           @ (Language.Python.Common.AST.Ident a)
                           (case a4 of wild2 { Language.Python.Common.AST.Ident a5 a6 ->
                            Language.Python.Common.AST.Ident @ a a5 z }) })
                   z }) -}
73d811e85ab4018f7789c4c4421a9fde
  $fFunctorFromItem_$cfmap ::
    (a -> b)
    -> Language.Python.Common.AST.FromItem a
    -> Language.Python.Common.AST.FromItem b
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,C(U)><S,1*U(1*U(U,U),1*U,U)>m, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   @ b
                   (w :: a -> b)
                   (w249 :: Language.Python.Common.AST.FromItem a) ->
                 case w249 of ww { Language.Python.Common.AST.FromItem ww1 ww2 ww3 ->
                 Language.Python.Common.AST.FromItem
                   @ b
                   (Language.Python.Common.AST.$fFunctorArgument_$cfmap1
                      @ a
                      @ b
                      w
                      ww1)
                   (case ww2 of wild {
                      GHC.Base.Nothing
                      -> GHC.Base.Nothing @ (Language.Python.Common.AST.Ident b)
                      GHC.Base.Just a1
                      -> GHC.Base.Just
                           @ (Language.Python.Common.AST.Ident b)
                           (Language.Python.Common.AST.$fFunctorArgument_$cfmap1
                              @ a
                              @ b
                              w
                              a1) })
                   (w ww3) }) -}
e3cd8a0dc8214c8f5ef60ed5a9ac11ef
  $fFunctorFromItems ::
    GHC.Base.Functor Language.Python.Common.AST.FromItems
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.Python.Common.AST.FromItems
                  Language.Python.Common.AST.$fFunctorFromItems_$cfmap
                  Language.Python.Common.AST.$fFunctorFromItems_$c<$ -}
e3cd8a0dc8214c8f5ef60ed5a9ac11ef
  $fFunctorFromItems_$c<$ ::
    a
    -> Language.Python.Common.AST.FromItems b
    -> Language.Python.Common.AST.FromItems a
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   @ b
                   (z :: a)
                   (ds :: Language.Python.Common.AST.FromItems b) ->
                 case ds of wild {
                   Language.Python.Common.AST.ImportEverything a1
                   -> Language.Python.Common.AST.ImportEverything @ a z
                   Language.Python.Common.AST.FromItems a1 a2
                   -> Language.Python.Common.AST.FromItems
                        @ a
                        (GHC.Base.build
                           @ (Language.Python.Common.AST.FromItem a)
                           (\ @ b1
                              (c :: Language.Python.Common.AST.FromItem a -> b1 -> b1)[OneShot]
                              (n :: b1)[OneShot] ->
                            GHC.Base.foldr
                              @ (Language.Python.Common.AST.FromItem b)
                              @ b1
                              (GHC.Base.mapFB
                                 @ (Language.Python.Common.AST.FromItem a)
                                 @ b1
                                 @ (Language.Python.Common.AST.FromItem b)
                                 c
                                 (Language.Python.Common.AST.$fFunctorFromItem_$c<$ @ a @ b z))
                              n
                              a1))
                        z }) -}
e3cd8a0dc8214c8f5ef60ed5a9ac11ef
  $fFunctorFromItems_$cfmap ::
    (a -> b)
    -> Language.Python.Common.AST.FromItems a
    -> Language.Python.Common.AST.FromItems b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,C(U)><S,1*U>,
     Unfolding: (\ @ a
                   @ b
                   (f12 :: a -> b)
                   (ds :: Language.Python.Common.AST.FromItems a) ->
                 case ds of wild {
                   Language.Python.Common.AST.ImportEverything a1
                   -> Language.Python.Common.AST.ImportEverything @ b (f12 a1)
                   Language.Python.Common.AST.FromItems a1 a2
                   -> Language.Python.Common.AST.FromItems
                        @ b
                        (GHC.Base.map
                           @ (Language.Python.Common.AST.FromItem a)
                           @ (Language.Python.Common.AST.FromItem b)
                           (Language.Python.Common.AST.$fFunctorFromItem_$cfmap @ a @ b f12)
                           a1)
                        (f12 a2) }) -}
cf431e64d114ff48b3a5eb8fda819c32
  $fFunctorHandler ::
    GHC.Base.Functor Language.Python.Common.AST.Handler
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.Python.Common.AST.Handler
                  Language.Python.Common.AST.$fFunctorHandler_$cfmap
                  Language.Python.Common.AST.$fFunctorHandler_$c<$ -}
cf431e64d114ff48b3a5eb8fda819c32
  $fFunctorHandler_$c<$ ::
    a
    -> Language.Python.Common.AST.Handler b
    -> Language.Python.Common.AST.Handler a
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U><S,1*U(1*U(1*U,A),1*U,A)>m, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   @ b
                   (w :: a)
                   (w249 :: Language.Python.Common.AST.Handler b) ->
                 case w249 of ww { Language.Python.Common.AST.Handler ww1 ww2 ww3 ->
                 Language.Python.Common.AST.Handler
                   @ a
                   (Language.Python.Common.AST.$fFunctorExceptClause_$c<$
                      @ a
                      @ b
                      w
                      ww1)
                   (GHC.Base.map
                      @ (Language.Python.Common.AST.Statement b)
                      @ (Language.Python.Common.AST.Statement a)
                      (Language.Python.Common.AST.$fFunctorHandler_$c<$1 @ a @ b w)
                      ww2)
                   w }) -}
cf431e64d114ff48b3a5eb8fda819c32
  $fFunctorHandler_$c<$1 ::
    a
    -> Language.Python.Common.AST.Statement b
    -> Language.Python.Common.AST.Statement a
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U> -}
cf431e64d114ff48b3a5eb8fda819c32
  $fFunctorHandler_$cfmap ::
    (a -> b)
    -> Language.Python.Common.AST.Handler a
    -> Language.Python.Common.AST.Handler b
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,C(U)><S,1*U(1*U(1*U,U),1*U,U)>m, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   @ b
                   (w :: a -> b)
                   (w249 :: Language.Python.Common.AST.Handler a) ->
                 case w249 of ww { Language.Python.Common.AST.Handler ww1 ww2 ww3 ->
                 Language.Python.Common.AST.Handler
                   @ b
                   (Language.Python.Common.AST.$fFunctorExceptClause_$cfmap
                      @ a
                      @ b
                      w
                      ww1)
                   (GHC.Base.map
                      @ (Language.Python.Common.AST.Statement a)
                      @ (Language.Python.Common.AST.Statement b)
                      (Language.Python.Common.AST.$fFunctorHandler_$cfmap1 @ a @ b w)
                      ww2)
                   (w ww3) }) -}
cf431e64d114ff48b3a5eb8fda819c32
  $fFunctorHandler_$cfmap1 ::
    (a -> b)
    -> Language.Python.Common.AST.Statement a
    -> Language.Python.Common.AST.Statement b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,C(U)><S,1*U> -}
6aab1d6f902c3e0dbc09c99c8605e197
  $fFunctorIdent :: GHC.Base.Functor Language.Python.Common.AST.Ident
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.Python.Common.AST.Ident
                  Language.Python.Common.AST.$fFunctorArgument_$cfmap1
                  Language.Python.Common.AST.$fFunctorIdent_$c<$ -}
6aab1d6f902c3e0dbc09c99c8605e197
  $fFunctorIdent_$c<$ ::
    a
    -> Language.Python.Common.AST.Ident b
    -> Language.Python.Common.AST.Ident a
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S(SL),1*U(U,A)>m,
     Unfolding: InlineRule (2, True, False)
                (\ @ a @ b (z :: a) (ds :: Language.Python.Common.AST.Ident b) ->
                 case ds of wild { Language.Python.Common.AST.Ident a1 a2 ->
                 Language.Python.Common.AST.Ident @ a a1 z }) -}
283607fc44cb0ad26a76914defc72d00
  $fFunctorImportItem ::
    GHC.Base.Functor Language.Python.Common.AST.ImportItem
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.Python.Common.AST.ImportItem
                  Language.Python.Common.AST.$fFunctorImportItem_$cfmap
                  Language.Python.Common.AST.$fFunctorImportItem_$c<$ -}
283607fc44cb0ad26a76914defc72d00
  $fFunctorImportItem_$c<$ ::
    a
    -> Language.Python.Common.AST.ImportItem b
    -> Language.Python.Common.AST.ImportItem a
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U(1*U,1*U,A)>m,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   @ b
                   (w :: a)
                   (w249 :: Language.Python.Common.AST.ImportItem b) ->
                 case w249 of ww { Language.Python.Common.AST.ImportItem ww1 ww2 ww3 ->
                 Language.Python.Common.AST.ImportItem
                   @ a
                   (GHC.Base.map
                      @ (Language.Python.Common.AST.Ident b)
                      @ (Language.Python.Common.AST.Ident a)
                      (\ (ds :: Language.Python.Common.AST.Ident b) ->
                       case ds of wild { Language.Python.Common.AST.Ident a1 a2 ->
                       Language.Python.Common.AST.Ident @ a a1 w })
                      ww1)
                   (case ww2 of wild {
                      GHC.Base.Nothing
                      -> GHC.Base.Nothing @ (Language.Python.Common.AST.Ident a)
                      GHC.Base.Just a1
                      -> GHC.Base.Just
                           @ (Language.Python.Common.AST.Ident a)
                           (case a1 of wild1 { Language.Python.Common.AST.Ident a2 a3 ->
                            Language.Python.Common.AST.Ident @ a a2 w }) })
                   w }) -}
283607fc44cb0ad26a76914defc72d00
  $fFunctorImportItem_$cfmap ::
    (a -> b)
    -> Language.Python.Common.AST.ImportItem a
    -> Language.Python.Common.AST.ImportItem b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,C(U)><S,1*U(1*U,1*U,U)>m,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   @ b
                   (w :: a -> b)
                   (w249 :: Language.Python.Common.AST.ImportItem a) ->
                 case w249 of ww { Language.Python.Common.AST.ImportItem ww1 ww2 ww3 ->
                 Language.Python.Common.AST.ImportItem
                   @ b
                   (GHC.Base.map
                      @ (Language.Python.Common.AST.Ident a)
                      @ (Language.Python.Common.AST.Ident b)
                      (Language.Python.Common.AST.$fFunctorArgument_$cfmap1 @ a @ b w)
                      ww1)
                   (case ww2 of wild {
                      GHC.Base.Nothing
                      -> GHC.Base.Nothing @ (Language.Python.Common.AST.Ident b)
                      GHC.Base.Just a1
                      -> GHC.Base.Just
                           @ (Language.Python.Common.AST.Ident b)
                           (Language.Python.Common.AST.$fFunctorArgument_$cfmap1
                              @ a
                              @ b
                              w
                              a1) })
                   (w ww3) }) -}
01a50092e1f9a1aefabdff796e5265a4
  $fFunctorImportRelative ::
    GHC.Base.Functor Language.Python.Common.AST.ImportRelative
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.Python.Common.AST.ImportRelative
                  Language.Python.Common.AST.$fFunctorImportRelative_$cfmap
                  Language.Python.Common.AST.$fFunctorImportRelative_$c<$ -}
01a50092e1f9a1aefabdff796e5265a4
  $fFunctorImportRelative_$c<$ ::
    a
    -> Language.Python.Common.AST.ImportRelative b
    -> Language.Python.Common.AST.ImportRelative a
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U(U,1*U,A)>m,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   @ b
                   (w :: a)
                   (w249 :: Language.Python.Common.AST.ImportRelative b) ->
                 case w249 of ww { Language.Python.Common.AST.ImportRelative ww1 ww2 ww3 ->
                 Language.Python.Common.AST.ImportRelative
                   @ a
                   ww1
                   (case ww2 of wild {
                      GHC.Base.Nothing
                      -> GHC.Base.Nothing @ [Language.Python.Common.AST.Ident a]
                      GHC.Base.Just a1
                      -> GHC.Base.Just
                           @ [Language.Python.Common.AST.Ident a]
                           (GHC.Base.map
                              @ (Language.Python.Common.AST.Ident b)
                              @ (Language.Python.Common.AST.Ident a)
                              (\ (ds :: Language.Python.Common.AST.Ident b) ->
                               case ds of wild1 { Language.Python.Common.AST.Ident a2 a3 ->
                               Language.Python.Common.AST.Ident @ a a2 w })
                              a1) })
                   w }) -}
01a50092e1f9a1aefabdff796e5265a4
  $fFunctorImportRelative_$cfmap ::
    (a -> b)
    -> Language.Python.Common.AST.ImportRelative a
    -> Language.Python.Common.AST.ImportRelative b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,C(U)><S,1*U(U,1*U,U)>m,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   @ b
                   (w :: a -> b)
                   (w249 :: Language.Python.Common.AST.ImportRelative a) ->
                 case w249 of ww { Language.Python.Common.AST.ImportRelative ww1 ww2 ww3 ->
                 Language.Python.Common.AST.ImportRelative
                   @ b
                   ww1
                   (case ww2 of wild {
                      GHC.Base.Nothing
                      -> GHC.Base.Nothing @ [Language.Python.Common.AST.Ident b]
                      GHC.Base.Just a1
                      -> GHC.Base.Just
                           @ [Language.Python.Common.AST.Ident b]
                           (GHC.Base.map
                              @ (Language.Python.Common.AST.Ident a)
                              @ (Language.Python.Common.AST.Ident b)
                              (Language.Python.Common.AST.$fFunctorArgument_$cfmap1 @ a @ b w)
                              a1) })
                   (w ww3) }) -}
789db2a4b3c023a9cf43afdd1f0c3249
  $fFunctorModule ::
    GHC.Base.Functor Language.Python.Common.AST.Module
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.Python.Common.AST.Module
                  Language.Python.Common.AST.$fFunctorModule2
                    `cast`
                  (forall (a :: <*>_N) (b :: <*>_N).
                   <a -> b>_R
                   ->_R <Language.Python.Common.AST.Module a>_R
                   ->_R Sym (Language.Python.Common.AST.N:Module[0] <b>_R))
                  Language.Python.Common.AST.$fFunctorModule1
                    `cast`
                  (forall (a :: <*>_N) (b :: <*>_N).
                   <a>_R
                   ->_R <Language.Python.Common.AST.Module b>_R
                   ->_R Sym (Language.Python.Common.AST.N:Module[0] <a>_R)) -}
789db2a4b3c023a9cf43afdd1f0c3249
  $fFunctorModule1 ::
    a
    -> Language.Python.Common.AST.Module b
    -> [Language.Python.Common.AST.Statement a]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a @ b (z :: a) (ds :: Language.Python.Common.AST.Module b) ->
                 GHC.Base.build
                   @ (Language.Python.Common.AST.Statement a)
                   (\ @ b1
                      (c :: Language.Python.Common.AST.Statement a -> b1 -> b1)[OneShot]
                      (n :: b1)[OneShot] ->
                    GHC.Base.foldr
                      @ (Language.Python.Common.AST.Statement b)
                      @ b1
                      (GHC.Base.mapFB
                         @ (Language.Python.Common.AST.Statement a)
                         @ b1
                         @ (Language.Python.Common.AST.Statement b)
                         c
                         (Language.Python.Common.AST.$fFunctorHandler_$c<$1 @ a @ b z))
                      n
                      ds `cast` (Language.Python.Common.AST.N:Module[0] <b>_R))) -}
789db2a4b3c023a9cf43afdd1f0c3249
  $fFunctorModule2 ::
    (a -> b)
    -> Language.Python.Common.AST.Module a
    -> [Language.Python.Common.AST.Statement b]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,C(U)><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   @ b
                   (f12 :: a -> b)
                   (ds :: Language.Python.Common.AST.Module a) ->
                 GHC.Base.build
                   @ (Language.Python.Common.AST.Statement b)
                   (\ @ b1
                      (c :: Language.Python.Common.AST.Statement b -> b1 -> b1)[OneShot]
                      (n :: b1)[OneShot] ->
                    GHC.Base.foldr
                      @ (Language.Python.Common.AST.Statement a)
                      @ b1
                      (GHC.Base.mapFB
                         @ (Language.Python.Common.AST.Statement b)
                         @ b1
                         @ (Language.Python.Common.AST.Statement a)
                         c
                         (Language.Python.Common.AST.$fFunctorHandler_$cfmap1 @ a @ b f12))
                      n
                      ds `cast` (Language.Python.Common.AST.N:Module[0] <a>_R))) -}
3e80c1212dbae482ce637a5dc72042ac
  $fFunctorOp :: GHC.Base.Functor Language.Python.Common.AST.Op
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.Python.Common.AST.Op
                  Language.Python.Common.AST.$fFunctorOp_$cfmap
                  Language.Python.Common.AST.$fFunctorOp_$c<$ -}
3e80c1212dbae482ce637a5dc72042ac
  $fFunctorOp_$c<$ ::
    a
    -> Language.Python.Common.AST.Op b
    -> Language.Python.Common.AST.Op a
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U>,
     Unfolding: (\ @ a
                   @ b
                   (z :: a)
                   (ds :: Language.Python.Common.AST.Op b) ->
                 case ds of wild {
                   Language.Python.Common.AST.And a1
                   -> Language.Python.Common.AST.And @ a z
                   Language.Python.Common.AST.Or a1
                   -> Language.Python.Common.AST.Or @ a z
                   Language.Python.Common.AST.Not a1
                   -> Language.Python.Common.AST.Not @ a z
                   Language.Python.Common.AST.Exponent a1
                   -> Language.Python.Common.AST.Exponent @ a z
                   Language.Python.Common.AST.LessThan a1
                   -> Language.Python.Common.AST.LessThan @ a z
                   Language.Python.Common.AST.GreaterThan a1
                   -> Language.Python.Common.AST.GreaterThan @ a z
                   Language.Python.Common.AST.Equality a1
                   -> Language.Python.Common.AST.Equality @ a z
                   Language.Python.Common.AST.GreaterThanEquals a1
                   -> Language.Python.Common.AST.GreaterThanEquals @ a z
                   Language.Python.Common.AST.LessThanEquals a1
                   -> Language.Python.Common.AST.LessThanEquals @ a z
                   Language.Python.Common.AST.NotEquals a1
                   -> Language.Python.Common.AST.NotEquals @ a z
                   Language.Python.Common.AST.NotEqualsV2 a1
                   -> Language.Python.Common.AST.NotEqualsV2 @ a z
                   Language.Python.Common.AST.In a1
                   -> Language.Python.Common.AST.In @ a z
                   Language.Python.Common.AST.Is a1
                   -> Language.Python.Common.AST.Is @ a z
                   Language.Python.Common.AST.IsNot a1
                   -> Language.Python.Common.AST.IsNot @ a z
                   Language.Python.Common.AST.NotIn a1
                   -> Language.Python.Common.AST.NotIn @ a z
                   Language.Python.Common.AST.BinaryOr a1
                   -> Language.Python.Common.AST.BinaryOr @ a z
                   Language.Python.Common.AST.Xor a1
                   -> Language.Python.Common.AST.Xor @ a z
                   Language.Python.Common.AST.BinaryAnd a1
                   -> Language.Python.Common.AST.BinaryAnd @ a z
                   Language.Python.Common.AST.ShiftLeft a1
                   -> Language.Python.Common.AST.ShiftLeft @ a z
                   Language.Python.Common.AST.ShiftRight a1
                   -> Language.Python.Common.AST.ShiftRight @ a z
                   Language.Python.Common.AST.Multiply a1
                   -> Language.Python.Common.AST.Multiply @ a z
                   Language.Python.Common.AST.Plus a1
                   -> Language.Python.Common.AST.Plus @ a z
                   Language.Python.Common.AST.Minus a1
                   -> Language.Python.Common.AST.Minus @ a z
                   Language.Python.Common.AST.Divide a1
                   -> Language.Python.Common.AST.Divide @ a z
                   Language.Python.Common.AST.FloorDivide a1
                   -> Language.Python.Common.AST.FloorDivide @ a z
                   Language.Python.Common.AST.MatrixMult a1
                   -> Language.Python.Common.AST.MatrixMult @ a z
                   Language.Python.Common.AST.Invert a1
                   -> Language.Python.Common.AST.Invert @ a z
                   Language.Python.Common.AST.Modulo a1
                   -> Language.Python.Common.AST.Modulo @ a z }) -}
3e80c1212dbae482ce637a5dc72042ac
  $fFunctorOp_$cfmap ::
    (a -> b)
    -> Language.Python.Common.AST.Op a
    -> Language.Python.Common.AST.Op b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(U)><S,1*U>,
     Unfolding: (\ @ a
                   @ b
                   (f12 :: a -> b)
                   (ds :: Language.Python.Common.AST.Op a) ->
                 case ds of wild {
                   Language.Python.Common.AST.And a1
                   -> Language.Python.Common.AST.And @ b (f12 a1)
                   Language.Python.Common.AST.Or a1
                   -> Language.Python.Common.AST.Or @ b (f12 a1)
                   Language.Python.Common.AST.Not a1
                   -> Language.Python.Common.AST.Not @ b (f12 a1)
                   Language.Python.Common.AST.Exponent a1
                   -> Language.Python.Common.AST.Exponent @ b (f12 a1)
                   Language.Python.Common.AST.LessThan a1
                   -> Language.Python.Common.AST.LessThan @ b (f12 a1)
                   Language.Python.Common.AST.GreaterThan a1
                   -> Language.Python.Common.AST.GreaterThan @ b (f12 a1)
                   Language.Python.Common.AST.Equality a1
                   -> Language.Python.Common.AST.Equality @ b (f12 a1)
                   Language.Python.Common.AST.GreaterThanEquals a1
                   -> Language.Python.Common.AST.GreaterThanEquals @ b (f12 a1)
                   Language.Python.Common.AST.LessThanEquals a1
                   -> Language.Python.Common.AST.LessThanEquals @ b (f12 a1)
                   Language.Python.Common.AST.NotEquals a1
                   -> Language.Python.Common.AST.NotEquals @ b (f12 a1)
                   Language.Python.Common.AST.NotEqualsV2 a1
                   -> Language.Python.Common.AST.NotEqualsV2 @ b (f12 a1)
                   Language.Python.Common.AST.In a1
                   -> Language.Python.Common.AST.In @ b (f12 a1)
                   Language.Python.Common.AST.Is a1
                   -> Language.Python.Common.AST.Is @ b (f12 a1)
                   Language.Python.Common.AST.IsNot a1
                   -> Language.Python.Common.AST.IsNot @ b (f12 a1)
                   Language.Python.Common.AST.NotIn a1
                   -> Language.Python.Common.AST.NotIn @ b (f12 a1)
                   Language.Python.Common.AST.BinaryOr a1
                   -> Language.Python.Common.AST.BinaryOr @ b (f12 a1)
                   Language.Python.Common.AST.Xor a1
                   -> Language.Python.Common.AST.Xor @ b (f12 a1)
                   Language.Python.Common.AST.BinaryAnd a1
                   -> Language.Python.Common.AST.BinaryAnd @ b (f12 a1)
                   Language.Python.Common.AST.ShiftLeft a1
                   -> Language.Python.Common.AST.ShiftLeft @ b (f12 a1)
                   Language.Python.Common.AST.ShiftRight a1
                   -> Language.Python.Common.AST.ShiftRight @ b (f12 a1)
                   Language.Python.Common.AST.Multiply a1
                   -> Language.Python.Common.AST.Multiply @ b (f12 a1)
                   Language.Python.Common.AST.Plus a1
                   -> Language.Python.Common.AST.Plus @ b (f12 a1)
                   Language.Python.Common.AST.Minus a1
                   -> Language.Python.Common.AST.Minus @ b (f12 a1)
                   Language.Python.Common.AST.Divide a1
                   -> Language.Python.Common.AST.Divide @ b (f12 a1)
                   Language.Python.Common.AST.FloorDivide a1
                   -> Language.Python.Common.AST.FloorDivide @ b (f12 a1)
                   Language.Python.Common.AST.MatrixMult a1
                   -> Language.Python.Common.AST.MatrixMult @ b (f12 a1)
                   Language.Python.Common.AST.Invert a1
                   -> Language.Python.Common.AST.Invert @ b (f12 a1)
                   Language.Python.Common.AST.Modulo a1
                   -> Language.Python.Common.AST.Modulo @ b (f12 a1) }) -}
77aacf63ade2d28a10031365ad257b9f
  $fFunctorParamTuple ::
    GHC.Base.Functor Language.Python.Common.AST.ParamTuple
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.Python.Common.AST.ParamTuple
                  Language.Python.Common.AST.$fFunctorParamTuple_$cfmap
                  Language.Python.Common.AST.$fFunctorParamTuple_$c<$ -}
77aacf63ade2d28a10031365ad257b9f
  $fFunctorParamTuple_$c<$ ::
    a
    -> Language.Python.Common.AST.ParamTuple b
    -> Language.Python.Common.AST.ParamTuple a
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U> -}
77aacf63ade2d28a10031365ad257b9f
  $fFunctorParamTuple_$cfmap ::
    (a -> b)
    -> Language.Python.Common.AST.ParamTuple a
    -> Language.Python.Common.AST.ParamTuple b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,C(U)><S,1*U> -}
94dde4ffceed0a2a13daed020b6576e1
  $fFunctorParameter ::
    GHC.Base.Functor Language.Python.Common.AST.Parameter
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.Python.Common.AST.Parameter
                  Language.Python.Common.AST.$fFunctorParameter_$cfmap
                  Language.Python.Common.AST.$fFunctorParameter_$c<$ -}
94dde4ffceed0a2a13daed020b6576e1
  $fFunctorParameter_$c<$ ::
    a
    -> Language.Python.Common.AST.Parameter b
    -> Language.Python.Common.AST.Parameter a
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U>,
     Unfolding: (\ @ a
                   @ b
                   (z :: a)
                   (ds :: Language.Python.Common.AST.Parameter b) ->
                 case ds of wild {
                   Language.Python.Common.AST.Param a1 a2 a3 a4
                   -> Language.Python.Common.AST.Param
                        @ a
                        (case a1 of wild1 { Language.Python.Common.AST.Ident a7 a8 ->
                         Language.Python.Common.AST.Ident @ a a7 z })
                        (case a2 of wild1 {
                           GHC.Base.Nothing
                           -> GHC.Base.Nothing @ (Language.Python.Common.AST.Expr a)
                           GHC.Base.Just a7
                           -> GHC.Base.Just
                                @ (Language.Python.Common.AST.Expr a)
                                (Language.Python.Common.AST.$fFunctorArgument_$c<$1
                                   @ a
                                   @ b
                                   z
                                   a7) })
                        (case a3 of wild1 {
                           GHC.Base.Nothing
                           -> GHC.Base.Nothing @ (Language.Python.Common.AST.Expr a)
                           GHC.Base.Just a7
                           -> GHC.Base.Just
                                @ (Language.Python.Common.AST.Expr a)
                                (Language.Python.Common.AST.$fFunctorArgument_$c<$1
                                   @ a
                                   @ b
                                   z
                                   a7) })
                        z
                   Language.Python.Common.AST.VarArgsPos a1 a2 a3
                   -> Language.Python.Common.AST.VarArgsPos
                        @ a
                        (case a1 of wild1 { Language.Python.Common.AST.Ident a4 a5 ->
                         Language.Python.Common.AST.Ident @ a a4 z })
                        (case a2 of wild1 {
                           GHC.Base.Nothing
                           -> GHC.Base.Nothing @ (Language.Python.Common.AST.Expr a)
                           GHC.Base.Just a4
                           -> GHC.Base.Just
                                @ (Language.Python.Common.AST.Expr a)
                                (Language.Python.Common.AST.$fFunctorArgument_$c<$1
                                   @ a
                                   @ b
                                   z
                                   a4) })
                        z
                   Language.Python.Common.AST.VarArgsKeyword a1 a2 a3
                   -> Language.Python.Common.AST.VarArgsKeyword
                        @ a
                        (case a1 of wild1 { Language.Python.Common.AST.Ident a4 a5 ->
                         Language.Python.Common.AST.Ident @ a a4 z })
                        (case a2 of wild1 {
                           GHC.Base.Nothing
                           -> GHC.Base.Nothing @ (Language.Python.Common.AST.Expr a)
                           GHC.Base.Just a4
                           -> GHC.Base.Just
                                @ (Language.Python.Common.AST.Expr a)
                                (Language.Python.Common.AST.$fFunctorArgument_$c<$1
                                   @ a
                                   @ b
                                   z
                                   a4) })
                        z
                   Language.Python.Common.AST.EndPositional a1
                   -> Language.Python.Common.AST.EndPositional @ a z
                   Language.Python.Common.AST.UnPackTuple a1 a2 a3
                   -> Language.Python.Common.AST.UnPackTuple
                        @ a
                        (Language.Python.Common.AST.$fFunctorParamTuple_$c<$ @ a @ b z a1)
                        (case a2 of wild1 {
                           GHC.Base.Nothing
                           -> GHC.Base.Nothing @ (Language.Python.Common.AST.Expr a)
                           GHC.Base.Just a4
                           -> GHC.Base.Just
                                @ (Language.Python.Common.AST.Expr a)
                                (Language.Python.Common.AST.$fFunctorArgument_$c<$1
                                   @ a
                                   @ b
                                   z
                                   a4) })
                        z }) -}
94dde4ffceed0a2a13daed020b6576e1
  $fFunctorParameter_$cfmap ::
    (a -> b)
    -> Language.Python.Common.AST.Parameter a
    -> Language.Python.Common.AST.Parameter b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,C(U)><S,1*U>,
     Unfolding: (\ @ a
                   @ b
                   (f12 :: a -> b)
                   (ds :: Language.Python.Common.AST.Parameter a) ->
                 case ds of wild {
                   Language.Python.Common.AST.Param a1 a2 a3 a4
                   -> Language.Python.Common.AST.Param
                        @ b
                        (Language.Python.Common.AST.$fFunctorArgument_$cfmap1
                           @ a
                           @ b
                           f12
                           a1)
                        (case a2 of wild1 {
                           GHC.Base.Nothing
                           -> GHC.Base.Nothing @ (Language.Python.Common.AST.Expr b)
                           GHC.Base.Just a7
                           -> GHC.Base.Just
                                @ (Language.Python.Common.AST.Expr b)
                                (Language.Python.Common.AST.$fFunctorArgument_$cfmap2
                                   @ a
                                   @ b
                                   f12
                                   a7) })
                        (case a3 of wild1 {
                           GHC.Base.Nothing
                           -> GHC.Base.Nothing @ (Language.Python.Common.AST.Expr b)
                           GHC.Base.Just a7
                           -> GHC.Base.Just
                                @ (Language.Python.Common.AST.Expr b)
                                (Language.Python.Common.AST.$fFunctorArgument_$cfmap2
                                   @ a
                                   @ b
                                   f12
                                   a7) })
                        (f12 a4)
                   Language.Python.Common.AST.VarArgsPos a1 a2 a3
                   -> Language.Python.Common.AST.VarArgsPos
                        @ b
                        (Language.Python.Common.AST.$fFunctorArgument_$cfmap1
                           @ a
                           @ b
                           f12
                           a1)
                        (case a2 of wild1 {
                           GHC.Base.Nothing
                           -> GHC.Base.Nothing @ (Language.Python.Common.AST.Expr b)
                           GHC.Base.Just a4
                           -> GHC.Base.Just
                                @ (Language.Python.Common.AST.Expr b)
                                (Language.Python.Common.AST.$fFunctorArgument_$cfmap2
                                   @ a
                                   @ b
                                   f12
                                   a4) })
                        (f12 a3)
                   Language.Python.Common.AST.VarArgsKeyword a1 a2 a3
                   -> Language.Python.Common.AST.VarArgsKeyword
                        @ b
                        (Language.Python.Common.AST.$fFunctorArgument_$cfmap1
                           @ a
                           @ b
                           f12
                           a1)
                        (case a2 of wild1 {
                           GHC.Base.Nothing
                           -> GHC.Base.Nothing @ (Language.Python.Common.AST.Expr b)
                           GHC.Base.Just a4
                           -> GHC.Base.Just
                                @ (Language.Python.Common.AST.Expr b)
                                (Language.Python.Common.AST.$fFunctorArgument_$cfmap2
                                   @ a
                                   @ b
                                   f12
                                   a4) })
                        (f12 a3)
                   Language.Python.Common.AST.EndPositional a1
                   -> Language.Python.Common.AST.EndPositional @ b (f12 a1)
                   Language.Python.Common.AST.UnPackTuple a1 a2 a3
                   -> Language.Python.Common.AST.UnPackTuple
                        @ b
                        (Language.Python.Common.AST.$fFunctorParamTuple_$cfmap
                           @ a
                           @ b
                           f12
                           a1)
                        (case a2 of wild1 {
                           GHC.Base.Nothing
                           -> GHC.Base.Nothing @ (Language.Python.Common.AST.Expr b)
                           GHC.Base.Just a4
                           -> GHC.Base.Just
                                @ (Language.Python.Common.AST.Expr b)
                                (Language.Python.Common.AST.$fFunctorArgument_$cfmap2
                                   @ a
                                   @ b
                                   f12
                                   a4) })
                        (f12 a3) }) -}
40b646133484efeda0b61064c970b83c
  $fFunctorRaiseExpr ::
    GHC.Base.Functor Language.Python.Common.AST.RaiseExpr
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.Python.Common.AST.RaiseExpr
                  Language.Python.Common.AST.$fFunctorRaiseExpr_$cfmap
                  Language.Python.Common.AST.$fFunctorRaiseExpr_$c<$ -}
40b646133484efeda0b61064c970b83c
  $fFunctorRaiseExpr_$c<$ ::
    a
    -> Language.Python.Common.AST.RaiseExpr b
    -> Language.Python.Common.AST.RaiseExpr a
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U>,
     Unfolding: (\ @ a
                   @ b
                   (z :: a)
                   (ds :: Language.Python.Common.AST.RaiseExpr b) ->
                 case ds of wild {
                   Language.Python.Common.AST.RaiseV3 a1
                   -> Language.Python.Common.AST.RaiseV3
                        @ a
                        (case a1 of wild1 {
                           GHC.Base.Nothing
                           -> GHC.Base.Nothing
                                @ (Language.Python.Common.AST.Expr a,
                                   GHC.Base.Maybe (Language.Python.Common.AST.Expr a))
                           GHC.Base.Just a2
                           -> GHC.Base.Just
                                @ (Language.Python.Common.AST.Expr a,
                                   GHC.Base.Maybe (Language.Python.Common.AST.Expr a))
                                (case a2 of wild2 { (,) a3 a4 ->
                                 (Language.Python.Common.AST.$fFunctorArgument_$c<$1 @ a @ b z a3,
                                  case a4 of wild3 {
                                    GHC.Base.Nothing
                                    -> GHC.Base.Nothing @ (Language.Python.Common.AST.Expr a)
                                    GHC.Base.Just a5
                                    -> GHC.Base.Just
                                         @ (Language.Python.Common.AST.Expr a)
                                         (Language.Python.Common.AST.$fFunctorArgument_$c<$1
                                            @ a
                                            @ b
                                            z
                                            a5) }) }) })
                   Language.Python.Common.AST.RaiseV2 a1
                   -> Language.Python.Common.AST.RaiseV2
                        @ a
                        (case a1 of wild1 {
                           GHC.Base.Nothing
                           -> GHC.Base.Nothing
                                @ (Language.Python.Common.AST.Expr a,
                                   GHC.Base.Maybe
                                     (Language.Python.Common.AST.Expr a,
                                      GHC.Base.Maybe (Language.Python.Common.AST.Expr a)))
                           GHC.Base.Just a2
                           -> GHC.Base.Just
                                @ (Language.Python.Common.AST.Expr a,
                                   GHC.Base.Maybe
                                     (Language.Python.Common.AST.Expr a,
                                      GHC.Base.Maybe (Language.Python.Common.AST.Expr a)))
                                (case a2 of wild2 { (,) a3 a4 ->
                                 (Language.Python.Common.AST.$fFunctorArgument_$c<$1 @ a @ b z a3,
                                  case a4 of wild3 {
                                    GHC.Base.Nothing
                                    -> GHC.Base.Nothing
                                         @ (Language.Python.Common.AST.Expr a,
                                            GHC.Base.Maybe (Language.Python.Common.AST.Expr a))
                                    GHC.Base.Just a5
                                    -> GHC.Base.Just
                                         @ (Language.Python.Common.AST.Expr a,
                                            GHC.Base.Maybe (Language.Python.Common.AST.Expr a))
                                         (case a5 of wild4 { (,) a6 a7 ->
                                          (Language.Python.Common.AST.$fFunctorArgument_$c<$1
                                             @ a
                                             @ b
                                             z
                                             a6,
                                           case a7 of wild5 {
                                             GHC.Base.Nothing
                                             -> GHC.Base.Nothing
                                                  @ (Language.Python.Common.AST.Expr a)
                                             GHC.Base.Just a8
                                             -> GHC.Base.Just
                                                  @ (Language.Python.Common.AST.Expr a)
                                                  (Language.Python.Common.AST.$fFunctorArgument_$c<$1
                                                     @ a
                                                     @ b
                                                     z
                                                     a8) }) }) }) }) }) }) -}
40b646133484efeda0b61064c970b83c
  $fFunctorRaiseExpr_$cfmap ::
    (a -> b)
    -> Language.Python.Common.AST.RaiseExpr a
    -> Language.Python.Common.AST.RaiseExpr b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,C(U)><S,1*U>,
     Unfolding: (\ @ a
                   @ b
                   (f12 :: a -> b)
                   (ds :: Language.Python.Common.AST.RaiseExpr a) ->
                 case ds of wild {
                   Language.Python.Common.AST.RaiseV3 a1
                   -> Language.Python.Common.AST.RaiseV3
                        @ b
                        (case a1 of wild1 {
                           GHC.Base.Nothing
                           -> GHC.Base.Nothing
                                @ (Language.Python.Common.AST.Expr b,
                                   GHC.Base.Maybe (Language.Python.Common.AST.Expr b))
                           GHC.Base.Just a2
                           -> GHC.Base.Just
                                @ (Language.Python.Common.AST.Expr b,
                                   GHC.Base.Maybe (Language.Python.Common.AST.Expr b))
                                (case a2 of wild2 { (,) a3 a4 ->
                                 (Language.Python.Common.AST.$fFunctorArgument_$cfmap2
                                    @ a
                                    @ b
                                    f12
                                    a3,
                                  case a4 of wild3 {
                                    GHC.Base.Nothing
                                    -> GHC.Base.Nothing @ (Language.Python.Common.AST.Expr b)
                                    GHC.Base.Just a5
                                    -> GHC.Base.Just
                                         @ (Language.Python.Common.AST.Expr b)
                                         (Language.Python.Common.AST.$fFunctorArgument_$cfmap2
                                            @ a
                                            @ b
                                            f12
                                            a5) }) }) })
                   Language.Python.Common.AST.RaiseV2 a1
                   -> Language.Python.Common.AST.RaiseV2
                        @ b
                        (case a1 of wild1 {
                           GHC.Base.Nothing
                           -> GHC.Base.Nothing
                                @ (Language.Python.Common.AST.Expr b,
                                   GHC.Base.Maybe
                                     (Language.Python.Common.AST.Expr b,
                                      GHC.Base.Maybe (Language.Python.Common.AST.Expr b)))
                           GHC.Base.Just a2
                           -> GHC.Base.Just
                                @ (Language.Python.Common.AST.Expr b,
                                   GHC.Base.Maybe
                                     (Language.Python.Common.AST.Expr b,
                                      GHC.Base.Maybe (Language.Python.Common.AST.Expr b)))
                                (case a2 of wild2 { (,) a3 a4 ->
                                 (Language.Python.Common.AST.$fFunctorArgument_$cfmap2
                                    @ a
                                    @ b
                                    f12
                                    a3,
                                  case a4 of wild3 {
                                    GHC.Base.Nothing
                                    -> GHC.Base.Nothing
                                         @ (Language.Python.Common.AST.Expr b,
                                            GHC.Base.Maybe (Language.Python.Common.AST.Expr b))
                                    GHC.Base.Just a5
                                    -> GHC.Base.Just
                                         @ (Language.Python.Common.AST.Expr b,
                                            GHC.Base.Maybe (Language.Python.Common.AST.Expr b))
                                         (case a5 of wild4 { (,) a6 a7 ->
                                          (Language.Python.Common.AST.$fFunctorArgument_$cfmap2
                                             @ a
                                             @ b
                                             f12
                                             a6,
                                           case a7 of wild5 {
                                             GHC.Base.Nothing
                                             -> GHC.Base.Nothing
                                                  @ (Language.Python.Common.AST.Expr b)
                                             GHC.Base.Just a8
                                             -> GHC.Base.Just
                                                  @ (Language.Python.Common.AST.Expr b)
                                                  (Language.Python.Common.AST.$fFunctorArgument_$cfmap2
                                                     @ a
                                                     @ b
                                                     f12
                                                     a8) }) }) }) }) }) }) -}
94dde4ffceed0a2a13daed020b6576e1
  $fFunctorSlice :: GHC.Base.Functor Language.Python.Common.AST.Slice
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.Python.Common.AST.Slice
                  Language.Python.Common.AST.$fFunctorSlice_$cfmap
                  Language.Python.Common.AST.$fFunctorSlice_$c<$ -}
94dde4ffceed0a2a13daed020b6576e1
  $fFunctorSlice_$c<$ ::
    a
    -> Language.Python.Common.AST.Slice b
    -> Language.Python.Common.AST.Slice a
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U>,
     Unfolding: (\ @ a
                   @ b
                   (z :: a)
                   (ds :: Language.Python.Common.AST.Slice b) ->
                 case ds of wild {
                   Language.Python.Common.AST.SliceProper a1 a2 a3 a4
                   -> Language.Python.Common.AST.SliceProper
                        @ a
                        (case a1 of wild1 {
                           GHC.Base.Nothing
                           -> GHC.Base.Nothing @ (Language.Python.Common.AST.Expr a)
                           GHC.Base.Just a7
                           -> GHC.Base.Just
                                @ (Language.Python.Common.AST.Expr a)
                                (Language.Python.Common.AST.$fFunctorArgument_$c<$1
                                   @ a
                                   @ b
                                   z
                                   a7) })
                        (case a2 of wild1 {
                           GHC.Base.Nothing
                           -> GHC.Base.Nothing @ (Language.Python.Common.AST.Expr a)
                           GHC.Base.Just a7
                           -> GHC.Base.Just
                                @ (Language.Python.Common.AST.Expr a)
                                (Language.Python.Common.AST.$fFunctorArgument_$c<$1
                                   @ a
                                   @ b
                                   z
                                   a7) })
                        (case a3 of wild1 {
                           GHC.Base.Nothing
                           -> GHC.Base.Nothing
                                @ (GHC.Base.Maybe (Language.Python.Common.AST.Expr a))
                           GHC.Base.Just a7
                           -> GHC.Base.Just
                                @ (GHC.Base.Maybe (Language.Python.Common.AST.Expr a))
                                (case a7 of wild2 {
                                   GHC.Base.Nothing
                                   -> GHC.Base.Nothing @ (Language.Python.Common.AST.Expr a)
                                   GHC.Base.Just a8
                                   -> GHC.Base.Just
                                        @ (Language.Python.Common.AST.Expr a)
                                        (Language.Python.Common.AST.$fFunctorArgument_$c<$1
                                           @ a
                                           @ b
                                           z
                                           a8) }) })
                        z
                   Language.Python.Common.AST.SliceExpr a1 a2
                   -> Language.Python.Common.AST.SliceExpr
                        @ a
                        (Language.Python.Common.AST.$fFunctorArgument_$c<$1 @ a @ b z a1)
                        z
                   Language.Python.Common.AST.SliceEllipsis a1
                   -> Language.Python.Common.AST.SliceEllipsis @ a z }) -}
94dde4ffceed0a2a13daed020b6576e1
  $fFunctorSlice_$cfmap ::
    (a -> b)
    -> Language.Python.Common.AST.Slice a
    -> Language.Python.Common.AST.Slice b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,C(U)><S,1*U>,
     Unfolding: (\ @ a
                   @ b
                   (f12 :: a -> b)
                   (ds :: Language.Python.Common.AST.Slice a) ->
                 case ds of wild {
                   Language.Python.Common.AST.SliceProper a1 a2 a3 a4
                   -> Language.Python.Common.AST.SliceProper
                        @ b
                        (case a1 of wild1 {
                           GHC.Base.Nothing
                           -> GHC.Base.Nothing @ (Language.Python.Common.AST.Expr b)
                           GHC.Base.Just a7
                           -> GHC.Base.Just
                                @ (Language.Python.Common.AST.Expr b)
                                (Language.Python.Common.AST.$fFunctorArgument_$cfmap2
                                   @ a
                                   @ b
                                   f12
                                   a7) })
                        (case a2 of wild1 {
                           GHC.Base.Nothing
                           -> GHC.Base.Nothing @ (Language.Python.Common.AST.Expr b)
                           GHC.Base.Just a7
                           -> GHC.Base.Just
                                @ (Language.Python.Common.AST.Expr b)
                                (Language.Python.Common.AST.$fFunctorArgument_$cfmap2
                                   @ a
                                   @ b
                                   f12
                                   a7) })
                        (case a3 of wild1 {
                           GHC.Base.Nothing
                           -> GHC.Base.Nothing
                                @ (GHC.Base.Maybe (Language.Python.Common.AST.Expr b))
                           GHC.Base.Just a7
                           -> GHC.Base.Just
                                @ (GHC.Base.Maybe (Language.Python.Common.AST.Expr b))
                                (case a7 of wild2 {
                                   GHC.Base.Nothing
                                   -> GHC.Base.Nothing @ (Language.Python.Common.AST.Expr b)
                                   GHC.Base.Just a8
                                   -> GHC.Base.Just
                                        @ (Language.Python.Common.AST.Expr b)
                                        (Language.Python.Common.AST.$fFunctorArgument_$cfmap2
                                           @ a
                                           @ b
                                           f12
                                           a8) }) })
                        (f12 a4)
                   Language.Python.Common.AST.SliceExpr a1 a2
                   -> Language.Python.Common.AST.SliceExpr
                        @ b
                        (Language.Python.Common.AST.$fFunctorArgument_$cfmap2
                           @ a
                           @ b
                           f12
                           a1)
                        (f12 a2)
                   Language.Python.Common.AST.SliceEllipsis a1
                   -> Language.Python.Common.AST.SliceEllipsis @ b (f12 a1) }) -}
cf431e64d114ff48b3a5eb8fda819c32
  $fFunctorStatement ::
    GHC.Base.Functor Language.Python.Common.AST.Statement
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.Python.Common.AST.Statement
                  Language.Python.Common.AST.$fFunctorHandler_$cfmap1
                  Language.Python.Common.AST.$fFunctorHandler_$c<$1 -}
94dde4ffceed0a2a13daed020b6576e1
  $fFunctorYieldArg ::
    GHC.Base.Functor Language.Python.Common.AST.YieldArg
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.Python.Common.AST.YieldArg
                  Language.Python.Common.AST.$fFunctorYieldArg_$cfmap
                  Language.Python.Common.AST.$fFunctorYieldArg_$c<$ -}
94dde4ffceed0a2a13daed020b6576e1
  $fFunctorYieldArg_$c<$ ::
    a
    -> Language.Python.Common.AST.YieldArg b
    -> Language.Python.Common.AST.YieldArg a
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U>,
     Unfolding: (\ @ a
                   @ b
                   (z :: a)
                   (ds :: Language.Python.Common.AST.YieldArg b) ->
                 case ds of wild {
                   Language.Python.Common.AST.YieldFrom a1 a2
                   -> Language.Python.Common.AST.YieldFrom
                        @ a
                        (Language.Python.Common.AST.$fFunctorArgument_$c<$1 @ a @ b z a1)
                        z
                   Language.Python.Common.AST.YieldExpr a1
                   -> Language.Python.Common.AST.YieldExpr
                        @ a
                        (Language.Python.Common.AST.$fFunctorArgument_$c<$1
                           @ a
                           @ b
                           z
                           a1) }) -}
94dde4ffceed0a2a13daed020b6576e1
  $fFunctorYieldArg_$cfmap ::
    (a -> b)
    -> Language.Python.Common.AST.YieldArg a
    -> Language.Python.Common.AST.YieldArg b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,C(U)><S,1*U>,
     Unfolding: (\ @ a
                   @ b
                   (f12 :: a -> b)
                   (ds :: Language.Python.Common.AST.YieldArg a) ->
                 case ds of wild {
                   Language.Python.Common.AST.YieldFrom a1 a2
                   -> Language.Python.Common.AST.YieldFrom
                        @ b
                        (Language.Python.Common.AST.$fFunctorArgument_$cfmap2
                           @ a
                           @ b
                           f12
                           a1)
                        (f12 a2)
                   Language.Python.Common.AST.YieldExpr a1
                   -> Language.Python.Common.AST.YieldExpr
                        @ b
                        (Language.Python.Common.AST.$fFunctorArgument_$cfmap2
                           @ a
                           @ b
                           f12
                           a1) }) -}
94dde4ffceed0a2a13daed020b6576e1
  $fOrdArgument ::
    GHC.Classes.Ord annot =>
    GHC.Classes.Ord (Language.Python.Common.AST.Argument annot)
  DFunId
  {- Arity: 1, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)>m,
     Inline: CONLIKE,
     Unfolding: DFun: @ annot1 (v :: GHC.Classes.Ord annot1).
                  @ (Language.Python.Common.AST.Argument annot1)
                  (Language.Python.Common.AST.$fOrdArgument_$cp1Ord @ annot1 v)
                  (Language.Python.Common.AST.$fOrdArgument_$ccompare @ annot1 v)
                  (Language.Python.Common.AST.$fOrdArgument_$c< @ annot1 v)
                  (Language.Python.Common.AST.$fOrdArgument_$c<= @ annot1 v)
                  (Language.Python.Common.AST.$fOrdArgument_$c> @ annot1 v)
                  (Language.Python.Common.AST.$fOrdArgument_$c>= @ annot1 v)
                  (Language.Python.Common.AST.$fOrdArgument_$cmax @ annot1 v)
                  (Language.Python.Common.AST.$fOrdArgument_$cmin @ annot1 v) -}
94dde4ffceed0a2a13daed020b6576e1
  $fOrdArgument_$c< ::
    GHC.Classes.Ord annot =>
    Language.Python.Common.AST.Argument annot
    -> Language.Python.Common.AST.Argument annot -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)><S,1*U><S,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ annot1
                   ($dOrd :: GHC.Classes.Ord annot1)
                   (x :: Language.Python.Common.AST.Argument annot1)
                   (y :: Language.Python.Common.AST.Argument annot1) ->
                 case Language.Python.Common.AST.$fOrdArgument_$ccompare
                        @ annot1
                        $dOrd
                        x
                        y of wild {
                   DEFAULT -> GHC.Types.False GHC.Types.LT -> GHC.Types.True }) -}
94dde4ffceed0a2a13daed020b6576e1
  $fOrdArgument_$c<= ::
    GHC.Classes.Ord annot =>
    Language.Python.Common.AST.Argument annot
    -> Language.Python.Common.AST.Argument annot -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)><S,1*U><S,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ annot1
                   ($dOrd :: GHC.Classes.Ord annot1)
                   (x :: Language.Python.Common.AST.Argument annot1)
                   (y :: Language.Python.Common.AST.Argument annot1) ->
                 case Language.Python.Common.AST.$fOrdArgument_$ccompare
                        @ annot1
                        $dOrd
                        x
                        y of wild {
                   DEFAULT -> GHC.Types.True GHC.Types.GT -> GHC.Types.False }) -}
94dde4ffceed0a2a13daed020b6576e1
  $fOrdArgument_$c> ::
    GHC.Classes.Ord annot =>
    Language.Python.Common.AST.Argument annot
    -> Language.Python.Common.AST.Argument annot -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)><S,1*U><S,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ annot1
                   ($dOrd :: GHC.Classes.Ord annot1)
                   (x :: Language.Python.Common.AST.Argument annot1)
                   (y :: Language.Python.Common.AST.Argument annot1) ->
                 case Language.Python.Common.AST.$fOrdArgument_$ccompare
                        @ annot1
                        $dOrd
                        x
                        y of wild {
                   DEFAULT -> GHC.Types.False GHC.Types.GT -> GHC.Types.True }) -}
94dde4ffceed0a2a13daed020b6576e1
  $fOrdArgument_$c>= ::
    GHC.Classes.Ord annot =>
    Language.Python.Common.AST.Argument annot
    -> Language.Python.Common.AST.Argument annot -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)><S,1*U><S,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ annot1
                   ($dOrd :: GHC.Classes.Ord annot1)
                   (x :: Language.Python.Common.AST.Argument annot1)
                   (y :: Language.Python.Common.AST.Argument annot1) ->
                 case Language.Python.Common.AST.$fOrdArgument_$ccompare
                        @ annot1
                        $dOrd
                        x
                        y of wild {
                   DEFAULT -> GHC.Types.True GHC.Types.LT -> GHC.Types.False }) -}
94dde4ffceed0a2a13daed020b6576e1
  $fOrdArgument_$ccompare ::
    GHC.Classes.Ord annot =>
    Language.Python.Common.AST.Argument annot
    -> Language.Python.Common.AST.Argument annot -> GHC.Types.Ordering
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)><S,1*U><S,1*U>,
     Unfolding: (\ @ annot1
                   ($dOrd :: GHC.Classes.Ord annot1)
                   (a :: Language.Python.Common.AST.Argument annot1)
                   (b :: Language.Python.Common.AST.Argument annot1) ->
                 case a of wild {
                   Language.Python.Common.AST.ArgExpr a1 a2
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.LT
                        Language.Python.Common.AST.ArgExpr b1 b4
                        -> case Language.Python.Common.AST.$fOrdArgument_$ccompare1
                                  @ annot1
                                  $dOrd
                                  a1
                                  b1 of wild2 {
                             GHC.Types.LT -> GHC.Types.LT
                             GHC.Types.EQ -> GHC.Classes.compare @ annot1 $dOrd a2 b4
                             GHC.Types.GT -> GHC.Types.GT } }
                   Language.Python.Common.AST.ArgVarArgsPos a1 a2
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.LT
                        Language.Python.Common.AST.ArgExpr ds ds1 -> GHC.Types.GT
                        Language.Python.Common.AST.ArgVarArgsPos b1 b4
                        -> case Language.Python.Common.AST.$fOrdArgument_$ccompare1
                                  @ annot1
                                  $dOrd
                                  a1
                                  b1 of wild2 {
                             GHC.Types.LT -> GHC.Types.LT
                             GHC.Types.EQ -> GHC.Classes.compare @ annot1 $dOrd a2 b4
                             GHC.Types.GT -> GHC.Types.GT } }
                   Language.Python.Common.AST.ArgVarArgsKeyword a1 a2
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.GT
                        Language.Python.Common.AST.ArgVarArgsKeyword b1 b4
                        -> case Language.Python.Common.AST.$fOrdArgument_$ccompare1
                                  @ annot1
                                  $dOrd
                                  a1
                                  b1 of wild2 {
                             GHC.Types.LT -> GHC.Types.LT
                             GHC.Types.EQ -> GHC.Classes.compare @ annot1 $dOrd a2 b4
                             GHC.Types.GT -> GHC.Types.GT }
                        Language.Python.Common.AST.ArgKeyword ds ds1 ds2 -> GHC.Types.LT }
                   Language.Python.Common.AST.ArgKeyword a1 a2 a3
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.GT
                        Language.Python.Common.AST.ArgKeyword b1 b4 b3
                        -> case a1 of wild2 { Language.Python.Common.AST.Ident a4 a5 ->
                           case b1 of wild3 { Language.Python.Common.AST.Ident b5 b6 ->
                           case GHC.Classes.$fOrd[]_$s$ccompare1 a4 b5 of wild4 {
                             GHC.Types.LT -> GHC.Types.LT
                             GHC.Types.EQ
                             -> case GHC.Classes.compare @ annot1 $dOrd a5 b6 of wild5 {
                                  GHC.Types.LT -> GHC.Types.LT
                                  GHC.Types.EQ
                                  -> case Language.Python.Common.AST.$fOrdArgument_$ccompare1
                                            @ annot1
                                            $dOrd
                                            a2
                                            b4 of wild6 {
                                       GHC.Types.LT -> GHC.Types.LT
                                       GHC.Types.EQ -> GHC.Classes.compare @ annot1 $dOrd a3 b3
                                       GHC.Types.GT -> GHC.Types.GT }
                                  GHC.Types.GT -> GHC.Types.GT }
                             GHC.Types.GT -> GHC.Types.GT } } } } }) -}
94dde4ffceed0a2a13daed020b6576e1
  $fOrdArgument_$ccompare1 ::
    GHC.Classes.Ord annot =>
    Language.Python.Common.AST.Expr annot
    -> Language.Python.Common.AST.Expr annot -> GHC.Types.Ordering
  {- Arity: 1, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)> -}
94dde4ffceed0a2a13daed020b6576e1
  $fOrdArgument_$cmax ::
    GHC.Classes.Ord annot =>
    Language.Python.Common.AST.Argument annot
    -> Language.Python.Common.AST.Argument annot
    -> Language.Python.Common.AST.Argument annot
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)><S,U><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ annot1
                   ($dOrd :: GHC.Classes.Ord annot1)
                   (x :: Language.Python.Common.AST.Argument annot1)
                   (y :: Language.Python.Common.AST.Argument annot1) ->
                 case Language.Python.Common.AST.$fOrdArgument_$ccompare
                        @ annot1
                        $dOrd
                        x
                        y of wild {
                   DEFAULT -> y GHC.Types.GT -> x }) -}
94dde4ffceed0a2a13daed020b6576e1
  $fOrdArgument_$cmin ::
    GHC.Classes.Ord annot =>
    Language.Python.Common.AST.Argument annot
    -> Language.Python.Common.AST.Argument annot
    -> Language.Python.Common.AST.Argument annot
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)><S,U><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ annot1
                   ($dOrd :: GHC.Classes.Ord annot1)
                   (x :: Language.Python.Common.AST.Argument annot1)
                   (y :: Language.Python.Common.AST.Argument annot1) ->
                 case Language.Python.Common.AST.$fOrdArgument_$ccompare
                        @ annot1
                        $dOrd
                        x
                        y of wild {
                   DEFAULT -> x GHC.Types.GT -> y }) -}
94dde4ffceed0a2a13daed020b6576e1
  $fOrdArgument_$cp1Ord ::
    GHC.Classes.Ord annot =>
    GHC.Classes.Eq (Language.Python.Common.AST.Argument annot)
  {- Arity: 1, HasNoCafRefs,
     Strictness: <L,1*U(1*U(C(C1(U)),A),A,A,A,A,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ annot1 ($dOrd :: GHC.Classes.Ord annot1) ->
                 Language.Python.Common.AST.$fEqArgument
                   @ annot1
                   (GHC.Classes.$p1Ord @ annot1 $dOrd)) -}
f55a81e56367dca5b5d86dd1548fd97f
  $fOrdAssignOp ::
    GHC.Classes.Ord annot =>
    GHC.Classes.Ord (Language.Python.Common.AST.AssignOp annot)
  DFunId
  {- Arity: 1, HasNoCafRefs,
     Strictness: <L,U(1*U(C(C1(U)),A),C(C1(U)),A,A,A,A,A,A)>m,
     Inline: CONLIKE,
     Unfolding: DFun: @ annot1 (v :: GHC.Classes.Ord annot1).
                  @ (Language.Python.Common.AST.AssignOp annot1)
                  (Language.Python.Common.AST.$fOrdAssignOp_$cp1Ord @ annot1 v)
                  (Language.Python.Common.AST.$fOrdAssignOp_$ccompare @ annot1 v)
                  (Language.Python.Common.AST.$fOrdAssignOp_$c< @ annot1 v)
                  (Language.Python.Common.AST.$fOrdAssignOp_$c<= @ annot1 v)
                  (Language.Python.Common.AST.$fOrdAssignOp_$c> @ annot1 v)
                  (Language.Python.Common.AST.$fOrdAssignOp_$c>= @ annot1 v)
                  (Language.Python.Common.AST.$fOrdAssignOp_$cmax @ annot1 v)
                  (Language.Python.Common.AST.$fOrdAssignOp_$cmin @ annot1 v) -}
f55a81e56367dca5b5d86dd1548fd97f
  $fOrdAssignOp_$c< ::
    GHC.Classes.Ord annot =>
    Language.Python.Common.AST.AssignOp annot
    -> Language.Python.Common.AST.AssignOp annot -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(A,1*C1(C1(U)),A,A,A,A,A,A)><S,1*U><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ annot1
                   ($dOrd :: GHC.Classes.Ord annot1)
                   (x :: Language.Python.Common.AST.AssignOp annot1)
                   (y :: Language.Python.Common.AST.AssignOp annot1) ->
                 case Language.Python.Common.AST.$fOrdAssignOp_$ccompare
                        @ annot1
                        $dOrd
                        x
                        y of wild {
                   DEFAULT -> GHC.Types.False GHC.Types.LT -> GHC.Types.True }) -}
f55a81e56367dca5b5d86dd1548fd97f
  $fOrdAssignOp_$c<= ::
    GHC.Classes.Ord annot =>
    Language.Python.Common.AST.AssignOp annot
    -> Language.Python.Common.AST.AssignOp annot -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(A,1*C1(C1(U)),A,A,A,A,A,A)><S,1*U><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ annot1
                   ($dOrd :: GHC.Classes.Ord annot1)
                   (x :: Language.Python.Common.AST.AssignOp annot1)
                   (y :: Language.Python.Common.AST.AssignOp annot1) ->
                 case Language.Python.Common.AST.$fOrdAssignOp_$ccompare
                        @ annot1
                        $dOrd
                        x
                        y of wild {
                   DEFAULT -> GHC.Types.True GHC.Types.GT -> GHC.Types.False }) -}
f55a81e56367dca5b5d86dd1548fd97f
  $fOrdAssignOp_$c> ::
    GHC.Classes.Ord annot =>
    Language.Python.Common.AST.AssignOp annot
    -> Language.Python.Common.AST.AssignOp annot -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(A,1*C1(C1(U)),A,A,A,A,A,A)><S,1*U><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ annot1
                   ($dOrd :: GHC.Classes.Ord annot1)
                   (x :: Language.Python.Common.AST.AssignOp annot1)
                   (y :: Language.Python.Common.AST.AssignOp annot1) ->
                 case Language.Python.Common.AST.$fOrdAssignOp_$ccompare
                        @ annot1
                        $dOrd
                        x
                        y of wild {
                   DEFAULT -> GHC.Types.False GHC.Types.GT -> GHC.Types.True }) -}
f55a81e56367dca5b5d86dd1548fd97f
  $fOrdAssignOp_$c>= ::
    GHC.Classes.Ord annot =>
    Language.Python.Common.AST.AssignOp annot
    -> Language.Python.Common.AST.AssignOp annot -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(A,1*C1(C1(U)),A,A,A,A,A,A)><S,1*U><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ annot1
                   ($dOrd :: GHC.Classes.Ord annot1)
                   (x :: Language.Python.Common.AST.AssignOp annot1)
                   (y :: Language.Python.Common.AST.AssignOp annot1) ->
                 case Language.Python.Common.AST.$fOrdAssignOp_$ccompare
                        @ annot1
                        $dOrd
                        x
                        y of wild {
                   DEFAULT -> GHC.Types.True GHC.Types.LT -> GHC.Types.False }) -}
f55a81e56367dca5b5d86dd1548fd97f
  $fOrdAssignOp_$ccompare ::
    GHC.Classes.Ord annot =>
    Language.Python.Common.AST.AssignOp annot
    -> Language.Python.Common.AST.AssignOp annot -> GHC.Types.Ordering
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(A,1*C1(C1(U)),A,A,A,A,A,A)><S,1*U><S,U> -}
f55a81e56367dca5b5d86dd1548fd97f
  $fOrdAssignOp_$cmax ::
    GHC.Classes.Ord annot =>
    Language.Python.Common.AST.AssignOp annot
    -> Language.Python.Common.AST.AssignOp annot
    -> Language.Python.Common.AST.AssignOp annot
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(A,1*C1(C1(U)),A,A,A,A,A,A)><S,U><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ annot1
                   ($dOrd :: GHC.Classes.Ord annot1)
                   (x :: Language.Python.Common.AST.AssignOp annot1)
                   (y :: Language.Python.Common.AST.AssignOp annot1) ->
                 case Language.Python.Common.AST.$fOrdAssignOp_$ccompare
                        @ annot1
                        $dOrd
                        x
                        y of wild {
                   DEFAULT -> y GHC.Types.GT -> x }) -}
f55a81e56367dca5b5d86dd1548fd97f
  $fOrdAssignOp_$cmin ::
    GHC.Classes.Ord annot =>
    Language.Python.Common.AST.AssignOp annot
    -> Language.Python.Common.AST.AssignOp annot
    -> Language.Python.Common.AST.AssignOp annot
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(A,1*C1(C1(U)),A,A,A,A,A,A)><S,U><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ annot1
                   ($dOrd :: GHC.Classes.Ord annot1)
                   (x :: Language.Python.Common.AST.AssignOp annot1)
                   (y :: Language.Python.Common.AST.AssignOp annot1) ->
                 case Language.Python.Common.AST.$fOrdAssignOp_$ccompare
                        @ annot1
                        $dOrd
                        x
                        y of wild {
                   DEFAULT -> x GHC.Types.GT -> y }) -}
f55a81e56367dca5b5d86dd1548fd97f
  $fOrdAssignOp_$cp1Ord ::
    GHC.Classes.Ord annot =>
    GHC.Classes.Eq (Language.Python.Common.AST.AssignOp annot)
  {- Arity: 1, HasNoCafRefs,
     Strictness: <L,1*U(1*U(C(C1(U)),A),A,A,A,A,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ annot1 ($dOrd :: GHC.Classes.Ord annot1) ->
                 Language.Python.Common.AST.$fEqAssignOp
                   @ annot1
                   (GHC.Classes.$p1Ord @ annot1 $dOrd)) -}
94dde4ffceed0a2a13daed020b6576e1
  $fOrdCompFor ::
    GHC.Classes.Ord annot =>
    GHC.Classes.Ord (Language.Python.Common.AST.CompFor annot)
  DFunId
  {- Arity: 1, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)>m,
     Inline: CONLIKE,
     Unfolding: DFun: @ annot1 (v :: GHC.Classes.Ord annot1).
                  @ (Language.Python.Common.AST.CompFor annot1)
                  (Language.Python.Common.AST.$fOrdCompFor_$cp1Ord @ annot1 v)
                  (Language.Python.Common.AST.$fOrdCompFor_$ccompare1 @ annot1 v)
                  (Language.Python.Common.AST.$fOrdCompFor_$c< @ annot1 v)
                  (Language.Python.Common.AST.$fOrdCompFor_$c<= @ annot1 v)
                  (\ (a :: Language.Python.Common.AST.CompFor annot1)
                     (b :: Language.Python.Common.AST.CompFor annot1) ->
                   Language.Python.Common.AST.$fOrdCompFor_$c< @ annot1 v b a)
                  (Language.Python.Common.AST.$fOrdCompFor_$c>= @ annot1 v)
                  (Language.Python.Common.AST.$fOrdCompFor_$cmax @ annot1 v)
                  (Language.Python.Common.AST.$fOrdCompFor_$cmin @ annot1 v) -}
94dde4ffceed0a2a13daed020b6576e1
  $fOrdCompFor_$c< ::
    GHC.Classes.Ord annot =>
    Language.Python.Common.AST.CompFor annot
    -> Language.Python.Common.AST.CompFor annot -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)>,
     Unfolding: (\ @ annot1 ($dOrd :: GHC.Classes.Ord annot1) ->
                 let {
                   $dOrd1 :: GHC.Classes.Ord (Language.Python.Common.AST.Expr annot1)
                   = Language.Python.Common.AST.$fOrdExpr @ annot1 $dOrd
                 } in
                 let {
                   lvl447 :: Language.Python.Common.AST.Expr annot1
                             -> Language.Python.Common.AST.Expr annot1 -> GHC.Types.Ordering
                   = Language.Python.Common.AST.$fOrdArgument_$ccompare1
                       @ annot1
                       $dOrd
                 } in
                 \ (a :: Language.Python.Common.AST.CompFor annot1)
                   (b :: Language.Python.Common.AST.CompFor annot1) ->
                 case a of wild { Language.Python.Common.AST.CompFor a1 a2 a3 a4 a5 ->
                 case b of wild1 { Language.Python.Common.AST.CompFor b1 b4 b3 b5 b6 ->
                 let {
                   $j :: GHC.Types.Bool <join 0>
                   = case GHC.Classes.$fOrd[]_$ccompare
                            @ (Language.Python.Common.AST.Expr annot1)
                            $dOrd1
                            a2
                            b4 of wild2 {
                       GHC.Types.LT -> GHC.Types.True
                       GHC.Types.EQ
                       -> case lvl447 a3 b3 of wild3 {
                            GHC.Types.LT -> GHC.Types.True
                            GHC.Types.EQ
                            -> case a4 of wild4 {
                                 GHC.Base.Nothing
                                 -> case b5 of wild5 {
                                      GHC.Base.Nothing -> GHC.Classes.< @ annot1 $dOrd a5 b6
                                      GHC.Base.Just ipv -> GHC.Types.True }
                                 GHC.Base.Just a7
                                 -> case b5 of wild5 {
                                      GHC.Base.Nothing -> GHC.Types.False
                                      GHC.Base.Just b7
                                      -> case Language.Python.Common.AST.$fOrdCompFor_$ccompare
                                                @ annot1
                                                $dOrd
                                                a7
                                                b7 of wild6 {
                                           GHC.Types.LT -> GHC.Types.True
                                           GHC.Types.EQ -> GHC.Classes.< @ annot1 $dOrd a5 b6
                                           GHC.Types.GT -> GHC.Types.False } } }
                            GHC.Types.GT -> GHC.Types.False }
                       GHC.Types.GT -> GHC.Types.False }
                 } in
                 case a1 of wild2 {
                   GHC.Types.False
                   -> case b1 of wild3 {
                        GHC.Types.False -> $j GHC.Types.True -> GHC.Types.True }
                   GHC.Types.True
                   -> case b1 of wild3 {
                        GHC.Types.False -> GHC.Types.False GHC.Types.True -> $j } } } }) -}
94dde4ffceed0a2a13daed020b6576e1
  $fOrdCompFor_$c<= ::
    GHC.Classes.Ord annot =>
    Language.Python.Common.AST.CompFor annot
    -> Language.Python.Common.AST.CompFor annot -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)><L,U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ annot1
                   ($dOrd :: GHC.Classes.Ord annot1)
                   (a :: Language.Python.Common.AST.CompFor annot1)
                   (b :: Language.Python.Common.AST.CompFor annot1) ->
                 case Language.Python.Common.AST.$fOrdCompFor_$c<
                        @ annot1
                        $dOrd
                        b
                        a of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
94dde4ffceed0a2a13daed020b6576e1
  $fOrdCompFor_$c>= ::
    GHC.Classes.Ord annot =>
    Language.Python.Common.AST.CompFor annot
    -> Language.Python.Common.AST.CompFor annot -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)><L,U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ annot1
                   ($dOrd :: GHC.Classes.Ord annot1)
                   (a :: Language.Python.Common.AST.CompFor annot1)
                   (b :: Language.Python.Common.AST.CompFor annot1) ->
                 case Language.Python.Common.AST.$fOrdCompFor_$c<
                        @ annot1
                        $dOrd
                        a
                        b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
94dde4ffceed0a2a13daed020b6576e1
  $fOrdCompFor_$ccompare ::
    GHC.Classes.Ord annot =>
    Language.Python.Common.AST.CompIter annot
    -> Language.Python.Common.AST.CompIter annot -> GHC.Types.Ordering
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)><S,1*U><S,1*U> -}
94dde4ffceed0a2a13daed020b6576e1
  $fOrdCompFor_$ccompare1 ::
    GHC.Classes.Ord annot =>
    Language.Python.Common.AST.CompFor annot
    -> Language.Python.Common.AST.CompFor annot -> GHC.Types.Ordering
  {- Arity: 1, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)> -}
94dde4ffceed0a2a13daed020b6576e1
  $fOrdCompFor_$cmax ::
    GHC.Classes.Ord annot =>
    Language.Python.Common.AST.CompFor annot
    -> Language.Python.Common.AST.CompFor annot
    -> Language.Python.Common.AST.CompFor annot
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)><L,U(U,U,U,U,U)><L,U(U,U,U,U,U)>,
     Unfolding: InlineRule (3, True, False)
                (\ @ annot1
                   ($dOrd :: GHC.Classes.Ord annot1)
                   (x :: Language.Python.Common.AST.CompFor annot1)
                   (y :: Language.Python.Common.AST.CompFor annot1) ->
                 case Language.Python.Common.AST.$fOrdCompFor_$c<
                        @ annot1
                        $dOrd
                        y
                        x of wild {
                   GHC.Types.False -> y GHC.Types.True -> x }) -}
94dde4ffceed0a2a13daed020b6576e1
  $fOrdCompFor_$cmin ::
    GHC.Classes.Ord annot =>
    Language.Python.Common.AST.CompFor annot
    -> Language.Python.Common.AST.CompFor annot
    -> Language.Python.Common.AST.CompFor annot
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)><L,U(U,U,U,U,U)><L,U(U,U,U,U,U)>,
     Unfolding: InlineRule (3, True, False)
                (\ @ annot1
                   ($dOrd :: GHC.Classes.Ord annot1)
                   (x :: Language.Python.Common.AST.CompFor annot1)
                   (y :: Language.Python.Common.AST.CompFor annot1) ->
                 case Language.Python.Common.AST.$fOrdCompFor_$c<
                        @ annot1
                        $dOrd
                        y
                        x of wild {
                   GHC.Types.False -> x GHC.Types.True -> y }) -}
94dde4ffceed0a2a13daed020b6576e1
  $fOrdCompFor_$cp1Ord ::
    GHC.Classes.Ord annot =>
    GHC.Classes.Eq (Language.Python.Common.AST.CompFor annot)
  {- Arity: 1, HasNoCafRefs,
     Strictness: <L,1*U(1*U(C(C1(U)),A),A,A,A,A,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ annot1 ($dOrd :: GHC.Classes.Ord annot1) ->
                 Language.Python.Common.AST.$fEqCompFor
                   @ annot1
                   (GHC.Classes.$p1Ord @ annot1 $dOrd)) -}
94dde4ffceed0a2a13daed020b6576e1
  $fOrdCompIf ::
    GHC.Classes.Ord annot =>
    GHC.Classes.Ord (Language.Python.Common.AST.CompIf annot)
  DFunId
  {- Arity: 1, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)>m,
     Inline: CONLIKE,
     Unfolding: DFun: @ annot1 (v :: GHC.Classes.Ord annot1).
                  @ (Language.Python.Common.AST.CompIf annot1)
                  (Language.Python.Common.AST.$fOrdCompIf_$cp1Ord @ annot1 v)
                  (Language.Python.Common.AST.$fOrdCompIf_$ccompare @ annot1 v)
                  (Language.Python.Common.AST.$fOrdCompIf_$c< @ annot1 v)
                  (Language.Python.Common.AST.$fOrdCompIf_$c<= @ annot1 v)
                  (\ (a :: Language.Python.Common.AST.CompIf annot1)
                     (b :: Language.Python.Common.AST.CompIf annot1) ->
                   Language.Python.Common.AST.$fOrdCompIf_$c< @ annot1 v b a)
                  (Language.Python.Common.AST.$fOrdCompIf_$c>= @ annot1 v)
                  (Language.Python.Common.AST.$fOrdCompIf_$cmax @ annot1 v)
                  (Language.Python.Common.AST.$fOrdCompIf_$cmin @ annot1 v) -}
94dde4ffceed0a2a13daed020b6576e1
  $fOrdCompIf_$c< ::
    GHC.Classes.Ord annot =>
    Language.Python.Common.AST.CompIf annot
    -> Language.Python.Common.AST.CompIf annot -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)><S,1*U(U,1*U,U)><S,1*U(U,1*U,U)>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ @ annot1
                   (w :: GHC.Classes.Ord annot1)
                   (w249 :: Language.Python.Common.AST.CompIf annot1)
                   (w250 :: Language.Python.Common.AST.CompIf annot1) ->
                 case w249 of ww { Language.Python.Common.AST.CompIf ww1 ww2 ww3 ->
                 case w250 of ww4 { Language.Python.Common.AST.CompIf ww5 ww6 ww7 ->
                 Language.Python.Common.AST.$w$c<
                   @ annot1
                   w
                   ww1
                   ww2
                   ww3
                   ww5
                   ww6
                   ww7 } }) -}
94dde4ffceed0a2a13daed020b6576e1
  $fOrdCompIf_$c<= ::
    GHC.Classes.Ord annot =>
    Language.Python.Common.AST.CompIf annot
    -> Language.Python.Common.AST.CompIf annot -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)><S,1*U(U,1*U,U)><S,1*U(U,1*U,U)>,
     Unfolding: InlineRule (3, True, False)
                (\ @ annot1
                   ($dOrd :: GHC.Classes.Ord annot1)
                   (a :: Language.Python.Common.AST.CompIf annot1)
                   (b :: Language.Python.Common.AST.CompIf annot1) ->
                 case Language.Python.Common.AST.$fOrdCompIf_$c<
                        @ annot1
                        $dOrd
                        b
                        a of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
94dde4ffceed0a2a13daed020b6576e1
  $fOrdCompIf_$c>= ::
    GHC.Classes.Ord annot =>
    Language.Python.Common.AST.CompIf annot
    -> Language.Python.Common.AST.CompIf annot -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)><S,1*U(U,1*U,U)><S,1*U(U,1*U,U)>,
     Unfolding: InlineRule (3, True, False)
                (\ @ annot1
                   ($dOrd :: GHC.Classes.Ord annot1)
                   (a :: Language.Python.Common.AST.CompIf annot1)
                   (b :: Language.Python.Common.AST.CompIf annot1) ->
                 case Language.Python.Common.AST.$fOrdCompIf_$c<
                        @ annot1
                        $dOrd
                        a
                        b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
94dde4ffceed0a2a13daed020b6576e1
  $fOrdCompIf_$ccompare ::
    GHC.Classes.Ord annot =>
    Language.Python.Common.AST.CompIf annot
    -> Language.Python.Common.AST.CompIf annot -> GHC.Types.Ordering
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)><S,1*U(U,1*U,U)><S,1*U(U,1*U,U)>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ @ annot1
                   (w :: GHC.Classes.Ord annot1)
                   (w249 :: Language.Python.Common.AST.CompIf annot1)
                   (w250 :: Language.Python.Common.AST.CompIf annot1) ->
                 case w249 of ww { Language.Python.Common.AST.CompIf ww1 ww2 ww3 ->
                 case w250 of ww4 { Language.Python.Common.AST.CompIf ww5 ww6 ww7 ->
                 Language.Python.Common.AST.$w$ccompare
                   @ annot1
                   w
                   ww1
                   ww2
                   ww3
                   ww5
                   ww6
                   ww7 } }) -}
94dde4ffceed0a2a13daed020b6576e1
  $fOrdCompIf_$cmax ::
    GHC.Classes.Ord annot =>
    Language.Python.Common.AST.CompIf annot
    -> Language.Python.Common.AST.CompIf annot
    -> Language.Python.Common.AST.CompIf annot
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)><S,1*U(U,U,U)><S,1*U(U,U,U)>m,
     Unfolding: InlineRule (3, True, False)
                (\ @ annot1
                   ($dOrd :: GHC.Classes.Ord annot1)
                   (x :: Language.Python.Common.AST.CompIf annot1)
                   (y :: Language.Python.Common.AST.CompIf annot1) ->
                 case Language.Python.Common.AST.$fOrdCompIf_$c<
                        @ annot1
                        $dOrd
                        y
                        x of wild {
                   GHC.Types.False -> y GHC.Types.True -> x }) -}
94dde4ffceed0a2a13daed020b6576e1
  $fOrdCompIf_$cmin ::
    GHC.Classes.Ord annot =>
    Language.Python.Common.AST.CompIf annot
    -> Language.Python.Common.AST.CompIf annot
    -> Language.Python.Common.AST.CompIf annot
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)><S,1*U(U,U,U)><S,1*U(U,U,U)>m,
     Unfolding: InlineRule (3, True, False)
                (\ @ annot1
                   ($dOrd :: GHC.Classes.Ord annot1)
                   (x :: Language.Python.Common.AST.CompIf annot1)
                   (y :: Language.Python.Common.AST.CompIf annot1) ->
                 case Language.Python.Common.AST.$fOrdCompIf_$c<
                        @ annot1
                        $dOrd
                        y
                        x of wild {
                   GHC.Types.False -> x GHC.Types.True -> y }) -}
94dde4ffceed0a2a13daed020b6576e1
  $fOrdCompIf_$cp1Ord ::
    GHC.Classes.Ord annot =>
    GHC.Classes.Eq (Language.Python.Common.AST.CompIf annot)
  {- Arity: 1, HasNoCafRefs,
     Strictness: <L,1*U(1*U(C(C1(U)),A),A,A,A,A,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ annot1 ($dOrd :: GHC.Classes.Ord annot1) ->
                 Language.Python.Common.AST.$fEqCompIf
                   @ annot1
                   (GHC.Classes.$p1Ord @ annot1 $dOrd)) -}
94dde4ffceed0a2a13daed020b6576e1
  $fOrdCompIter ::
    GHC.Classes.Ord annot =>
    GHC.Classes.Ord (Language.Python.Common.AST.CompIter annot)
  DFunId
  {- Arity: 1, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)>m,
     Inline: CONLIKE,
     Unfolding: DFun: @ annot1 (v :: GHC.Classes.Ord annot1).
                  @ (Language.Python.Common.AST.CompIter annot1)
                  (Language.Python.Common.AST.$fOrdCompIter_$cp1Ord @ annot1 v)
                  (Language.Python.Common.AST.$fOrdCompFor_$ccompare @ annot1 v)
                  (Language.Python.Common.AST.$fOrdCompIter_$c< @ annot1 v)
                  (Language.Python.Common.AST.$fOrdCompIter_$c<= @ annot1 v)
                  (\ (a :: Language.Python.Common.AST.CompIter annot1)
                     (b :: Language.Python.Common.AST.CompIter annot1) ->
                   Language.Python.Common.AST.$fOrdCompIter_$c< @ annot1 v b a)
                  (Language.Python.Common.AST.$fOrdCompIter_$c>= @ annot1 v)
                  (Language.Python.Common.AST.$fOrdCompIter_$cmax @ annot1 v)
                  (Language.Python.Common.AST.$fOrdCompIter_$cmin @ annot1 v) -}
94dde4ffceed0a2a13daed020b6576e1
  $fOrdCompIter_$c< ::
    GHC.Classes.Ord annot =>
    Language.Python.Common.AST.CompIter annot
    -> Language.Python.Common.AST.CompIter annot -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)><S,1*U><S,1*U>,
     Unfolding: (\ @ annot1
                   ($dOrd :: GHC.Classes.Ord annot1)
                   (a :: Language.Python.Common.AST.CompIter annot1)
                   (b :: Language.Python.Common.AST.CompIter annot1) ->
                 case a of wild {
                   Language.Python.Common.AST.IterFor a1 a2
                   -> case b of wild1 {
                        Language.Python.Common.AST.IterFor b1 b4
                        -> case Language.Python.Common.AST.$fOrdCompFor_$ccompare1
                                  @ annot1
                                  $dOrd
                                  a1
                                  b1 of wild2 {
                             GHC.Types.LT -> GHC.Types.True
                             GHC.Types.EQ -> GHC.Classes.< @ annot1 $dOrd a2 b4
                             GHC.Types.GT -> GHC.Types.False }
                        Language.Python.Common.AST.IterIf ipv ipv1 -> GHC.Types.True }
                   Language.Python.Common.AST.IterIf a1 a2
                   -> case b of wild1 {
                        Language.Python.Common.AST.IterFor ipv ipv1 -> GHC.Types.False
                        Language.Python.Common.AST.IterIf b1 b4
                        -> case a1 of ww { Language.Python.Common.AST.CompIf ww1 ww2 ww3 ->
                           case b1 of ww4 { Language.Python.Common.AST.CompIf ww5 ww6 ww7 ->
                           case Language.Python.Common.AST.$w$ccompare
                                  @ annot1
                                  $dOrd
                                  ww1
                                  ww2
                                  ww3
                                  ww5
                                  ww6
                                  ww7 of wild2 {
                             GHC.Types.LT -> GHC.Types.True
                             GHC.Types.EQ -> GHC.Classes.< @ annot1 $dOrd a2 b4
                             GHC.Types.GT -> GHC.Types.False } } } } }) -}
94dde4ffceed0a2a13daed020b6576e1
  $fOrdCompIter_$c<= ::
    GHC.Classes.Ord annot =>
    Language.Python.Common.AST.CompIter annot
    -> Language.Python.Common.AST.CompIter annot -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)><S,1*U><S,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ annot1
                   ($dOrd :: GHC.Classes.Ord annot1)
                   (a :: Language.Python.Common.AST.CompIter annot1)
                   (b :: Language.Python.Common.AST.CompIter annot1) ->
                 case Language.Python.Common.AST.$fOrdCompIter_$c<
                        @ annot1
                        $dOrd
                        b
                        a of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
94dde4ffceed0a2a13daed020b6576e1
  $fOrdCompIter_$c>= ::
    GHC.Classes.Ord annot =>
    Language.Python.Common.AST.CompIter annot
    -> Language.Python.Common.AST.CompIter annot -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)><S,1*U><S,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ annot1
                   ($dOrd :: GHC.Classes.Ord annot1)
                   (a :: Language.Python.Common.AST.CompIter annot1)
                   (b :: Language.Python.Common.AST.CompIter annot1) ->
                 case Language.Python.Common.AST.$fOrdCompIter_$c<
                        @ annot1
                        $dOrd
                        a
                        b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
94dde4ffceed0a2a13daed020b6576e1
  $fOrdCompIter_$cmax ::
    GHC.Classes.Ord annot =>
    Language.Python.Common.AST.CompIter annot
    -> Language.Python.Common.AST.CompIter annot
    -> Language.Python.Common.AST.CompIter annot
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)><S,U><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ annot1
                   ($dOrd :: GHC.Classes.Ord annot1)
                   (x :: Language.Python.Common.AST.CompIter annot1)
                   (y :: Language.Python.Common.AST.CompIter annot1) ->
                 case Language.Python.Common.AST.$fOrdCompIter_$c<
                        @ annot1
                        $dOrd
                        y
                        x of wild {
                   GHC.Types.False -> y GHC.Types.True -> x }) -}
94dde4ffceed0a2a13daed020b6576e1
  $fOrdCompIter_$cmin ::
    GHC.Classes.Ord annot =>
    Language.Python.Common.AST.CompIter annot
    -> Language.Python.Common.AST.CompIter annot
    -> Language.Python.Common.AST.CompIter annot
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)><S,U><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ annot1
                   ($dOrd :: GHC.Classes.Ord annot1)
                   (x :: Language.Python.Common.AST.CompIter annot1)
                   (y :: Language.Python.Common.AST.CompIter annot1) ->
                 case Language.Python.Common.AST.$fOrdCompIter_$c<
                        @ annot1
                        $dOrd
                        y
                        x of wild {
                   GHC.Types.False -> x GHC.Types.True -> y }) -}
94dde4ffceed0a2a13daed020b6576e1
  $fOrdCompIter_$cp1Ord ::
    GHC.Classes.Ord annot =>
    GHC.Classes.Eq (Language.Python.Common.AST.CompIter annot)
  {- Arity: 1, HasNoCafRefs,
     Strictness: <L,1*U(1*U(C(C1(U)),A),A,A,A,A,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ annot1 ($dOrd :: GHC.Classes.Ord annot1) ->
                 Language.Python.Common.AST.$fEqCompIter
                   @ annot1
                   (GHC.Classes.$p1Ord @ annot1 $dOrd)) -}
94dde4ffceed0a2a13daed020b6576e1
  $fOrdComprehension ::
    GHC.Classes.Ord annot =>
    GHC.Classes.Ord (Language.Python.Common.AST.Comprehension annot)
  DFunId
  {- Arity: 1, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)>m,
     Inline: CONLIKE,
     Unfolding: DFun: @ annot1 (v :: GHC.Classes.Ord annot1).
                  @ (Language.Python.Common.AST.Comprehension annot1)
                  (Language.Python.Common.AST.$fOrdComprehension_$cp1Ord @ annot1 v)
                  (Language.Python.Common.AST.$fOrdComprehension_$ccompare2
                     @ annot1
                     v)
                  (Language.Python.Common.AST.$fOrdComprehension_$c< @ annot1 v)
                  (Language.Python.Common.AST.$fOrdComprehension_$c<= @ annot1 v)
                  (\ (a :: Language.Python.Common.AST.Comprehension annot1)
                     (b :: Language.Python.Common.AST.Comprehension annot1) ->
                   Language.Python.Common.AST.$fOrdComprehension_$c< @ annot1 v b a)
                  (Language.Python.Common.AST.$fOrdComprehension_$c>= @ annot1 v)
                  (Language.Python.Common.AST.$fOrdComprehension_$cmax @ annot1 v)
                  (Language.Python.Common.AST.$fOrdComprehension_$cmin @ annot1 v) -}
94dde4ffceed0a2a13daed020b6576e1
  $fOrdComprehensionExpr ::
    GHC.Classes.Ord annot =>
    GHC.Classes.Ord
      (Language.Python.Common.AST.ComprehensionExpr annot)
  DFunId
  {- Arity: 1, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)>m,
     Inline: CONLIKE,
     Unfolding: DFun: @ annot1 (v :: GHC.Classes.Ord annot1).
                  @ (Language.Python.Common.AST.ComprehensionExpr annot1)
                  (Language.Python.Common.AST.$fOrdComprehensionExpr_$cp1Ord
                     @ annot1
                     v)
                  (Language.Python.Common.AST.$fOrdComprehension_$ccompare
                     @ annot1
                     v)
                  (Language.Python.Common.AST.$fOrdComprehensionExpr_$c< @ annot1 v)
                  (Language.Python.Common.AST.$fOrdComprehensionExpr_$c<= @ annot1 v)
                  (\ (a :: Language.Python.Common.AST.ComprehensionExpr annot1)
                     (b :: Language.Python.Common.AST.ComprehensionExpr annot1) ->
                   Language.Python.Common.AST.$fOrdComprehensionExpr_$c<
                     @ annot1
                     v
                     b
                     a)
                  (Language.Python.Common.AST.$fOrdComprehensionExpr_$c>= @ annot1 v)
                  (Language.Python.Common.AST.$fOrdComprehensionExpr_$cmax
                     @ annot1
                     v)
                  (Language.Python.Common.AST.$fOrdComprehensionExpr_$cmin
                     @ annot1
                     v) -}
94dde4ffceed0a2a13daed020b6576e1
  $fOrdComprehensionExpr_$c< ::
    GHC.Classes.Ord annot =>
    Language.Python.Common.AST.ComprehensionExpr annot
    -> Language.Python.Common.AST.ComprehensionExpr annot
    -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)><S,1*U><S,1*U>,
     Unfolding: (\ @ annot1
                   ($dOrd :: GHC.Classes.Ord annot1)
                   (a :: Language.Python.Common.AST.ComprehensionExpr annot1)
                   (b :: Language.Python.Common.AST.ComprehensionExpr annot1) ->
                 case a of wild {
                   Language.Python.Common.AST.ComprehensionExpr a1
                   -> case b of wild1 {
                        Language.Python.Common.AST.ComprehensionExpr b1
                        -> Language.Python.Common.AST.$fOrdExpr_$c< @ annot1 $dOrd a1 b1
                        Language.Python.Common.AST.ComprehensionDict ipv
                        -> GHC.Types.True }
                   Language.Python.Common.AST.ComprehensionDict a1
                   -> case b of wild1 {
                        Language.Python.Common.AST.ComprehensionExpr ipv -> GHC.Types.False
                        Language.Python.Common.AST.ComprehensionDict b1
                        -> Language.Python.Common.AST.$fOrdComprehensionExpr_$c<1
                             @ annot1
                             $dOrd
                             a1
                             b1 } }) -}
94dde4ffceed0a2a13daed020b6576e1
  $fOrdComprehensionExpr_$c<1 ::
    GHC.Classes.Ord annot =>
    Language.Python.Common.AST.DictKeyDatumList annot
    -> Language.Python.Common.AST.DictKeyDatumList annot
    -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)><S,1*U><S,1*U>,
     Unfolding: (\ @ annot1
                   ($dOrd :: GHC.Classes.Ord annot1)
                   (a :: Language.Python.Common.AST.DictKeyDatumList annot1)
                   (b :: Language.Python.Common.AST.DictKeyDatumList annot1) ->
                 case a of wild {
                   Language.Python.Common.AST.DictMappingPair a1 a2
                   -> case b of wild1 {
                        Language.Python.Common.AST.DictMappingPair b1 b4
                        -> case Language.Python.Common.AST.$fOrdArgument_$ccompare1
                                  @ annot1
                                  $dOrd
                                  a1
                                  b1 of wild2 {
                             GHC.Types.LT -> GHC.Types.True
                             GHC.Types.EQ
                             -> Language.Python.Common.AST.$fOrdExpr_$c< @ annot1 $dOrd a2 b4
                             GHC.Types.GT -> GHC.Types.False }
                        Language.Python.Common.AST.DictUnpacking ipv -> GHC.Types.True }
                   Language.Python.Common.AST.DictUnpacking a1
                   -> case b of wild1 {
                        Language.Python.Common.AST.DictMappingPair ipv ipv1
                        -> GHC.Types.False
                        Language.Python.Common.AST.DictUnpacking b1
                        -> Language.Python.Common.AST.$fOrdExpr_$c<
                             @ annot1
                             $dOrd
                             a1
                             b1 } }) -}
94dde4ffceed0a2a13daed020b6576e1
  $fOrdComprehensionExpr_$c<= ::
    GHC.Classes.Ord annot =>
    Language.Python.Common.AST.ComprehensionExpr annot
    -> Language.Python.Common.AST.ComprehensionExpr annot
    -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)><S,1*U><S,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ annot1
                   ($dOrd :: GHC.Classes.Ord annot1)
                   (a :: Language.Python.Common.AST.ComprehensionExpr annot1)
                   (b :: Language.Python.Common.AST.ComprehensionExpr annot1) ->
                 case Language.Python.Common.AST.$fOrdComprehensionExpr_$c<
                        @ annot1
                        $dOrd
                        b
                        a of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
94dde4ffceed0a2a13daed020b6576e1
  $fOrdComprehensionExpr_$c>= ::
    GHC.Classes.Ord annot =>
    Language.Python.Common.AST.ComprehensionExpr annot
    -> Language.Python.Common.AST.ComprehensionExpr annot
    -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)><S,1*U><S,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ annot1
                   ($dOrd :: GHC.Classes.Ord annot1)
                   (a :: Language.Python.Common.AST.ComprehensionExpr annot1)
                   (b :: Language.Python.Common.AST.ComprehensionExpr annot1) ->
                 case Language.Python.Common.AST.$fOrdComprehensionExpr_$c<
                        @ annot1
                        $dOrd
                        a
                        b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
94dde4ffceed0a2a13daed020b6576e1
  $fOrdComprehensionExpr_$cmax ::
    GHC.Classes.Ord annot =>
    Language.Python.Common.AST.ComprehensionExpr annot
    -> Language.Python.Common.AST.ComprehensionExpr annot
    -> Language.Python.Common.AST.ComprehensionExpr annot
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)><S,U><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ annot1
                   ($dOrd :: GHC.Classes.Ord annot1)
                   (x :: Language.Python.Common.AST.ComprehensionExpr annot1)
                   (y :: Language.Python.Common.AST.ComprehensionExpr annot1) ->
                 case Language.Python.Common.AST.$fOrdComprehensionExpr_$c<
                        @ annot1
                        $dOrd
                        y
                        x of wild {
                   GHC.Types.False -> y GHC.Types.True -> x }) -}
94dde4ffceed0a2a13daed020b6576e1
  $fOrdComprehensionExpr_$cmin ::
    GHC.Classes.Ord annot =>
    Language.Python.Common.AST.ComprehensionExpr annot
    -> Language.Python.Common.AST.ComprehensionExpr annot
    -> Language.Python.Common.AST.ComprehensionExpr annot
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)><S,U><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ annot1
                   ($dOrd :: GHC.Classes.Ord annot1)
                   (x :: Language.Python.Common.AST.ComprehensionExpr annot1)
                   (y :: Language.Python.Common.AST.ComprehensionExpr annot1) ->
                 case Language.Python.Common.AST.$fOrdComprehensionExpr_$c<
                        @ annot1
                        $dOrd
                        y
                        x of wild {
                   GHC.Types.False -> x GHC.Types.True -> y }) -}
94dde4ffceed0a2a13daed020b6576e1
  $fOrdComprehensionExpr_$cp1Ord ::
    GHC.Classes.Ord annot =>
    GHC.Classes.Eq (Language.Python.Common.AST.ComprehensionExpr annot)
  {- Arity: 1, HasNoCafRefs,
     Strictness: <L,1*U(1*U(C(C1(U)),A),A,A,A,A,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ annot1 ($dOrd :: GHC.Classes.Ord annot1) ->
                 Language.Python.Common.AST.$fEqComprehensionExpr
                   @ annot1
                   (GHC.Classes.$p1Ord @ annot1 $dOrd)) -}
94dde4ffceed0a2a13daed020b6576e1
  $fOrdComprehension_$c< ::
    GHC.Classes.Ord annot =>
    Language.Python.Common.AST.Comprehension annot
    -> Language.Python.Common.AST.Comprehension annot -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)><S(SLL),1*U(1*U,U,U)><S(SLL),1*U(1*U,U,U)>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ @ annot1
                   (w :: GHC.Classes.Ord annot1)
                   (w249 :: Language.Python.Common.AST.Comprehension annot1)
                   (w250 :: Language.Python.Common.AST.Comprehension annot1) ->
                 case w249 of ww { Language.Python.Common.AST.Comprehension ww1 ww2 ww3 ->
                 case w250 of ww4 { Language.Python.Common.AST.Comprehension ww5 ww6 ww7 ->
                 Language.Python.Common.AST.$w$c<1
                   @ annot1
                   w
                   ww1
                   ww2
                   ww3
                   ww5
                   ww6
                   ww7 } }) -}
94dde4ffceed0a2a13daed020b6576e1
  $fOrdComprehension_$c<= ::
    GHC.Classes.Ord annot =>
    Language.Python.Common.AST.Comprehension annot
    -> Language.Python.Common.AST.Comprehension annot -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)><S(SLL),1*U(1*U,U,U)><S(SLL),1*U(1*U,U,U)>,
     Unfolding: InlineRule (3, True, False)
                (\ @ annot1
                   ($dOrd :: GHC.Classes.Ord annot1)
                   (a :: Language.Python.Common.AST.Comprehension annot1)
                   (b :: Language.Python.Common.AST.Comprehension annot1) ->
                 case Language.Python.Common.AST.$fOrdComprehension_$c<
                        @ annot1
                        $dOrd
                        b
                        a of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
94dde4ffceed0a2a13daed020b6576e1
  $fOrdComprehension_$c>= ::
    GHC.Classes.Ord annot =>
    Language.Python.Common.AST.Comprehension annot
    -> Language.Python.Common.AST.Comprehension annot -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)><S(SLL),1*U(1*U,U,U)><S(SLL),1*U(1*U,U,U)>,
     Unfolding: InlineRule (3, True, False)
                (\ @ annot1
                   ($dOrd :: GHC.Classes.Ord annot1)
                   (a :: Language.Python.Common.AST.Comprehension annot1)
                   (b :: Language.Python.Common.AST.Comprehension annot1) ->
                 case Language.Python.Common.AST.$fOrdComprehension_$c<
                        @ annot1
                        $dOrd
                        a
                        b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
94dde4ffceed0a2a13daed020b6576e1
  $fOrdComprehension_$ccompare ::
    GHC.Classes.Ord annot =>
    Language.Python.Common.AST.ComprehensionExpr annot
    -> Language.Python.Common.AST.ComprehensionExpr annot
    -> GHC.Types.Ordering
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)><S,1*U><S,1*U>,
     Unfolding: (\ @ annot1
                   ($dOrd :: GHC.Classes.Ord annot1)
                   (a :: Language.Python.Common.AST.ComprehensionExpr annot1)
                   (b :: Language.Python.Common.AST.ComprehensionExpr annot1) ->
                 case a of wild {
                   Language.Python.Common.AST.ComprehensionExpr a1
                   -> case b of wild1 {
                        Language.Python.Common.AST.ComprehensionExpr b1
                        -> Language.Python.Common.AST.$fOrdArgument_$ccompare1
                             @ annot1
                             $dOrd
                             a1
                             b1
                        Language.Python.Common.AST.ComprehensionDict ipv -> GHC.Types.LT }
                   Language.Python.Common.AST.ComprehensionDict a1
                   -> case b of wild1 {
                        Language.Python.Common.AST.ComprehensionExpr ipv -> GHC.Types.GT
                        Language.Python.Common.AST.ComprehensionDict b1
                        -> Language.Python.Common.AST.$fOrdComprehension_$ccompare1
                             @ annot1
                             $dOrd
                             a1
                             b1 } }) -}
94dde4ffceed0a2a13daed020b6576e1
  $fOrdComprehension_$ccompare1 ::
    GHC.Classes.Ord annot =>
    Language.Python.Common.AST.DictKeyDatumList annot
    -> Language.Python.Common.AST.DictKeyDatumList annot
    -> GHC.Types.Ordering
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)><S,1*U><S,1*U>,
     Unfolding: (\ @ annot1
                   ($dOrd :: GHC.Classes.Ord annot1)
                   (a :: Language.Python.Common.AST.DictKeyDatumList annot1)
                   (b :: Language.Python.Common.AST.DictKeyDatumList annot1) ->
                 case a of wild {
                   Language.Python.Common.AST.DictMappingPair a1 a2
                   -> case b of wild1 {
                        Language.Python.Common.AST.DictMappingPair b1 b4
                        -> case Language.Python.Common.AST.$fOrdArgument_$ccompare1
                                  @ annot1
                                  $dOrd
                                  a1
                                  b1 of wild2 {
                             GHC.Types.LT -> GHC.Types.LT
                             GHC.Types.EQ
                             -> Language.Python.Common.AST.$fOrdArgument_$ccompare1
                                  @ annot1
                                  $dOrd
                                  a2
                                  b4
                             GHC.Types.GT -> GHC.Types.GT }
                        Language.Python.Common.AST.DictUnpacking ipv -> GHC.Types.LT }
                   Language.Python.Common.AST.DictUnpacking a1
                   -> case b of wild1 {
                        Language.Python.Common.AST.DictMappingPair ipv ipv1 -> GHC.Types.GT
                        Language.Python.Common.AST.DictUnpacking b1
                        -> Language.Python.Common.AST.$fOrdArgument_$ccompare1
                             @ annot1
                             $dOrd
                             a1
                             b1 } }) -}
94dde4ffceed0a2a13daed020b6576e1
  $fOrdComprehension_$ccompare2 ::
    GHC.Classes.Ord annot =>
    Language.Python.Common.AST.Comprehension annot
    -> Language.Python.Common.AST.Comprehension annot
    -> GHC.Types.Ordering
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)><S(SLL),1*U(1*U,U,U)><S(SLL),1*U(1*U,U,U)>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ @ annot1
                   (w :: GHC.Classes.Ord annot1)
                   (w249 :: Language.Python.Common.AST.Comprehension annot1)
                   (w250 :: Language.Python.Common.AST.Comprehension annot1) ->
                 case w249 of ww { Language.Python.Common.AST.Comprehension ww1 ww2 ww3 ->
                 case w250 of ww4 { Language.Python.Common.AST.Comprehension ww5 ww6 ww7 ->
                 Language.Python.Common.AST.$w$ccompare1
                   @ annot1
                   w
                   ww1
                   ww2
                   ww3
                   ww5
                   ww6
                   ww7 } }) -}
94dde4ffceed0a2a13daed020b6576e1
  $fOrdComprehension_$cmax ::
    GHC.Classes.Ord annot =>
    Language.Python.Common.AST.Comprehension annot
    -> Language.Python.Common.AST.Comprehension annot
    -> Language.Python.Common.AST.Comprehension annot
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)><S(SLL),1*U(U,U,U)><S(SLL),1*U(U,U,U)>m,
     Unfolding: InlineRule (3, True, False)
                (\ @ annot1
                   ($dOrd :: GHC.Classes.Ord annot1)
                   (x :: Language.Python.Common.AST.Comprehension annot1)
                   (y :: Language.Python.Common.AST.Comprehension annot1) ->
                 case Language.Python.Common.AST.$fOrdComprehension_$c<
                        @ annot1
                        $dOrd
                        y
                        x of wild {
                   GHC.Types.False -> y GHC.Types.True -> x }) -}
94dde4ffceed0a2a13daed020b6576e1
  $fOrdComprehension_$cmin ::
    GHC.Classes.Ord annot =>
    Language.Python.Common.AST.Comprehension annot
    -> Language.Python.Common.AST.Comprehension annot
    -> Language.Python.Common.AST.Comprehension annot
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)><S(SLL),1*U(U,U,U)><S(SLL),1*U(U,U,U)>m,
     Unfolding: InlineRule (3, True, False)
                (\ @ annot1
                   ($dOrd :: GHC.Classes.Ord annot1)
                   (x :: Language.Python.Common.AST.Comprehension annot1)
                   (y :: Language.Python.Common.AST.Comprehension annot1) ->
                 case Language.Python.Common.AST.$fOrdComprehension_$c<
                        @ annot1
                        $dOrd
                        y
                        x of wild {
                   GHC.Types.False -> x GHC.Types.True -> y }) -}
94dde4ffceed0a2a13daed020b6576e1
  $fOrdComprehension_$cp1Ord ::
    GHC.Classes.Ord annot =>
    GHC.Classes.Eq (Language.Python.Common.AST.Comprehension annot)
  {- Arity: 1, HasNoCafRefs,
     Strictness: <L,1*U(1*U(C(C1(U)),A),A,A,A,A,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ annot1 ($dOrd :: GHC.Classes.Ord annot1) ->
                 Language.Python.Common.AST.$fEqComprehension
                   @ annot1
                   (GHC.Classes.$p1Ord @ annot1 $dOrd)) -}
6e1ab2fb537d2522edcf9b3f967431ea
  $fOrdDecorator ::
    GHC.Classes.Ord annot =>
    GHC.Classes.Ord (Language.Python.Common.AST.Decorator annot)
  DFunId
  {- Arity: 1, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)>m,
     Inline: CONLIKE,
     Unfolding: DFun: @ annot1 (v :: GHC.Classes.Ord annot1).
                  @ (Language.Python.Common.AST.Decorator annot1)
                  (Language.Python.Common.AST.$fOrdDecorator_$cp1Ord @ annot1 v)
                  (Language.Python.Common.AST.$fOrdDecorator_$ccompare @ annot1 v)
                  (Language.Python.Common.AST.$fOrdDecorator_$c< @ annot1 v)
                  (Language.Python.Common.AST.$fOrdDecorator_$c<= @ annot1 v)
                  (\ (a :: Language.Python.Common.AST.Decorator annot1)
                     (b :: Language.Python.Common.AST.Decorator annot1) ->
                   Language.Python.Common.AST.$fOrdDecorator_$c< @ annot1 v b a)
                  (Language.Python.Common.AST.$fOrdDecorator_$c>= @ annot1 v)
                  (Language.Python.Common.AST.$fOrdDecorator_$cmax @ annot1 v)
                  (Language.Python.Common.AST.$fOrdDecorator_$cmin @ annot1 v) -}
6e1ab2fb537d2522edcf9b3f967431ea
  $fOrdDecorator_$c< ::
    GHC.Classes.Ord annot =>
    Language.Python.Common.AST.Decorator annot
    -> Language.Python.Common.AST.Decorator annot -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)>,
     Unfolding: (\ @ annot1 ($dOrd :: GHC.Classes.Ord annot1) ->
                 let {
                   $dOrd1 :: GHC.Classes.Ord
                               (Language.Python.Common.AST.Argument annot1)
                   = Language.Python.Common.AST.$fOrdArgument @ annot1 $dOrd
                 } in
                 let {
                   $dOrd2 :: GHC.Classes.Ord (Language.Python.Common.AST.Ident annot1)
                   = Language.Python.Common.AST.$fOrdIdent @ annot1 $dOrd
                 } in
                 \ (a :: Language.Python.Common.AST.Decorator annot1)
                   (b :: Language.Python.Common.AST.Decorator annot1) ->
                 case a of wild { Language.Python.Common.AST.Decorator a1 a2 a3 ->
                 case b of wild1 { Language.Python.Common.AST.Decorator b1 b4 b3 ->
                 case GHC.Classes.$fOrd[]_$ccompare
                        @ (Language.Python.Common.AST.Ident annot1)
                        $dOrd2
                        a1
                        b1 of wild2 {
                   GHC.Types.LT -> GHC.Types.True
                   GHC.Types.EQ
                   -> case GHC.Classes.$fOrd[]_$ccompare
                             @ (Language.Python.Common.AST.Argument annot1)
                             $dOrd1
                             a2
                             b4 of wild3 {
                        GHC.Types.LT -> GHC.Types.True
                        GHC.Types.EQ -> GHC.Classes.< @ annot1 $dOrd a3 b3
                        GHC.Types.GT -> GHC.Types.False }
                   GHC.Types.GT -> GHC.Types.False } } }) -}
6e1ab2fb537d2522edcf9b3f967431ea
  $fOrdDecorator_$c<= ::
    GHC.Classes.Ord annot =>
    Language.Python.Common.AST.Decorator annot
    -> Language.Python.Common.AST.Decorator annot -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)><L,U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ annot1
                   ($dOrd :: GHC.Classes.Ord annot1)
                   (a :: Language.Python.Common.AST.Decorator annot1)
                   (b :: Language.Python.Common.AST.Decorator annot1) ->
                 case Language.Python.Common.AST.$fOrdDecorator_$c<
                        @ annot1
                        $dOrd
                        b
                        a of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
6e1ab2fb537d2522edcf9b3f967431ea
  $fOrdDecorator_$c>= ::
    GHC.Classes.Ord annot =>
    Language.Python.Common.AST.Decorator annot
    -> Language.Python.Common.AST.Decorator annot -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)><L,U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ annot1
                   ($dOrd :: GHC.Classes.Ord annot1)
                   (a :: Language.Python.Common.AST.Decorator annot1)
                   (b :: Language.Python.Common.AST.Decorator annot1) ->
                 case Language.Python.Common.AST.$fOrdDecorator_$c<
                        @ annot1
                        $dOrd
                        a
                        b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
6e1ab2fb537d2522edcf9b3f967431ea
  $fOrdDecorator_$ccompare ::
    GHC.Classes.Ord annot =>
    Language.Python.Common.AST.Decorator annot
    -> Language.Python.Common.AST.Decorator annot -> GHC.Types.Ordering
  {- Arity: 1, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)>,
     Unfolding: (\ @ annot1 ($dOrd :: GHC.Classes.Ord annot1) ->
                 let {
                   $dOrd1 :: GHC.Classes.Ord
                               (Language.Python.Common.AST.Argument annot1)
                   = Language.Python.Common.AST.$fOrdArgument @ annot1 $dOrd
                 } in
                 let {
                   $dOrd2 :: GHC.Classes.Ord (Language.Python.Common.AST.Ident annot1)
                   = Language.Python.Common.AST.$fOrdIdent @ annot1 $dOrd
                 } in
                 \ (a :: Language.Python.Common.AST.Decorator annot1)
                   (b :: Language.Python.Common.AST.Decorator annot1) ->
                 case a of wild { Language.Python.Common.AST.Decorator a1 a2 a3 ->
                 case b of wild1 { Language.Python.Common.AST.Decorator b1 b4 b3 ->
                 case GHC.Classes.$fOrd[]_$ccompare
                        @ (Language.Python.Common.AST.Ident annot1)
                        $dOrd2
                        a1
                        b1 of wild2 {
                   GHC.Types.LT -> GHC.Types.LT
                   GHC.Types.EQ
                   -> case GHC.Classes.$fOrd[]_$ccompare
                             @ (Language.Python.Common.AST.Argument annot1)
                             $dOrd1
                             a2
                             b4 of wild3 {
                        GHC.Types.LT -> GHC.Types.LT
                        GHC.Types.EQ -> GHC.Classes.compare @ annot1 $dOrd a3 b3
                        GHC.Types.GT -> GHC.Types.GT }
                   GHC.Types.GT -> GHC.Types.GT } } }) -}
6e1ab2fb537d2522edcf9b3f967431ea
  $fOrdDecorator_$cmax ::
    GHC.Classes.Ord annot =>
    Language.Python.Common.AST.Decorator annot
    -> Language.Python.Common.AST.Decorator annot
    -> Language.Python.Common.AST.Decorator annot
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)><L,U(U,U,U)><L,U(U,U,U)>,
     Unfolding: InlineRule (3, True, False)
                (\ @ annot1
                   ($dOrd :: GHC.Classes.Ord annot1)
                   (x :: Language.Python.Common.AST.Decorator annot1)
                   (y :: Language.Python.Common.AST.Decorator annot1) ->
                 case Language.Python.Common.AST.$fOrdDecorator_$c<
                        @ annot1
                        $dOrd
                        y
                        x of wild {
                   GHC.Types.False -> y GHC.Types.True -> x }) -}
6e1ab2fb537d2522edcf9b3f967431ea
  $fOrdDecorator_$cmin ::
    GHC.Classes.Ord annot =>
    Language.Python.Common.AST.Decorator annot
    -> Language.Python.Common.AST.Decorator annot
    -> Language.Python.Common.AST.Decorator annot
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)><L,U(U,U,U)><L,U(U,U,U)>,
     Unfolding: InlineRule (3, True, False)
                (\ @ annot1
                   ($dOrd :: GHC.Classes.Ord annot1)
                   (x :: Language.Python.Common.AST.Decorator annot1)
                   (y :: Language.Python.Common.AST.Decorator annot1) ->
                 case Language.Python.Common.AST.$fOrdDecorator_$c<
                        @ annot1
                        $dOrd
                        y
                        x of wild {
                   GHC.Types.False -> x GHC.Types.True -> y }) -}
6e1ab2fb537d2522edcf9b3f967431ea
  $fOrdDecorator_$cp1Ord ::
    GHC.Classes.Ord annot =>
    GHC.Classes.Eq (Language.Python.Common.AST.Decorator annot)
  {- Arity: 1, HasNoCafRefs,
     Strictness: <L,1*U(1*U(C(C1(U)),A),A,A,A,A,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ annot1 ($dOrd :: GHC.Classes.Ord annot1) ->
                 Language.Python.Common.AST.$fEqDecorator
                   @ annot1
                   (GHC.Classes.$p1Ord @ annot1 $dOrd)) -}
94dde4ffceed0a2a13daed020b6576e1
  $fOrdDictKeyDatumList ::
    GHC.Classes.Ord annot =>
    GHC.Classes.Ord (Language.Python.Common.AST.DictKeyDatumList annot)
  DFunId
  {- Arity: 1, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)>m,
     Inline: CONLIKE,
     Unfolding: DFun: @ annot1 (v :: GHC.Classes.Ord annot1).
                  @ (Language.Python.Common.AST.DictKeyDatumList annot1)
                  (Language.Python.Common.AST.$fOrdDictKeyDatumList_$cp1Ord
                     @ annot1
                     v)
                  (Language.Python.Common.AST.$fOrdComprehension_$ccompare1
                     @ annot1
                     v)
                  (Language.Python.Common.AST.$fOrdComprehensionExpr_$c<1 @ annot1 v)
                  (Language.Python.Common.AST.$fOrdDictKeyDatumList_$c<= @ annot1 v)
                  (\ (a :: Language.Python.Common.AST.DictKeyDatumList annot1)
                     (b :: Language.Python.Common.AST.DictKeyDatumList annot1) ->
                   Language.Python.Common.AST.$fOrdComprehensionExpr_$c<1
                     @ annot1
                     v
                     b
                     a)
                  (Language.Python.Common.AST.$fOrdDictKeyDatumList_$c>= @ annot1 v)
                  (Language.Python.Common.AST.$fOrdDictKeyDatumList_$cmax @ annot1 v)
                  (Language.Python.Common.AST.$fOrdDictKeyDatumList_$cmin
                     @ annot1
                     v) -}
94dde4ffceed0a2a13daed020b6576e1
  $fOrdDictKeyDatumList_$c<= ::
    GHC.Classes.Ord annot =>
    Language.Python.Common.AST.DictKeyDatumList annot
    -> Language.Python.Common.AST.DictKeyDatumList annot
    -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)><S,1*U><S,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ annot1
                   ($dOrd :: GHC.Classes.Ord annot1)
                   (a :: Language.Python.Common.AST.DictKeyDatumList annot1)
                   (b :: Language.Python.Common.AST.DictKeyDatumList annot1) ->
                 case Language.Python.Common.AST.$fOrdComprehensionExpr_$c<1
                        @ annot1
                        $dOrd
                        b
                        a of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
94dde4ffceed0a2a13daed020b6576e1
  $fOrdDictKeyDatumList_$c>= ::
    GHC.Classes.Ord annot =>
    Language.Python.Common.AST.DictKeyDatumList annot
    -> Language.Python.Common.AST.DictKeyDatumList annot
    -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)><S,1*U><S,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ annot1
                   ($dOrd :: GHC.Classes.Ord annot1)
                   (a :: Language.Python.Common.AST.DictKeyDatumList annot1)
                   (b :: Language.Python.Common.AST.DictKeyDatumList annot1) ->
                 case Language.Python.Common.AST.$fOrdComprehensionExpr_$c<1
                        @ annot1
                        $dOrd
                        a
                        b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
94dde4ffceed0a2a13daed020b6576e1
  $fOrdDictKeyDatumList_$cmax ::
    GHC.Classes.Ord annot =>
    Language.Python.Common.AST.DictKeyDatumList annot
    -> Language.Python.Common.AST.DictKeyDatumList annot
    -> Language.Python.Common.AST.DictKeyDatumList annot
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)><S,U><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ annot1
                   ($dOrd :: GHC.Classes.Ord annot1)
                   (x :: Language.Python.Common.AST.DictKeyDatumList annot1)
                   (y :: Language.Python.Common.AST.DictKeyDatumList annot1) ->
                 case Language.Python.Common.AST.$fOrdComprehensionExpr_$c<1
                        @ annot1
                        $dOrd
                        y
                        x of wild {
                   GHC.Types.False -> y GHC.Types.True -> x }) -}
94dde4ffceed0a2a13daed020b6576e1
  $fOrdDictKeyDatumList_$cmin ::
    GHC.Classes.Ord annot =>
    Language.Python.Common.AST.DictKeyDatumList annot
    -> Language.Python.Common.AST.DictKeyDatumList annot
    -> Language.Python.Common.AST.DictKeyDatumList annot
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)><S,U><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ annot1
                   ($dOrd :: GHC.Classes.Ord annot1)
                   (x :: Language.Python.Common.AST.DictKeyDatumList annot1)
                   (y :: Language.Python.Common.AST.DictKeyDatumList annot1) ->
                 case Language.Python.Common.AST.$fOrdComprehensionExpr_$c<1
                        @ annot1
                        $dOrd
                        y
                        x of wild {
                   GHC.Types.False -> x GHC.Types.True -> y }) -}
94dde4ffceed0a2a13daed020b6576e1
  $fOrdDictKeyDatumList_$cp1Ord ::
    GHC.Classes.Ord annot =>
    GHC.Classes.Eq (Language.Python.Common.AST.DictKeyDatumList annot)
  {- Arity: 1, HasNoCafRefs,
     Strictness: <L,1*U(1*U(C(C1(U)),A),A,A,A,A,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ annot1 ($dOrd :: GHC.Classes.Ord annot1) ->
                 Language.Python.Common.AST.$fEqDictKeyDatumList
                   @ annot1
                   (GHC.Classes.$p1Ord @ annot1 $dOrd)) -}
54ad83b54b9c0dd8bf180da8d82f4195
  $fOrdExceptClause ::
    GHC.Classes.Ord annot =>
    GHC.Classes.Ord (Language.Python.Common.AST.ExceptClause annot)
  DFunId
  {- Arity: 1, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)>m,
     Inline: CONLIKE,
     Unfolding: DFun: @ annot1 (v :: GHC.Classes.Ord annot1).
                  @ (Language.Python.Common.AST.ExceptClause annot1)
                  (Language.Python.Common.AST.$fOrdExceptClause_$cp1Ord @ annot1 v)
                  (Language.Python.Common.AST.$fOrdExceptClause_$ccompare @ annot1 v)
                  (Language.Python.Common.AST.$fOrdExceptClause_$c< @ annot1 v)
                  (Language.Python.Common.AST.$fOrdExceptClause_$c<= @ annot1 v)
                  (\ (a :: Language.Python.Common.AST.ExceptClause annot1)
                     (b :: Language.Python.Common.AST.ExceptClause annot1) ->
                   Language.Python.Common.AST.$fOrdExceptClause_$c< @ annot1 v b a)
                  (Language.Python.Common.AST.$fOrdExceptClause_$c>= @ annot1 v)
                  (Language.Python.Common.AST.$fOrdExceptClause_$cmax @ annot1 v)
                  (Language.Python.Common.AST.$fOrdExceptClause_$cmin @ annot1 v) -}
54ad83b54b9c0dd8bf180da8d82f4195
  $fOrdExceptClause_$c< ::
    GHC.Classes.Ord annot =>
    Language.Python.Common.AST.ExceptClause annot
    -> Language.Python.Common.AST.ExceptClause annot -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)><S(SL),1*U(1*U,U)><S(SL),1*U(1*U,U)>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ @ annot1
                   (w :: GHC.Classes.Ord annot1)
                   (w249 :: Language.Python.Common.AST.ExceptClause annot1)
                   (w250 :: Language.Python.Common.AST.ExceptClause annot1) ->
                 case w249 of ww { Language.Python.Common.AST.ExceptClause ww1 ww2 ->
                 case w250 of ww3 { Language.Python.Common.AST.ExceptClause ww4 ww5 ->
                 Language.Python.Common.AST.$w$c<2
                   @ annot1
                   w
                   ww1
                   ww2
                   ww4
                   ww5 } }) -}
54ad83b54b9c0dd8bf180da8d82f4195
  $fOrdExceptClause_$c<= ::
    GHC.Classes.Ord annot =>
    Language.Python.Common.AST.ExceptClause annot
    -> Language.Python.Common.AST.ExceptClause annot -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)><S(SL),1*U(1*U,U)><S(SL),1*U(1*U,U)>,
     Unfolding: InlineRule (3, True, False)
                (\ @ annot1
                   ($dOrd :: GHC.Classes.Ord annot1)
                   (a :: Language.Python.Common.AST.ExceptClause annot1)
                   (b :: Language.Python.Common.AST.ExceptClause annot1) ->
                 case Language.Python.Common.AST.$fOrdExceptClause_$c<
                        @ annot1
                        $dOrd
                        b
                        a of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
54ad83b54b9c0dd8bf180da8d82f4195
  $fOrdExceptClause_$c>= ::
    GHC.Classes.Ord annot =>
    Language.Python.Common.AST.ExceptClause annot
    -> Language.Python.Common.AST.ExceptClause annot -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)><S(SL),1*U(1*U,U)><S(SL),1*U(1*U,U)>,
     Unfolding: InlineRule (3, True, False)
                (\ @ annot1
                   ($dOrd :: GHC.Classes.Ord annot1)
                   (a :: Language.Python.Common.AST.ExceptClause annot1)
                   (b :: Language.Python.Common.AST.ExceptClause annot1) ->
                 case Language.Python.Common.AST.$fOrdExceptClause_$c<
                        @ annot1
                        $dOrd
                        a
                        b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
54ad83b54b9c0dd8bf180da8d82f4195
  $fOrdExceptClause_$ccompare ::
    GHC.Classes.Ord annot =>
    Language.Python.Common.AST.ExceptClause annot
    -> Language.Python.Common.AST.ExceptClause annot
    -> GHC.Types.Ordering
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)><S(SL),1*U(1*U,U)><S(SL),1*U(1*U,U)>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ @ annot1
                   (w :: GHC.Classes.Ord annot1)
                   (w249 :: Language.Python.Common.AST.ExceptClause annot1)
                   (w250 :: Language.Python.Common.AST.ExceptClause annot1) ->
                 case w249 of ww { Language.Python.Common.AST.ExceptClause ww1 ww2 ->
                 case w250 of ww3 { Language.Python.Common.AST.ExceptClause ww4 ww5 ->
                 Language.Python.Common.AST.$w$ccompare2
                   @ annot1
                   w
                   ww1
                   ww2
                   ww4
                   ww5 } }) -}
54ad83b54b9c0dd8bf180da8d82f4195
  $fOrdExceptClause_$cmax ::
    GHC.Classes.Ord annot =>
    Language.Python.Common.AST.ExceptClause annot
    -> Language.Python.Common.AST.ExceptClause annot
    -> Language.Python.Common.AST.ExceptClause annot
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)><S(SL),1*U(U,U)><S(SL),1*U(U,U)>m,
     Unfolding: InlineRule (3, True, False)
                (\ @ annot1
                   ($dOrd :: GHC.Classes.Ord annot1)
                   (x :: Language.Python.Common.AST.ExceptClause annot1)
                   (y :: Language.Python.Common.AST.ExceptClause annot1) ->
                 case Language.Python.Common.AST.$fOrdExceptClause_$c<
                        @ annot1
                        $dOrd
                        y
                        x of wild {
                   GHC.Types.False -> y GHC.Types.True -> x }) -}
54ad83b54b9c0dd8bf180da8d82f4195
  $fOrdExceptClause_$cmin ::
    GHC.Classes.Ord annot =>
    Language.Python.Common.AST.ExceptClause annot
    -> Language.Python.Common.AST.ExceptClause annot
    -> Language.Python.Common.AST.ExceptClause annot
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)><S(SL),1*U(U,U)><S(SL),1*U(U,U)>m,
     Unfolding: InlineRule (3, True, False)
                (\ @ annot1
                   ($dOrd :: GHC.Classes.Ord annot1)
                   (x :: Language.Python.Common.AST.ExceptClause annot1)
                   (y :: Language.Python.Common.AST.ExceptClause annot1) ->
                 case Language.Python.Common.AST.$fOrdExceptClause_$c<
                        @ annot1
                        $dOrd
                        y
                        x of wild {
                   GHC.Types.False -> x GHC.Types.True -> y }) -}
54ad83b54b9c0dd8bf180da8d82f4195
  $fOrdExceptClause_$cp1Ord ::
    GHC.Classes.Ord annot =>
    GHC.Classes.Eq (Language.Python.Common.AST.ExceptClause annot)
  {- Arity: 1, HasNoCafRefs,
     Strictness: <L,1*U(1*U(C(C1(U)),A),A,A,A,A,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ annot1 ($dOrd :: GHC.Classes.Ord annot1) ->
                 Language.Python.Common.AST.$fEqExceptClause
                   @ annot1
                   (GHC.Classes.$p1Ord @ annot1 $dOrd)) -}
94dde4ffceed0a2a13daed020b6576e1
  $fOrdExpr ::
    GHC.Classes.Ord annot =>
    GHC.Classes.Ord (Language.Python.Common.AST.Expr annot)
  DFunId
  {- Arity: 1, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)>m,
     Inline: CONLIKE,
     Unfolding: DFun: @ annot1 (v :: GHC.Classes.Ord annot1).
                  @ (Language.Python.Common.AST.Expr annot1)
                  (Language.Python.Common.AST.$fOrdExpr_$cp1Ord @ annot1 v)
                  (Language.Python.Common.AST.$fOrdArgument_$ccompare1 @ annot1 v)
                  (Language.Python.Common.AST.$fOrdExpr_$c< @ annot1 v)
                  (Language.Python.Common.AST.$fOrdExpr_$c<= @ annot1 v)
                  (Language.Python.Common.AST.$fOrdExpr_$c> @ annot1 v)
                  (Language.Python.Common.AST.$fOrdExpr_$c>= @ annot1 v)
                  (Language.Python.Common.AST.$fOrdExpr_$cmax @ annot1 v)
                  (Language.Python.Common.AST.$fOrdExpr_$cmin @ annot1 v) -}
94dde4ffceed0a2a13daed020b6576e1
  $fOrdExpr_$c< ::
    GHC.Classes.Ord annot =>
    Language.Python.Common.AST.Expr annot
    -> Language.Python.Common.AST.Expr annot -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)><L,U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ annot1
                   ($dOrd :: GHC.Classes.Ord annot1)
                   (x :: Language.Python.Common.AST.Expr annot1)
                   (y :: Language.Python.Common.AST.Expr annot1) ->
                 case Language.Python.Common.AST.$fOrdArgument_$ccompare1
                        @ annot1
                        $dOrd
                        x
                        y of wild {
                   DEFAULT -> GHC.Types.False GHC.Types.LT -> GHC.Types.True }) -}
94dde4ffceed0a2a13daed020b6576e1
  $fOrdExpr_$c<= ::
    GHC.Classes.Ord annot =>
    Language.Python.Common.AST.Expr annot
    -> Language.Python.Common.AST.Expr annot -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)><L,U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ annot1
                   ($dOrd :: GHC.Classes.Ord annot1)
                   (x :: Language.Python.Common.AST.Expr annot1)
                   (y :: Language.Python.Common.AST.Expr annot1) ->
                 case Language.Python.Common.AST.$fOrdArgument_$ccompare1
                        @ annot1
                        $dOrd
                        x
                        y of wild {
                   DEFAULT -> GHC.Types.True GHC.Types.GT -> GHC.Types.False }) -}
94dde4ffceed0a2a13daed020b6576e1
  $fOrdExpr_$c> ::
    GHC.Classes.Ord annot =>
    Language.Python.Common.AST.Expr annot
    -> Language.Python.Common.AST.Expr annot -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)><L,U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ annot1
                   ($dOrd :: GHC.Classes.Ord annot1)
                   (x :: Language.Python.Common.AST.Expr annot1)
                   (y :: Language.Python.Common.AST.Expr annot1) ->
                 case Language.Python.Common.AST.$fOrdArgument_$ccompare1
                        @ annot1
                        $dOrd
                        x
                        y of wild {
                   DEFAULT -> GHC.Types.False GHC.Types.GT -> GHC.Types.True }) -}
94dde4ffceed0a2a13daed020b6576e1
  $fOrdExpr_$c>= ::
    GHC.Classes.Ord annot =>
    Language.Python.Common.AST.Expr annot
    -> Language.Python.Common.AST.Expr annot -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)><L,U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ annot1
                   ($dOrd :: GHC.Classes.Ord annot1)
                   (x :: Language.Python.Common.AST.Expr annot1)
                   (y :: Language.Python.Common.AST.Expr annot1) ->
                 case Language.Python.Common.AST.$fOrdArgument_$ccompare1
                        @ annot1
                        $dOrd
                        x
                        y of wild {
                   DEFAULT -> GHC.Types.True GHC.Types.LT -> GHC.Types.False }) -}
94dde4ffceed0a2a13daed020b6576e1
  $fOrdExpr_$cmax ::
    GHC.Classes.Ord annot =>
    Language.Python.Common.AST.Expr annot
    -> Language.Python.Common.AST.Expr annot
    -> Language.Python.Common.AST.Expr annot
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)><L,U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ annot1
                   ($dOrd :: GHC.Classes.Ord annot1)
                   (x :: Language.Python.Common.AST.Expr annot1)
                   (y :: Language.Python.Common.AST.Expr annot1) ->
                 case Language.Python.Common.AST.$fOrdArgument_$ccompare1
                        @ annot1
                        $dOrd
                        x
                        y of wild {
                   DEFAULT -> y GHC.Types.GT -> x }) -}
94dde4ffceed0a2a13daed020b6576e1
  $fOrdExpr_$cmin ::
    GHC.Classes.Ord annot =>
    Language.Python.Common.AST.Expr annot
    -> Language.Python.Common.AST.Expr annot
    -> Language.Python.Common.AST.Expr annot
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)><L,U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ annot1
                   ($dOrd :: GHC.Classes.Ord annot1)
                   (x :: Language.Python.Common.AST.Expr annot1)
                   (y :: Language.Python.Common.AST.Expr annot1) ->
                 case Language.Python.Common.AST.$fOrdArgument_$ccompare1
                        @ annot1
                        $dOrd
                        x
                        y of wild {
                   DEFAULT -> x GHC.Types.GT -> y }) -}
94dde4ffceed0a2a13daed020b6576e1
  $fOrdExpr_$cp1Ord ::
    GHC.Classes.Ord annot =>
    GHC.Classes.Eq (Language.Python.Common.AST.Expr annot)
  {- Arity: 1, HasNoCafRefs,
     Strictness: <L,1*U(1*U(C(C1(U)),A),A,A,A,A,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ annot1 ($dOrd :: GHC.Classes.Ord annot1) ->
                 Language.Python.Common.AST.$fEqExpr
                   @ annot1
                   (GHC.Classes.$p1Ord @ annot1 $dOrd)) -}
73d811e85ab4018f7789c4c4421a9fde
  $fOrdFromItem ::
    GHC.Classes.Ord annot =>
    GHC.Classes.Ord (Language.Python.Common.AST.FromItem annot)
  DFunId
  {- Arity: 1, HasNoCafRefs,
     Strictness: <L,U(1*U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)>m,
     Inline: CONLIKE,
     Unfolding: DFun: @ annot1 (v :: GHC.Classes.Ord annot1).
                  @ (Language.Python.Common.AST.FromItem annot1)
                  (Language.Python.Common.AST.$fOrdFromItem_$cp1Ord @ annot1 v)
                  (Language.Python.Common.AST.$fOrdFromItem_$ccompare @ annot1 v)
                  (Language.Python.Common.AST.$fOrdFromItem_$c< @ annot1 v)
                  (Language.Python.Common.AST.$fOrdFromItem_$c<= @ annot1 v)
                  (\ (a :: Language.Python.Common.AST.FromItem annot1)
                     (b :: Language.Python.Common.AST.FromItem annot1) ->
                   Language.Python.Common.AST.$fOrdFromItem_$c< @ annot1 v b a)
                  (Language.Python.Common.AST.$fOrdFromItem_$c>= @ annot1 v)
                  (Language.Python.Common.AST.$fOrdFromItem_$cmax @ annot1 v)
                  (Language.Python.Common.AST.$fOrdFromItem_$cmin @ annot1 v) -}
73d811e85ab4018f7789c4c4421a9fde
  $fOrdFromItem_$c< ::
    GHC.Classes.Ord annot =>
    Language.Python.Common.AST.FromItem annot
    -> Language.Python.Common.AST.FromItem annot -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(A,C(C1(U)),C(C1(U)),A,A,A,A,A)><S(S(SL)LL),1*U(1*U(U,U),1*U,U)><S(S(SL)LL),1*U(1*U(U,U),1*U,U)>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ @ annot1
                   (w :: GHC.Classes.Ord annot1)
                   (w249 :: Language.Python.Common.AST.FromItem annot1)
                   (w250 :: Language.Python.Common.AST.FromItem annot1) ->
                 case w249 of ww { Language.Python.Common.AST.FromItem ww1 ww2 ww3 ->
                 case ww1 of ww4 { Language.Python.Common.AST.Ident ww5 ww6 ->
                 case w250 of ww7 { Language.Python.Common.AST.FromItem ww8 ww9 ww10 ->
                 case ww8 of ww11 { Language.Python.Common.AST.Ident ww12 ww13 ->
                 Language.Python.Common.AST.$w$c<3
                   @ annot1
                   w
                   ww5
                   ww6
                   ww2
                   ww3
                   ww12
                   ww13
                   ww9
                   ww10 } } } }) -}
73d811e85ab4018f7789c4c4421a9fde
  $fOrdFromItem_$c<= ::
    GHC.Classes.Ord annot =>
    Language.Python.Common.AST.FromItem annot
    -> Language.Python.Common.AST.FromItem annot -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(A,C(C1(U)),C(C1(U)),A,A,A,A,A)><S(S(SL)LL),1*U(1*U(U,U),1*U,U)><S(S(SL)LL),1*U(1*U(U,U),1*U,U)>,
     Unfolding: InlineRule (3, True, False)
                (\ @ annot1
                   ($dOrd :: GHC.Classes.Ord annot1)
                   (a :: Language.Python.Common.AST.FromItem annot1)
                   (b :: Language.Python.Common.AST.FromItem annot1) ->
                 case Language.Python.Common.AST.$fOrdFromItem_$c<
                        @ annot1
                        $dOrd
                        b
                        a of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
73d811e85ab4018f7789c4c4421a9fde
  $fOrdFromItem_$c>= ::
    GHC.Classes.Ord annot =>
    Language.Python.Common.AST.FromItem annot
    -> Language.Python.Common.AST.FromItem annot -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(A,C(C1(U)),C(C1(U)),A,A,A,A,A)><S(S(SL)LL),1*U(1*U(U,U),1*U,U)><S(S(SL)LL),1*U(1*U(U,U),1*U,U)>,
     Unfolding: InlineRule (3, True, False)
                (\ @ annot1
                   ($dOrd :: GHC.Classes.Ord annot1)
                   (a :: Language.Python.Common.AST.FromItem annot1)
                   (b :: Language.Python.Common.AST.FromItem annot1) ->
                 case Language.Python.Common.AST.$fOrdFromItem_$c<
                        @ annot1
                        $dOrd
                        a
                        b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
73d811e85ab4018f7789c4c4421a9fde
  $fOrdFromItem_$ccompare ::
    GHC.Classes.Ord annot =>
    Language.Python.Common.AST.FromItem annot
    -> Language.Python.Common.AST.FromItem annot -> GHC.Types.Ordering
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(A,C(C1(U)),A,A,A,A,A,A)><S(S(SL)LL),1*U(1*U(U,U),1*U,U)><S(S(SL)LL),1*U(1*U(U,U),1*U,U)>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ @ annot1
                   (w :: GHC.Classes.Ord annot1)
                   (w249 :: Language.Python.Common.AST.FromItem annot1)
                   (w250 :: Language.Python.Common.AST.FromItem annot1) ->
                 case w249 of ww { Language.Python.Common.AST.FromItem ww1 ww2 ww3 ->
                 case ww1 of ww4 { Language.Python.Common.AST.Ident ww5 ww6 ->
                 case w250 of ww7 { Language.Python.Common.AST.FromItem ww8 ww9 ww10 ->
                 case ww8 of ww11 { Language.Python.Common.AST.Ident ww12 ww13 ->
                 Language.Python.Common.AST.$w$ccompare3
                   @ annot1
                   w
                   ww5
                   ww6
                   ww2
                   ww3
                   ww12
                   ww13
                   ww9
                   ww10 } } } }) -}
73d811e85ab4018f7789c4c4421a9fde
  $fOrdFromItem_$cmax ::
    GHC.Classes.Ord annot =>
    Language.Python.Common.AST.FromItem annot
    -> Language.Python.Common.AST.FromItem annot
    -> Language.Python.Common.AST.FromItem annot
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(A,C(C1(U)),C(C1(U)),A,A,A,A,A)><S(S(SL)LL),1*U(U(U,U),U,U)><S(S(SL)LL),1*U(U(U,U),U,U)>m,
     Unfolding: InlineRule (3, True, False)
                (\ @ annot1
                   ($dOrd :: GHC.Classes.Ord annot1)
                   (x :: Language.Python.Common.AST.FromItem annot1)
                   (y :: Language.Python.Common.AST.FromItem annot1) ->
                 case Language.Python.Common.AST.$fOrdFromItem_$c<
                        @ annot1
                        $dOrd
                        y
                        x of wild {
                   GHC.Types.False -> y GHC.Types.True -> x }) -}
73d811e85ab4018f7789c4c4421a9fde
  $fOrdFromItem_$cmin ::
    GHC.Classes.Ord annot =>
    Language.Python.Common.AST.FromItem annot
    -> Language.Python.Common.AST.FromItem annot
    -> Language.Python.Common.AST.FromItem annot
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(A,C(C1(U)),C(C1(U)),A,A,A,A,A)><S(S(SL)LL),1*U(U(U,U),U,U)><S(S(SL)LL),1*U(U(U,U),U,U)>m,
     Unfolding: InlineRule (3, True, False)
                (\ @ annot1
                   ($dOrd :: GHC.Classes.Ord annot1)
                   (x :: Language.Python.Common.AST.FromItem annot1)
                   (y :: Language.Python.Common.AST.FromItem annot1) ->
                 case Language.Python.Common.AST.$fOrdFromItem_$c<
                        @ annot1
                        $dOrd
                        y
                        x of wild {
                   GHC.Types.False -> x GHC.Types.True -> y }) -}
73d811e85ab4018f7789c4c4421a9fde
  $fOrdFromItem_$cp1Ord ::
    GHC.Classes.Ord annot =>
    GHC.Classes.Eq (Language.Python.Common.AST.FromItem annot)
  {- Arity: 1, HasNoCafRefs,
     Strictness: <L,1*U(1*U(C(C1(U)),A),A,A,A,A,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ annot1 ($dOrd :: GHC.Classes.Ord annot1) ->
                 Language.Python.Common.AST.$fEqFromItem
                   @ annot1
                   (GHC.Classes.$p1Ord @ annot1 $dOrd)) -}
e3cd8a0dc8214c8f5ef60ed5a9ac11ef
  $fOrdFromItems ::
    GHC.Classes.Ord annot =>
    GHC.Classes.Ord (Language.Python.Common.AST.FromItems annot)
  DFunId
  {- Arity: 1, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)>m,
     Inline: CONLIKE,
     Unfolding: DFun: @ annot1 (v :: GHC.Classes.Ord annot1).
                  @ (Language.Python.Common.AST.FromItems annot1)
                  (Language.Python.Common.AST.$fOrdFromItems_$cp1Ord @ annot1 v)
                  (Language.Python.Common.AST.$fOrdFromItems_$ccompare @ annot1 v)
                  (Language.Python.Common.AST.$fOrdFromItems_$c< @ annot1 v)
                  (Language.Python.Common.AST.$fOrdFromItems_$c<= @ annot1 v)
                  (\ (a :: Language.Python.Common.AST.FromItems annot1)
                     (b :: Language.Python.Common.AST.FromItems annot1) ->
                   Language.Python.Common.AST.$fOrdFromItems_$c< @ annot1 v b a)
                  (Language.Python.Common.AST.$fOrdFromItems_$c>= @ annot1 v)
                  (Language.Python.Common.AST.$fOrdFromItems_$cmax @ annot1 v)
                  (Language.Python.Common.AST.$fOrdFromItems_$cmin @ annot1 v) -}
e3cd8a0dc8214c8f5ef60ed5a9ac11ef
  $fOrdFromItems_$c< ::
    GHC.Classes.Ord annot =>
    Language.Python.Common.AST.FromItems annot
    -> Language.Python.Common.AST.FromItems annot -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)>,
     Unfolding: (\ @ annot1 ($dOrd :: GHC.Classes.Ord annot1) ->
                 let {
                   $dOrd1 :: GHC.Classes.Ord
                               (Language.Python.Common.AST.FromItem annot1)
                   = Language.Python.Common.AST.$fOrdFromItem @ annot1 $dOrd
                 } in
                 \ (a :: Language.Python.Common.AST.FromItems annot1)
                   (b :: Language.Python.Common.AST.FromItems annot1) ->
                 case a of wild {
                   Language.Python.Common.AST.ImportEverything a1
                   -> case b of wild1 {
                        Language.Python.Common.AST.ImportEverything b1
                        -> GHC.Classes.< @ annot1 $dOrd a1 b1
                        Language.Python.Common.AST.FromItems ipv ipv1 -> GHC.Types.True }
                   Language.Python.Common.AST.FromItems a1 a2
                   -> case b of wild1 {
                        Language.Python.Common.AST.ImportEverything ipv -> GHC.Types.False
                        Language.Python.Common.AST.FromItems b1 b4
                        -> case GHC.Classes.$fOrd[]_$ccompare
                                  @ (Language.Python.Common.AST.FromItem annot1)
                                  $dOrd1
                                  a1
                                  b1 of wild2 {
                             GHC.Types.LT -> GHC.Types.True
                             GHC.Types.EQ -> GHC.Classes.< @ annot1 $dOrd a2 b4
                             GHC.Types.GT -> GHC.Types.False } } }) -}
e3cd8a0dc8214c8f5ef60ed5a9ac11ef
  $fOrdFromItems_$c<= ::
    GHC.Classes.Ord annot =>
    Language.Python.Common.AST.FromItems annot
    -> Language.Python.Common.AST.FromItems annot -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)><L,U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ annot1
                   ($dOrd :: GHC.Classes.Ord annot1)
                   (a :: Language.Python.Common.AST.FromItems annot1)
                   (b :: Language.Python.Common.AST.FromItems annot1) ->
                 case Language.Python.Common.AST.$fOrdFromItems_$c<
                        @ annot1
                        $dOrd
                        b
                        a of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
e3cd8a0dc8214c8f5ef60ed5a9ac11ef
  $fOrdFromItems_$c>= ::
    GHC.Classes.Ord annot =>
    Language.Python.Common.AST.FromItems annot
    -> Language.Python.Common.AST.FromItems annot -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)><L,U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ annot1
                   ($dOrd :: GHC.Classes.Ord annot1)
                   (a :: Language.Python.Common.AST.FromItems annot1)
                   (b :: Language.Python.Common.AST.FromItems annot1) ->
                 case Language.Python.Common.AST.$fOrdFromItems_$c<
                        @ annot1
                        $dOrd
                        a
                        b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
e3cd8a0dc8214c8f5ef60ed5a9ac11ef
  $fOrdFromItems_$ccompare ::
    GHC.Classes.Ord annot =>
    Language.Python.Common.AST.FromItems annot
    -> Language.Python.Common.AST.FromItems annot -> GHC.Types.Ordering
  {- Arity: 1, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)>,
     Unfolding: (\ @ annot1 ($dOrd :: GHC.Classes.Ord annot1) ->
                 let {
                   $dOrd1 :: GHC.Classes.Ord
                               (Language.Python.Common.AST.FromItem annot1)
                   = Language.Python.Common.AST.$fOrdFromItem @ annot1 $dOrd
                 } in
                 \ (a :: Language.Python.Common.AST.FromItems annot1)
                   (b :: Language.Python.Common.AST.FromItems annot1) ->
                 case a of wild {
                   Language.Python.Common.AST.ImportEverything a1
                   -> case b of wild1 {
                        Language.Python.Common.AST.ImportEverything b1
                        -> GHC.Classes.compare @ annot1 $dOrd a1 b1
                        Language.Python.Common.AST.FromItems ipv ipv1 -> GHC.Types.LT }
                   Language.Python.Common.AST.FromItems a1 a2
                   -> case b of wild1 {
                        Language.Python.Common.AST.ImportEverything ipv -> GHC.Types.GT
                        Language.Python.Common.AST.FromItems b1 b4
                        -> case GHC.Classes.$fOrd[]_$ccompare
                                  @ (Language.Python.Common.AST.FromItem annot1)
                                  $dOrd1
                                  a1
                                  b1 of wild2 {
                             GHC.Types.LT -> GHC.Types.LT
                             GHC.Types.EQ -> GHC.Classes.compare @ annot1 $dOrd a2 b4
                             GHC.Types.GT -> GHC.Types.GT } } }) -}
e3cd8a0dc8214c8f5ef60ed5a9ac11ef
  $fOrdFromItems_$cmax ::
    GHC.Classes.Ord annot =>
    Language.Python.Common.AST.FromItems annot
    -> Language.Python.Common.AST.FromItems annot
    -> Language.Python.Common.AST.FromItems annot
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)><L,U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ annot1
                   ($dOrd :: GHC.Classes.Ord annot1)
                   (x :: Language.Python.Common.AST.FromItems annot1)
                   (y :: Language.Python.Common.AST.FromItems annot1) ->
                 case Language.Python.Common.AST.$fOrdFromItems_$c<
                        @ annot1
                        $dOrd
                        y
                        x of wild {
                   GHC.Types.False -> y GHC.Types.True -> x }) -}
e3cd8a0dc8214c8f5ef60ed5a9ac11ef
  $fOrdFromItems_$cmin ::
    GHC.Classes.Ord annot =>
    Language.Python.Common.AST.FromItems annot
    -> Language.Python.Common.AST.FromItems annot
    -> Language.Python.Common.AST.FromItems annot
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)><L,U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ annot1
                   ($dOrd :: GHC.Classes.Ord annot1)
                   (x :: Language.Python.Common.AST.FromItems annot1)
                   (y :: Language.Python.Common.AST.FromItems annot1) ->
                 case Language.Python.Common.AST.$fOrdFromItems_$c<
                        @ annot1
                        $dOrd
                        y
                        x of wild {
                   GHC.Types.False -> x GHC.Types.True -> y }) -}
e3cd8a0dc8214c8f5ef60ed5a9ac11ef
  $fOrdFromItems_$cp1Ord ::
    GHC.Classes.Ord annot =>
    GHC.Classes.Eq (Language.Python.Common.AST.FromItems annot)
  {- Arity: 1, HasNoCafRefs,
     Strictness: <L,1*U(1*U(C(C1(U)),A),A,A,A,A,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ annot1 ($dOrd :: GHC.Classes.Ord annot1) ->
                 Language.Python.Common.AST.$fEqFromItems
                   @ annot1
                   (GHC.Classes.$p1Ord @ annot1 $dOrd)) -}
cf431e64d114ff48b3a5eb8fda819c32
  $fOrdHandler ::
    GHC.Classes.Ord annot =>
    GHC.Classes.Ord (Language.Python.Common.AST.Handler annot)
  DFunId
  {- Arity: 1, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)>m,
     Inline: CONLIKE,
     Unfolding: DFun: @ annot1 (v :: GHC.Classes.Ord annot1).
                  @ (Language.Python.Common.AST.Handler annot1)
                  (Language.Python.Common.AST.$fOrdHandler_$cp1Ord @ annot1 v)
                  (Language.Python.Common.AST.$fOrdHandler_$ccompare @ annot1 v)
                  (Language.Python.Common.AST.$fOrdHandler_$c< @ annot1 v)
                  (Language.Python.Common.AST.$fOrdHandler_$c<= @ annot1 v)
                  (\ (a :: Language.Python.Common.AST.Handler annot1)
                     (b :: Language.Python.Common.AST.Handler annot1) ->
                   Language.Python.Common.AST.$fOrdHandler_$c< @ annot1 v b a)
                  (Language.Python.Common.AST.$fOrdHandler_$c>= @ annot1 v)
                  (Language.Python.Common.AST.$fOrdHandler_$cmax @ annot1 v)
                  (Language.Python.Common.AST.$fOrdHandler_$cmin @ annot1 v) -}
cf431e64d114ff48b3a5eb8fda819c32
  $fOrdHandler_$c< ::
    GHC.Classes.Ord annot =>
    Language.Python.Common.AST.Handler annot
    -> Language.Python.Common.AST.Handler annot -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)>,
     Unfolding: (\ @ annot1 ($dOrd :: GHC.Classes.Ord annot1) ->
                 let {
                   $dOrd1 :: GHC.Classes.Ord
                               (Language.Python.Common.AST.Statement annot1)
                   = Language.Python.Common.AST.$fOrdStatement @ annot1 $dOrd
                 } in
                 \ (a :: Language.Python.Common.AST.Handler annot1)
                   (b :: Language.Python.Common.AST.Handler annot1) ->
                 case a of wild { Language.Python.Common.AST.Handler a1 a2 a3 ->
                 case b of wild1 { Language.Python.Common.AST.Handler b1 b4 b3 ->
                 case a1 of ww { Language.Python.Common.AST.ExceptClause ww1 ww2 ->
                 case b1 of ww3 { Language.Python.Common.AST.ExceptClause ww4 ww5 ->
                 case Language.Python.Common.AST.$w$ccompare2
                        @ annot1
                        $dOrd
                        ww1
                        ww2
                        ww4
                        ww5 of wild2 {
                   GHC.Types.LT -> GHC.Types.True
                   GHC.Types.EQ
                   -> case GHC.Classes.$fOrd[]_$ccompare
                             @ (Language.Python.Common.AST.Statement annot1)
                             $dOrd1
                             a2
                             b4 of wild3 {
                        GHC.Types.LT -> GHC.Types.True
                        GHC.Types.EQ -> GHC.Classes.< @ annot1 $dOrd a3 b3
                        GHC.Types.GT -> GHC.Types.False }
                   GHC.Types.GT -> GHC.Types.False } } } } }) -}
cf431e64d114ff48b3a5eb8fda819c32
  $fOrdHandler_$c<= ::
    GHC.Classes.Ord annot =>
    Language.Python.Common.AST.Handler annot
    -> Language.Python.Common.AST.Handler annot -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)><L,U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ annot1
                   ($dOrd :: GHC.Classes.Ord annot1)
                   (a :: Language.Python.Common.AST.Handler annot1)
                   (b :: Language.Python.Common.AST.Handler annot1) ->
                 case Language.Python.Common.AST.$fOrdHandler_$c<
                        @ annot1
                        $dOrd
                        b
                        a of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
cf431e64d114ff48b3a5eb8fda819c32
  $fOrdHandler_$c>= ::
    GHC.Classes.Ord annot =>
    Language.Python.Common.AST.Handler annot
    -> Language.Python.Common.AST.Handler annot -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)><L,U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ annot1
                   ($dOrd :: GHC.Classes.Ord annot1)
                   (a :: Language.Python.Common.AST.Handler annot1)
                   (b :: Language.Python.Common.AST.Handler annot1) ->
                 case Language.Python.Common.AST.$fOrdHandler_$c<
                        @ annot1
                        $dOrd
                        a
                        b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
cf431e64d114ff48b3a5eb8fda819c32
  $fOrdHandler_$ccompare ::
    GHC.Classes.Ord annot =>
    Language.Python.Common.AST.Handler annot
    -> Language.Python.Common.AST.Handler annot -> GHC.Types.Ordering
  {- Arity: 1, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)>,
     Unfolding: (\ @ annot1 ($dOrd :: GHC.Classes.Ord annot1) ->
                 let {
                   $dOrd1 :: GHC.Classes.Ord
                               (Language.Python.Common.AST.Statement annot1)
                   = Language.Python.Common.AST.$fOrdStatement @ annot1 $dOrd
                 } in
                 \ (a :: Language.Python.Common.AST.Handler annot1)
                   (b :: Language.Python.Common.AST.Handler annot1) ->
                 case a of wild { Language.Python.Common.AST.Handler a1 a2 a3 ->
                 case b of wild1 { Language.Python.Common.AST.Handler b1 b4 b3 ->
                 case a1 of ww { Language.Python.Common.AST.ExceptClause ww1 ww2 ->
                 case b1 of ww3 { Language.Python.Common.AST.ExceptClause ww4 ww5 ->
                 case Language.Python.Common.AST.$w$ccompare2
                        @ annot1
                        $dOrd
                        ww1
                        ww2
                        ww4
                        ww5 of wild2 {
                   GHC.Types.LT -> GHC.Types.LT
                   GHC.Types.EQ
                   -> case GHC.Classes.$fOrd[]_$ccompare
                             @ (Language.Python.Common.AST.Statement annot1)
                             $dOrd1
                             a2
                             b4 of wild3 {
                        GHC.Types.LT -> GHC.Types.LT
                        GHC.Types.EQ -> GHC.Classes.compare @ annot1 $dOrd a3 b3
                        GHC.Types.GT -> GHC.Types.GT }
                   GHC.Types.GT -> GHC.Types.GT } } } } }) -}
cf431e64d114ff48b3a5eb8fda819c32
  $fOrdHandler_$cmax ::
    GHC.Classes.Ord annot =>
    Language.Python.Common.AST.Handler annot
    -> Language.Python.Common.AST.Handler annot
    -> Language.Python.Common.AST.Handler annot
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)><L,U(U,U,U)><L,U(U,U,U)>,
     Unfolding: InlineRule (3, True, False)
                (\ @ annot1
                   ($dOrd :: GHC.Classes.Ord annot1)
                   (x :: Language.Python.Common.AST.Handler annot1)
                   (y :: Language.Python.Common.AST.Handler annot1) ->
                 case Language.Python.Common.AST.$fOrdHandler_$c<
                        @ annot1
                        $dOrd
                        y
                        x of wild {
                   GHC.Types.False -> y GHC.Types.True -> x }) -}
cf431e64d114ff48b3a5eb8fda819c32
  $fOrdHandler_$cmin ::
    GHC.Classes.Ord annot =>
    Language.Python.Common.AST.Handler annot
    -> Language.Python.Common.AST.Handler annot
    -> Language.Python.Common.AST.Handler annot
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)><L,U(U,U,U)><L,U(U,U,U)>,
     Unfolding: InlineRule (3, True, False)
                (\ @ annot1
                   ($dOrd :: GHC.Classes.Ord annot1)
                   (x :: Language.Python.Common.AST.Handler annot1)
                   (y :: Language.Python.Common.AST.Handler annot1) ->
                 case Language.Python.Common.AST.$fOrdHandler_$c<
                        @ annot1
                        $dOrd
                        y
                        x of wild {
                   GHC.Types.False -> x GHC.Types.True -> y }) -}
cf431e64d114ff48b3a5eb8fda819c32
  $fOrdHandler_$cp1Ord ::
    GHC.Classes.Ord annot =>
    GHC.Classes.Eq (Language.Python.Common.AST.Handler annot)
  {- Arity: 1, HasNoCafRefs,
     Strictness: <L,1*U(1*U(C(C1(U)),A),A,A,A,A,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ annot1 ($dOrd :: GHC.Classes.Ord annot1) ->
                 Language.Python.Common.AST.$fEqHandler
                   @ annot1
                   (GHC.Classes.$p1Ord @ annot1 $dOrd)) -}
6aab1d6f902c3e0dbc09c99c8605e197
  $fOrdIdent ::
    GHC.Classes.Ord annot =>
    GHC.Classes.Ord (Language.Python.Common.AST.Ident annot)
  DFunId
  {- Arity: 1, HasNoCafRefs,
     Strictness: <L,U(1*U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)>m,
     Inline: CONLIKE,
     Unfolding: DFun: @ annot1 (v :: GHC.Classes.Ord annot1).
                  @ (Language.Python.Common.AST.Ident annot1)
                  (Language.Python.Common.AST.$fOrdIdent_$cp1Ord @ annot1 v)
                  (Language.Python.Common.AST.$fOrdIdent_$ccompare @ annot1 v)
                  (Language.Python.Common.AST.$fOrdIdent_$c< @ annot1 v)
                  (Language.Python.Common.AST.$fOrdIdent_$c<= @ annot1 v)
                  (\ (a :: Language.Python.Common.AST.Ident annot1)
                     (b :: Language.Python.Common.AST.Ident annot1) ->
                   Language.Python.Common.AST.$fOrdIdent_$c< @ annot1 v b a)
                  (Language.Python.Common.AST.$fOrdIdent_$c>= @ annot1 v)
                  (Language.Python.Common.AST.$fOrdIdent_$cmax @ annot1 v)
                  (Language.Python.Common.AST.$fOrdIdent_$cmin @ annot1 v) -}
6aab1d6f902c3e0dbc09c99c8605e197
  $fOrdIdent_$c< ::
    GHC.Classes.Ord annot =>
    Language.Python.Common.AST.Ident annot
    -> Language.Python.Common.AST.Ident annot -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(A,A,1*C1(C1(U)),A,A,A,A,A)><S(SL),1*U(U,U)><S(SL),1*U(U,U)>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ @ annot1
                   (w :: GHC.Classes.Ord annot1)
                   (w249 :: Language.Python.Common.AST.Ident annot1)
                   (w250 :: Language.Python.Common.AST.Ident annot1) ->
                 case w249 of ww { Language.Python.Common.AST.Ident ww1 ww2 ->
                 case w250 of ww3 { Language.Python.Common.AST.Ident ww4 ww5 ->
                 case GHC.Classes.$fOrd[]_$s$ccompare1 ww1 ww4 of wild {
                   GHC.Types.LT -> GHC.Types.True
                   GHC.Types.EQ -> GHC.Classes.< @ annot1 w ww2 ww5
                   GHC.Types.GT -> GHC.Types.False } } }) -}
6aab1d6f902c3e0dbc09c99c8605e197
  $fOrdIdent_$c<= ::
    GHC.Classes.Ord annot =>
    Language.Python.Common.AST.Ident annot
    -> Language.Python.Common.AST.Ident annot -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(A,A,1*C1(C1(U)),A,A,A,A,A)><S(SL),1*U(U,U)><S(SL),1*U(U,U)>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ @ annot1
                   (w :: GHC.Classes.Ord annot1)
                   (w249 :: Language.Python.Common.AST.Ident annot1)
                   (w250 :: Language.Python.Common.AST.Ident annot1) ->
                 case w249 of ww { Language.Python.Common.AST.Ident ww1 ww2 ->
                 case w250 of ww3 { Language.Python.Common.AST.Ident ww4 ww5 ->
                 case GHC.Classes.$fOrd[]_$s$ccompare1 ww4 ww1 of wild {
                   GHC.Types.LT -> GHC.Types.False
                   GHC.Types.EQ
                   -> case GHC.Classes.< @ annot1 w ww5 ww2 of wild1 {
                        GHC.Types.False -> GHC.Types.True
                        GHC.Types.True -> GHC.Types.False }
                   GHC.Types.GT -> GHC.Types.True } } }) -}
6aab1d6f902c3e0dbc09c99c8605e197
  $fOrdIdent_$c>= ::
    GHC.Classes.Ord annot =>
    Language.Python.Common.AST.Ident annot
    -> Language.Python.Common.AST.Ident annot -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(A,A,1*C1(C1(U)),A,A,A,A,A)><S(SL),1*U(U,U)><S(SL),1*U(U,U)>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ @ annot1
                   (w :: GHC.Classes.Ord annot1)
                   (w249 :: Language.Python.Common.AST.Ident annot1)
                   (w250 :: Language.Python.Common.AST.Ident annot1) ->
                 case w249 of ww { Language.Python.Common.AST.Ident ww1 ww2 ->
                 case w250 of ww3 { Language.Python.Common.AST.Ident ww4 ww5 ->
                 case GHC.Classes.$fOrd[]_$s$ccompare1 ww1 ww4 of wild {
                   GHC.Types.LT -> GHC.Types.False
                   GHC.Types.EQ
                   -> case GHC.Classes.< @ annot1 w ww2 ww5 of wild1 {
                        GHC.Types.False -> GHC.Types.True
                        GHC.Types.True -> GHC.Types.False }
                   GHC.Types.GT -> GHC.Types.True } } }) -}
6aab1d6f902c3e0dbc09c99c8605e197
  $fOrdIdent_$ccompare ::
    GHC.Classes.Ord annot =>
    Language.Python.Common.AST.Ident annot
    -> Language.Python.Common.AST.Ident annot -> GHC.Types.Ordering
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(A,1*C1(C1(U)),A,A,A,A,A,A)><S(SL),1*U(U,U)><S(SL),1*U(U,U)>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ @ annot1
                   (w :: GHC.Classes.Ord annot1)
                   (w249 :: Language.Python.Common.AST.Ident annot1)
                   (w250 :: Language.Python.Common.AST.Ident annot1) ->
                 case w249 of ww { Language.Python.Common.AST.Ident ww1 ww2 ->
                 case w250 of ww3 { Language.Python.Common.AST.Ident ww4 ww5 ->
                 case GHC.Classes.$fOrd[]_$s$ccompare1 ww1 ww4 of wild {
                   GHC.Types.LT -> GHC.Types.LT
                   GHC.Types.EQ -> GHC.Classes.compare @ annot1 w ww2 ww5
                   GHC.Types.GT -> GHC.Types.GT } } }) -}
6aab1d6f902c3e0dbc09c99c8605e197
  $fOrdIdent_$cmax ::
    GHC.Classes.Ord annot =>
    Language.Python.Common.AST.Ident annot
    -> Language.Python.Common.AST.Ident annot
    -> Language.Python.Common.AST.Ident annot
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(A,A,1*C1(C1(U)),A,A,A,A,A)><S(SL),1*U(U,U)><S(SL),1*U(U,U)>m,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ @ annot1
                   (w :: GHC.Classes.Ord annot1)
                   (w249 :: Language.Python.Common.AST.Ident annot1)
                   (w250 :: Language.Python.Common.AST.Ident annot1) ->
                 case w249 of ww { Language.Python.Common.AST.Ident ww1 ww2 ->
                 case w250 of ww3 { Language.Python.Common.AST.Ident ww4 ww5 ->
                 case GHC.Classes.$fOrd[]_$s$ccompare1 ww4 ww1 of wild {
                   GHC.Types.LT -> Language.Python.Common.AST.Ident @ annot1 ww1 ww2
                   GHC.Types.EQ
                   -> case GHC.Classes.< @ annot1 w ww5 ww2 of wild1 {
                        GHC.Types.False
                        -> Language.Python.Common.AST.Ident @ annot1 ww4 ww5
                        GHC.Types.True
                        -> Language.Python.Common.AST.Ident @ annot1 ww1 ww2 }
                   GHC.Types.GT
                   -> Language.Python.Common.AST.Ident @ annot1 ww4 ww5 } } }) -}
6aab1d6f902c3e0dbc09c99c8605e197
  $fOrdIdent_$cmin ::
    GHC.Classes.Ord annot =>
    Language.Python.Common.AST.Ident annot
    -> Language.Python.Common.AST.Ident annot
    -> Language.Python.Common.AST.Ident annot
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(A,A,1*C1(C1(U)),A,A,A,A,A)><S(SL),1*U(U,U)><S(SL),1*U(U,U)>m,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ @ annot1
                   (w :: GHC.Classes.Ord annot1)
                   (w249 :: Language.Python.Common.AST.Ident annot1)
                   (w250 :: Language.Python.Common.AST.Ident annot1) ->
                 case w249 of ww { Language.Python.Common.AST.Ident ww1 ww2 ->
                 case w250 of ww3 { Language.Python.Common.AST.Ident ww4 ww5 ->
                 case GHC.Classes.$fOrd[]_$s$ccompare1 ww4 ww1 of wild {
                   GHC.Types.LT -> Language.Python.Common.AST.Ident @ annot1 ww4 ww5
                   GHC.Types.EQ
                   -> case GHC.Classes.< @ annot1 w ww5 ww2 of wild1 {
                        GHC.Types.False
                        -> Language.Python.Common.AST.Ident @ annot1 ww1 ww2
                        GHC.Types.True
                        -> Language.Python.Common.AST.Ident @ annot1 ww4 ww5 }
                   GHC.Types.GT
                   -> Language.Python.Common.AST.Ident @ annot1 ww1 ww2 } } }) -}
6aab1d6f902c3e0dbc09c99c8605e197
  $fOrdIdent_$cp1Ord ::
    GHC.Classes.Ord annot =>
    GHC.Classes.Eq (Language.Python.Common.AST.Ident annot)
  {- Arity: 1, HasNoCafRefs,
     Strictness: <L,1*U(1*U(C(C1(U)),A),A,A,A,A,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ annot1 ($dOrd :: GHC.Classes.Ord annot1) ->
                 Language.Python.Common.AST.$fEqIdent
                   @ annot1
                   (GHC.Classes.$p1Ord @ annot1 $dOrd)) -}
283607fc44cb0ad26a76914defc72d00
  $fOrdImportItem ::
    GHC.Classes.Ord annot =>
    GHC.Classes.Ord (Language.Python.Common.AST.ImportItem annot)
  DFunId
  {- Arity: 1, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)>m,
     Inline: CONLIKE,
     Unfolding: DFun: @ annot1 (v :: GHC.Classes.Ord annot1).
                  @ (Language.Python.Common.AST.ImportItem annot1)
                  (Language.Python.Common.AST.$fOrdImportItem_$cp1Ord @ annot1 v)
                  (Language.Python.Common.AST.$fOrdImportItem_$ccompare @ annot1 v)
                  (Language.Python.Common.AST.$fOrdImportItem_$c< @ annot1 v)
                  (Language.Python.Common.AST.$fOrdImportItem_$c<= @ annot1 v)
                  (\ (a :: Language.Python.Common.AST.ImportItem annot1)
                     (b :: Language.Python.Common.AST.ImportItem annot1) ->
                   Language.Python.Common.AST.$fOrdImportItem_$c< @ annot1 v b a)
                  (Language.Python.Common.AST.$fOrdImportItem_$c>= @ annot1 v)
                  (Language.Python.Common.AST.$fOrdImportItem_$cmax @ annot1 v)
                  (Language.Python.Common.AST.$fOrdImportItem_$cmin @ annot1 v) -}
283607fc44cb0ad26a76914defc72d00
  $fOrdImportItem_$c< ::
    GHC.Classes.Ord annot =>
    Language.Python.Common.AST.ImportItem annot
    -> Language.Python.Common.AST.ImportItem annot -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)>,
     Unfolding: (\ @ annot1 ($dOrd :: GHC.Classes.Ord annot1) ->
                 let {
                   $dOrd1 :: GHC.Classes.Ord (Language.Python.Common.AST.Ident annot1)
                   = Language.Python.Common.AST.$fOrdIdent @ annot1 $dOrd
                 } in
                 \ (a :: Language.Python.Common.AST.ImportItem annot1)
                   (b :: Language.Python.Common.AST.ImportItem annot1) ->
                 case a of wild { Language.Python.Common.AST.ImportItem a1 a2 a3 ->
                 case b of wild1 { Language.Python.Common.AST.ImportItem b1 b4 b3 ->
                 case GHC.Classes.$fOrd[]_$ccompare
                        @ (Language.Python.Common.AST.Ident annot1)
                        $dOrd1
                        a1
                        b1 of wild2 {
                   GHC.Types.LT -> GHC.Types.True
                   GHC.Types.EQ
                   -> case a2 of wild3 {
                        GHC.Base.Nothing
                        -> case b4 of wild4 {
                             GHC.Base.Nothing -> GHC.Classes.< @ annot1 $dOrd a3 b3
                             GHC.Base.Just ipv -> GHC.Types.True }
                        GHC.Base.Just a4
                        -> case b4 of wild4 {
                             GHC.Base.Nothing -> GHC.Types.False
                             GHC.Base.Just b5
                             -> case a4 of wild5 { Language.Python.Common.AST.Ident a5 a6 ->
                                case b5 of wild6 { Language.Python.Common.AST.Ident b6 b7 ->
                                case GHC.Classes.$fOrd[]_$s$ccompare1 a5 b6 of wild7 {
                                  GHC.Types.LT -> GHC.Types.True
                                  GHC.Types.EQ
                                  -> case GHC.Classes.compare @ annot1 $dOrd a6 b7 of wild8 {
                                       GHC.Types.LT -> GHC.Types.True
                                       GHC.Types.EQ -> GHC.Classes.< @ annot1 $dOrd a3 b3
                                       GHC.Types.GT -> GHC.Types.False }
                                  GHC.Types.GT -> GHC.Types.False } } } } }
                   GHC.Types.GT -> GHC.Types.False } } }) -}
283607fc44cb0ad26a76914defc72d00
  $fOrdImportItem_$c<= ::
    GHC.Classes.Ord annot =>
    Language.Python.Common.AST.ImportItem annot
    -> Language.Python.Common.AST.ImportItem annot -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)><L,U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ annot1
                   ($dOrd :: GHC.Classes.Ord annot1)
                   (a :: Language.Python.Common.AST.ImportItem annot1)
                   (b :: Language.Python.Common.AST.ImportItem annot1) ->
                 case Language.Python.Common.AST.$fOrdImportItem_$c<
                        @ annot1
                        $dOrd
                        b
                        a of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
283607fc44cb0ad26a76914defc72d00
  $fOrdImportItem_$c>= ::
    GHC.Classes.Ord annot =>
    Language.Python.Common.AST.ImportItem annot
    -> Language.Python.Common.AST.ImportItem annot -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)><L,U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ annot1
                   ($dOrd :: GHC.Classes.Ord annot1)
                   (a :: Language.Python.Common.AST.ImportItem annot1)
                   (b :: Language.Python.Common.AST.ImportItem annot1) ->
                 case Language.Python.Common.AST.$fOrdImportItem_$c<
                        @ annot1
                        $dOrd
                        a
                        b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
283607fc44cb0ad26a76914defc72d00
  $fOrdImportItem_$ccompare ::
    GHC.Classes.Ord annot =>
    Language.Python.Common.AST.ImportItem annot
    -> Language.Python.Common.AST.ImportItem annot
    -> GHC.Types.Ordering
  {- Arity: 1, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)>,
     Unfolding: (\ @ annot1 ($dOrd :: GHC.Classes.Ord annot1) ->
                 let {
                   $dOrd1 :: GHC.Classes.Ord (Language.Python.Common.AST.Ident annot1)
                   = Language.Python.Common.AST.$fOrdIdent @ annot1 $dOrd
                 } in
                 \ (a :: Language.Python.Common.AST.ImportItem annot1)
                   (b :: Language.Python.Common.AST.ImportItem annot1) ->
                 case a of wild { Language.Python.Common.AST.ImportItem a1 a2 a3 ->
                 case b of wild1 { Language.Python.Common.AST.ImportItem b1 b4 b3 ->
                 case GHC.Classes.$fOrd[]_$ccompare
                        @ (Language.Python.Common.AST.Ident annot1)
                        $dOrd1
                        a1
                        b1 of wild2 {
                   GHC.Types.LT -> GHC.Types.LT
                   GHC.Types.EQ
                   -> case a2 of wild3 {
                        GHC.Base.Nothing
                        -> case b4 of wild4 {
                             GHC.Base.Nothing -> GHC.Classes.compare @ annot1 $dOrd a3 b3
                             GHC.Base.Just ipv -> GHC.Types.LT }
                        GHC.Base.Just a4
                        -> case b4 of wild4 {
                             GHC.Base.Nothing -> GHC.Types.GT
                             GHC.Base.Just b5
                             -> case a4 of wild5 { Language.Python.Common.AST.Ident a5 a6 ->
                                case b5 of wild6 { Language.Python.Common.AST.Ident b6 b7 ->
                                case GHC.Classes.$fOrd[]_$s$ccompare1 a5 b6 of wild7 {
                                  GHC.Types.LT -> GHC.Types.LT
                                  GHC.Types.EQ
                                  -> case GHC.Classes.compare @ annot1 $dOrd a6 b7 of wild8 {
                                       GHC.Types.LT -> GHC.Types.LT
                                       GHC.Types.EQ -> GHC.Classes.compare @ annot1 $dOrd a3 b3
                                       GHC.Types.GT -> GHC.Types.GT }
                                  GHC.Types.GT -> GHC.Types.GT } } } } }
                   GHC.Types.GT -> GHC.Types.GT } } }) -}
283607fc44cb0ad26a76914defc72d00
  $fOrdImportItem_$cmax ::
    GHC.Classes.Ord annot =>
    Language.Python.Common.AST.ImportItem annot
    -> Language.Python.Common.AST.ImportItem annot
    -> Language.Python.Common.AST.ImportItem annot
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)><L,U(U,U,U)><L,U(U,U,U)>,
     Unfolding: InlineRule (3, True, False)
                (\ @ annot1
                   ($dOrd :: GHC.Classes.Ord annot1)
                   (x :: Language.Python.Common.AST.ImportItem annot1)
                   (y :: Language.Python.Common.AST.ImportItem annot1) ->
                 case Language.Python.Common.AST.$fOrdImportItem_$c<
                        @ annot1
                        $dOrd
                        y
                        x of wild {
                   GHC.Types.False -> y GHC.Types.True -> x }) -}
283607fc44cb0ad26a76914defc72d00
  $fOrdImportItem_$cmin ::
    GHC.Classes.Ord annot =>
    Language.Python.Common.AST.ImportItem annot
    -> Language.Python.Common.AST.ImportItem annot
    -> Language.Python.Common.AST.ImportItem annot
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)><L,U(U,U,U)><L,U(U,U,U)>,
     Unfolding: InlineRule (3, True, False)
                (\ @ annot1
                   ($dOrd :: GHC.Classes.Ord annot1)
                   (x :: Language.Python.Common.AST.ImportItem annot1)
                   (y :: Language.Python.Common.AST.ImportItem annot1) ->
                 case Language.Python.Common.AST.$fOrdImportItem_$c<
                        @ annot1
                        $dOrd
                        y
                        x of wild {
                   GHC.Types.False -> x GHC.Types.True -> y }) -}
283607fc44cb0ad26a76914defc72d00
  $fOrdImportItem_$cp1Ord ::
    GHC.Classes.Ord annot =>
    GHC.Classes.Eq (Language.Python.Common.AST.ImportItem annot)
  {- Arity: 1, HasNoCafRefs,
     Strictness: <L,1*U(1*U(C(C1(U)),A),A,A,A,A,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ annot1 ($dOrd :: GHC.Classes.Ord annot1) ->
                 Language.Python.Common.AST.$fEqImportItem
                   @ annot1
                   (GHC.Classes.$p1Ord @ annot1 $dOrd)) -}
01a50092e1f9a1aefabdff796e5265a4
  $fOrdImportRelative ::
    GHC.Classes.Ord annot =>
    GHC.Classes.Ord (Language.Python.Common.AST.ImportRelative annot)
  DFunId
  {- Arity: 1, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)>m,
     Inline: CONLIKE,
     Unfolding: DFun: @ annot1 (v :: GHC.Classes.Ord annot1).
                  @ (Language.Python.Common.AST.ImportRelative annot1)
                  (Language.Python.Common.AST.$fOrdImportRelative_$cp1Ord @ annot1 v)
                  (Language.Python.Common.AST.$fOrdImportRelative_$ccompare
                     @ annot1
                     v)
                  (Language.Python.Common.AST.$fOrdImportRelative_$c< @ annot1 v)
                  (Language.Python.Common.AST.$fOrdImportRelative_$c<= @ annot1 v)
                  (\ (a :: Language.Python.Common.AST.ImportRelative annot1)
                     (b :: Language.Python.Common.AST.ImportRelative annot1) ->
                   Language.Python.Common.AST.$fOrdImportRelative_$c< @ annot1 v b a)
                  (Language.Python.Common.AST.$fOrdImportRelative_$c>= @ annot1 v)
                  (Language.Python.Common.AST.$fOrdImportRelative_$cmax @ annot1 v)
                  (Language.Python.Common.AST.$fOrdImportRelative_$cmin
                     @ annot1
                     v) -}
01a50092e1f9a1aefabdff796e5265a4
  $fOrdImportRelative_$c< ::
    GHC.Classes.Ord annot =>
    Language.Python.Common.AST.ImportRelative annot
    -> Language.Python.Common.AST.ImportRelative annot
    -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)>,
     Unfolding: (\ @ annot1 ($dOrd :: GHC.Classes.Ord annot1) ->
                 let {
                   $dOrd1 :: GHC.Classes.Ord (Language.Python.Common.AST.Ident annot1)
                   = Language.Python.Common.AST.$fOrdIdent @ annot1 $dOrd
                 } in
                 \ (a :: Language.Python.Common.AST.ImportRelative annot1)
                   (b :: Language.Python.Common.AST.ImportRelative annot1) ->
                 case a of wild { Language.Python.Common.AST.ImportRelative a1 a2 a3 ->
                 case b of wild1 { Language.Python.Common.AST.ImportRelative b1 b4 b3 ->
                 case a1 of wild2 { GHC.Types.I# x# ->
                 case b1 of wild3 { GHC.Types.I# y# ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<# x# y#) of wild4 {
                   GHC.Types.False
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.==# x# y#) of wild5 {
                        GHC.Types.False -> GHC.Types.False
                        GHC.Types.True
                        -> case a2 of wild6 {
                             GHC.Base.Nothing
                             -> case b4 of wild7 {
                                  GHC.Base.Nothing -> GHC.Classes.< @ annot1 $dOrd a3 b3
                                  GHC.Base.Just ipv -> GHC.Types.True }
                             GHC.Base.Just a4
                             -> case b4 of wild7 {
                                  GHC.Base.Nothing -> GHC.Types.False
                                  GHC.Base.Just b5
                                  -> case GHC.Classes.$fOrd[]_$ccompare
                                            @ (Language.Python.Common.AST.Ident annot1)
                                            $dOrd1
                                            a4
                                            b5 of wild8 {
                                       GHC.Types.LT -> GHC.Types.True
                                       GHC.Types.EQ -> GHC.Classes.< @ annot1 $dOrd a3 b3
                                       GHC.Types.GT -> GHC.Types.False } } } }
                   GHC.Types.True -> GHC.Types.True } } } } }) -}
01a50092e1f9a1aefabdff796e5265a4
  $fOrdImportRelative_$c<= ::
    GHC.Classes.Ord annot =>
    Language.Python.Common.AST.ImportRelative annot
    -> Language.Python.Common.AST.ImportRelative annot
    -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)><L,U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ annot1
                   ($dOrd :: GHC.Classes.Ord annot1)
                   (a :: Language.Python.Common.AST.ImportRelative annot1)
                   (b :: Language.Python.Common.AST.ImportRelative annot1) ->
                 case Language.Python.Common.AST.$fOrdImportRelative_$c<
                        @ annot1
                        $dOrd
                        b
                        a of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
01a50092e1f9a1aefabdff796e5265a4
  $fOrdImportRelative_$c>= ::
    GHC.Classes.Ord annot =>
    Language.Python.Common.AST.ImportRelative annot
    -> Language.Python.Common.AST.ImportRelative annot
    -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)><L,U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ annot1
                   ($dOrd :: GHC.Classes.Ord annot1)
                   (a :: Language.Python.Common.AST.ImportRelative annot1)
                   (b :: Language.Python.Common.AST.ImportRelative annot1) ->
                 case Language.Python.Common.AST.$fOrdImportRelative_$c<
                        @ annot1
                        $dOrd
                        a
                        b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
01a50092e1f9a1aefabdff796e5265a4
  $fOrdImportRelative_$ccompare ::
    GHC.Classes.Ord annot =>
    Language.Python.Common.AST.ImportRelative annot
    -> Language.Python.Common.AST.ImportRelative annot
    -> GHC.Types.Ordering
  {- Arity: 1, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)>,
     Unfolding: (\ @ annot1 ($dOrd :: GHC.Classes.Ord annot1) ->
                 let {
                   $dOrd1 :: GHC.Classes.Ord (Language.Python.Common.AST.Ident annot1)
                   = Language.Python.Common.AST.$fOrdIdent @ annot1 $dOrd
                 } in
                 \ (a :: Language.Python.Common.AST.ImportRelative annot1)
                   (b :: Language.Python.Common.AST.ImportRelative annot1) ->
                 case a of wild { Language.Python.Common.AST.ImportRelative a1 a2 a3 ->
                 case b of wild1 { Language.Python.Common.AST.ImportRelative b1 b4 b3 ->
                 case a1 of wild2 { GHC.Types.I# x# ->
                 case b1 of wild3 { GHC.Types.I# y# ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<# x# y#) of wild4 {
                   GHC.Types.False
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.==# x# y#) of wild5 {
                        GHC.Types.False -> GHC.Types.GT
                        GHC.Types.True
                        -> case a2 of wild6 {
                             GHC.Base.Nothing
                             -> case b4 of wild7 {
                                  GHC.Base.Nothing -> GHC.Classes.compare @ annot1 $dOrd a3 b3
                                  GHC.Base.Just ipv -> GHC.Types.LT }
                             GHC.Base.Just a4
                             -> case b4 of wild7 {
                                  GHC.Base.Nothing -> GHC.Types.GT
                                  GHC.Base.Just b5
                                  -> case GHC.Classes.$fOrd[]_$ccompare
                                            @ (Language.Python.Common.AST.Ident annot1)
                                            $dOrd1
                                            a4
                                            b5 of wild8 {
                                       GHC.Types.LT -> GHC.Types.LT
                                       GHC.Types.EQ -> GHC.Classes.compare @ annot1 $dOrd a3 b3
                                       GHC.Types.GT -> GHC.Types.GT } } } }
                   GHC.Types.True -> GHC.Types.LT } } } } }) -}
01a50092e1f9a1aefabdff796e5265a4
  $fOrdImportRelative_$cmax ::
    GHC.Classes.Ord annot =>
    Language.Python.Common.AST.ImportRelative annot
    -> Language.Python.Common.AST.ImportRelative annot
    -> Language.Python.Common.AST.ImportRelative annot
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)><L,U(U,U,U)><L,U(U,U,U)>,
     Unfolding: InlineRule (3, True, False)
                (\ @ annot1
                   ($dOrd :: GHC.Classes.Ord annot1)
                   (x :: Language.Python.Common.AST.ImportRelative annot1)
                   (y :: Language.Python.Common.AST.ImportRelative annot1) ->
                 case Language.Python.Common.AST.$fOrdImportRelative_$c<
                        @ annot1
                        $dOrd
                        y
                        x of wild {
                   GHC.Types.False -> y GHC.Types.True -> x }) -}
01a50092e1f9a1aefabdff796e5265a4
  $fOrdImportRelative_$cmin ::
    GHC.Classes.Ord annot =>
    Language.Python.Common.AST.ImportRelative annot
    -> Language.Python.Common.AST.ImportRelative annot
    -> Language.Python.Common.AST.ImportRelative annot
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)><L,U(U,U,U)><L,U(U,U,U)>,
     Unfolding: InlineRule (3, True, False)
                (\ @ annot1
                   ($dOrd :: GHC.Classes.Ord annot1)
                   (x :: Language.Python.Common.AST.ImportRelative annot1)
                   (y :: Language.Python.Common.AST.ImportRelative annot1) ->
                 case Language.Python.Common.AST.$fOrdImportRelative_$c<
                        @ annot1
                        $dOrd
                        y
                        x of wild {
                   GHC.Types.False -> x GHC.Types.True -> y }) -}
01a50092e1f9a1aefabdff796e5265a4
  $fOrdImportRelative_$cp1Ord ::
    GHC.Classes.Ord annot =>
    GHC.Classes.Eq (Language.Python.Common.AST.ImportRelative annot)
  {- Arity: 1, HasNoCafRefs,
     Strictness: <L,1*U(1*U(C(C1(U)),A),A,A,A,A,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ annot1 ($dOrd :: GHC.Classes.Ord annot1) ->
                 Language.Python.Common.AST.$fEqImportRelative
                   @ annot1
                   (GHC.Classes.$p1Ord @ annot1 $dOrd)) -}
789db2a4b3c023a9cf43afdd1f0c3249
  $fOrdModule ::
    GHC.Classes.Ord annot =>
    GHC.Classes.Ord (Language.Python.Common.AST.Module annot)
  DFunId
  {- Arity: 1, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)>m,
     Inline: CONLIKE,
     Unfolding: DFun: @ annot1 (v :: GHC.Classes.Ord annot1).
                  @ (Language.Python.Common.AST.Module annot1)
                  (Language.Python.Common.AST.$fOrdModule_$cp1Ord @ annot1 v)
                  (GHC.Classes.$fOrd[]_$ccompare
                     @ (Language.Python.Common.AST.Statement annot1)
                     (Language.Python.Common.AST.$fOrdStatement @ annot1 v))
                    `cast`
                  (Sym (Language.Python.Common.AST.N:Module[0] <annot1>_R)
                   ->_R Sym (Language.Python.Common.AST.N:Module[0] <annot1>_R)
                   ->_R <GHC.Types.Ordering>_R)
                  (Language.Python.Common.AST.$fOrdModule_$c< @ annot1 v)
                  (Language.Python.Common.AST.$fOrdModule_$c<= @ annot1 v)
                  (Language.Python.Common.AST.$fOrdModule_$c> @ annot1 v)
                  (Language.Python.Common.AST.$fOrdModule_$c>= @ annot1 v)
                  (Language.Python.Common.AST.$fOrdModule_$cmax @ annot1 v)
                  (Language.Python.Common.AST.$fOrdModule_$cmin @ annot1 v) -}
789db2a4b3c023a9cf43afdd1f0c3249
  $fOrdModule_$c< ::
    GHC.Classes.Ord annot =>
    Language.Python.Common.AST.Module annot
    -> Language.Python.Common.AST.Module annot -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)>,
     Unfolding: (\ @ annot1 ($dOrd :: GHC.Classes.Ord annot1) ->
                 let {
                   $dOrd1 :: GHC.Classes.Ord
                               (Language.Python.Common.AST.Statement annot1)
                   = Language.Python.Common.AST.$fOrdStatement @ annot1 $dOrd
                 } in
                 (\ (x :: [Language.Python.Common.AST.Statement annot1])
                    (y :: [Language.Python.Common.AST.Statement annot1]) ->
                  case GHC.Classes.$fOrd[]_$ccompare
                         @ (Language.Python.Common.AST.Statement annot1)
                         $dOrd1
                         x
                         y of wild {
                    DEFAULT -> GHC.Types.False GHC.Types.LT -> GHC.Types.True })
                   `cast`
                 (Sym (Language.Python.Common.AST.N:Module[0] <annot1>_R)
                  ->_R Sym (Language.Python.Common.AST.N:Module[0] <annot1>_R)
                  ->_R <GHC.Types.Bool>_R)) -}
789db2a4b3c023a9cf43afdd1f0c3249
  $fOrdModule_$c<= ::
    GHC.Classes.Ord annot =>
    Language.Python.Common.AST.Module annot
    -> Language.Python.Common.AST.Module annot -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)>,
     Unfolding: (\ @ annot1 ($dOrd :: GHC.Classes.Ord annot1) ->
                 let {
                   $dOrd1 :: GHC.Classes.Ord
                               (Language.Python.Common.AST.Statement annot1)
                   = Language.Python.Common.AST.$fOrdStatement @ annot1 $dOrd
                 } in
                 (\ (x :: [Language.Python.Common.AST.Statement annot1])
                    (y :: [Language.Python.Common.AST.Statement annot1]) ->
                  case GHC.Classes.$fOrd[]_$ccompare
                         @ (Language.Python.Common.AST.Statement annot1)
                         $dOrd1
                         x
                         y of wild {
                    DEFAULT -> GHC.Types.True GHC.Types.GT -> GHC.Types.False })
                   `cast`
                 (Sym (Language.Python.Common.AST.N:Module[0] <annot1>_R)
                  ->_R Sym (Language.Python.Common.AST.N:Module[0] <annot1>_R)
                  ->_R <GHC.Types.Bool>_R)) -}
789db2a4b3c023a9cf43afdd1f0c3249
  $fOrdModule_$c> ::
    GHC.Classes.Ord annot =>
    Language.Python.Common.AST.Module annot
    -> Language.Python.Common.AST.Module annot -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)>,
     Unfolding: (\ @ annot1 ($dOrd :: GHC.Classes.Ord annot1) ->
                 let {
                   $dOrd1 :: GHC.Classes.Ord
                               (Language.Python.Common.AST.Statement annot1)
                   = Language.Python.Common.AST.$fOrdStatement @ annot1 $dOrd
                 } in
                 (\ (x :: [Language.Python.Common.AST.Statement annot1])
                    (y :: [Language.Python.Common.AST.Statement annot1]) ->
                  case GHC.Classes.$fOrd[]_$ccompare
                         @ (Language.Python.Common.AST.Statement annot1)
                         $dOrd1
                         x
                         y of wild {
                    DEFAULT -> GHC.Types.False GHC.Types.GT -> GHC.Types.True })
                   `cast`
                 (Sym (Language.Python.Common.AST.N:Module[0] <annot1>_R)
                  ->_R Sym (Language.Python.Common.AST.N:Module[0] <annot1>_R)
                  ->_R <GHC.Types.Bool>_R)) -}
789db2a4b3c023a9cf43afdd1f0c3249
  $fOrdModule_$c>= ::
    GHC.Classes.Ord annot =>
    Language.Python.Common.AST.Module annot
    -> Language.Python.Common.AST.Module annot -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)>,
     Unfolding: (\ @ annot1 ($dOrd :: GHC.Classes.Ord annot1) ->
                 let {
                   $dOrd1 :: GHC.Classes.Ord
                               (Language.Python.Common.AST.Statement annot1)
                   = Language.Python.Common.AST.$fOrdStatement @ annot1 $dOrd
                 } in
                 (\ (x :: [Language.Python.Common.AST.Statement annot1])
                    (y :: [Language.Python.Common.AST.Statement annot1]) ->
                  case GHC.Classes.$fOrd[]_$ccompare
                         @ (Language.Python.Common.AST.Statement annot1)
                         $dOrd1
                         x
                         y of wild {
                    DEFAULT -> GHC.Types.True GHC.Types.LT -> GHC.Types.False })
                   `cast`
                 (Sym (Language.Python.Common.AST.N:Module[0] <annot1>_R)
                  ->_R Sym (Language.Python.Common.AST.N:Module[0] <annot1>_R)
                  ->_R <GHC.Types.Bool>_R)) -}
789db2a4b3c023a9cf43afdd1f0c3249
  $fOrdModule_$cmax ::
    GHC.Classes.Ord annot =>
    Language.Python.Common.AST.Module annot
    -> Language.Python.Common.AST.Module annot
    -> Language.Python.Common.AST.Module annot
  {- Arity: 1, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)>,
     Unfolding: (\ @ annot1 ($dOrd :: GHC.Classes.Ord annot1) ->
                 let {
                   $dOrd1 :: GHC.Classes.Ord
                               (Language.Python.Common.AST.Statement annot1)
                   = Language.Python.Common.AST.$fOrdStatement @ annot1 $dOrd
                 } in
                 (\ (x :: [Language.Python.Common.AST.Statement annot1])
                    (y :: [Language.Python.Common.AST.Statement annot1]) ->
                  case GHC.Classes.$fOrd[]_$ccompare
                         @ (Language.Python.Common.AST.Statement annot1)
                         $dOrd1
                         x
                         y of wild {
                    DEFAULT -> y GHC.Types.GT -> x })
                   `cast`
                 (Sym (Language.Python.Common.AST.N:Module[0] <annot1>_R)
                  ->_R Sym (Language.Python.Common.AST.N:Module[0] <annot1>_R)
                  ->_R Sym (Language.Python.Common.AST.N:Module[0] <annot1>_R))) -}
789db2a4b3c023a9cf43afdd1f0c3249
  $fOrdModule_$cmin ::
    GHC.Classes.Ord annot =>
    Language.Python.Common.AST.Module annot
    -> Language.Python.Common.AST.Module annot
    -> Language.Python.Common.AST.Module annot
  {- Arity: 1, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)>,
     Unfolding: (\ @ annot1 ($dOrd :: GHC.Classes.Ord annot1) ->
                 let {
                   $dOrd1 :: GHC.Classes.Ord
                               (Language.Python.Common.AST.Statement annot1)
                   = Language.Python.Common.AST.$fOrdStatement @ annot1 $dOrd
                 } in
                 (\ (x :: [Language.Python.Common.AST.Statement annot1])
                    (y :: [Language.Python.Common.AST.Statement annot1]) ->
                  case GHC.Classes.$fOrd[]_$ccompare
                         @ (Language.Python.Common.AST.Statement annot1)
                         $dOrd1
                         x
                         y of wild {
                    DEFAULT -> x GHC.Types.GT -> y })
                   `cast`
                 (Sym (Language.Python.Common.AST.N:Module[0] <annot1>_R)
                  ->_R Sym (Language.Python.Common.AST.N:Module[0] <annot1>_R)
                  ->_R Sym (Language.Python.Common.AST.N:Module[0] <annot1>_R))) -}
789db2a4b3c023a9cf43afdd1f0c3249
  $fOrdModule_$cp1Ord ::
    GHC.Classes.Ord annot =>
    GHC.Classes.Eq (Language.Python.Common.AST.Module annot)
  {- Arity: 1, HasNoCafRefs,
     Strictness: <L,1*U(1*U(C(C1(U)),A),A,A,A,A,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ annot1 ($dOrd :: GHC.Classes.Ord annot1) ->
                 Language.Python.Common.AST.$fEqModule
                   @ annot1
                   (GHC.Classes.$p1Ord @ annot1 $dOrd)) -}
3e80c1212dbae482ce637a5dc72042ac
  $fOrdOp ::
    GHC.Classes.Ord annot =>
    GHC.Classes.Ord (Language.Python.Common.AST.Op annot)
  DFunId
  {- Arity: 1, HasNoCafRefs,
     Strictness: <L,U(1*U(C(C1(U)),A),C(C1(U)),A,A,A,A,A,A)>m,
     Inline: CONLIKE,
     Unfolding: DFun: @ annot1 (v :: GHC.Classes.Ord annot1).
                  @ (Language.Python.Common.AST.Op annot1)
                  (Language.Python.Common.AST.$fOrdOp_$cp1Ord @ annot1 v)
                  (Language.Python.Common.AST.$fOrdOp_$ccompare @ annot1 v)
                  (Language.Python.Common.AST.$fOrdOp_$c< @ annot1 v)
                  (Language.Python.Common.AST.$fOrdOp_$c<= @ annot1 v)
                  (Language.Python.Common.AST.$fOrdOp_$c> @ annot1 v)
                  (Language.Python.Common.AST.$fOrdOp_$c>= @ annot1 v)
                  (Language.Python.Common.AST.$fOrdOp_$cmax @ annot1 v)
                  (Language.Python.Common.AST.$fOrdOp_$cmin @ annot1 v) -}
3e80c1212dbae482ce637a5dc72042ac
  $fOrdOp_$c< ::
    GHC.Classes.Ord annot =>
    Language.Python.Common.AST.Op annot
    -> Language.Python.Common.AST.Op annot -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(A,1*C1(C1(U)),A,A,A,A,A,A)><S,1*U><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ annot1
                   ($dOrd :: GHC.Classes.Ord annot1)
                   (x :: Language.Python.Common.AST.Op annot1)
                   (y :: Language.Python.Common.AST.Op annot1) ->
                 case Language.Python.Common.AST.$fOrdOp_$ccompare
                        @ annot1
                        $dOrd
                        x
                        y of wild {
                   DEFAULT -> GHC.Types.False GHC.Types.LT -> GHC.Types.True }) -}
3e80c1212dbae482ce637a5dc72042ac
  $fOrdOp_$c<= ::
    GHC.Classes.Ord annot =>
    Language.Python.Common.AST.Op annot
    -> Language.Python.Common.AST.Op annot -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(A,1*C1(C1(U)),A,A,A,A,A,A)><S,1*U><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ annot1
                   ($dOrd :: GHC.Classes.Ord annot1)
                   (x :: Language.Python.Common.AST.Op annot1)
                   (y :: Language.Python.Common.AST.Op annot1) ->
                 case Language.Python.Common.AST.$fOrdOp_$ccompare
                        @ annot1
                        $dOrd
                        x
                        y of wild {
                   DEFAULT -> GHC.Types.True GHC.Types.GT -> GHC.Types.False }) -}
3e80c1212dbae482ce637a5dc72042ac
  $fOrdOp_$c> ::
    GHC.Classes.Ord annot =>
    Language.Python.Common.AST.Op annot
    -> Language.Python.Common.AST.Op annot -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(A,1*C1(C1(U)),A,A,A,A,A,A)><S,1*U><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ annot1
                   ($dOrd :: GHC.Classes.Ord annot1)
                   (x :: Language.Python.Common.AST.Op annot1)
                   (y :: Language.Python.Common.AST.Op annot1) ->
                 case Language.Python.Common.AST.$fOrdOp_$ccompare
                        @ annot1
                        $dOrd
                        x
                        y of wild {
                   DEFAULT -> GHC.Types.False GHC.Types.GT -> GHC.Types.True }) -}
3e80c1212dbae482ce637a5dc72042ac
  $fOrdOp_$c>= ::
    GHC.Classes.Ord annot =>
    Language.Python.Common.AST.Op annot
    -> Language.Python.Common.AST.Op annot -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(A,1*C1(C1(U)),A,A,A,A,A,A)><S,1*U><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ annot1
                   ($dOrd :: GHC.Classes.Ord annot1)
                   (x :: Language.Python.Common.AST.Op annot1)
                   (y :: Language.Python.Common.AST.Op annot1) ->
                 case Language.Python.Common.AST.$fOrdOp_$ccompare
                        @ annot1
                        $dOrd
                        x
                        y of wild {
                   DEFAULT -> GHC.Types.True GHC.Types.LT -> GHC.Types.False }) -}
3e80c1212dbae482ce637a5dc72042ac
  $fOrdOp_$ccompare ::
    GHC.Classes.Ord annot =>
    Language.Python.Common.AST.Op annot
    -> Language.Python.Common.AST.Op annot -> GHC.Types.Ordering
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(A,1*C1(C1(U)),A,A,A,A,A,A)><S,1*U><S,U> -}
3e80c1212dbae482ce637a5dc72042ac
  $fOrdOp_$cmax ::
    GHC.Classes.Ord annot =>
    Language.Python.Common.AST.Op annot
    -> Language.Python.Common.AST.Op annot
    -> Language.Python.Common.AST.Op annot
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(A,1*C1(C1(U)),A,A,A,A,A,A)><S,U><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ annot1
                   ($dOrd :: GHC.Classes.Ord annot1)
                   (x :: Language.Python.Common.AST.Op annot1)
                   (y :: Language.Python.Common.AST.Op annot1) ->
                 case Language.Python.Common.AST.$fOrdOp_$ccompare
                        @ annot1
                        $dOrd
                        x
                        y of wild {
                   DEFAULT -> y GHC.Types.GT -> x }) -}
3e80c1212dbae482ce637a5dc72042ac
  $fOrdOp_$cmin ::
    GHC.Classes.Ord annot =>
    Language.Python.Common.AST.Op annot
    -> Language.Python.Common.AST.Op annot
    -> Language.Python.Common.AST.Op annot
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(A,1*C1(C1(U)),A,A,A,A,A,A)><S,U><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ annot1
                   ($dOrd :: GHC.Classes.Ord annot1)
                   (x :: Language.Python.Common.AST.Op annot1)
                   (y :: Language.Python.Common.AST.Op annot1) ->
                 case Language.Python.Common.AST.$fOrdOp_$ccompare
                        @ annot1
                        $dOrd
                        x
                        y of wild {
                   DEFAULT -> x GHC.Types.GT -> y }) -}
3e80c1212dbae482ce637a5dc72042ac
  $fOrdOp_$cp1Ord ::
    GHC.Classes.Ord annot =>
    GHC.Classes.Eq (Language.Python.Common.AST.Op annot)
  {- Arity: 1, HasNoCafRefs,
     Strictness: <L,1*U(1*U(C(C1(U)),A),A,A,A,A,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ annot1 ($dOrd :: GHC.Classes.Ord annot1) ->
                 Language.Python.Common.AST.$fEqOp
                   @ annot1
                   (GHC.Classes.$p1Ord @ annot1 $dOrd)) -}
77aacf63ade2d28a10031365ad257b9f
  $fOrdParamTuple ::
    GHC.Classes.Ord annot =>
    GHC.Classes.Ord (Language.Python.Common.AST.ParamTuple annot)
  DFunId
  {- Arity: 1, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)>m,
     Inline: CONLIKE,
     Unfolding: DFun: @ annot1 (v :: GHC.Classes.Ord annot1).
                  @ (Language.Python.Common.AST.ParamTuple annot1)
                  (Language.Python.Common.AST.$fOrdParamTuple_$cp1Ord @ annot1 v)
                  (Language.Python.Common.AST.$fOrdParamTuple_$ccompare @ annot1 v)
                  (Language.Python.Common.AST.$fOrdParamTuple_$c< @ annot1 v)
                  (Language.Python.Common.AST.$fOrdParamTuple_$c<= @ annot1 v)
                  (\ (a :: Language.Python.Common.AST.ParamTuple annot1)
                     (b :: Language.Python.Common.AST.ParamTuple annot1) ->
                   Language.Python.Common.AST.$fOrdParamTuple_$c< @ annot1 v b a)
                  (Language.Python.Common.AST.$fOrdParamTuple_$c>= @ annot1 v)
                  (Language.Python.Common.AST.$fOrdParamTuple_$cmax @ annot1 v)
                  (Language.Python.Common.AST.$fOrdParamTuple_$cmin @ annot1 v) -}
77aacf63ade2d28a10031365ad257b9f
  $fOrdParamTuple_$c< ::
    GHC.Classes.Ord annot =>
    Language.Python.Common.AST.ParamTuple annot
    -> Language.Python.Common.AST.ParamTuple annot -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)> -}
77aacf63ade2d28a10031365ad257b9f
  $fOrdParamTuple_$c<= ::
    GHC.Classes.Ord annot =>
    Language.Python.Common.AST.ParamTuple annot
    -> Language.Python.Common.AST.ParamTuple annot -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)><L,U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ annot1
                   ($dOrd :: GHC.Classes.Ord annot1)
                   (a :: Language.Python.Common.AST.ParamTuple annot1)
                   (b :: Language.Python.Common.AST.ParamTuple annot1) ->
                 case Language.Python.Common.AST.$fOrdParamTuple_$c<
                        @ annot1
                        $dOrd
                        b
                        a of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
77aacf63ade2d28a10031365ad257b9f
  $fOrdParamTuple_$c>= ::
    GHC.Classes.Ord annot =>
    Language.Python.Common.AST.ParamTuple annot
    -> Language.Python.Common.AST.ParamTuple annot -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)><L,U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ annot1
                   ($dOrd :: GHC.Classes.Ord annot1)
                   (a :: Language.Python.Common.AST.ParamTuple annot1)
                   (b :: Language.Python.Common.AST.ParamTuple annot1) ->
                 case Language.Python.Common.AST.$fOrdParamTuple_$c<
                        @ annot1
                        $dOrd
                        a
                        b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
77aacf63ade2d28a10031365ad257b9f
  $fOrdParamTuple_$ccompare ::
    GHC.Classes.Ord annot =>
    Language.Python.Common.AST.ParamTuple annot
    -> Language.Python.Common.AST.ParamTuple annot
    -> GHC.Types.Ordering
  {- Arity: 1, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)> -}
77aacf63ade2d28a10031365ad257b9f
  $fOrdParamTuple_$cmax ::
    GHC.Classes.Ord annot =>
    Language.Python.Common.AST.ParamTuple annot
    -> Language.Python.Common.AST.ParamTuple annot
    -> Language.Python.Common.AST.ParamTuple annot
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)><L,U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ annot1
                   ($dOrd :: GHC.Classes.Ord annot1)
                   (x :: Language.Python.Common.AST.ParamTuple annot1)
                   (y :: Language.Python.Common.AST.ParamTuple annot1) ->
                 case Language.Python.Common.AST.$fOrdParamTuple_$c<
                        @ annot1
                        $dOrd
                        y
                        x of wild {
                   GHC.Types.False -> y GHC.Types.True -> x }) -}
77aacf63ade2d28a10031365ad257b9f
  $fOrdParamTuple_$cmin ::
    GHC.Classes.Ord annot =>
    Language.Python.Common.AST.ParamTuple annot
    -> Language.Python.Common.AST.ParamTuple annot
    -> Language.Python.Common.AST.ParamTuple annot
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)><L,U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ annot1
                   ($dOrd :: GHC.Classes.Ord annot1)
                   (x :: Language.Python.Common.AST.ParamTuple annot1)
                   (y :: Language.Python.Common.AST.ParamTuple annot1) ->
                 case Language.Python.Common.AST.$fOrdParamTuple_$c<
                        @ annot1
                        $dOrd
                        y
                        x of wild {
                   GHC.Types.False -> x GHC.Types.True -> y }) -}
77aacf63ade2d28a10031365ad257b9f
  $fOrdParamTuple_$cp1Ord ::
    GHC.Classes.Ord annot =>
    GHC.Classes.Eq (Language.Python.Common.AST.ParamTuple annot)
  {- Arity: 1, HasNoCafRefs,
     Strictness: <L,1*U(1*U(C(C1(U)),A),A,A,A,A,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ annot1 ($dOrd :: GHC.Classes.Ord annot1) ->
                 Language.Python.Common.AST.$fEqParamTuple
                   @ annot1
                   (GHC.Classes.$p1Ord @ annot1 $dOrd)) -}
94dde4ffceed0a2a13daed020b6576e1
  $fOrdParameter ::
    GHC.Classes.Ord annot =>
    GHC.Classes.Ord (Language.Python.Common.AST.Parameter annot)
  DFunId
  {- Arity: 1, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)>m,
     Inline: CONLIKE,
     Unfolding: DFun: @ annot1 (v :: GHC.Classes.Ord annot1).
                  @ (Language.Python.Common.AST.Parameter annot1)
                  (Language.Python.Common.AST.$fOrdParameter_$cp1Ord @ annot1 v)
                  (Language.Python.Common.AST.$fOrdParameter_$ccompare @ annot1 v)
                  (Language.Python.Common.AST.$fOrdParameter_$c< @ annot1 v)
                  (Language.Python.Common.AST.$fOrdParameter_$c<= @ annot1 v)
                  (Language.Python.Common.AST.$fOrdParameter_$c> @ annot1 v)
                  (Language.Python.Common.AST.$fOrdParameter_$c>= @ annot1 v)
                  (Language.Python.Common.AST.$fOrdParameter_$cmax @ annot1 v)
                  (Language.Python.Common.AST.$fOrdParameter_$cmin @ annot1 v) -}
94dde4ffceed0a2a13daed020b6576e1
  $fOrdParameter_$c< ::
    GHC.Classes.Ord annot =>
    Language.Python.Common.AST.Parameter annot
    -> Language.Python.Common.AST.Parameter annot -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)><S,1*U><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ annot1
                   ($dOrd :: GHC.Classes.Ord annot1)
                   (x :: Language.Python.Common.AST.Parameter annot1)
                   (y :: Language.Python.Common.AST.Parameter annot1) ->
                 case Language.Python.Common.AST.$fOrdParameter_$ccompare
                        @ annot1
                        $dOrd
                        x
                        y of wild {
                   DEFAULT -> GHC.Types.False GHC.Types.LT -> GHC.Types.True }) -}
94dde4ffceed0a2a13daed020b6576e1
  $fOrdParameter_$c<= ::
    GHC.Classes.Ord annot =>
    Language.Python.Common.AST.Parameter annot
    -> Language.Python.Common.AST.Parameter annot -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)><S,1*U><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ annot1
                   ($dOrd :: GHC.Classes.Ord annot1)
                   (x :: Language.Python.Common.AST.Parameter annot1)
                   (y :: Language.Python.Common.AST.Parameter annot1) ->
                 case Language.Python.Common.AST.$fOrdParameter_$ccompare
                        @ annot1
                        $dOrd
                        x
                        y of wild {
                   DEFAULT -> GHC.Types.True GHC.Types.GT -> GHC.Types.False }) -}
94dde4ffceed0a2a13daed020b6576e1
  $fOrdParameter_$c> ::
    GHC.Classes.Ord annot =>
    Language.Python.Common.AST.Parameter annot
    -> Language.Python.Common.AST.Parameter annot -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)><S,1*U><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ annot1
                   ($dOrd :: GHC.Classes.Ord annot1)
                   (x :: Language.Python.Common.AST.Parameter annot1)
                   (y :: Language.Python.Common.AST.Parameter annot1) ->
                 case Language.Python.Common.AST.$fOrdParameter_$ccompare
                        @ annot1
                        $dOrd
                        x
                        y of wild {
                   DEFAULT -> GHC.Types.False GHC.Types.GT -> GHC.Types.True }) -}
94dde4ffceed0a2a13daed020b6576e1
  $fOrdParameter_$c>= ::
    GHC.Classes.Ord annot =>
    Language.Python.Common.AST.Parameter annot
    -> Language.Python.Common.AST.Parameter annot -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)><S,1*U><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ annot1
                   ($dOrd :: GHC.Classes.Ord annot1)
                   (x :: Language.Python.Common.AST.Parameter annot1)
                   (y :: Language.Python.Common.AST.Parameter annot1) ->
                 case Language.Python.Common.AST.$fOrdParameter_$ccompare
                        @ annot1
                        $dOrd
                        x
                        y of wild {
                   DEFAULT -> GHC.Types.True GHC.Types.LT -> GHC.Types.False }) -}
94dde4ffceed0a2a13daed020b6576e1
  $fOrdParameter_$ccompare ::
    GHC.Classes.Ord annot =>
    Language.Python.Common.AST.Parameter annot
    -> Language.Python.Common.AST.Parameter annot -> GHC.Types.Ordering
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)><S,1*U><S,U> -}
94dde4ffceed0a2a13daed020b6576e1
  $fOrdParameter_$cmax ::
    GHC.Classes.Ord annot =>
    Language.Python.Common.AST.Parameter annot
    -> Language.Python.Common.AST.Parameter annot
    -> Language.Python.Common.AST.Parameter annot
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)><S,U><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ annot1
                   ($dOrd :: GHC.Classes.Ord annot1)
                   (x :: Language.Python.Common.AST.Parameter annot1)
                   (y :: Language.Python.Common.AST.Parameter annot1) ->
                 case Language.Python.Common.AST.$fOrdParameter_$ccompare
                        @ annot1
                        $dOrd
                        x
                        y of wild {
                   DEFAULT -> y GHC.Types.GT -> x }) -}
94dde4ffceed0a2a13daed020b6576e1
  $fOrdParameter_$cmin ::
    GHC.Classes.Ord annot =>
    Language.Python.Common.AST.Parameter annot
    -> Language.Python.Common.AST.Parameter annot
    -> Language.Python.Common.AST.Parameter annot
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)><S,U><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ annot1
                   ($dOrd :: GHC.Classes.Ord annot1)
                   (x :: Language.Python.Common.AST.Parameter annot1)
                   (y :: Language.Python.Common.AST.Parameter annot1) ->
                 case Language.Python.Common.AST.$fOrdParameter_$ccompare
                        @ annot1
                        $dOrd
                        x
                        y of wild {
                   DEFAULT -> x GHC.Types.GT -> y }) -}
94dde4ffceed0a2a13daed020b6576e1
  $fOrdParameter_$cp1Ord ::
    GHC.Classes.Ord annot =>
    GHC.Classes.Eq (Language.Python.Common.AST.Parameter annot)
  {- Arity: 1, HasNoCafRefs,
     Strictness: <L,1*U(1*U(C(C1(U)),A),A,A,A,A,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ annot1 ($dOrd :: GHC.Classes.Ord annot1) ->
                 Language.Python.Common.AST.$fEqParameter
                   @ annot1
                   (GHC.Classes.$p1Ord @ annot1 $dOrd)) -}
40b646133484efeda0b61064c970b83c
  $fOrdRaiseExpr ::
    GHC.Classes.Ord annot =>
    GHC.Classes.Ord (Language.Python.Common.AST.RaiseExpr annot)
  DFunId
  {- Arity: 1, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)>m,
     Inline: CONLIKE,
     Unfolding: DFun: @ annot1 (v :: GHC.Classes.Ord annot1).
                  @ (Language.Python.Common.AST.RaiseExpr annot1)
                  (Language.Python.Common.AST.$fOrdRaiseExpr_$cp1Ord @ annot1 v)
                  (Language.Python.Common.AST.$fOrdRaiseExpr_$ccompare @ annot1 v)
                  (Language.Python.Common.AST.$fOrdRaiseExpr_$c< @ annot1 v)
                  (Language.Python.Common.AST.$fOrdRaiseExpr_$c<= @ annot1 v)
                  (\ (a :: Language.Python.Common.AST.RaiseExpr annot1)
                     (b :: Language.Python.Common.AST.RaiseExpr annot1) ->
                   Language.Python.Common.AST.$fOrdRaiseExpr_$c< @ annot1 v b a)
                  (Language.Python.Common.AST.$fOrdRaiseExpr_$c>= @ annot1 v)
                  (Language.Python.Common.AST.$fOrdRaiseExpr_$cmax @ annot1 v)
                  (Language.Python.Common.AST.$fOrdRaiseExpr_$cmin @ annot1 v) -}
40b646133484efeda0b61064c970b83c
  $fOrdRaiseExpr_$c< ::
    GHC.Classes.Ord annot =>
    Language.Python.Common.AST.RaiseExpr annot
    -> Language.Python.Common.AST.RaiseExpr annot -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)><S,1*U><S,1*U>,
     Unfolding: (\ @ annot1
                   ($dOrd :: GHC.Classes.Ord annot1)
                   (a :: Language.Python.Common.AST.RaiseExpr annot1)
                   (b :: Language.Python.Common.AST.RaiseExpr annot1) ->
                 case a of wild {
                   Language.Python.Common.AST.RaiseV3 a1
                   -> case b of wild1 {
                        Language.Python.Common.AST.RaiseV3 b1
                        -> case a1 of wild2 {
                             GHC.Base.Nothing
                             -> case b1 of wild3 {
                                  GHC.Base.Nothing -> GHC.Types.False
                                  GHC.Base.Just ipv -> GHC.Types.True }
                             GHC.Base.Just a2
                             -> case b1 of wild3 {
                                  GHC.Base.Nothing -> GHC.Types.False
                                  GHC.Base.Just b4
                                  -> case a2 of ww { (,) ww1 ww2 ->
                                     case b4 of ww3 { (,) ww4 ww5 ->
                                     case Language.Python.Common.AST.$fOrdArgument_$ccompare1
                                            @ annot1
                                            $dOrd
                                            ww1
                                            ww4 of wild4 {
                                       GHC.Types.LT -> GHC.Types.True
                                       GHC.Types.EQ
                                       -> case ww2 of wild5 {
                                            GHC.Base.Nothing
                                            -> case ww5 of wild6 {
                                                 GHC.Base.Nothing -> GHC.Types.False
                                                 GHC.Base.Just ipv -> GHC.Types.True }
                                            GHC.Base.Just a4
                                            -> case ww5 of wild6 {
                                                 GHC.Base.Nothing -> GHC.Types.False
                                                 GHC.Base.Just b5
                                                 -> Language.Python.Common.AST.$fOrdExpr_$c<
                                                      @ annot1
                                                      $dOrd
                                                      a4
                                                      b5 } }
                                       GHC.Types.GT -> GHC.Types.False } } } } }
                        Language.Python.Common.AST.RaiseV2 ipv -> GHC.Types.True }
                   Language.Python.Common.AST.RaiseV2 a1
                   -> case b of wild1 {
                        Language.Python.Common.AST.RaiseV3 ipv -> GHC.Types.False
                        Language.Python.Common.AST.RaiseV2 b1
                        -> case a1 of wild2 {
                             GHC.Base.Nothing
                             -> case b1 of wild3 {
                                  GHC.Base.Nothing -> GHC.Types.False
                                  GHC.Base.Just ipv -> GHC.Types.True }
                             GHC.Base.Just a2
                             -> case b1 of wild3 {
                                  GHC.Base.Nothing -> GHC.Types.False
                                  GHC.Base.Just b4
                                  -> case a2 of ww { (,) ww1 ww2 ->
                                     case b4 of ww3 { (,) ww4 ww5 ->
                                     case Language.Python.Common.AST.$fOrdArgument_$ccompare1
                                            @ annot1
                                            $dOrd
                                            ww1
                                            ww4 of wild4 {
                                       GHC.Types.LT -> GHC.Types.True
                                       GHC.Types.EQ
                                       -> case ww2 of wild5 {
                                            GHC.Base.Nothing
                                            -> case ww5 of wild6 {
                                                 GHC.Base.Nothing -> GHC.Types.False
                                                 GHC.Base.Just ipv -> GHC.Types.True }
                                            GHC.Base.Just a4
                                            -> case ww5 of wild6 {
                                                 GHC.Base.Nothing -> GHC.Types.False
                                                 GHC.Base.Just b5
                                                 -> case a4 of ww7 { (,) ww8 ww9 ->
                                                    case b5 of ww10 { (,) ww11 ww12 ->
                                                    case Language.Python.Common.AST.$fOrdArgument_$ccompare1
                                                           @ annot1
                                                           $dOrd
                                                           ww8
                                                           ww11 of wild7 {
                                                      GHC.Types.LT -> GHC.Types.True
                                                      GHC.Types.EQ
                                                      -> case ww9 of wild8 {
                                                           GHC.Base.Nothing
                                                           -> case ww12 of wild9 {
                                                                GHC.Base.Nothing -> GHC.Types.False
                                                                GHC.Base.Just ipv
                                                                -> GHC.Types.True }
                                                           GHC.Base.Just a5
                                                           -> case ww12 of wild9 {
                                                                GHC.Base.Nothing -> GHC.Types.False
                                                                GHC.Base.Just b6
                                                                -> Language.Python.Common.AST.$fOrdExpr_$c<
                                                                     @ annot1
                                                                     $dOrd
                                                                     a5
                                                                     b6 } }
                                                      GHC.Types.GT -> GHC.Types.False } } } } }
                                       GHC.Types.GT -> GHC.Types.False } } } } } } }) -}
40b646133484efeda0b61064c970b83c
  $fOrdRaiseExpr_$c<= ::
    GHC.Classes.Ord annot =>
    Language.Python.Common.AST.RaiseExpr annot
    -> Language.Python.Common.AST.RaiseExpr annot -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)><S,1*U><S,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ annot1
                   ($dOrd :: GHC.Classes.Ord annot1)
                   (a :: Language.Python.Common.AST.RaiseExpr annot1)
                   (b :: Language.Python.Common.AST.RaiseExpr annot1) ->
                 case Language.Python.Common.AST.$fOrdRaiseExpr_$c<
                        @ annot1
                        $dOrd
                        b
                        a of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
40b646133484efeda0b61064c970b83c
  $fOrdRaiseExpr_$c>= ::
    GHC.Classes.Ord annot =>
    Language.Python.Common.AST.RaiseExpr annot
    -> Language.Python.Common.AST.RaiseExpr annot -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)><S,1*U><S,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ annot1
                   ($dOrd :: GHC.Classes.Ord annot1)
                   (a :: Language.Python.Common.AST.RaiseExpr annot1)
                   (b :: Language.Python.Common.AST.RaiseExpr annot1) ->
                 case Language.Python.Common.AST.$fOrdRaiseExpr_$c<
                        @ annot1
                        $dOrd
                        a
                        b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
40b646133484efeda0b61064c970b83c
  $fOrdRaiseExpr_$ccompare ::
    GHC.Classes.Ord annot =>
    Language.Python.Common.AST.RaiseExpr annot
    -> Language.Python.Common.AST.RaiseExpr annot -> GHC.Types.Ordering
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)><S,1*U><S,1*U>,
     Unfolding: (\ @ annot1
                   ($dOrd :: GHC.Classes.Ord annot1)
                   (a :: Language.Python.Common.AST.RaiseExpr annot1)
                   (b :: Language.Python.Common.AST.RaiseExpr annot1) ->
                 case a of wild {
                   Language.Python.Common.AST.RaiseV3 a1
                   -> case b of wild1 {
                        Language.Python.Common.AST.RaiseV3 b1
                        -> case a1 of wild2 {
                             GHC.Base.Nothing
                             -> case b1 of wild3 {
                                  GHC.Base.Nothing -> GHC.Types.EQ
                                  GHC.Base.Just ipv -> GHC.Types.LT }
                             GHC.Base.Just a2
                             -> case b1 of wild3 {
                                  GHC.Base.Nothing -> GHC.Types.GT
                                  GHC.Base.Just b4
                                  -> case a2 of ww { (,) ww1 ww2 ->
                                     case b4 of ww3 { (,) ww4 ww5 ->
                                     case Language.Python.Common.AST.$fOrdArgument_$ccompare1
                                            @ annot1
                                            $dOrd
                                            ww1
                                            ww4 of wild4 {
                                       GHC.Types.LT -> GHC.Types.LT
                                       GHC.Types.EQ
                                       -> case ww2 of wild5 {
                                            GHC.Base.Nothing
                                            -> case ww5 of wild6 {
                                                 GHC.Base.Nothing -> GHC.Types.EQ
                                                 GHC.Base.Just ipv -> GHC.Types.LT }
                                            GHC.Base.Just a4
                                            -> case ww5 of wild6 {
                                                 GHC.Base.Nothing -> GHC.Types.GT
                                                 GHC.Base.Just b5
                                                 -> Language.Python.Common.AST.$fOrdArgument_$ccompare1
                                                      @ annot1
                                                      $dOrd
                                                      a4
                                                      b5 } }
                                       GHC.Types.GT -> GHC.Types.GT } } } } }
                        Language.Python.Common.AST.RaiseV2 ipv -> GHC.Types.LT }
                   Language.Python.Common.AST.RaiseV2 a1
                   -> case b of wild1 {
                        Language.Python.Common.AST.RaiseV3 ipv -> GHC.Types.GT
                        Language.Python.Common.AST.RaiseV2 b1
                        -> case a1 of wild2 {
                             GHC.Base.Nothing
                             -> case b1 of wild3 {
                                  GHC.Base.Nothing -> GHC.Types.EQ
                                  GHC.Base.Just ipv -> GHC.Types.LT }
                             GHC.Base.Just a2
                             -> case b1 of wild3 {
                                  GHC.Base.Nothing -> GHC.Types.GT
                                  GHC.Base.Just b4
                                  -> case a2 of ww { (,) ww1 ww2 ->
                                     case b4 of ww3 { (,) ww4 ww5 ->
                                     case Language.Python.Common.AST.$fOrdArgument_$ccompare1
                                            @ annot1
                                            $dOrd
                                            ww1
                                            ww4 of wild4 {
                                       GHC.Types.LT -> GHC.Types.LT
                                       GHC.Types.EQ
                                       -> case ww2 of wild5 {
                                            GHC.Base.Nothing
                                            -> case ww5 of wild6 {
                                                 GHC.Base.Nothing -> GHC.Types.EQ
                                                 GHC.Base.Just ipv -> GHC.Types.LT }
                                            GHC.Base.Just a4
                                            -> case ww5 of wild6 {
                                                 GHC.Base.Nothing -> GHC.Types.GT
                                                 GHC.Base.Just b5
                                                 -> case a4 of ww7 { (,) ww8 ww9 ->
                                                    case b5 of ww10 { (,) ww11 ww12 ->
                                                    case Language.Python.Common.AST.$fOrdArgument_$ccompare1
                                                           @ annot1
                                                           $dOrd
                                                           ww8
                                                           ww11 of wild7 {
                                                      GHC.Types.LT -> GHC.Types.LT
                                                      GHC.Types.EQ
                                                      -> case ww9 of wild8 {
                                                           GHC.Base.Nothing
                                                           -> case ww12 of wild9 {
                                                                GHC.Base.Nothing -> GHC.Types.EQ
                                                                GHC.Base.Just ipv -> GHC.Types.LT }
                                                           GHC.Base.Just a5
                                                           -> case ww12 of wild9 {
                                                                GHC.Base.Nothing -> GHC.Types.GT
                                                                GHC.Base.Just b6
                                                                -> Language.Python.Common.AST.$fOrdArgument_$ccompare1
                                                                     @ annot1
                                                                     $dOrd
                                                                     a5
                                                                     b6 } }
                                                      GHC.Types.GT -> GHC.Types.GT } } } } }
                                       GHC.Types.GT -> GHC.Types.GT } } } } } } }) -}
40b646133484efeda0b61064c970b83c
  $fOrdRaiseExpr_$cmax ::
    GHC.Classes.Ord annot =>
    Language.Python.Common.AST.RaiseExpr annot
    -> Language.Python.Common.AST.RaiseExpr annot
    -> Language.Python.Common.AST.RaiseExpr annot
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)><S,U><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ annot1
                   ($dOrd :: GHC.Classes.Ord annot1)
                   (x :: Language.Python.Common.AST.RaiseExpr annot1)
                   (y :: Language.Python.Common.AST.RaiseExpr annot1) ->
                 case Language.Python.Common.AST.$fOrdRaiseExpr_$c<
                        @ annot1
                        $dOrd
                        y
                        x of wild {
                   GHC.Types.False -> y GHC.Types.True -> x }) -}
40b646133484efeda0b61064c970b83c
  $fOrdRaiseExpr_$cmin ::
    GHC.Classes.Ord annot =>
    Language.Python.Common.AST.RaiseExpr annot
    -> Language.Python.Common.AST.RaiseExpr annot
    -> Language.Python.Common.AST.RaiseExpr annot
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)><S,U><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ annot1
                   ($dOrd :: GHC.Classes.Ord annot1)
                   (x :: Language.Python.Common.AST.RaiseExpr annot1)
                   (y :: Language.Python.Common.AST.RaiseExpr annot1) ->
                 case Language.Python.Common.AST.$fOrdRaiseExpr_$c<
                        @ annot1
                        $dOrd
                        y
                        x of wild {
                   GHC.Types.False -> x GHC.Types.True -> y }) -}
40b646133484efeda0b61064c970b83c
  $fOrdRaiseExpr_$cp1Ord ::
    GHC.Classes.Ord annot =>
    GHC.Classes.Eq (Language.Python.Common.AST.RaiseExpr annot)
  {- Arity: 1, HasNoCafRefs,
     Strictness: <L,1*U(1*U(C(C1(U)),A),A,A,A,A,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ annot1 ($dOrd :: GHC.Classes.Ord annot1) ->
                 Language.Python.Common.AST.$fEqRaiseExpr
                   @ annot1
                   (GHC.Classes.$p1Ord @ annot1 $dOrd)) -}
94dde4ffceed0a2a13daed020b6576e1
  $fOrdSlice ::
    GHC.Classes.Ord annot =>
    GHC.Classes.Ord (Language.Python.Common.AST.Slice annot)
  DFunId
  {- Arity: 1, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)>m,
     Inline: CONLIKE,
     Unfolding: DFun: @ annot1 (v :: GHC.Classes.Ord annot1).
                  @ (Language.Python.Common.AST.Slice annot1)
                  (Language.Python.Common.AST.$fOrdSlice_$cp1Ord @ annot1 v)
                  (Language.Python.Common.AST.$fOrdSlice_$ccompare @ annot1 v)
                  (Language.Python.Common.AST.$fOrdSlice_$c< @ annot1 v)
                  (Language.Python.Common.AST.$fOrdSlice_$c<= @ annot1 v)
                  (\ (a :: Language.Python.Common.AST.Slice annot1)
                     (b :: Language.Python.Common.AST.Slice annot1) ->
                   Language.Python.Common.AST.$fOrdSlice_$c< @ annot1 v b a)
                  (Language.Python.Common.AST.$fOrdSlice_$c>= @ annot1 v)
                  (Language.Python.Common.AST.$fOrdSlice_$cmax @ annot1 v)
                  (Language.Python.Common.AST.$fOrdSlice_$cmin @ annot1 v) -}
94dde4ffceed0a2a13daed020b6576e1
  $fOrdSlice_$c< ::
    GHC.Classes.Ord annot =>
    Language.Python.Common.AST.Slice annot
    -> Language.Python.Common.AST.Slice annot -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)><S,1*U><S,1*U>,
     Unfolding: (\ @ annot1
                   ($dOrd :: GHC.Classes.Ord annot1)
                   (a :: Language.Python.Common.AST.Slice annot1)
                   (b :: Language.Python.Common.AST.Slice annot1) ->
                 case a of wild {
                   Language.Python.Common.AST.SliceProper a1 a2 a3 a4
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        Language.Python.Common.AST.SliceProper b1 b4 b3 b5
                        -> let {
                             $j :: GHC.Types.Bool <join 0>
                             = let {
                                 $j1 :: GHC.Types.Bool <join 0>
                                 = case a3 of wild2 {
                                     GHC.Base.Nothing
                                     -> case b3 of wild3 {
                                          GHC.Base.Nothing -> GHC.Classes.< @ annot1 $dOrd a4 b5
                                          GHC.Base.Just ipv -> GHC.Types.True }
                                     GHC.Base.Just a7
                                     -> case b3 of wild3 {
                                          GHC.Base.Nothing -> GHC.Types.False
                                          GHC.Base.Just b6
                                          -> case a7 of wild4 {
                                               GHC.Base.Nothing
                                               -> case b6 of wild5 {
                                                    GHC.Base.Nothing
                                                    -> GHC.Classes.< @ annot1 $dOrd a4 b5
                                                    GHC.Base.Just ipv -> GHC.Types.True }
                                               GHC.Base.Just a8
                                               -> case b6 of wild5 {
                                                    GHC.Base.Nothing -> GHC.Types.False
                                                    GHC.Base.Just b7
                                                    -> case Language.Python.Common.AST.$fOrdArgument_$ccompare1
                                                              @ annot1
                                                              $dOrd
                                                              a8
                                                              b7 of wild6 {
                                                         GHC.Types.LT -> GHC.Types.True
                                                         GHC.Types.EQ
                                                         -> GHC.Classes.< @ annot1 $dOrd a4 b5
                                                         GHC.Types.GT -> GHC.Types.False } } } } }
                               } in
                               case a2 of wild2 {
                                 GHC.Base.Nothing
                                 -> case b4 of wild3 {
                                      GHC.Base.Nothing -> $j1 GHC.Base.Just ipv -> GHC.Types.True }
                                 GHC.Base.Just a7
                                 -> case b4 of wild3 {
                                      GHC.Base.Nothing -> GHC.Types.False
                                      GHC.Base.Just b6
                                      -> case Language.Python.Common.AST.$fOrdArgument_$ccompare1
                                                @ annot1
                                                $dOrd
                                                a7
                                                b6 of wild4 {
                                           GHC.Types.LT -> GHC.Types.True
                                           GHC.Types.EQ -> $j1
                                           GHC.Types.GT -> GHC.Types.False } } }
                           } in
                           case a1 of wild2 {
                             GHC.Base.Nothing
                             -> case b1 of wild3 {
                                  GHC.Base.Nothing -> $j GHC.Base.Just ipv -> GHC.Types.True }
                             GHC.Base.Just a7
                             -> case b1 of wild3 {
                                  GHC.Base.Nothing -> GHC.Types.False
                                  GHC.Base.Just b6
                                  -> case Language.Python.Common.AST.$fOrdArgument_$ccompare1
                                            @ annot1
                                            $dOrd
                                            a7
                                            b6 of wild4 {
                                       GHC.Types.LT -> GHC.Types.True
                                       GHC.Types.EQ -> $j
                                       GHC.Types.GT -> GHC.Types.False } } } }
                   Language.Python.Common.AST.SliceExpr a1 a2
                   -> case b of wild1 {
                        Language.Python.Common.AST.SliceProper ds ds1 ds2 ds3
                        -> GHC.Types.False
                        Language.Python.Common.AST.SliceExpr b1 b4
                        -> case Language.Python.Common.AST.$fOrdArgument_$ccompare1
                                  @ annot1
                                  $dOrd
                                  a1
                                  b1 of wild2 {
                             GHC.Types.LT -> GHC.Types.True
                             GHC.Types.EQ -> GHC.Classes.< @ annot1 $dOrd a2 b4
                             GHC.Types.GT -> GHC.Types.False }
                        Language.Python.Common.AST.SliceEllipsis ipv -> GHC.Types.True }
                   Language.Python.Common.AST.SliceEllipsis a1
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.Python.Common.AST.SliceEllipsis b1
                        -> GHC.Classes.< @ annot1 $dOrd a1 b1 } }) -}
94dde4ffceed0a2a13daed020b6576e1
  $fOrdSlice_$c<= ::
    GHC.Classes.Ord annot =>
    Language.Python.Common.AST.Slice annot
    -> Language.Python.Common.AST.Slice annot -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)><S,1*U><S,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ annot1
                   ($dOrd :: GHC.Classes.Ord annot1)
                   (a :: Language.Python.Common.AST.Slice annot1)
                   (b :: Language.Python.Common.AST.Slice annot1) ->
                 case Language.Python.Common.AST.$fOrdSlice_$c<
                        @ annot1
                        $dOrd
                        b
                        a of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
94dde4ffceed0a2a13daed020b6576e1
  $fOrdSlice_$c>= ::
    GHC.Classes.Ord annot =>
    Language.Python.Common.AST.Slice annot
    -> Language.Python.Common.AST.Slice annot -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)><S,1*U><S,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ annot1
                   ($dOrd :: GHC.Classes.Ord annot1)
                   (a :: Language.Python.Common.AST.Slice annot1)
                   (b :: Language.Python.Common.AST.Slice annot1) ->
                 case Language.Python.Common.AST.$fOrdSlice_$c<
                        @ annot1
                        $dOrd
                        a
                        b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
94dde4ffceed0a2a13daed020b6576e1
  $fOrdSlice_$ccompare ::
    GHC.Classes.Ord annot =>
    Language.Python.Common.AST.Slice annot
    -> Language.Python.Common.AST.Slice annot -> GHC.Types.Ordering
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)><S,1*U><S,1*U>,
     Unfolding: (\ @ annot1
                   ($dOrd :: GHC.Classes.Ord annot1)
                   (a :: Language.Python.Common.AST.Slice annot1)
                   (b :: Language.Python.Common.AST.Slice annot1) ->
                 case a of wild {
                   Language.Python.Common.AST.SliceProper a1 a2 a3 a4
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.LT
                        Language.Python.Common.AST.SliceProper b1 b4 b3 b5
                        -> let {
                             $j :: GHC.Types.Ordering <join 0>
                             = let {
                                 $j1 :: GHC.Types.Ordering <join 0>
                                 = case a3 of wild2 {
                                     GHC.Base.Nothing
                                     -> case b3 of wild3 {
                                          GHC.Base.Nothing
                                          -> GHC.Classes.compare @ annot1 $dOrd a4 b5
                                          GHC.Base.Just ipv -> GHC.Types.LT }
                                     GHC.Base.Just a7
                                     -> case b3 of wild3 {
                                          GHC.Base.Nothing -> GHC.Types.GT
                                          GHC.Base.Just b6
                                          -> case a7 of wild4 {
                                               GHC.Base.Nothing
                                               -> case b6 of wild5 {
                                                    GHC.Base.Nothing
                                                    -> GHC.Classes.compare @ annot1 $dOrd a4 b5
                                                    GHC.Base.Just ipv -> GHC.Types.LT }
                                               GHC.Base.Just a8
                                               -> case b6 of wild5 {
                                                    GHC.Base.Nothing -> GHC.Types.GT
                                                    GHC.Base.Just b7
                                                    -> case Language.Python.Common.AST.$fOrdArgument_$ccompare1
                                                              @ annot1
                                                              $dOrd
                                                              a8
                                                              b7 of wild6 {
                                                         GHC.Types.LT -> GHC.Types.LT
                                                         GHC.Types.EQ
                                                         -> GHC.Classes.compare @ annot1 $dOrd a4 b5
                                                         GHC.Types.GT -> GHC.Types.GT } } } } }
                               } in
                               case a2 of wild2 {
                                 GHC.Base.Nothing
                                 -> case b4 of wild3 {
                                      GHC.Base.Nothing -> $j1 GHC.Base.Just ipv -> GHC.Types.LT }
                                 GHC.Base.Just a7
                                 -> case b4 of wild3 {
                                      GHC.Base.Nothing -> GHC.Types.GT
                                      GHC.Base.Just b6
                                      -> case Language.Python.Common.AST.$fOrdArgument_$ccompare1
                                                @ annot1
                                                $dOrd
                                                a7
                                                b6 of wild4 {
                                           GHC.Types.LT -> GHC.Types.LT
                                           GHC.Types.EQ -> $j1
                                           GHC.Types.GT -> GHC.Types.GT } } }
                           } in
                           case a1 of wild2 {
                             GHC.Base.Nothing
                             -> case b1 of wild3 {
                                  GHC.Base.Nothing -> $j GHC.Base.Just ipv -> GHC.Types.LT }
                             GHC.Base.Just a7
                             -> case b1 of wild3 {
                                  GHC.Base.Nothing -> GHC.Types.GT
                                  GHC.Base.Just b6
                                  -> case Language.Python.Common.AST.$fOrdArgument_$ccompare1
                                            @ annot1
                                            $dOrd
                                            a7
                                            b6 of wild4 {
                                       GHC.Types.LT -> GHC.Types.LT
                                       GHC.Types.EQ -> $j
                                       GHC.Types.GT -> GHC.Types.GT } } } }
                   Language.Python.Common.AST.SliceExpr a1 a2
                   -> case b of wild1 {
                        Language.Python.Common.AST.SliceProper ds ds1 ds2 ds3
                        -> GHC.Types.GT
                        Language.Python.Common.AST.SliceExpr b1 b4
                        -> case Language.Python.Common.AST.$fOrdArgument_$ccompare1
                                  @ annot1
                                  $dOrd
                                  a1
                                  b1 of wild2 {
                             GHC.Types.LT -> GHC.Types.LT
                             GHC.Types.EQ -> GHC.Classes.compare @ annot1 $dOrd a2 b4
                             GHC.Types.GT -> GHC.Types.GT }
                        Language.Python.Common.AST.SliceEllipsis ipv -> GHC.Types.LT }
                   Language.Python.Common.AST.SliceEllipsis a1
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.GT
                        Language.Python.Common.AST.SliceEllipsis b1
                        -> GHC.Classes.compare @ annot1 $dOrd a1 b1 } }) -}
94dde4ffceed0a2a13daed020b6576e1
  $fOrdSlice_$cmax ::
    GHC.Classes.Ord annot =>
    Language.Python.Common.AST.Slice annot
    -> Language.Python.Common.AST.Slice annot
    -> Language.Python.Common.AST.Slice annot
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)><S,U><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ annot1
                   ($dOrd :: GHC.Classes.Ord annot1)
                   (x :: Language.Python.Common.AST.Slice annot1)
                   (y :: Language.Python.Common.AST.Slice annot1) ->
                 case Language.Python.Common.AST.$fOrdSlice_$c<
                        @ annot1
                        $dOrd
                        y
                        x of wild {
                   GHC.Types.False -> y GHC.Types.True -> x }) -}
94dde4ffceed0a2a13daed020b6576e1
  $fOrdSlice_$cmin ::
    GHC.Classes.Ord annot =>
    Language.Python.Common.AST.Slice annot
    -> Language.Python.Common.AST.Slice annot
    -> Language.Python.Common.AST.Slice annot
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)><S,U><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ annot1
                   ($dOrd :: GHC.Classes.Ord annot1)
                   (x :: Language.Python.Common.AST.Slice annot1)
                   (y :: Language.Python.Common.AST.Slice annot1) ->
                 case Language.Python.Common.AST.$fOrdSlice_$c<
                        @ annot1
                        $dOrd
                        y
                        x of wild {
                   GHC.Types.False -> x GHC.Types.True -> y }) -}
94dde4ffceed0a2a13daed020b6576e1
  $fOrdSlice_$cp1Ord ::
    GHC.Classes.Ord annot =>
    GHC.Classes.Eq (Language.Python.Common.AST.Slice annot)
  {- Arity: 1, HasNoCafRefs,
     Strictness: <L,1*U(1*U(C(C1(U)),A),A,A,A,A,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ annot1 ($dOrd :: GHC.Classes.Ord annot1) ->
                 Language.Python.Common.AST.$fEqSlice
                   @ annot1
                   (GHC.Classes.$p1Ord @ annot1 $dOrd)) -}
cf431e64d114ff48b3a5eb8fda819c32
  $fOrdStatement ::
    GHC.Classes.Ord annot =>
    GHC.Classes.Ord (Language.Python.Common.AST.Statement annot)
  DFunId
  {- Arity: 1, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)>m,
     Inline: CONLIKE,
     Unfolding: DFun: @ annot1 (v :: GHC.Classes.Ord annot1).
                  @ (Language.Python.Common.AST.Statement annot1)
                  (Language.Python.Common.AST.$fOrdStatement_$cp1Ord @ annot1 v)
                  (Language.Python.Common.AST.$fOrdStatement_$ccompare @ annot1 v)
                  (Language.Python.Common.AST.$fOrdStatement_$c< @ annot1 v)
                  (Language.Python.Common.AST.$fOrdStatement_$c<= @ annot1 v)
                  (Language.Python.Common.AST.$fOrdStatement_$c> @ annot1 v)
                  (Language.Python.Common.AST.$fOrdStatement_$c>= @ annot1 v)
                  (Language.Python.Common.AST.$fOrdStatement_$cmax @ annot1 v)
                  (Language.Python.Common.AST.$fOrdStatement_$cmin @ annot1 v) -}
cf431e64d114ff48b3a5eb8fda819c32
  $fOrdStatement_$c< ::
    GHC.Classes.Ord annot =>
    Language.Python.Common.AST.Statement annot
    -> Language.Python.Common.AST.Statement annot -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)><L,U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ annot1
                   ($dOrd :: GHC.Classes.Ord annot1)
                   (x :: Language.Python.Common.AST.Statement annot1)
                   (y :: Language.Python.Common.AST.Statement annot1) ->
                 case Language.Python.Common.AST.$fOrdStatement_$ccompare
                        @ annot1
                        $dOrd
                        x
                        y of wild {
                   DEFAULT -> GHC.Types.False GHC.Types.LT -> GHC.Types.True }) -}
cf431e64d114ff48b3a5eb8fda819c32
  $fOrdStatement_$c<= ::
    GHC.Classes.Ord annot =>
    Language.Python.Common.AST.Statement annot
    -> Language.Python.Common.AST.Statement annot -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)><L,U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ annot1
                   ($dOrd :: GHC.Classes.Ord annot1)
                   (x :: Language.Python.Common.AST.Statement annot1)
                   (y :: Language.Python.Common.AST.Statement annot1) ->
                 case Language.Python.Common.AST.$fOrdStatement_$ccompare
                        @ annot1
                        $dOrd
                        x
                        y of wild {
                   DEFAULT -> GHC.Types.True GHC.Types.GT -> GHC.Types.False }) -}
cf431e64d114ff48b3a5eb8fda819c32
  $fOrdStatement_$c> ::
    GHC.Classes.Ord annot =>
    Language.Python.Common.AST.Statement annot
    -> Language.Python.Common.AST.Statement annot -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)><L,U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ annot1
                   ($dOrd :: GHC.Classes.Ord annot1)
                   (x :: Language.Python.Common.AST.Statement annot1)
                   (y :: Language.Python.Common.AST.Statement annot1) ->
                 case Language.Python.Common.AST.$fOrdStatement_$ccompare
                        @ annot1
                        $dOrd
                        x
                        y of wild {
                   DEFAULT -> GHC.Types.False GHC.Types.GT -> GHC.Types.True }) -}
cf431e64d114ff48b3a5eb8fda819c32
  $fOrdStatement_$c>= ::
    GHC.Classes.Ord annot =>
    Language.Python.Common.AST.Statement annot
    -> Language.Python.Common.AST.Statement annot -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)><L,U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ annot1
                   ($dOrd :: GHC.Classes.Ord annot1)
                   (x :: Language.Python.Common.AST.Statement annot1)
                   (y :: Language.Python.Common.AST.Statement annot1) ->
                 case Language.Python.Common.AST.$fOrdStatement_$ccompare
                        @ annot1
                        $dOrd
                        x
                        y of wild {
                   DEFAULT -> GHC.Types.True GHC.Types.LT -> GHC.Types.False }) -}
cf431e64d114ff48b3a5eb8fda819c32
  $fOrdStatement_$ccompare ::
    GHC.Classes.Ord annot =>
    Language.Python.Common.AST.Statement annot
    -> Language.Python.Common.AST.Statement annot -> GHC.Types.Ordering
  {- Arity: 1, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)> -}
cf431e64d114ff48b3a5eb8fda819c32
  $fOrdStatement_$cmax ::
    GHC.Classes.Ord annot =>
    Language.Python.Common.AST.Statement annot
    -> Language.Python.Common.AST.Statement annot
    -> Language.Python.Common.AST.Statement annot
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)><L,U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ annot1
                   ($dOrd :: GHC.Classes.Ord annot1)
                   (x :: Language.Python.Common.AST.Statement annot1)
                   (y :: Language.Python.Common.AST.Statement annot1) ->
                 case Language.Python.Common.AST.$fOrdStatement_$ccompare
                        @ annot1
                        $dOrd
                        x
                        y of wild {
                   DEFAULT -> y GHC.Types.GT -> x }) -}
cf431e64d114ff48b3a5eb8fda819c32
  $fOrdStatement_$cmin ::
    GHC.Classes.Ord annot =>
    Language.Python.Common.AST.Statement annot
    -> Language.Python.Common.AST.Statement annot
    -> Language.Python.Common.AST.Statement annot
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)><L,U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ annot1
                   ($dOrd :: GHC.Classes.Ord annot1)
                   (x :: Language.Python.Common.AST.Statement annot1)
                   (y :: Language.Python.Common.AST.Statement annot1) ->
                 case Language.Python.Common.AST.$fOrdStatement_$ccompare
                        @ annot1
                        $dOrd
                        x
                        y of wild {
                   DEFAULT -> x GHC.Types.GT -> y }) -}
cf431e64d114ff48b3a5eb8fda819c32
  $fOrdStatement_$cp1Ord ::
    GHC.Classes.Ord annot =>
    GHC.Classes.Eq (Language.Python.Common.AST.Statement annot)
  {- Arity: 1, HasNoCafRefs,
     Strictness: <L,1*U(1*U(C(C1(U)),A),A,A,A,A,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ annot1 ($dOrd :: GHC.Classes.Ord annot1) ->
                 Language.Python.Common.AST.$fEqStatement
                   @ annot1
                   (GHC.Classes.$p1Ord @ annot1 $dOrd)) -}
94dde4ffceed0a2a13daed020b6576e1
  $fOrdYieldArg ::
    GHC.Classes.Ord annot =>
    GHC.Classes.Ord (Language.Python.Common.AST.YieldArg annot)
  DFunId
  {- Arity: 1, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)>m,
     Inline: CONLIKE,
     Unfolding: DFun: @ annot1 (v :: GHC.Classes.Ord annot1).
                  @ (Language.Python.Common.AST.YieldArg annot1)
                  (Language.Python.Common.AST.$fOrdYieldArg_$cp1Ord @ annot1 v)
                  (Language.Python.Common.AST.$fOrdYieldArg_$ccompare @ annot1 v)
                  (Language.Python.Common.AST.$fOrdYieldArg_$c< @ annot1 v)
                  (Language.Python.Common.AST.$fOrdYieldArg_$c<= @ annot1 v)
                  (\ (a :: Language.Python.Common.AST.YieldArg annot1)
                     (b :: Language.Python.Common.AST.YieldArg annot1) ->
                   Language.Python.Common.AST.$fOrdYieldArg_$c< @ annot1 v b a)
                  (Language.Python.Common.AST.$fOrdYieldArg_$c>= @ annot1 v)
                  (Language.Python.Common.AST.$fOrdYieldArg_$cmax @ annot1 v)
                  (Language.Python.Common.AST.$fOrdYieldArg_$cmin @ annot1 v) -}
94dde4ffceed0a2a13daed020b6576e1
  $fOrdYieldArg_$c< ::
    GHC.Classes.Ord annot =>
    Language.Python.Common.AST.YieldArg annot
    -> Language.Python.Common.AST.YieldArg annot -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)><S,1*U><S,1*U>,
     Unfolding: (\ @ annot1
                   ($dOrd :: GHC.Classes.Ord annot1)
                   (a :: Language.Python.Common.AST.YieldArg annot1)
                   (b :: Language.Python.Common.AST.YieldArg annot1) ->
                 case a of wild {
                   Language.Python.Common.AST.YieldFrom a1 a2
                   -> case b of wild1 {
                        Language.Python.Common.AST.YieldFrom b1 b4
                        -> case Language.Python.Common.AST.$fOrdArgument_$ccompare1
                                  @ annot1
                                  $dOrd
                                  a1
                                  b1 of wild2 {
                             GHC.Types.LT -> GHC.Types.True
                             GHC.Types.EQ -> GHC.Classes.< @ annot1 $dOrd a2 b4
                             GHC.Types.GT -> GHC.Types.False }
                        Language.Python.Common.AST.YieldExpr ipv -> GHC.Types.True }
                   Language.Python.Common.AST.YieldExpr a1
                   -> case b of wild1 {
                        Language.Python.Common.AST.YieldFrom ipv ipv1 -> GHC.Types.False
                        Language.Python.Common.AST.YieldExpr b1
                        -> Language.Python.Common.AST.$fOrdExpr_$c<
                             @ annot1
                             $dOrd
                             a1
                             b1 } }) -}
94dde4ffceed0a2a13daed020b6576e1
  $fOrdYieldArg_$c<= ::
    GHC.Classes.Ord annot =>
    Language.Python.Common.AST.YieldArg annot
    -> Language.Python.Common.AST.YieldArg annot -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)><S,1*U><S,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ annot1
                   ($dOrd :: GHC.Classes.Ord annot1)
                   (a :: Language.Python.Common.AST.YieldArg annot1)
                   (b :: Language.Python.Common.AST.YieldArg annot1) ->
                 case Language.Python.Common.AST.$fOrdYieldArg_$c<
                        @ annot1
                        $dOrd
                        b
                        a of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
94dde4ffceed0a2a13daed020b6576e1
  $fOrdYieldArg_$c>= ::
    GHC.Classes.Ord annot =>
    Language.Python.Common.AST.YieldArg annot
    -> Language.Python.Common.AST.YieldArg annot -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)><S,1*U><S,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ annot1
                   ($dOrd :: GHC.Classes.Ord annot1)
                   (a :: Language.Python.Common.AST.YieldArg annot1)
                   (b :: Language.Python.Common.AST.YieldArg annot1) ->
                 case Language.Python.Common.AST.$fOrdYieldArg_$c<
                        @ annot1
                        $dOrd
                        a
                        b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
94dde4ffceed0a2a13daed020b6576e1
  $fOrdYieldArg_$ccompare ::
    GHC.Classes.Ord annot =>
    Language.Python.Common.AST.YieldArg annot
    -> Language.Python.Common.AST.YieldArg annot -> GHC.Types.Ordering
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)><S,1*U><S,1*U>,
     Unfolding: (\ @ annot1
                   ($dOrd :: GHC.Classes.Ord annot1)
                   (a :: Language.Python.Common.AST.YieldArg annot1)
                   (b :: Language.Python.Common.AST.YieldArg annot1) ->
                 case a of wild {
                   Language.Python.Common.AST.YieldFrom a1 a2
                   -> case b of wild1 {
                        Language.Python.Common.AST.YieldFrom b1 b4
                        -> case Language.Python.Common.AST.$fOrdArgument_$ccompare1
                                  @ annot1
                                  $dOrd
                                  a1
                                  b1 of wild2 {
                             GHC.Types.LT -> GHC.Types.LT
                             GHC.Types.EQ -> GHC.Classes.compare @ annot1 $dOrd a2 b4
                             GHC.Types.GT -> GHC.Types.GT }
                        Language.Python.Common.AST.YieldExpr ipv -> GHC.Types.LT }
                   Language.Python.Common.AST.YieldExpr a1
                   -> case b of wild1 {
                        Language.Python.Common.AST.YieldFrom ipv ipv1 -> GHC.Types.GT
                        Language.Python.Common.AST.YieldExpr b1
                        -> Language.Python.Common.AST.$fOrdArgument_$ccompare1
                             @ annot1
                             $dOrd
                             a1
                             b1 } }) -}
94dde4ffceed0a2a13daed020b6576e1
  $fOrdYieldArg_$cmax ::
    GHC.Classes.Ord annot =>
    Language.Python.Common.AST.YieldArg annot
    -> Language.Python.Common.AST.YieldArg annot
    -> Language.Python.Common.AST.YieldArg annot
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)><S,U><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ annot1
                   ($dOrd :: GHC.Classes.Ord annot1)
                   (x :: Language.Python.Common.AST.YieldArg annot1)
                   (y :: Language.Python.Common.AST.YieldArg annot1) ->
                 case Language.Python.Common.AST.$fOrdYieldArg_$c<
                        @ annot1
                        $dOrd
                        y
                        x of wild {
                   GHC.Types.False -> y GHC.Types.True -> x }) -}
94dde4ffceed0a2a13daed020b6576e1
  $fOrdYieldArg_$cmin ::
    GHC.Classes.Ord annot =>
    Language.Python.Common.AST.YieldArg annot
    -> Language.Python.Common.AST.YieldArg annot
    -> Language.Python.Common.AST.YieldArg annot
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)><S,U><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ annot1
                   ($dOrd :: GHC.Classes.Ord annot1)
                   (x :: Language.Python.Common.AST.YieldArg annot1)
                   (y :: Language.Python.Common.AST.YieldArg annot1) ->
                 case Language.Python.Common.AST.$fOrdYieldArg_$c<
                        @ annot1
                        $dOrd
                        y
                        x of wild {
                   GHC.Types.False -> x GHC.Types.True -> y }) -}
94dde4ffceed0a2a13daed020b6576e1
  $fOrdYieldArg_$cp1Ord ::
    GHC.Classes.Ord annot =>
    GHC.Classes.Eq (Language.Python.Common.AST.YieldArg annot)
  {- Arity: 1, HasNoCafRefs,
     Strictness: <L,1*U(1*U(C(C1(U)),A),A,A,A,A,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ annot1 ($dOrd :: GHC.Classes.Ord annot1) ->
                 Language.Python.Common.AST.$fEqYieldArg
                   @ annot1
                   (GHC.Classes.$p1Ord @ annot1 $dOrd)) -}
94dde4ffceed0a2a13daed020b6576e1
  $fShowArgument ::
    GHC.Show.Show annot =>
    GHC.Show.Show (Language.Python.Common.AST.Argument annot)
  DFunId
  {- Arity: 1, Strictness: <L,U(C(C1(C(U))),A,A)>m, Inline: CONLIKE,
     Unfolding: DFun: @ annot1 (v :: GHC.Show.Show annot1).
                  @ (Language.Python.Common.AST.Argument annot1)
                  (Language.Python.Common.AST.$fShowArgument_$cshowsPrec @ annot1 v)
                  (Language.Python.Common.AST.$fShowArgument_$cshow @ annot1 v)
                  (Language.Python.Common.AST.$fShowArgument_$cshowList
                     @ annot1
                     v) -}
94dde4ffceed0a2a13daed020b6576e1
  $fShowArgument_$cshow ::
    GHC.Show.Show annot =>
    Language.Python.Common.AST.Argument annot -> GHC.Base.String
  {- Arity: 2, Strictness: <L,U(C(C1(C(U))),A,A)><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ annot1
                   ($dShow :: GHC.Show.Show annot1)
                   (x :: Language.Python.Common.AST.Argument annot1) ->
                 Language.Python.Common.AST.$fShowArgument_$cshowsPrec
                   @ annot1
                   $dShow
                   Language.Python.Common.AST.$fDataExpr3
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
94dde4ffceed0a2a13daed020b6576e1
  $fShowArgument_$cshowList ::
    GHC.Show.Show annot =>
    [Language.Python.Common.AST.Argument annot] -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U(C(C1(C(U))),A,A)><S,1*U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ annot1
                   ($dShow :: GHC.Show.Show annot1)
                   (eta :: [Language.Python.Common.AST.Argument annot1])
                   (eta1 :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Language.Python.Common.AST.Argument annot1)
                   (Language.Python.Common.AST.$fShowArgument_$cshowsPrec
                      @ annot1
                      $dShow
                      Language.Python.Common.AST.$fDataExpr3)
                   eta
                   eta1) -}
94dde4ffceed0a2a13daed020b6576e1
  $fShowArgument_$cshowsPrec ::
    GHC.Show.Show annot =>
    GHC.Types.Int
    -> Language.Python.Common.AST.Argument annot -> GHC.Show.ShowS
  {- Arity: 3,
     Strictness: <L,U(C(C1(C(U))),A,A)><S(S),1*U(U)><S,1*U>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ @ annot1
                   (w :: GHC.Show.Show annot1)
                   (w249 :: GHC.Types.Int)
                   (w250 :: Language.Python.Common.AST.Argument annot1) ->
                 case w249 of ww { GHC.Types.I# ww1 ->
                 Language.Python.Common.AST.$w$cshowsPrec @ annot1 w ww1 w250 }) -}
f55a81e56367dca5b5d86dd1548fd97f
  $fShowAssignOp ::
    GHC.Show.Show annot =>
    GHC.Show.Show (Language.Python.Common.AST.AssignOp annot)
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(C(C1(C(U))),A,A)>m,
     Inline: CONLIKE,
     Unfolding: DFun: @ annot1 (v :: GHC.Show.Show annot1).
                  @ (Language.Python.Common.AST.AssignOp annot1)
                  (Language.Python.Common.AST.$fShowAssignOp_$cshowsPrec @ annot1 v)
                  (Language.Python.Common.AST.$fShowAssignOp_$cshow @ annot1 v)
                  (Language.Python.Common.AST.$fShowAssignOp_$cshowList
                     @ annot1
                     v) -}
f55a81e56367dca5b5d86dd1548fd97f
  $fShowAssignOp_$cshow ::
    GHC.Show.Show annot =>
    Language.Python.Common.AST.AssignOp annot -> GHC.Base.String
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(C(U))),A,A)><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ annot1
                   ($dShow :: GHC.Show.Show annot1)
                   (x :: Language.Python.Common.AST.AssignOp annot1) ->
                 Language.Python.Common.AST.$fShowAssignOp_$cshowsPrec
                   @ annot1
                   $dShow
                   Language.Python.Common.AST.$fDataExpr3
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
f55a81e56367dca5b5d86dd1548fd97f
  $fShowAssignOp_$cshowList ::
    GHC.Show.Show annot =>
    [Language.Python.Common.AST.AssignOp annot] -> GHC.Show.ShowS
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(C(C1(C(U))),A,A)><S,1*U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ annot1
                   ($dShow :: GHC.Show.Show annot1)
                   (eta :: [Language.Python.Common.AST.AssignOp annot1])
                   (eta1 :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Language.Python.Common.AST.AssignOp annot1)
                   (Language.Python.Common.AST.$fShowAssignOp_$cshowsPrec
                      @ annot1
                      $dShow
                      Language.Python.Common.AST.$fDataExpr3)
                   eta
                   eta1) -}
f55a81e56367dca5b5d86dd1548fd97f
  $fShowAssignOp_$cshowsPrec ::
    GHC.Show.Show annot =>
    GHC.Types.Int
    -> Language.Python.Common.AST.AssignOp annot -> GHC.Show.ShowS
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(C(U))),A,A)><S(S),1*U(U)><S,1*U>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ @ annot1
                   (w :: GHC.Show.Show annot1)
                   (w249 :: GHC.Types.Int)
                   (w250 :: Language.Python.Common.AST.AssignOp annot1) ->
                 case w249 of ww { GHC.Types.I# ww1 ->
                 Language.Python.Common.AST.$w$cshowsPrec1 @ annot1 w ww1 w250 }) -}
94dde4ffceed0a2a13daed020b6576e1
  $fShowCompFor ::
    GHC.Show.Show annot =>
    GHC.Show.Show (Language.Python.Common.AST.CompFor annot)
  DFunId
  {- Arity: 1, Strictness: <L,U(C(C1(C(U))),A,A)>m, Inline: CONLIKE,
     Unfolding: DFun: @ annot1 (v :: GHC.Show.Show annot1).
                  @ (Language.Python.Common.AST.CompFor annot1)
                  (Language.Python.Common.AST.$fShowCompFor_$cshowsPrec @ annot1 v)
                  (Language.Python.Common.AST.$fShowCompFor_$cshow @ annot1 v)
                  (Language.Python.Common.AST.$fShowCompFor_$cshowList @ annot1 v) -}
94dde4ffceed0a2a13daed020b6576e1
  $fShowCompFor_$cshow ::
    GHC.Show.Show annot =>
    Language.Python.Common.AST.CompFor annot -> GHC.Base.String
  {- Arity: 2, Strictness: <L,U(C(C1(C(U))),A,A)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ annot1
                   ($dShow :: GHC.Show.Show annot1)
                   (x :: Language.Python.Common.AST.CompFor annot1) ->
                 Language.Python.Common.AST.$fShowCompFor_$cshowsPrec
                   @ annot1
                   $dShow
                   Language.Python.Common.AST.$fDataExpr3
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
94dde4ffceed0a2a13daed020b6576e1
  $fShowCompFor_$cshowList ::
    GHC.Show.Show annot =>
    [Language.Python.Common.AST.CompFor annot] -> GHC.Show.ShowS
  {- Arity: 1, Strictness: <L,U(C(C1(C(U))),A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ annot1 ($dShow :: GHC.Show.Show annot1) ->
                 GHC.Show.showList__
                   @ (Language.Python.Common.AST.CompFor annot1)
                   (Language.Python.Common.AST.$fShowCompFor_$cshowsPrec
                      @ annot1
                      $dShow
                      Language.Python.Common.AST.$fDataExpr3)) -}
94dde4ffceed0a2a13daed020b6576e1
  $fShowCompFor_$cshowsPrec ::
    GHC.Show.Show annot =>
    GHC.Types.Int
    -> Language.Python.Common.AST.CompFor annot -> GHC.Show.ShowS
  {- Arity: 1, Strictness: <L,U(C(C1(C(U))),A,A)> -}
94dde4ffceed0a2a13daed020b6576e1
  $fShowCompIf ::
    GHC.Show.Show annot =>
    GHC.Show.Show (Language.Python.Common.AST.CompIf annot)
  DFunId
  {- Arity: 1, Strictness: <L,U(C(C1(C(U))),A,A)>m, Inline: CONLIKE,
     Unfolding: DFun: @ annot1 (v :: GHC.Show.Show annot1).
                  @ (Language.Python.Common.AST.CompIf annot1)
                  (Language.Python.Common.AST.$fShowCompIf_$cshowsPrec @ annot1 v)
                  (Language.Python.Common.AST.$fShowCompIf_$cshow @ annot1 v)
                  (Language.Python.Common.AST.$fShowCompIf_$cshowList @ annot1 v) -}
94dde4ffceed0a2a13daed020b6576e1
  $fShowCompIf_$cshow ::
    GHC.Show.Show annot =>
    Language.Python.Common.AST.CompIf annot -> GHC.Base.String
  {- Arity: 2, Strictness: <L,U(C(C1(C(U))),A,A)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ annot1
                   ($dShow :: GHC.Show.Show annot1)
                   (x :: Language.Python.Common.AST.CompIf annot1) ->
                 Language.Python.Common.AST.$fShowCompIf_$cshowsPrec
                   @ annot1
                   $dShow
                   Language.Python.Common.AST.$fDataExpr3
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
94dde4ffceed0a2a13daed020b6576e1
  $fShowCompIf_$cshowList ::
    GHC.Show.Show annot =>
    [Language.Python.Common.AST.CompIf annot] -> GHC.Show.ShowS
  {- Arity: 1, Strictness: <L,U(C(C1(C(U))),A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ annot1 ($dShow :: GHC.Show.Show annot1) ->
                 GHC.Show.showList__
                   @ (Language.Python.Common.AST.CompIf annot1)
                   (Language.Python.Common.AST.$fShowCompIf_$cshowsPrec
                      @ annot1
                      $dShow
                      Language.Python.Common.AST.$fDataExpr3)) -}
94dde4ffceed0a2a13daed020b6576e1
  $fShowCompIf_$cshowsPrec ::
    GHC.Show.Show annot =>
    GHC.Types.Int
    -> Language.Python.Common.AST.CompIf annot -> GHC.Show.ShowS
  {- Arity: 1, Strictness: <L,U(C(C1(C(U))),A,A)> -}
94dde4ffceed0a2a13daed020b6576e1
  $fShowCompIter ::
    GHC.Show.Show annot =>
    GHC.Show.Show (Language.Python.Common.AST.CompIter annot)
  DFunId
  {- Arity: 1, Strictness: <L,U(C(C1(C(U))),A,A)>m, Inline: CONLIKE,
     Unfolding: DFun: @ annot1 (v :: GHC.Show.Show annot1).
                  @ (Language.Python.Common.AST.CompIter annot1)
                  (Language.Python.Common.AST.$fShowCompIter_$cshowsPrec @ annot1 v)
                  (Language.Python.Common.AST.$fShowCompIter_$cshow @ annot1 v)
                  (Language.Python.Common.AST.$fShowCompIter_$cshowList
                     @ annot1
                     v) -}
94dde4ffceed0a2a13daed020b6576e1
  $fShowCompIter_$cshow ::
    GHC.Show.Show annot =>
    Language.Python.Common.AST.CompIter annot -> GHC.Base.String
  {- Arity: 2, Strictness: <L,U(C(C1(C(U))),A,A)><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ annot1
                   ($dShow :: GHC.Show.Show annot1)
                   (x :: Language.Python.Common.AST.CompIter annot1) ->
                 Language.Python.Common.AST.$fShowCompIter_$cshowsPrec
                   @ annot1
                   $dShow
                   Language.Python.Common.AST.$fDataExpr3
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
94dde4ffceed0a2a13daed020b6576e1
  $fShowCompIter_$cshowList ::
    GHC.Show.Show annot =>
    [Language.Python.Common.AST.CompIter annot] -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U(C(C1(C(U))),A,A)><S,1*U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ annot1
                   ($dShow :: GHC.Show.Show annot1)
                   (eta :: [Language.Python.Common.AST.CompIter annot1])
                   (eta1 :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Language.Python.Common.AST.CompIter annot1)
                   (Language.Python.Common.AST.$fShowCompIter_$cshowsPrec
                      @ annot1
                      $dShow
                      Language.Python.Common.AST.$fDataExpr3)
                   eta
                   eta1) -}
94dde4ffceed0a2a13daed020b6576e1
  $fShowCompIter_$cshowsPrec ::
    GHC.Show.Show annot =>
    GHC.Types.Int
    -> Language.Python.Common.AST.CompIter annot -> GHC.Show.ShowS
  {- Arity: 3,
     Strictness: <L,U(C(C1(C(U))),A,A)><S(S),1*U(U)><S,1*U>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ @ annot1
                   (w :: GHC.Show.Show annot1)
                   (w249 :: GHC.Types.Int)
                   (w250 :: Language.Python.Common.AST.CompIter annot1) ->
                 case w249 of ww { GHC.Types.I# ww1 ->
                 Language.Python.Common.AST.$w$cshowsPrec2 @ annot1 w ww1 w250 }) -}
94dde4ffceed0a2a13daed020b6576e1
  $fShowComprehension ::
    GHC.Show.Show annot =>
    GHC.Show.Show (Language.Python.Common.AST.Comprehension annot)
  DFunId
  {- Arity: 1, Strictness: <L,U(C(C1(C(U))),A,A)>m, Inline: CONLIKE,
     Unfolding: DFun: @ annot1 (v :: GHC.Show.Show annot1).
                  @ (Language.Python.Common.AST.Comprehension annot1)
                  (Language.Python.Common.AST.$fShowComprehension_$cshowsPrec
                     @ annot1
                     v)
                  (Language.Python.Common.AST.$fShowComprehension_$cshow @ annot1 v)
                  (Language.Python.Common.AST.$fShowComprehension_$cshowList
                     @ annot1
                     v) -}
f551c6ef16f196c91d6eda4d673cb7f9
  $fShowComprehension1 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("}"#) -}
c0020ce07da27c52ac858c9bb76ebff6
  $fShowComprehension10 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("DictMappingPair "#) -}
21a54e22e263fca2e45b2824814448f3
  $fShowComprehension11 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 11#) -}
59ae430de553200e5bc4ce27b1623ff0
  $fShowComprehension12 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.Python.Common.AST.$fShowComprehension13) -}
7aeba4edfcc01cdc4ac00242dcfc63f0
  $fShowComprehension13 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ComprehensionExpr "#) -}
5fbddfbb3d1ed5bf688fd9c5c9923b7b
  $fShowComprehension2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("comprehension_annot = "#) -}
2180858ed639f85db0e788a5442d51ea
  $fShowComprehension3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("comprehension_for = "#) -}
c637bd39c5da4cc7182e0c6147b61d2f
  $fShowComprehension4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("comprehension_expr = "#) -}
0ef8528afb4d98da0924fdcf274b08f4
  $fShowComprehension5 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Comprehension {"#) -}
34b67d01e829111f6ebfaae1741175d6
  $fShowComprehension6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.Python.Common.AST.$fShowComprehension7) -}
3c46eef45896848a8b4ea60e3c39e492
  $fShowComprehension7 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ComprehensionDict "#) -}
a7b9a21ae51b7068860f9a75c1c06300
  $fShowComprehension8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.Python.Common.AST.$fShowComprehension9) -}
c0f79a25495340d338d12bc317a231d6
  $fShowComprehension9 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("DictUnpacking "#) -}
94dde4ffceed0a2a13daed020b6576e1
  $fShowComprehensionExpr ::
    GHC.Show.Show annot =>
    GHC.Show.Show (Language.Python.Common.AST.ComprehensionExpr annot)
  DFunId
  {- Arity: 1, Strictness: <L,U(C(C1(C(U))),A,A)>m, Inline: CONLIKE,
     Unfolding: DFun: @ annot1 (v :: GHC.Show.Show annot1).
                  @ (Language.Python.Common.AST.ComprehensionExpr annot1)
                  (Language.Python.Common.AST.$fShowComprehensionExpr_$cshowsPrec
                     @ annot1
                     v)
                  (Language.Python.Common.AST.$fShowComprehensionExpr_$cshow
                     @ annot1
                     v)
                  (Language.Python.Common.AST.$fShowComprehensionExpr_$cshowList
                     @ annot1
                     v) -}
94dde4ffceed0a2a13daed020b6576e1
  $fShowComprehensionExpr_$cshow ::
    GHC.Show.Show annot =>
    Language.Python.Common.AST.ComprehensionExpr annot
    -> GHC.Base.String
  {- Arity: 2, Strictness: <L,U(C(C1(C(U))),A,A)><S,1*U>,
     Unfolding: (\ @ annot1
                   ($dShow :: GHC.Show.Show annot1)
                   (x :: Language.Python.Common.AST.ComprehensionExpr annot1) ->
                 case x of wild {
                   Language.Python.Common.AST.ComprehensionExpr b1
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Language.Python.Common.AST.$fShowComprehension12
                        (Language.Python.Common.AST.$fShowComprehension_$cshowsPrec1
                           @ annot1
                           $dShow
                           Language.Python.Common.AST.$fShowComprehension11
                           b1
                           (GHC.Types.[] @ GHC.Types.Char))
                   Language.Python.Common.AST.ComprehensionDict b1
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Language.Python.Common.AST.$fShowComprehension6
                        (Language.Python.Common.AST.$w$cshowsPrec5
                           @ annot1
                           $dShow
                           11#
                           b1
                           (GHC.Types.[] @ GHC.Types.Char)) }) -}
94dde4ffceed0a2a13daed020b6576e1
  $fShowComprehensionExpr_$cshowList ::
    GHC.Show.Show annot =>
    [Language.Python.Common.AST.ComprehensionExpr annot]
    -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U(C(C1(C(U))),A,A)><S,1*U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ annot1
                   ($dShow :: GHC.Show.Show annot1)
                   (eta :: [Language.Python.Common.AST.ComprehensionExpr annot1])
                   (eta1 :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Language.Python.Common.AST.ComprehensionExpr annot1)
                   (Language.Python.Common.AST.$fShowComprehensionExpr_$cshowsPrec
                      @ annot1
                      $dShow
                      Language.Python.Common.AST.$fDataExpr3)
                   eta
                   eta1) -}
94dde4ffceed0a2a13daed020b6576e1
  $fShowComprehensionExpr_$cshowsPrec ::
    GHC.Show.Show annot =>
    GHC.Types.Int
    -> Language.Python.Common.AST.ComprehensionExpr annot
    -> GHC.Show.ShowS
  {- Arity: 3,
     Strictness: <L,U(C(C1(C(U))),A,A)><S(S),1*U(U)><S,1*U>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ @ annot1
                   (w :: GHC.Show.Show annot1)
                   (w249 :: GHC.Types.Int)
                   (w250 :: Language.Python.Common.AST.ComprehensionExpr annot1) ->
                 case w249 of ww { GHC.Types.I# ww1 ->
                 Language.Python.Common.AST.$w$cshowsPrec4 @ annot1 w ww1 w250 }) -}
94dde4ffceed0a2a13daed020b6576e1
  $fShowComprehension_$cshow ::
    GHC.Show.Show annot =>
    Language.Python.Common.AST.Comprehension annot -> GHC.Base.String
  {- Arity: 2, Strictness: <L,U(C(C1(C(U))),A,A)><S,1*U(1*U,U,U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ annot1
                   ($dShow :: GHC.Show.Show annot1)
                   (x :: Language.Python.Common.AST.Comprehension annot1) ->
                 Language.Python.Common.AST.$fShowComprehension_$cshowsPrec
                   @ annot1
                   $dShow
                   Language.Python.Common.AST.$fDataExpr3
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
94dde4ffceed0a2a13daed020b6576e1
  $fShowComprehension_$cshowList ::
    GHC.Show.Show annot =>
    [Language.Python.Common.AST.Comprehension annot] -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U(C(C1(C(U))),A,A)><S,1*U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ annot1
                   ($dShow :: GHC.Show.Show annot1)
                   (eta :: [Language.Python.Common.AST.Comprehension annot1])
                   (eta1 :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Language.Python.Common.AST.Comprehension annot1)
                   (Language.Python.Common.AST.$fShowComprehension_$cshowsPrec
                      @ annot1
                      $dShow
                      Language.Python.Common.AST.$fDataExpr3)
                   eta
                   eta1) -}
94dde4ffceed0a2a13daed020b6576e1
  $fShowComprehension_$cshowsPrec ::
    GHC.Show.Show annot =>
    GHC.Types.Int
    -> Language.Python.Common.AST.Comprehension annot -> GHC.Show.ShowS
  {- Arity: 3,
     Strictness: <L,U(C(C1(C(U))),A,A)><S(S),1*U(U)><S,1*U(1*U,U,U)>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ @ annot1
                   (w :: GHC.Show.Show annot1)
                   (w249 :: GHC.Types.Int)
                   (w250 :: Language.Python.Common.AST.Comprehension annot1) ->
                 case w249 of ww { GHC.Types.I# ww1 ->
                 case w250 of ww2 { Language.Python.Common.AST.Comprehension ww3 ww4 ww5 ->
                 Language.Python.Common.AST.$w$cshowsPrec3
                   @ annot1
                   w
                   ww1
                   ww3
                   ww4
                   ww5 } }) -}
94dde4ffceed0a2a13daed020b6576e1
  $fShowComprehension_$cshowsPrec1 ::
    GHC.Show.Show annot =>
    GHC.Types.Int
    -> Language.Python.Common.AST.Expr annot -> GHC.Show.ShowS
  {- Arity: 1, Strictness: <L,U(C(C1(C(U))),A,A)> -}
6e1ab2fb537d2522edcf9b3f967431ea
  $fShowDecorator ::
    GHC.Show.Show annot =>
    GHC.Show.Show (Language.Python.Common.AST.Decorator annot)
  DFunId
  {- Arity: 1, Strictness: <L,U(C(C1(C(U))),A,A)>m, Inline: CONLIKE,
     Unfolding: DFun: @ annot1 (v :: GHC.Show.Show annot1).
                  @ (Language.Python.Common.AST.Decorator annot1)
                  (Language.Python.Common.AST.$fShowDecorator_$cshowsPrec @ annot1 v)
                  (Language.Python.Common.AST.$fShowDecorator_$cshow @ annot1 v)
                  (Language.Python.Common.AST.$fShowDecorator_$cshowList
                     @ annot1
                     v) -}
6e1ab2fb537d2522edcf9b3f967431ea
  $fShowDecorator_$cshow ::
    GHC.Show.Show annot =>
    Language.Python.Common.AST.Decorator annot -> GHC.Base.String
  {- Arity: 2, Strictness: <L,U(C(C1(C(U))),A,A)><S,1*U(U,U,U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ annot1
                   ($dShow :: GHC.Show.Show annot1)
                   (x :: Language.Python.Common.AST.Decorator annot1) ->
                 Language.Python.Common.AST.$fShowDecorator_$cshowsPrec
                   @ annot1
                   $dShow
                   Language.Python.Common.AST.$fDataExpr3
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
6e1ab2fb537d2522edcf9b3f967431ea
  $fShowDecorator_$cshowList ::
    GHC.Show.Show annot =>
    [Language.Python.Common.AST.Decorator annot] -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U(C(C1(C(U))),A,A)><S,1*U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ annot1
                   ($dShow :: GHC.Show.Show annot1)
                   (eta :: [Language.Python.Common.AST.Decorator annot1])
                   (eta1 :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Language.Python.Common.AST.Decorator annot1)
                   (Language.Python.Common.AST.$fShowDecorator_$cshowsPrec
                      @ annot1
                      $dShow
                      Language.Python.Common.AST.$fDataExpr3)
                   eta
                   eta1) -}
6e1ab2fb537d2522edcf9b3f967431ea
  $fShowDecorator_$cshowsPrec ::
    GHC.Show.Show annot =>
    GHC.Types.Int
    -> Language.Python.Common.AST.Decorator annot -> GHC.Show.ShowS
  {- Arity: 3,
     Strictness: <L,U(C(C1(C(U))),A,A)><S(S),1*U(U)><S,1*U(U,U,U)>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ @ annot1
                   (w :: GHC.Show.Show annot1)
                   (w249 :: GHC.Types.Int)
                   (w250 :: Language.Python.Common.AST.Decorator annot1) ->
                 case w249 of ww { GHC.Types.I# ww1 ->
                 case w250 of ww2 { Language.Python.Common.AST.Decorator ww3 ww4 ww5 ->
                 Language.Python.Common.AST.$w$cshowsPrec6
                   @ annot1
                   w
                   ww1
                   ww3
                   ww4
                   ww5 } }) -}
94dde4ffceed0a2a13daed020b6576e1
  $fShowDictKeyDatumList ::
    GHC.Show.Show annot =>
    GHC.Show.Show (Language.Python.Common.AST.DictKeyDatumList annot)
  DFunId
  {- Arity: 1, Strictness: <L,U(C(C1(C(U))),A,A)>m, Inline: CONLIKE,
     Unfolding: DFun: @ annot1 (v :: GHC.Show.Show annot1).
                  @ (Language.Python.Common.AST.DictKeyDatumList annot1)
                  (Language.Python.Common.AST.$fShowDictKeyDatumList_$cshowsPrec
                     @ annot1
                     v)
                  (Language.Python.Common.AST.$fShowDictKeyDatumList_$cshow
                     @ annot1
                     v)
                  (Language.Python.Common.AST.$fShowDictKeyDatumList_$cshowList
                     @ annot1
                     v) -}
94dde4ffceed0a2a13daed020b6576e1
  $fShowDictKeyDatumList_$cshow ::
    GHC.Show.Show annot =>
    Language.Python.Common.AST.DictKeyDatumList annot
    -> GHC.Base.String
  {- Arity: 2, Strictness: <L,U(C(C1(C(U))),A,A)><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ annot1
                   ($dShow :: GHC.Show.Show annot1)
                   (x :: Language.Python.Common.AST.DictKeyDatumList annot1) ->
                 Language.Python.Common.AST.$fShowDictKeyDatumList_$cshowsPrec
                   @ annot1
                   $dShow
                   Language.Python.Common.AST.$fDataExpr3
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
94dde4ffceed0a2a13daed020b6576e1
  $fShowDictKeyDatumList_$cshowList ::
    GHC.Show.Show annot =>
    [Language.Python.Common.AST.DictKeyDatumList annot]
    -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U(C(C1(C(U))),A,A)><S,1*U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ annot1
                   ($dShow :: GHC.Show.Show annot1)
                   (eta :: [Language.Python.Common.AST.DictKeyDatumList annot1])
                   (eta1 :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Language.Python.Common.AST.DictKeyDatumList annot1)
                   (Language.Python.Common.AST.$fShowDictKeyDatumList_$cshowsPrec
                      @ annot1
                      $dShow
                      Language.Python.Common.AST.$fDataExpr3)
                   eta
                   eta1) -}
94dde4ffceed0a2a13daed020b6576e1
  $fShowDictKeyDatumList_$cshowsPrec ::
    GHC.Show.Show annot =>
    GHC.Types.Int
    -> Language.Python.Common.AST.DictKeyDatumList annot
    -> GHC.Show.ShowS
  {- Arity: 3,
     Strictness: <L,U(C(C1(C(U))),A,A)><S(S),1*U(U)><S,1*U>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ @ annot1
                   (w :: GHC.Show.Show annot1)
                   (w249 :: GHC.Types.Int)
                   (w250 :: Language.Python.Common.AST.DictKeyDatumList annot1) ->
                 case w249 of ww { GHC.Types.I# ww1 ->
                 Language.Python.Common.AST.$w$cshowsPrec5 @ annot1 w ww1 w250 }) -}
54ad83b54b9c0dd8bf180da8d82f4195
  $fShowExceptClause ::
    GHC.Show.Show annot =>
    GHC.Show.Show (Language.Python.Common.AST.ExceptClause annot)
  DFunId
  {- Arity: 1, Strictness: <L,U(C(C1(C(U))),A,A)>m, Inline: CONLIKE,
     Unfolding: DFun: @ annot1 (v :: GHC.Show.Show annot1).
                  @ (Language.Python.Common.AST.ExceptClause annot1)
                  (Language.Python.Common.AST.$fShowExceptClause_$cshowsPrec
                     @ annot1
                     v)
                  (Language.Python.Common.AST.$fShowExceptClause_$cshow @ annot1 v)
                  (Language.Python.Common.AST.$fShowExceptClause_$cshowList
                     @ annot1
                     v) -}
6f2d70d5bbfe9e0548ba99f0a6004fe2
  $fShowExceptClause1 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("except_clause_annot = "#) -}
fd58195bea2377a1b597cb4694a92f21
  $fShowExceptClause2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("except_clause = "#) -}
5de0f40abba079fae39713a9fa9e5760
  $fShowExceptClause3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ExceptClause {"#) -}
54ad83b54b9c0dd8bf180da8d82f4195
  $fShowExceptClause_$cshow ::
    GHC.Show.Show annot =>
    Language.Python.Common.AST.ExceptClause annot -> GHC.Base.String
  {- Arity: 2, Strictness: <L,U(C(C1(C(U))),A,A)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ annot1
                   ($dShow :: GHC.Show.Show annot1)
                   (x :: Language.Python.Common.AST.ExceptClause annot1) ->
                 Language.Python.Common.AST.$fShowExceptClause_$cshowsPrec
                   @ annot1
                   $dShow
                   Language.Python.Common.AST.$fDataExpr3
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
54ad83b54b9c0dd8bf180da8d82f4195
  $fShowExceptClause_$cshowList ::
    GHC.Show.Show annot =>
    [Language.Python.Common.AST.ExceptClause annot] -> GHC.Show.ShowS
  {- Arity: 1, Strictness: <L,U(C(C1(C(U))),A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ annot1 ($dShow :: GHC.Show.Show annot1) ->
                 GHC.Show.showList__
                   @ (Language.Python.Common.AST.ExceptClause annot1)
                   (Language.Python.Common.AST.$fShowExceptClause_$cshowsPrec
                      @ annot1
                      $dShow
                      Language.Python.Common.AST.$fDataExpr3)) -}
54ad83b54b9c0dd8bf180da8d82f4195
  $fShowExceptClause_$cshowsPrec ::
    GHC.Show.Show annot =>
    GHC.Types.Int
    -> Language.Python.Common.AST.ExceptClause annot -> GHC.Show.ShowS
  {- Arity: 1, Strictness: <L,U(C(C1(C(U))),A,A)>,
     Unfolding: (\ @ annot1 ($dShow :: GHC.Show.Show annot1) ->
                 let {
                   $dShow1 :: GHC.Show.Show (Language.Python.Common.AST.Expr annot1)
                   = Language.Python.Common.AST.$fShowExpr @ annot1 $dShow
                 } in
                 let {
                   $dShow2 :: GHC.Show.Show
                                (GHC.Base.Maybe (Language.Python.Common.AST.Expr annot1))
                   = GHC.Show.$fShowMaybe
                       @ (Language.Python.Common.AST.Expr annot1)
                       $dShow1
                 } in
                 let {
                   $dShow3 :: GHC.Show.Show
                                (Language.Python.Common.AST.Expr annot1,
                                 GHC.Base.Maybe (Language.Python.Common.AST.Expr annot1))
                   = GHC.Show.$fShow(,)
                       @ (Language.Python.Common.AST.Expr annot1)
                       @ (GHC.Base.Maybe (Language.Python.Common.AST.Expr annot1))
                       $dShow1
                       $dShow2
                 } in
                 \ (a :: GHC.Types.Int)
                   (ds :: Language.Python.Common.AST.ExceptClause annot1) ->
                 case ds of wild { Language.Python.Common.AST.ExceptClause b1 b4 ->
                 case a of wild1 { GHC.Types.I# x ->
                 let {
                   f12 :: GHC.Base.String -> GHC.Base.String
                   = GHC.Show.$fShowMaybe_$cshowsPrec
                       @ (Language.Python.Common.AST.Expr annot1,
                          GHC.Base.Maybe (Language.Python.Common.AST.Expr annot1))
                       $dShow3
                       Language.Python.Common.AST.$fDataExpr3
                       b1
                 } in
                 let {
                   f13 :: GHC.Base.String -> GHC.Base.String
                   = GHC.Show.showsPrec
                       @ annot1
                       $dShow
                       Language.Python.Common.AST.$fDataExpr3
                       b4
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# x 11#) of wild2 {
                   GHC.Types.False
                   -> \ (x1 :: GHC.Base.String) ->
                      GHC.CString.unpackAppendCString#
                        Language.Python.Common.AST.$fShowExceptClause3
                        (GHC.CString.unpackAppendCString#
                           Language.Python.Common.AST.$fShowExceptClause2
                           (f12
                              (GHC.Base.++
                                 @ GHC.Types.Char
                                 GHC.Show.showCommaSpace1
                                 (GHC.CString.unpackAppendCString#
                                    Language.Python.Common.AST.$fShowExceptClause1
                                    (f13
                                       (GHC.CString.unpackAppendCString#
                                          Language.Python.Common.AST.$fShowComprehension1
                                          x1))))))
                   GHC.Types.True
                   -> \ (x1 :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (GHC.CString.unpackAppendCString#
                           Language.Python.Common.AST.$fShowExceptClause3
                           (GHC.CString.unpackAppendCString#
                              Language.Python.Common.AST.$fShowExceptClause2
                              (f12
                                 (GHC.Base.++
                                    @ GHC.Types.Char
                                    GHC.Show.showCommaSpace1
                                    (GHC.CString.unpackAppendCString#
                                       Language.Python.Common.AST.$fShowExceptClause1
                                       (f13
                                          (GHC.CString.unpackAppendCString#
                                             Language.Python.Common.AST.$fShowComprehension1
                                             (GHC.Types.:
                                                @ GHC.Types.Char
                                                GHC.Show.$fShow(,)2
                                                x1)))))))) } } }) -}
94dde4ffceed0a2a13daed020b6576e1
  $fShowExpr ::
    GHC.Show.Show annot =>
    GHC.Show.Show (Language.Python.Common.AST.Expr annot)
  DFunId
  {- Arity: 1, Strictness: <L,U(C(C1(C(U))),A,A)>m, Inline: CONLIKE,
     Unfolding: DFun: @ annot1 (v :: GHC.Show.Show annot1).
                  @ (Language.Python.Common.AST.Expr annot1)
                  (Language.Python.Common.AST.$fShowComprehension_$cshowsPrec1
                     @ annot1
                     v)
                  (Language.Python.Common.AST.$fShowExpr_$cshow @ annot1 v)
                  (Language.Python.Common.AST.$fShowExpr_$cshowList @ annot1 v) -}
94dde4ffceed0a2a13daed020b6576e1
  $fShowExpr_$cshow ::
    GHC.Show.Show annot =>
    Language.Python.Common.AST.Expr annot -> GHC.Base.String
  {- Arity: 2, Strictness: <L,U(C(C1(C(U))),A,A)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ annot1
                   ($dShow :: GHC.Show.Show annot1)
                   (x :: Language.Python.Common.AST.Expr annot1) ->
                 Language.Python.Common.AST.$fShowComprehension_$cshowsPrec1
                   @ annot1
                   $dShow
                   Language.Python.Common.AST.$fDataExpr3
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
94dde4ffceed0a2a13daed020b6576e1
  $fShowExpr_$cshowList ::
    GHC.Show.Show annot =>
    [Language.Python.Common.AST.Expr annot] -> GHC.Show.ShowS
  {- Arity: 1, Strictness: <L,U(C(C1(C(U))),A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ annot1 ($dShow :: GHC.Show.Show annot1) ->
                 GHC.Show.showList__
                   @ (Language.Python.Common.AST.Expr annot1)
                   (Language.Python.Common.AST.$fShowComprehension_$cshowsPrec1
                      @ annot1
                      $dShow
                      Language.Python.Common.AST.$fDataExpr3)) -}
73d811e85ab4018f7789c4c4421a9fde
  $fShowFromItem ::
    GHC.Show.Show annot =>
    GHC.Show.Show (Language.Python.Common.AST.FromItem annot)
  DFunId
  {- Arity: 1, Strictness: <L,U(C(C1(C(U))),A,A)>m, Inline: CONLIKE,
     Unfolding: DFun: @ annot1 (v :: GHC.Show.Show annot1).
                  @ (Language.Python.Common.AST.FromItem annot1)
                  (Language.Python.Common.AST.$fShowFromItem_$cshowsPrec @ annot1 v)
                  (Language.Python.Common.AST.$fShowFromItem_$cshow @ annot1 v)
                  (Language.Python.Common.AST.$fShowFromItem_$cshowList
                     @ annot1
                     v) -}
73d811e85ab4018f7789c4c4421a9fde
  $fShowFromItem_$cshow ::
    GHC.Show.Show annot =>
    Language.Python.Common.AST.FromItem annot -> GHC.Base.String
  {- Arity: 2, Strictness: <L,U(C(C1(C(U))),A,A)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ annot1
                   ($dShow :: GHC.Show.Show annot1)
                   (x :: Language.Python.Common.AST.FromItem annot1) ->
                 Language.Python.Common.AST.$fShowFromItem_$cshowsPrec
                   @ annot1
                   $dShow
                   Language.Python.Common.AST.$fDataExpr3
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
73d811e85ab4018f7789c4c4421a9fde
  $fShowFromItem_$cshowList ::
    GHC.Show.Show annot =>
    [Language.Python.Common.AST.FromItem annot] -> GHC.Show.ShowS
  {- Arity: 1, Strictness: <L,U(C(C1(C(U))),A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ annot1 ($dShow :: GHC.Show.Show annot1) ->
                 GHC.Show.showList__
                   @ (Language.Python.Common.AST.FromItem annot1)
                   (Language.Python.Common.AST.$fShowFromItem_$cshowsPrec
                      @ annot1
                      $dShow
                      Language.Python.Common.AST.$fDataExpr3)) -}
73d811e85ab4018f7789c4c4421a9fde
  $fShowFromItem_$cshowsPrec ::
    GHC.Show.Show annot =>
    GHC.Types.Int
    -> Language.Python.Common.AST.FromItem annot -> GHC.Show.ShowS
  {- Arity: 1, Strictness: <L,U(C(C1(C(U))),A,A)> -}
e3cd8a0dc8214c8f5ef60ed5a9ac11ef
  $fShowFromItems ::
    GHC.Show.Show annot =>
    GHC.Show.Show (Language.Python.Common.AST.FromItems annot)
  DFunId
  {- Arity: 1, Strictness: <L,U(C(C1(C(U))),A,A)>m, Inline: CONLIKE,
     Unfolding: DFun: @ annot1 (v :: GHC.Show.Show annot1).
                  @ (Language.Python.Common.AST.FromItems annot1)
                  (Language.Python.Common.AST.$fShowFromItems_$cshowsPrec @ annot1 v)
                  (Language.Python.Common.AST.$fShowFromItems_$cshow @ annot1 v)
                  (Language.Python.Common.AST.$fShowFromItems_$cshowList
                     @ annot1
                     v) -}
77284749b1ace58c56b2d4f9f3993e36
  $fShowFromItems1 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("from_items_items = "#) -}
9a4c04cb9f54d49b6e42be0bc104cb17
  $fShowFromItems2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("FromItems {"#) -}
8c0ec0f0389d55334f51bd30bf8b2f0f
  $fShowFromItems3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("from_items_annot = "#) -}
76316c16631e52b08c23e880af0cdbf5
  $fShowFromItems4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ImportEverything {"#) -}
e3cd8a0dc8214c8f5ef60ed5a9ac11ef
  $fShowFromItems_$cshow ::
    GHC.Show.Show annot =>
    Language.Python.Common.AST.FromItems annot -> GHC.Base.String
  {- Arity: 2, Strictness: <L,U(C(C1(C(U))),A,A)><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ annot1
                   ($dShow :: GHC.Show.Show annot1)
                   (x :: Language.Python.Common.AST.FromItems annot1) ->
                 Language.Python.Common.AST.$fShowFromItems_$cshowsPrec
                   @ annot1
                   $dShow
                   Language.Python.Common.AST.$fDataExpr3
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
e3cd8a0dc8214c8f5ef60ed5a9ac11ef
  $fShowFromItems_$cshowList ::
    GHC.Show.Show annot =>
    [Language.Python.Common.AST.FromItems annot] -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U(C(C1(C(U))),A,A)><S,1*U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ annot1
                   ($dShow :: GHC.Show.Show annot1)
                   (eta :: [Language.Python.Common.AST.FromItems annot1])
                   (eta1 :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Language.Python.Common.AST.FromItems annot1)
                   (Language.Python.Common.AST.$fShowFromItems_$cshowsPrec
                      @ annot1
                      $dShow
                      Language.Python.Common.AST.$fDataExpr3)
                   eta
                   eta1) -}
e3cd8a0dc8214c8f5ef60ed5a9ac11ef
  $fShowFromItems_$cshowsPrec ::
    GHC.Show.Show annot =>
    GHC.Types.Int
    -> Language.Python.Common.AST.FromItems annot -> GHC.Show.ShowS
  {- Arity: 3,
     Strictness: <L,U(C(C1(C(U))),A,A)><S(S),1*U(U)><S,1*U>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ @ annot1
                   (w :: GHC.Show.Show annot1)
                   (w249 :: GHC.Types.Int)
                   (w250 :: Language.Python.Common.AST.FromItems annot1) ->
                 case w249 of ww { GHC.Types.I# ww1 ->
                 Language.Python.Common.AST.$w$cshowsPrec7 @ annot1 w ww1 w250 }) -}
cf431e64d114ff48b3a5eb8fda819c32
  $fShowHandler ::
    GHC.Show.Show annot =>
    GHC.Show.Show (Language.Python.Common.AST.Handler annot)
  DFunId
  {- Arity: 1, Strictness: <L,U(C(C1(C(U))),A,A)>m, Inline: CONLIKE,
     Unfolding: DFun: @ annot1 (v :: GHC.Show.Show annot1).
                  @ (Language.Python.Common.AST.Handler annot1)
                  (Language.Python.Common.AST.$fShowHandler_$cshowsPrec @ annot1 v)
                  (Language.Python.Common.AST.$fShowHandler_$cshow @ annot1 v)
                  (Language.Python.Common.AST.$fShowHandler_$cshowList @ annot1 v) -}
929ee4f60c18db1dbca8349832fed360
  $fShowHandler1 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("handler_annot = "#) -}
b7e8a054d87faa2e43687c77e9cc5406
  $fShowHandler2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("handler_suite = "#) -}
2d8784191db55db1e3e382e4708be22a
  $fShowHandler3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("handler_clause = "#) -}
a7cc2426cab29651d34bdba9decb9735
  $fShowHandler4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Handler {"#) -}
cf431e64d114ff48b3a5eb8fda819c32
  $fShowHandler_$cshow ::
    GHC.Show.Show annot =>
    Language.Python.Common.AST.Handler annot -> GHC.Base.String
  {- Arity: 2, Strictness: <L,U(C(C1(C(U))),A,A)><S,1*U(U,U,U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ annot1
                   ($dShow :: GHC.Show.Show annot1)
                   (x :: Language.Python.Common.AST.Handler annot1) ->
                 Language.Python.Common.AST.$fShowHandler_$cshowsPrec
                   @ annot1
                   $dShow
                   Language.Python.Common.AST.$fDataExpr3
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
cf431e64d114ff48b3a5eb8fda819c32
  $fShowHandler_$cshowList ::
    GHC.Show.Show annot =>
    [Language.Python.Common.AST.Handler annot] -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U(C(C1(C(U))),A,A)><S,1*U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ annot1
                   ($dShow :: GHC.Show.Show annot1)
                   (eta :: [Language.Python.Common.AST.Handler annot1])
                   (eta1 :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Language.Python.Common.AST.Handler annot1)
                   (Language.Python.Common.AST.$fShowHandler_$cshowsPrec
                      @ annot1
                      $dShow
                      Language.Python.Common.AST.$fDataExpr3)
                   eta
                   eta1) -}
cf431e64d114ff48b3a5eb8fda819c32
  $fShowHandler_$cshowsPrec ::
    GHC.Show.Show annot =>
    GHC.Types.Int
    -> Language.Python.Common.AST.Handler annot -> GHC.Show.ShowS
  {- Arity: 3,
     Strictness: <L,U(C(C1(C(U))),A,A)><S(S),1*U(U)><S,1*U(U,U,U)>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ @ annot1
                   (w :: GHC.Show.Show annot1)
                   (w249 :: GHC.Types.Int)
                   (w250 :: Language.Python.Common.AST.Handler annot1) ->
                 case w249 of ww { GHC.Types.I# ww1 ->
                 case w250 of ww2 { Language.Python.Common.AST.Handler ww3 ww4 ww5 ->
                 Language.Python.Common.AST.$w$cshowsPrec8
                   @ annot1
                   w
                   ww1
                   ww3
                   ww4
                   ww5 } }) -}
cf431e64d114ff48b3a5eb8fda819c32
  $fShowHandler_$cshowsPrec1 ::
    GHC.Show.Show annot =>
    GHC.Types.Int
    -> Language.Python.Common.AST.Statement annot -> GHC.Show.ShowS
  {- Arity: 1, Strictness: <L,U(C(C1(C(U))),A,A)> -}
6aab1d6f902c3e0dbc09c99c8605e197
  $fShowIdent ::
    GHC.Show.Show annot =>
    GHC.Show.Show (Language.Python.Common.AST.Ident annot)
  DFunId
  {- Arity: 1, Strictness: <L,U(C(C1(C(U))),A,A)>m, Inline: CONLIKE,
     Unfolding: DFun: @ annot1 (v :: GHC.Show.Show annot1).
                  @ (Language.Python.Common.AST.Ident annot1)
                  (Language.Python.Common.AST.$fShowIdent_$cshowsPrec @ annot1 v)
                  (Language.Python.Common.AST.$fShowIdent_$cshow @ annot1 v)
                  (Language.Python.Common.AST.$fShowIdent_$cshowList @ annot1 v) -}
e56e213191a64fa322a98216ef7ba296
  $fShowIdent1 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ident_annot = "#) -}
ef313f074d5ca7b5b11cc9d6c9886288
  $fShowIdent2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ident_string = "#) -}
e3730b929b38e223ef2178e3218d2a7c
  $fShowIdent3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Ident {"#) -}
6aab1d6f902c3e0dbc09c99c8605e197
  $fShowIdent_$cshow ::
    GHC.Show.Show annot =>
    Language.Python.Common.AST.Ident annot -> GHC.Base.String
  {- Arity: 2,
     Strictness: <L,1*U(1*C1(C1(C(U))),A,A)><S(SL),1*U(U,U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ annot1
                   ($dShow :: GHC.Show.Show annot1)
                   (x :: Language.Python.Common.AST.Ident annot1) ->
                 Language.Python.Common.AST.$fShowIdent_$cshowsPrec
                   @ annot1
                   $dShow
                   Language.Python.Common.AST.$fDataExpr3
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
6aab1d6f902c3e0dbc09c99c8605e197
  $fShowIdent_$cshowList ::
    GHC.Show.Show annot =>
    [Language.Python.Common.AST.Ident annot] -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U(C(C1(C(U))),A,A)><S,1*U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ annot1
                   ($dShow :: GHC.Show.Show annot1)
                   (eta :: [Language.Python.Common.AST.Ident annot1])
                   (eta1 :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Language.Python.Common.AST.Ident annot1)
                   (Language.Python.Common.AST.$fShowIdent_$cshowsPrec
                      @ annot1
                      $dShow
                      Language.Python.Common.AST.$fDataExpr3)
                   eta
                   eta1) -}
6aab1d6f902c3e0dbc09c99c8605e197
  $fShowIdent_$cshowsPrec ::
    GHC.Show.Show annot =>
    GHC.Types.Int
    -> Language.Python.Common.AST.Ident annot -> GHC.Show.ShowS
  {- Arity: 3,
     Strictness: <L,1*U(1*C1(C1(C(U))),A,A)><S(S),1*U(U)><S(SL),1*U(U,U)>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ @ annot1
                   (w :: GHC.Show.Show annot1)
                   (w249 :: GHC.Types.Int)
                   (w250 :: Language.Python.Common.AST.Ident annot1) ->
                 case w249 of ww { GHC.Types.I# ww1 ->
                 case w250 of ww2 { Language.Python.Common.AST.Ident ww3 ww4 ->
                 Language.Python.Common.AST.$w$cshowsPrec9
                   @ annot1
                   w
                   ww1
                   ww3
                   ww4 } }) -}
283607fc44cb0ad26a76914defc72d00
  $fShowImportItem ::
    GHC.Show.Show annot =>
    GHC.Show.Show (Language.Python.Common.AST.ImportItem annot)
  DFunId
  {- Arity: 1, Strictness: <L,U(C(C1(C(U))),A,A)>m, Inline: CONLIKE,
     Unfolding: DFun: @ annot1 (v :: GHC.Show.Show annot1).
                  @ (Language.Python.Common.AST.ImportItem annot1)
                  (Language.Python.Common.AST.$fShowImportItem_$cshowsPrec
                     @ annot1
                     v)
                  (Language.Python.Common.AST.$fShowImportItem_$cshow @ annot1 v)
                  (Language.Python.Common.AST.$fShowImportItem_$cshowList
                     @ annot1
                     v) -}
283607fc44cb0ad26a76914defc72d00
  $fShowImportItem_$cshow ::
    GHC.Show.Show annot =>
    Language.Python.Common.AST.ImportItem annot -> GHC.Base.String
  {- Arity: 2, Strictness: <L,U(C(C1(C(U))),A,A)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ annot1
                   ($dShow :: GHC.Show.Show annot1)
                   (x :: Language.Python.Common.AST.ImportItem annot1) ->
                 Language.Python.Common.AST.$fShowImportItem_$cshowsPrec
                   @ annot1
                   $dShow
                   Language.Python.Common.AST.$fDataExpr3
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
283607fc44cb0ad26a76914defc72d00
  $fShowImportItem_$cshowList ::
    GHC.Show.Show annot =>
    [Language.Python.Common.AST.ImportItem annot] -> GHC.Show.ShowS
  {- Arity: 1, Strictness: <L,U(C(C1(C(U))),A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ annot1 ($dShow :: GHC.Show.Show annot1) ->
                 GHC.Show.showList__
                   @ (Language.Python.Common.AST.ImportItem annot1)
                   (Language.Python.Common.AST.$fShowImportItem_$cshowsPrec
                      @ annot1
                      $dShow
                      Language.Python.Common.AST.$fDataExpr3)) -}
283607fc44cb0ad26a76914defc72d00
  $fShowImportItem_$cshowsPrec ::
    GHC.Show.Show annot =>
    GHC.Types.Int
    -> Language.Python.Common.AST.ImportItem annot -> GHC.Show.ShowS
  {- Arity: 1, Strictness: <L,U(C(C1(C(U))),A,A)> -}
01a50092e1f9a1aefabdff796e5265a4
  $fShowImportRelative ::
    GHC.Show.Show annot =>
    GHC.Show.Show (Language.Python.Common.AST.ImportRelative annot)
  DFunId
  {- Arity: 1, Strictness: <L,U(C(C1(C(U))),A,A)>m, Inline: CONLIKE,
     Unfolding: DFun: @ annot1 (v :: GHC.Show.Show annot1).
                  @ (Language.Python.Common.AST.ImportRelative annot1)
                  (Language.Python.Common.AST.$fShowImportRelative_$cshowsPrec
                     @ annot1
                     v)
                  (Language.Python.Common.AST.$fShowImportRelative_$cshow @ annot1 v)
                  (Language.Python.Common.AST.$fShowImportRelative_$cshowList
                     @ annot1
                     v) -}
01a50092e1f9a1aefabdff796e5265a4
  $fShowImportRelative_$cshow ::
    GHC.Show.Show annot =>
    Language.Python.Common.AST.ImportRelative annot -> GHC.Base.String
  {- Arity: 2, Strictness: <L,U(C(C1(C(U))),A,A)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ annot1
                   ($dShow :: GHC.Show.Show annot1)
                   (x :: Language.Python.Common.AST.ImportRelative annot1) ->
                 Language.Python.Common.AST.$fShowImportRelative_$cshowsPrec
                   @ annot1
                   $dShow
                   Language.Python.Common.AST.$fDataExpr3
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
01a50092e1f9a1aefabdff796e5265a4
  $fShowImportRelative_$cshowList ::
    GHC.Show.Show annot =>
    [Language.Python.Common.AST.ImportRelative annot] -> GHC.Show.ShowS
  {- Arity: 1, Strictness: <L,U(C(C1(C(U))),A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ annot1 ($dShow :: GHC.Show.Show annot1) ->
                 GHC.Show.showList__
                   @ (Language.Python.Common.AST.ImportRelative annot1)
                   (Language.Python.Common.AST.$fShowImportRelative_$cshowsPrec
                      @ annot1
                      $dShow
                      Language.Python.Common.AST.$fDataExpr3)) -}
01a50092e1f9a1aefabdff796e5265a4
  $fShowImportRelative_$cshowsPrec ::
    GHC.Show.Show annot =>
    GHC.Types.Int
    -> Language.Python.Common.AST.ImportRelative annot
    -> GHC.Show.ShowS
  {- Arity: 1, Strictness: <L,U(C(C1(C(U))),A,A)> -}
789db2a4b3c023a9cf43afdd1f0c3249
  $fShowModule ::
    GHC.Show.Show annot =>
    GHC.Show.Show (Language.Python.Common.AST.Module annot)
  DFunId
  {- Arity: 1, Strictness: <L,U(C(C1(C(U))),A,A)>m, Inline: CONLIKE,
     Unfolding: DFun: @ annot1 (v :: GHC.Show.Show annot1).
                  @ (Language.Python.Common.AST.Module annot1)
                  (Language.Python.Common.AST.$fShowModule_$cshowsPrec @ annot1 v)
                  (Language.Python.Common.AST.$fShowModule_$cshow @ annot1 v)
                  (Language.Python.Common.AST.$fShowModule_$cshowList @ annot1 v) -}
85a7ef6b9f2664b3a400d081d9b40403
  $fShowModule1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.Python.Common.AST.$fShowModule2) -}
d9411c5508b86a9bec5099bf7c4907b9
  $fShowModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Module "#) -}
789db2a4b3c023a9cf43afdd1f0c3249
  $fShowModule_$cshow ::
    GHC.Show.Show annot =>
    Language.Python.Common.AST.Module annot -> GHC.Base.String
  {- Arity: 2, Strictness: <L,U(C(C1(C(U))),A,A)><L,1*U>,
     Unfolding: (\ @ annot1
                   ($dShow :: GHC.Show.Show annot1)
                   (x :: Language.Python.Common.AST.Module annot1) ->
                 GHC.Base.++
                   @ GHC.Types.Char
                   Language.Python.Common.AST.$fShowModule1
                   (GHC.Show.showList__
                      @ (Language.Python.Common.AST.Statement annot1)
                      (Language.Python.Common.AST.$fShowHandler_$cshowsPrec1
                         @ annot1
                         $dShow
                         Language.Python.Common.AST.$fDataExpr3)
                      x `cast` (Language.Python.Common.AST.N:Module[0] <annot1>_R)
                      (GHC.Types.[] @ GHC.Types.Char))) -}
789db2a4b3c023a9cf43afdd1f0c3249
  $fShowModule_$cshowList ::
    GHC.Show.Show annot =>
    [Language.Python.Common.AST.Module annot] -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U(C(C1(C(U))),A,A)><S,1*U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ annot1
                   ($dShow :: GHC.Show.Show annot1)
                   (eta :: [Language.Python.Common.AST.Module annot1])
                   (eta1 :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Language.Python.Common.AST.Module annot1)
                   (Language.Python.Common.AST.$fShowModule_$cshowsPrec
                      @ annot1
                      $dShow
                      Language.Python.Common.AST.$fDataExpr3)
                   eta
                   eta1) -}
789db2a4b3c023a9cf43afdd1f0c3249
  $fShowModule_$cshowsPrec ::
    GHC.Show.Show annot =>
    GHC.Types.Int
    -> Language.Python.Common.AST.Module annot -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U(C(C1(C(U))),A,A)><S(S),1*U(U)><L,U>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ @ annot1
                   (w :: GHC.Show.Show annot1)
                   (w249 :: GHC.Types.Int)
                   (w250 :: Language.Python.Common.AST.Module annot1) ->
                 case w249 of ww { GHC.Types.I# ww1 ->
                 Language.Python.Common.AST.$w$cshowsPrec10
                   @ annot1
                   w
                   ww1
                   w250 }) -}
3e80c1212dbae482ce637a5dc72042ac
  $fShowOp ::
    GHC.Show.Show annot =>
    GHC.Show.Show (Language.Python.Common.AST.Op annot)
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(C(C1(C(U))),A,A)>m,
     Inline: CONLIKE,
     Unfolding: DFun: @ annot1 (v :: GHC.Show.Show annot1).
                  @ (Language.Python.Common.AST.Op annot1)
                  (Language.Python.Common.AST.$fShowOp_$cshowsPrec @ annot1 v)
                  (Language.Python.Common.AST.$fShowOp_$cshow @ annot1 v)
                  (Language.Python.Common.AST.$fShowOp_$cshowList @ annot1 v) -}
3e80c1212dbae482ce637a5dc72042ac
  $fShowOp_$cshow ::
    GHC.Show.Show annot =>
    Language.Python.Common.AST.Op annot -> GHC.Base.String
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(C(U))),A,A)><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ annot1
                   ($dShow :: GHC.Show.Show annot1)
                   (x :: Language.Python.Common.AST.Op annot1) ->
                 Language.Python.Common.AST.$fShowOp_$cshowsPrec
                   @ annot1
                   $dShow
                   Language.Python.Common.AST.$fDataExpr3
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
3e80c1212dbae482ce637a5dc72042ac
  $fShowOp_$cshowList ::
    GHC.Show.Show annot =>
    [Language.Python.Common.AST.Op annot] -> GHC.Show.ShowS
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(C(C1(C(U))),A,A)><S,1*U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ annot1
                   ($dShow :: GHC.Show.Show annot1)
                   (eta :: [Language.Python.Common.AST.Op annot1])
                   (eta1 :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Language.Python.Common.AST.Op annot1)
                   (Language.Python.Common.AST.$fShowOp_$cshowsPrec
                      @ annot1
                      $dShow
                      Language.Python.Common.AST.$fDataExpr3)
                   eta
                   eta1) -}
3e80c1212dbae482ce637a5dc72042ac
  $fShowOp_$cshowsPrec ::
    GHC.Show.Show annot =>
    GHC.Types.Int
    -> Language.Python.Common.AST.Op annot -> GHC.Show.ShowS
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(C(U))),A,A)><S(S),1*U(U)><S,1*U>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ @ annot1
                   (w :: GHC.Show.Show annot1)
                   (w249 :: GHC.Types.Int)
                   (w250 :: Language.Python.Common.AST.Op annot1) ->
                 case w249 of ww { GHC.Types.I# ww1 ->
                 Language.Python.Common.AST.$w$cshowsPrec11
                   @ annot1
                   w
                   ww1
                   w250 }) -}
77aacf63ade2d28a10031365ad257b9f
  $fShowParamTuple ::
    GHC.Show.Show annot =>
    GHC.Show.Show (Language.Python.Common.AST.ParamTuple annot)
  DFunId
  {- Arity: 1, Strictness: <L,U(C(C1(C(U))),A,A)>m, Inline: CONLIKE,
     Unfolding: DFun: @ annot1 (v :: GHC.Show.Show annot1).
                  @ (Language.Python.Common.AST.ParamTuple annot1)
                  (Language.Python.Common.AST.$fShowParamTuple_$cshowsPrec
                     @ annot1
                     v)
                  (Language.Python.Common.AST.$fShowParamTuple_$cshow @ annot1 v)
                  (Language.Python.Common.AST.$fShowParamTuple_$cshowList
                     @ annot1
                     v) -}
77aacf63ade2d28a10031365ad257b9f
  $fShowParamTuple_$cshow ::
    GHC.Show.Show annot =>
    Language.Python.Common.AST.ParamTuple annot -> GHC.Base.String
  {- Arity: 2, Strictness: <L,U(C(C1(C(U))),A,A)><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ annot1
                   ($dShow :: GHC.Show.Show annot1)
                   (x :: Language.Python.Common.AST.ParamTuple annot1) ->
                 Language.Python.Common.AST.$fShowParamTuple_$cshowsPrec
                   @ annot1
                   $dShow
                   Language.Python.Common.AST.$fDataExpr3
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
77aacf63ade2d28a10031365ad257b9f
  $fShowParamTuple_$cshowList ::
    GHC.Show.Show annot =>
    [Language.Python.Common.AST.ParamTuple annot] -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U(C(C1(C(U))),A,A)><S,1*U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ annot1
                   ($dShow :: GHC.Show.Show annot1)
                   (eta :: [Language.Python.Common.AST.ParamTuple annot1])
                   (eta1 :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Language.Python.Common.AST.ParamTuple annot1)
                   (Language.Python.Common.AST.$fShowParamTuple_$cshowsPrec
                      @ annot1
                      $dShow
                      Language.Python.Common.AST.$fDataExpr3)
                   eta
                   eta1) -}
77aacf63ade2d28a10031365ad257b9f
  $fShowParamTuple_$cshowsPrec ::
    GHC.Show.Show annot =>
    GHC.Types.Int
    -> Language.Python.Common.AST.ParamTuple annot -> GHC.Show.ShowS
  {- Arity: 3,
     Strictness: <L,U(C(C1(C(U))),A,A)><S(S),1*U(U)><S,1*U>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ @ annot1
                   (w :: GHC.Show.Show annot1)
                   (w249 :: GHC.Types.Int)
                   (w250 :: Language.Python.Common.AST.ParamTuple annot1) ->
                 case w249 of ww { GHC.Types.I# ww1 ->
                 Language.Python.Common.AST.$w$cshowsPrec12
                   @ annot1
                   w
                   ww1
                   w250 }) -}
94dde4ffceed0a2a13daed020b6576e1
  $fShowParameter ::
    GHC.Show.Show annot =>
    GHC.Show.Show (Language.Python.Common.AST.Parameter annot)
  DFunId
  {- Arity: 1, Strictness: <L,U(C(C1(C(U))),A,A)>m, Inline: CONLIKE,
     Unfolding: DFun: @ annot1 (v :: GHC.Show.Show annot1).
                  @ (Language.Python.Common.AST.Parameter annot1)
                  (Language.Python.Common.AST.$fShowParameter_$cshowsPrec @ annot1 v)
                  (Language.Python.Common.AST.$fShowParameter_$cshow @ annot1 v)
                  (Language.Python.Common.AST.$fShowParameter_$cshowList
                     @ annot1
                     v) -}
94dde4ffceed0a2a13daed020b6576e1
  $fShowParameter_$cshow ::
    GHC.Show.Show annot =>
    Language.Python.Common.AST.Parameter annot -> GHC.Base.String
  {- Arity: 2, Strictness: <L,U(C(C1(C(U))),A,A)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ annot1
                   ($dShow :: GHC.Show.Show annot1)
                   (x :: Language.Python.Common.AST.Parameter annot1) ->
                 Language.Python.Common.AST.$fShowParameter_$cshowsPrec
                   @ annot1
                   $dShow
                   Language.Python.Common.AST.$fDataExpr3
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
94dde4ffceed0a2a13daed020b6576e1
  $fShowParameter_$cshowList ::
    GHC.Show.Show annot =>
    [Language.Python.Common.AST.Parameter annot] -> GHC.Show.ShowS
  {- Arity: 1, Strictness: <L,U(C(C1(C(U))),A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ annot1 ($dShow :: GHC.Show.Show annot1) ->
                 GHC.Show.showList__
                   @ (Language.Python.Common.AST.Parameter annot1)
                   (Language.Python.Common.AST.$fShowParameter_$cshowsPrec
                      @ annot1
                      $dShow
                      Language.Python.Common.AST.$fDataExpr3)) -}
94dde4ffceed0a2a13daed020b6576e1
  $fShowParameter_$cshowsPrec ::
    GHC.Show.Show annot =>
    GHC.Types.Int
    -> Language.Python.Common.AST.Parameter annot -> GHC.Show.ShowS
  {- Arity: 1, Strictness: <L,U(C(C1(C(U))),A,A)> -}
40b646133484efeda0b61064c970b83c
  $fShowRaiseExpr ::
    GHC.Show.Show annot =>
    GHC.Show.Show (Language.Python.Common.AST.RaiseExpr annot)
  DFunId
  {- Arity: 1, Strictness: <L,U(C(C1(C(U))),A,A)>m, Inline: CONLIKE,
     Unfolding: DFun: @ annot1 (v :: GHC.Show.Show annot1).
                  @ (Language.Python.Common.AST.RaiseExpr annot1)
                  (Language.Python.Common.AST.$fShowRaiseExpr_$cshowsPrec @ annot1 v)
                  (Language.Python.Common.AST.$fShowRaiseExpr_$cshow @ annot1 v)
                  (Language.Python.Common.AST.$fShowRaiseExpr_$cshowList
                     @ annot1
                     v) -}
b633d4a583dee3cf2144189f4e2595a2
  $fShowRaiseExpr1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.Python.Common.AST.$fShowRaiseExpr2) -}
4cf13026266455f6a9328317c6dd821d
  $fShowRaiseExpr2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("RaiseV2 "#) -}
fbed21ab654750c9ac688e59ea3bd6d4
  $fShowRaiseExpr3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.Python.Common.AST.$fShowRaiseExpr4) -}
4eaea6ec45743b2429bee5c2b31dea53
  $fShowRaiseExpr4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("RaiseV3 "#) -}
40b646133484efeda0b61064c970b83c
  $fShowRaiseExpr_$cshow ::
    GHC.Show.Show annot =>
    Language.Python.Common.AST.RaiseExpr annot -> GHC.Base.String
  {- Arity: 2, Strictness: <L,U(C(C1(C(U))),A,A)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ annot1
                   ($dShow :: GHC.Show.Show annot1)
                   (x :: Language.Python.Common.AST.RaiseExpr annot1) ->
                 Language.Python.Common.AST.$fShowRaiseExpr_$cshowsPrec
                   @ annot1
                   $dShow
                   Language.Python.Common.AST.$fDataExpr3
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
40b646133484efeda0b61064c970b83c
  $fShowRaiseExpr_$cshowList ::
    GHC.Show.Show annot =>
    [Language.Python.Common.AST.RaiseExpr annot] -> GHC.Show.ShowS
  {- Arity: 1, Strictness: <L,U(C(C1(C(U))),A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ annot1 ($dShow :: GHC.Show.Show annot1) ->
                 GHC.Show.showList__
                   @ (Language.Python.Common.AST.RaiseExpr annot1)
                   (Language.Python.Common.AST.$fShowRaiseExpr_$cshowsPrec
                      @ annot1
                      $dShow
                      Language.Python.Common.AST.$fDataExpr3)) -}
40b646133484efeda0b61064c970b83c
  $fShowRaiseExpr_$cshowsPrec ::
    GHC.Show.Show annot =>
    GHC.Types.Int
    -> Language.Python.Common.AST.RaiseExpr annot -> GHC.Show.ShowS
  {- Arity: 1, Strictness: <L,U(C(C1(C(U))),A,A)>,
     Unfolding: (\ @ annot1 ($dShow :: GHC.Show.Show annot1) ->
                 let {
                   $dShow1 :: GHC.Show.Show (Language.Python.Common.AST.Expr annot1)
                   = Language.Python.Common.AST.$fShowExpr @ annot1 $dShow
                 } in
                 let {
                   $dShow2 :: GHC.Show.Show
                                (GHC.Base.Maybe (Language.Python.Common.AST.Expr annot1))
                   = GHC.Show.$fShowMaybe
                       @ (Language.Python.Common.AST.Expr annot1)
                       $dShow1
                 } in
                 let {
                   $dShow3 :: GHC.Show.Show
                                (Language.Python.Common.AST.Expr annot1,
                                 GHC.Base.Maybe (Language.Python.Common.AST.Expr annot1))
                   = GHC.Show.$fShow(,)
                       @ (Language.Python.Common.AST.Expr annot1)
                       @ (GHC.Base.Maybe (Language.Python.Common.AST.Expr annot1))
                       $dShow1
                       $dShow2
                 } in
                 let {
                   $dShow4 :: GHC.Show.Show
                                (GHC.Base.Maybe
                                   (Language.Python.Common.AST.Expr annot1,
                                    GHC.Base.Maybe (Language.Python.Common.AST.Expr annot1)))
                   = GHC.Show.$fShowMaybe
                       @ (Language.Python.Common.AST.Expr annot1,
                          GHC.Base.Maybe (Language.Python.Common.AST.Expr annot1))
                       $dShow3
                 } in
                 let {
                   $dShow5 :: GHC.Show.Show
                                (Language.Python.Common.AST.Expr annot1,
                                 GHC.Base.Maybe
                                   (Language.Python.Common.AST.Expr annot1,
                                    GHC.Base.Maybe (Language.Python.Common.AST.Expr annot1)))
                   = GHC.Show.$fShow(,)
                       @ (Language.Python.Common.AST.Expr annot1)
                       @ (GHC.Base.Maybe
                            (Language.Python.Common.AST.Expr annot1,
                             GHC.Base.Maybe (Language.Python.Common.AST.Expr annot1)))
                       $dShow1
                       $dShow4
                 } in
                 \ (a :: GHC.Types.Int)
                   (ds :: Language.Python.Common.AST.RaiseExpr annot1) ->
                 case ds of wild {
                   Language.Python.Common.AST.RaiseV3 b1
                   -> case a of wild1 { GHC.Types.I# x ->
                      let {
                        g :: GHC.Base.String -> GHC.Base.String
                        = GHC.Show.$fShowMaybe_$cshowsPrec
                            @ (Language.Python.Common.AST.Expr annot1,
                               GHC.Base.Maybe (Language.Python.Common.AST.Expr annot1))
                            $dShow3
                            Language.Python.Common.AST.$fShowComprehension11
                            b1
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11#) of wild2 {
                        GHC.Types.False
                        -> \ (x1 :: GHC.Base.String) ->
                           GHC.Base.++
                             @ GHC.Types.Char
                             Language.Python.Common.AST.$fShowRaiseExpr3
                             (g x1)
                        GHC.Types.True
                        -> \ (x1 :: GHC.Base.String) ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.$fShow(,)4
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Language.Python.Common.AST.$fShowRaiseExpr3
                                (g (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x1))) } }
                   Language.Python.Common.AST.RaiseV2 b1
                   -> case a of wild1 { GHC.Types.I# x ->
                      let {
                        g :: GHC.Base.String -> GHC.Base.String
                        = GHC.Show.$fShowMaybe_$cshowsPrec
                            @ (Language.Python.Common.AST.Expr annot1,
                               GHC.Base.Maybe
                                 (Language.Python.Common.AST.Expr annot1,
                                  GHC.Base.Maybe (Language.Python.Common.AST.Expr annot1)))
                            $dShow5
                            Language.Python.Common.AST.$fShowComprehension11
                            b1
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11#) of wild2 {
                        GHC.Types.False
                        -> \ (x1 :: GHC.Base.String) ->
                           GHC.Base.++
                             @ GHC.Types.Char
                             Language.Python.Common.AST.$fShowRaiseExpr1
                             (g x1)
                        GHC.Types.True
                        -> \ (x1 :: GHC.Base.String) ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.$fShow(,)4
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Language.Python.Common.AST.$fShowRaiseExpr1
                                (g (GHC.Types.:
                                      @ GHC.Types.Char
                                      GHC.Show.$fShow(,)2
                                      x1))) } } }) -}
94dde4ffceed0a2a13daed020b6576e1
  $fShowSlice ::
    GHC.Show.Show annot =>
    GHC.Show.Show (Language.Python.Common.AST.Slice annot)
  DFunId
  {- Arity: 1, Strictness: <L,U(C(C1(C(U))),A,A)>m, Inline: CONLIKE,
     Unfolding: DFun: @ annot1 (v :: GHC.Show.Show annot1).
                  @ (Language.Python.Common.AST.Slice annot1)
                  (Language.Python.Common.AST.$fShowSlice_$cshowsPrec @ annot1 v)
                  (Language.Python.Common.AST.$fShowSlice_$cshow @ annot1 v)
                  (Language.Python.Common.AST.$fShowSlice_$cshowList @ annot1 v) -}
94dde4ffceed0a2a13daed020b6576e1
  $fShowSlice_$cshow ::
    GHC.Show.Show annot =>
    Language.Python.Common.AST.Slice annot -> GHC.Base.String
  {- Arity: 2, Strictness: <L,U(C(C1(C(U))),A,A)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ annot1
                   ($dShow :: GHC.Show.Show annot1)
                   (x :: Language.Python.Common.AST.Slice annot1) ->
                 Language.Python.Common.AST.$fShowSlice_$cshowsPrec
                   @ annot1
                   $dShow
                   Language.Python.Common.AST.$fDataExpr3
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
94dde4ffceed0a2a13daed020b6576e1
  $fShowSlice_$cshowList ::
    GHC.Show.Show annot =>
    [Language.Python.Common.AST.Slice annot] -> GHC.Show.ShowS
  {- Arity: 1, Strictness: <L,U(C(C1(C(U))),A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ annot1 ($dShow :: GHC.Show.Show annot1) ->
                 GHC.Show.showList__
                   @ (Language.Python.Common.AST.Slice annot1)
                   (Language.Python.Common.AST.$fShowSlice_$cshowsPrec
                      @ annot1
                      $dShow
                      Language.Python.Common.AST.$fDataExpr3)) -}
94dde4ffceed0a2a13daed020b6576e1
  $fShowSlice_$cshowsPrec ::
    GHC.Show.Show annot =>
    GHC.Types.Int
    -> Language.Python.Common.AST.Slice annot -> GHC.Show.ShowS
  {- Arity: 1, Strictness: <L,U(C(C1(C(U))),A,A)> -}
cf431e64d114ff48b3a5eb8fda819c32
  $fShowStatement ::
    GHC.Show.Show annot =>
    GHC.Show.Show (Language.Python.Common.AST.Statement annot)
  DFunId
  {- Arity: 1, Strictness: <L,U(C(C1(C(U))),A,A)>m, Inline: CONLIKE,
     Unfolding: DFun: @ annot1 (v :: GHC.Show.Show annot1).
                  @ (Language.Python.Common.AST.Statement annot1)
                  (Language.Python.Common.AST.$fShowHandler_$cshowsPrec1 @ annot1 v)
                  (Language.Python.Common.AST.$fShowStatement_$cshow @ annot1 v)
                  (Language.Python.Common.AST.$fShowStatement_$cshowList
                     @ annot1
                     v) -}
cf431e64d114ff48b3a5eb8fda819c32
  $fShowStatement_$cshow ::
    GHC.Show.Show annot =>
    Language.Python.Common.AST.Statement annot -> GHC.Base.String
  {- Arity: 2, Strictness: <L,U(C(C1(C(U))),A,A)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ annot1
                   ($dShow :: GHC.Show.Show annot1)
                   (x :: Language.Python.Common.AST.Statement annot1) ->
                 Language.Python.Common.AST.$fShowHandler_$cshowsPrec1
                   @ annot1
                   $dShow
                   Language.Python.Common.AST.$fDataExpr3
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
cf431e64d114ff48b3a5eb8fda819c32
  $fShowStatement_$cshowList ::
    GHC.Show.Show annot =>
    [Language.Python.Common.AST.Statement annot] -> GHC.Show.ShowS
  {- Arity: 1, Strictness: <L,U(C(C1(C(U))),A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ annot1 ($dShow :: GHC.Show.Show annot1) ->
                 GHC.Show.showList__
                   @ (Language.Python.Common.AST.Statement annot1)
                   (Language.Python.Common.AST.$fShowHandler_$cshowsPrec1
                      @ annot1
                      $dShow
                      Language.Python.Common.AST.$fDataExpr3)) -}
94dde4ffceed0a2a13daed020b6576e1
  $fShowYieldArg ::
    GHC.Show.Show annot =>
    GHC.Show.Show (Language.Python.Common.AST.YieldArg annot)
  DFunId
  {- Arity: 1, Strictness: <L,U(C(C1(C(U))),A,A)>m, Inline: CONLIKE,
     Unfolding: DFun: @ annot1 (v :: GHC.Show.Show annot1).
                  @ (Language.Python.Common.AST.YieldArg annot1)
                  (Language.Python.Common.AST.$fShowYieldArg_$cshowsPrec @ annot1 v)
                  (Language.Python.Common.AST.$fShowYieldArg_$cshow @ annot1 v)
                  (Language.Python.Common.AST.$fShowYieldArg_$cshowList
                     @ annot1
                     v) -}
96ec368ed2d1ca7fcc1560b047c55c7a
  $fShowYieldArg1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.Python.Common.AST.$fShowYieldArg2) -}
babdd66d1296c6829e47bbf77687f878
  $fShowYieldArg2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("YieldExpr "#) -}
49e6d21bccf7fdc2d7fc3c25d9ee06a0
  $fShowYieldArg3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("YieldFrom "#) -}
94dde4ffceed0a2a13daed020b6576e1
  $fShowYieldArg_$cshow ::
    GHC.Show.Show annot =>
    Language.Python.Common.AST.YieldArg annot -> GHC.Base.String
  {- Arity: 2, Strictness: <L,U(C(C1(C(U))),A,A)><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ annot1
                   ($dShow :: GHC.Show.Show annot1)
                   (x :: Language.Python.Common.AST.YieldArg annot1) ->
                 Language.Python.Common.AST.$fShowYieldArg_$cshowsPrec
                   @ annot1
                   $dShow
                   Language.Python.Common.AST.$fDataExpr3
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
94dde4ffceed0a2a13daed020b6576e1
  $fShowYieldArg_$cshowList ::
    GHC.Show.Show annot =>
    [Language.Python.Common.AST.YieldArg annot] -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U(C(C1(C(U))),A,A)><S,1*U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ annot1
                   ($dShow :: GHC.Show.Show annot1)
                   (eta :: [Language.Python.Common.AST.YieldArg annot1])
                   (eta1 :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Language.Python.Common.AST.YieldArg annot1)
                   (Language.Python.Common.AST.$fShowYieldArg_$cshowsPrec
                      @ annot1
                      $dShow
                      Language.Python.Common.AST.$fDataExpr3)
                   eta
                   eta1) -}
94dde4ffceed0a2a13daed020b6576e1
  $fShowYieldArg_$cshowsPrec ::
    GHC.Show.Show annot =>
    GHC.Types.Int
    -> Language.Python.Common.AST.YieldArg annot -> GHC.Show.ShowS
  {- Arity: 3,
     Strictness: <L,U(C(C1(C(U))),A,A)><S(S),1*U(U)><S,1*U>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ @ annot1
                   (w :: GHC.Show.Show annot1)
                   (w249 :: GHC.Types.Int)
                   (w250 :: Language.Python.Common.AST.YieldArg annot1) ->
                 case w249 of ww { GHC.Types.I# ww1 ->
                 Language.Python.Common.AST.$w$cshowsPrec13
                   @ annot1
                   w
                   ww1
                   w250 }) -}
94dde4ffceed0a2a13daed020b6576e1
  $fSpanArgument ::
    Language.Python.Common.SrcLocation.Span
      Language.Python.Common.AST.ArgumentSpan
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                (Language.Python.Common.AST.arg_annot
                   @ Language.Python.Common.SrcLocation.SrcSpan)
                  `cast`
                (Sym (Language.Python.Common.SrcLocation.N:Span[0]
                          <Language.Python.Common.AST.ArgumentSpan>_N)) -}
f55a81e56367dca5b5d86dd1548fd97f
  $fSpanAssignOp ::
    Language.Python.Common.SrcLocation.Span
      Language.Python.Common.AST.AssignOpSpan
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                (Language.Python.Common.AST.assignOp_annot
                   @ Language.Python.Common.SrcLocation.SrcSpan)
                  `cast`
                (Sym (Language.Python.Common.SrcLocation.N:Span[0]
                          <Language.Python.Common.AST.AssignOpSpan>_N)) -}
94dde4ffceed0a2a13daed020b6576e1
  $fSpanCompFor ::
    Language.Python.Common.SrcLocation.Span
      Language.Python.Common.AST.CompForSpan
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLLLS),1*U(A,A,A,A,1*U)>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                (Language.Python.Common.AST.comp_for_annot
                   @ Language.Python.Common.SrcLocation.SrcSpan)
                  `cast`
                (Sym (Language.Python.Common.SrcLocation.N:Span[0]
                          <Language.Python.Common.AST.CompForSpan>_N)) -}
94dde4ffceed0a2a13daed020b6576e1
  $fSpanCompIf ::
    Language.Python.Common.SrcLocation.Span
      Language.Python.Common.AST.CompIfSpan
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLS),1*U(A,A,1*U)>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                (Language.Python.Common.AST.comp_if_annot
                   @ Language.Python.Common.SrcLocation.SrcSpan)
                  `cast`
                (Sym (Language.Python.Common.SrcLocation.N:Span[0]
                          <Language.Python.Common.AST.CompIfSpan>_N)) -}
94dde4ffceed0a2a13daed020b6576e1
  $fSpanCompIter ::
    Language.Python.Common.SrcLocation.Span
      Language.Python.Common.AST.CompIterSpan
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                (Language.Python.Common.AST.comp_iter_annot
                   @ Language.Python.Common.SrcLocation.SrcSpan)
                  `cast`
                (Sym (Language.Python.Common.SrcLocation.N:Span[0]
                          <Language.Python.Common.AST.CompIterSpan>_N)) -}
94dde4ffceed0a2a13daed020b6576e1
  $fSpanComprehension ::
    Language.Python.Common.SrcLocation.Span
      Language.Python.Common.AST.ComprehensionSpan
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLS),1*U(A,A,1*U)>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                (Language.Python.Common.AST.comprehension_annot
                   @ Language.Python.Common.SrcLocation.SrcSpan)
                  `cast`
                (Sym (Language.Python.Common.SrcLocation.N:Span[0]
                          <Language.Python.Common.AST.ComprehensionSpan>_N)) -}
94dde4ffceed0a2a13daed020b6576e1
  $fSpanComprehensionExpr ::
    Language.Python.Common.SrcLocation.Span
      Language.Python.Common.AST.ComprehensionExprSpan
  DFunId
  {- Arity: 1, Strictness: <S,1*U>, Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Language.Python.Common.AST.$fSpanComprehensionExpr_$cgetSpan
                  `cast`
                (Sym (Language.Python.Common.SrcLocation.N:Span[0]
                          <Language.Python.Common.AST.ComprehensionExprSpan>_N)) -}
94dde4ffceed0a2a13daed020b6576e1
  $fSpanComprehensionExpr_$cgetSpan ::
    Language.Python.Common.AST.ComprehensionExprSpan
    -> Language.Python.Common.SrcLocation.SrcSpan
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.Python.Common.AST.ComprehensionExpr
                            Language.Python.Common.SrcLocation.SrcSpan) ->
                 case ds of wild {
                   Language.Python.Common.AST.ComprehensionExpr e
                   -> Language.Python.Common.AST.expr_annot
                        @ Language.Python.Common.SrcLocation.SrcSpan
                        e
                   Language.Python.Common.AST.ComprehensionDict d
                   -> Language.Python.Common.AST.$fSpanComprehensionExpr_$cgetSpan1
                        d }) -}
94dde4ffceed0a2a13daed020b6576e1
  $fSpanComprehensionExpr_$cgetSpan1 ::
    Language.Python.Common.AST.DictKeyDatumListSpan
    -> Language.Python.Common.SrcLocation.SrcSpan
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: Language.Python.Common.AST.DictKeyDatumList
                            Language.Python.Common.SrcLocation.SrcSpan) ->
                 case ds of wild {
                   Language.Python.Common.AST.DictMappingPair e1 e2
                   -> Language.Python.Common.SrcLocation.combineSrcSpans
                        (Language.Python.Common.AST.expr_annot
                           @ Language.Python.Common.SrcLocation.SrcSpan
                           e1)
                        (Language.Python.Common.AST.expr_annot
                           @ Language.Python.Common.SrcLocation.SrcSpan
                           e2)
                   Language.Python.Common.AST.DictUnpacking e
                   -> Language.Python.Common.AST.expr_annot
                        @ Language.Python.Common.SrcLocation.SrcSpan
                        e }) -}
6e1ab2fb537d2522edcf9b3f967431ea
  $fSpanDecorator ::
    Language.Python.Common.SrcLocation.Span
      Language.Python.Common.AST.DecoratorSpan
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLS),1*U(A,A,1*U)>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                (Language.Python.Common.AST.decorator_annot
                   @ Language.Python.Common.SrcLocation.SrcSpan)
                  `cast`
                (Sym (Language.Python.Common.SrcLocation.N:Span[0]
                          <Language.Python.Common.AST.DecoratorSpan>_N)) -}
94dde4ffceed0a2a13daed020b6576e1
  $fSpanDictKeyDatumList ::
    Language.Python.Common.SrcLocation.Span
      Language.Python.Common.AST.DictKeyDatumListSpan
  DFunId
  {- Arity: 1, Strictness: <S,1*U>, Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Language.Python.Common.AST.$fSpanComprehensionExpr_$cgetSpan1
                  `cast`
                (Sym (Language.Python.Common.SrcLocation.N:Span[0]
                          <Language.Python.Common.AST.DictKeyDatumListSpan>_N)) -}
54ad83b54b9c0dd8bf180da8d82f4195
  $fSpanExceptClause ::
    Language.Python.Common.SrcLocation.Span
      Language.Python.Common.AST.ExceptClauseSpan
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LS),1*U(A,1*U)>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                (Language.Python.Common.AST.except_clause_annot
                   @ Language.Python.Common.SrcLocation.SrcSpan)
                  `cast`
                (Sym (Language.Python.Common.SrcLocation.N:Span[0]
                          <Language.Python.Common.AST.ExceptClauseSpan>_N)) -}
94dde4ffceed0a2a13daed020b6576e1
  $fSpanExpr ::
    Language.Python.Common.SrcLocation.Span
      Language.Python.Common.AST.ExprSpan
  DFunId
  {- Arity: 1, Strictness: <S,1*U>, Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                (Language.Python.Common.AST.expr_annot
                   @ Language.Python.Common.SrcLocation.SrcSpan)
                  `cast`
                (Sym (Language.Python.Common.SrcLocation.N:Span[0]
                          <Language.Python.Common.AST.ExprSpan>_N)) -}
73d811e85ab4018f7789c4c4421a9fde
  $fSpanFromItem ::
    Language.Python.Common.SrcLocation.Span
      Language.Python.Common.AST.FromItemSpan
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLS),1*U(A,A,1*U)>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                (Language.Python.Common.AST.from_item_annot
                   @ Language.Python.Common.SrcLocation.SrcSpan)
                  `cast`
                (Sym (Language.Python.Common.SrcLocation.N:Span[0]
                          <Language.Python.Common.AST.FromItemSpan>_N)) -}
e3cd8a0dc8214c8f5ef60ed5a9ac11ef
  $fSpanFromItems ::
    Language.Python.Common.SrcLocation.Span
      Language.Python.Common.AST.FromItemsSpan
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                (Language.Python.Common.AST.from_items_annot
                   @ Language.Python.Common.SrcLocation.SrcSpan)
                  `cast`
                (Sym (Language.Python.Common.SrcLocation.N:Span[0]
                          <Language.Python.Common.AST.FromItemsSpan>_N)) -}
cf431e64d114ff48b3a5eb8fda819c32
  $fSpanHandler ::
    Language.Python.Common.SrcLocation.Span
      Language.Python.Common.AST.HandlerSpan
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLS),1*U(A,A,1*U)>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                (Language.Python.Common.AST.handler_annot
                   @ Language.Python.Common.SrcLocation.SrcSpan)
                  `cast`
                (Sym (Language.Python.Common.SrcLocation.N:Span[0]
                          <Language.Python.Common.AST.HandlerSpan>_N)) -}
6aab1d6f902c3e0dbc09c99c8605e197
  $fSpanIdent ::
    Language.Python.Common.SrcLocation.Span
      Language.Python.Common.AST.IdentSpan
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LS),1*U(A,1*U)>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                (Language.Python.Common.AST.ident_annot
                   @ Language.Python.Common.SrcLocation.SrcSpan)
                  `cast`
                (Sym (Language.Python.Common.SrcLocation.N:Span[0]
                          <Language.Python.Common.AST.IdentSpan>_N)) -}
283607fc44cb0ad26a76914defc72d00
  $fSpanImportItem ::
    Language.Python.Common.SrcLocation.Span
      Language.Python.Common.AST.ImportItemSpan
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLS),1*U(A,A,1*U)>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                (Language.Python.Common.AST.import_item_annot
                   @ Language.Python.Common.SrcLocation.SrcSpan)
                  `cast`
                (Sym (Language.Python.Common.SrcLocation.N:Span[0]
                          <Language.Python.Common.AST.ImportItemSpan>_N)) -}
01a50092e1f9a1aefabdff796e5265a4
  $fSpanImportRelative ::
    Language.Python.Common.SrcLocation.Span
      Language.Python.Common.AST.ImportRelativeSpan
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLS),1*U(A,A,1*U)>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                (Language.Python.Common.AST.import_relative_annot
                   @ Language.Python.Common.SrcLocation.SrcSpan)
                  `cast`
                (Sym (Language.Python.Common.SrcLocation.N:Span[0]
                          <Language.Python.Common.AST.ImportRelativeSpan>_N)) -}
3e80c1212dbae482ce637a5dc72042ac
  $fSpanOp ::
    Language.Python.Common.SrcLocation.Span
      Language.Python.Common.AST.OpSpan
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                (Language.Python.Common.AST.op_annot
                   @ Language.Python.Common.SrcLocation.SrcSpan)
                  `cast`
                (Sym (Language.Python.Common.SrcLocation.N:Span[0]
                          <Language.Python.Common.AST.OpSpan>_N)) -}
77aacf63ade2d28a10031365ad257b9f
  $fSpanParamTuple ::
    Language.Python.Common.SrcLocation.Span
      Language.Python.Common.AST.ParamTupleSpan
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                (Language.Python.Common.AST.param_tuple_annot
                   @ Language.Python.Common.SrcLocation.SrcSpan)
                  `cast`
                (Sym (Language.Python.Common.SrcLocation.N:Span[0]
                          <Language.Python.Common.AST.ParamTupleSpan>_N)) -}
94dde4ffceed0a2a13daed020b6576e1
  $fSpanParameter ::
    Language.Python.Common.SrcLocation.Span
      Language.Python.Common.AST.ParameterSpan
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                (Language.Python.Common.AST.param_annot
                   @ Language.Python.Common.SrcLocation.SrcSpan)
                  `cast`
                (Sym (Language.Python.Common.SrcLocation.N:Span[0]
                          <Language.Python.Common.AST.ParameterSpan>_N)) -}
94dde4ffceed0a2a13daed020b6576e1
  $fSpanSlice ::
    Language.Python.Common.SrcLocation.Span
      Language.Python.Common.AST.SliceSpan
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                (Language.Python.Common.AST.slice_annot
                   @ Language.Python.Common.SrcLocation.SrcSpan)
                  `cast`
                (Sym (Language.Python.Common.SrcLocation.N:Span[0]
                          <Language.Python.Common.AST.SliceSpan>_N)) -}
cf431e64d114ff48b3a5eb8fda819c32
  $fSpanStatement ::
    Language.Python.Common.SrcLocation.Span
      Language.Python.Common.AST.StatementSpan
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                (Language.Python.Common.AST.stmt_annot
                   @ Language.Python.Common.SrcLocation.SrcSpan)
                  `cast`
                (Sym (Language.Python.Common.SrcLocation.N:Span[0]
                          <Language.Python.Common.AST.StatementSpan>_N)) -}
94dde4ffceed0a2a13daed020b6576e1
  $fSpanYieldArg ::
    Language.Python.Common.SrcLocation.Span
      Language.Python.Common.AST.YieldArgSpan
  DFunId
  {- Arity: 1, Strictness: <S,1*U>, Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Language.Python.Common.AST.$fSpanYieldArg_$cgetSpan
                  `cast`
                (Sym (Language.Python.Common.SrcLocation.N:Span[0]
                          <Language.Python.Common.AST.YieldArgSpan>_N)) -}
94dde4ffceed0a2a13daed020b6576e1
  $fSpanYieldArg_$cgetSpan ::
    Language.Python.Common.AST.YieldArgSpan
    -> Language.Python.Common.SrcLocation.SrcSpan
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.Python.Common.AST.YieldArg
                            Language.Python.Common.SrcLocation.SrcSpan) ->
                 case ds of wild {
                   Language.Python.Common.AST.YieldFrom _e span -> span
                   Language.Python.Common.AST.YieldExpr e
                   -> Language.Python.Common.AST.expr_annot
                        @ Language.Python.Common.SrcLocation.SrcSpan
                        e }) -}
fef8b383586d4795490598381000b836
  $s$fData[] :: Data.Data.Data [[GHC.Types.Char]]
  {- Inline: CONLIKE,
     Unfolding: DFun:.
                  @ [[GHC.Types.Char]]
                  (Data.Data.$fData[]_$cp1Data
                     @ [GHC.Types.Char]
                     Data.Data.$fData[]_$s$fData[])
                  (Data.Data.$fData[]_$cgfoldl
                     @ [GHC.Types.Char]
                     Data.Data.$fData[]_$s$fData[])
                  (Data.Data.$fData[]_$cgunfold
                     @ [GHC.Types.Char]
                     Data.Data.$fData[]_$s$fData[])
                  (\ (ds :: [[GHC.Types.Char]]) ->
                   case ds of wild {
                     [] -> Data.Data.nilConstr : ds1 ds2 -> Data.Data.consConstr })
                  (\ (ds :: [[GHC.Types.Char]]) -> Data.Data.listDataType)
                  (Data.Data.$fData[]_$cdataCast1
                     @ [GHC.Types.Char]
                     Data.Data.$fData[]_$s$fData[])
                  (\ @ t :: * -> * -> *
                     @ c :: * -> *
                     ($dTypeable :: Data.Typeable.Internal.Typeable t)
                     (ds :: forall d e.
                            (Data.Data.Data d, Data.Data.Data e) =>
                            c (t d e)) ->
                   GHC.Base.Nothing @ (c [[GHC.Types.Char]]))
                  (Data.Data.$fData[]_$cgmapT
                     @ [GHC.Types.Char]
                     Data.Data.$fData[]_$s$fData[])
                  (Data.Data.$fData[]_$cgmapQl
                     @ [GHC.Types.Char]
                     Data.Data.$fData[]_$s$fData[])
                  (Data.Data.$fData[]_$cgmapQr
                     @ [GHC.Types.Char]
                     Data.Data.$fData[]_$s$fData[])
                  (Data.Data.$fData[]_$cgmapQ
                     @ [GHC.Types.Char]
                     Data.Data.$fData[]_$s$fData[])
                  (Data.Data.$fData[]_$cgmapQi
                     @ [GHC.Types.Char]
                     Data.Data.$fData[]_$s$fData[])
                  (Data.Data.$fData[]_$cgmapM
                     @ [GHC.Types.Char]
                     Data.Data.$fData[]_$s$fData[])
                  (Data.Data.$fData[]_$cgmapMp
                     @ [GHC.Types.Char]
                     Data.Data.$fData[]_$s$fData[])
                  (Data.Data.$fData[]_$cgmapMo
                     @ [GHC.Types.Char]
                     Data.Data.$fData[]_$s$fData[]) -}
5dececea93595fc0e14af9c3d08d27b5
  $tArgument :: Data.Data.DataType
  {- Strictness: m -}
b9f615ec516d7162f7d942a83c612e50
  $tAssignOp :: Data.Data.DataType
  {- Strictness: m -}
7f25884eb529a8c2772435acf083e165
  $tCompFor :: Data.Data.DataType
  {- Strictness: m,
     Unfolding: (Data.Data.DataType
                   Language.Python.Common.AST.$fDataCompFor6
                   Language.Python.Common.AST.$fDataCompFor4) -}
e5a9ac7f80f7120cd3402ef1d272757a
  $tCompIf :: Data.Data.DataType
  {- Strictness: m,
     Unfolding: (Data.Data.DataType
                   Language.Python.Common.AST.$fDataCompIf6
                   Language.Python.Common.AST.$fDataCompIf4) -}
3b6dae97b82a98b37ffe74230ee356e8
  $tCompIter :: Data.Data.DataType
  {- Strictness: m -}
6a7f1e3c9e1755f94d60d57633345b1e
  $tComprehension :: Data.Data.DataType
  {- Strictness: m,
     Unfolding: (Data.Data.DataType
                   Language.Python.Common.AST.$fDataComprehension6
                   Language.Python.Common.AST.$fDataComprehension4) -}
33d35e250ee9cf72762d9d5e68b4b245
  $tComprehensionExpr :: Data.Data.DataType
  {- Strictness: m -}
1d7890680f423088032b33796cb2e2b1
  $tDecorator :: Data.Data.DataType
  {- Strictness: m,
     Unfolding: (Data.Data.DataType
                   Language.Python.Common.AST.$fDataDecorator6
                   Language.Python.Common.AST.$fDataDecorator4) -}
28c72dd4d4a2ff4977ebf9303784277b
  $tDictKeyDatumList :: Data.Data.DataType
  {- Strictness: m -}
7b174246b1fcd166e3b9d1155316de95
  $tExceptClause :: Data.Data.DataType
  {- Strictness: m,
     Unfolding: (Data.Data.DataType
                   Language.Python.Common.AST.$fDataExceptClause6
                   Language.Python.Common.AST.$fDataExceptClause4) -}
1ec7950c53fa93e2f208243d53d76767
  $tExpr :: Data.Data.DataType
  {- Strictness: m -}
ba623bdc62d18f87b4e15e754cb47377
  $tFromItem :: Data.Data.DataType
  {- Strictness: m,
     Unfolding: (Data.Data.DataType
                   Language.Python.Common.AST.$fDataFromItem6
                   Language.Python.Common.AST.$fDataFromItem4) -}
83e0063fed86133e5889e0e834fe2b6b
  $tFromItems :: Data.Data.DataType
  {- Strictness: m -}
0296006922acdbb526bf255a09a42447
  $tHandler :: Data.Data.DataType
  {- Strictness: m,
     Unfolding: (Data.Data.DataType
                   Language.Python.Common.AST.$fDataHandler6
                   Language.Python.Common.AST.$fDataHandler4) -}
0c6e5f2f7c6aa4fb743d1d104043984d
  $tIdent :: Data.Data.DataType
  {- Strictness: m,
     Unfolding: (Data.Data.DataType
                   Language.Python.Common.AST.$fDataIdent7
                   Language.Python.Common.AST.$fDataIdent5) -}
5204030ac561d40757f1dcb056afcd4e
  $tImportItem :: Data.Data.DataType
  {- Strictness: m,
     Unfolding: (Data.Data.DataType
                   Language.Python.Common.AST.$fDataImportItem6
                   Language.Python.Common.AST.$fDataImportItem4) -}
95cda9dbb331c44ebaeec0ab8723076d
  $tImportRelative :: Data.Data.DataType
  {- Strictness: m,
     Unfolding: (Data.Data.DataType
                   Language.Python.Common.AST.$fDataImportRelative6
                   Language.Python.Common.AST.$fDataImportRelative4) -}
f1db572311ce6e5927cf149b922c53d2
  $tModule :: Data.Data.DataType
  {- Strictness: m,
     Unfolding: (Data.Data.DataType
                   Language.Python.Common.AST.$fDataModule8
                   Language.Python.Common.AST.$fDataModule6) -}
20772245a9644b0a4a3cb6abfe26a197
  $tOp :: Data.Data.DataType
  {- Strictness: m -}
411770819f9f57bf04dce97ccb624fcb
  $tParamTuple :: Data.Data.DataType
  {- Strictness: m -}
13a6eee29b02c41eb1b03289c1692fff
  $tParameter :: Data.Data.DataType
  {- Strictness: m -}
86cfdf47822f187f1de9516da741f75c
  $tRaiseExpr :: Data.Data.DataType
  {- Strictness: m -}
714d31961bcef8b2fa8b5be50ea0a079
  $tSlice :: Data.Data.DataType
  {- Strictness: m -}
1ee63fefabd101a6a3d28a33e3a7ebfa
  $tStatement :: Data.Data.DataType
  {- Strictness: m -}
95d51b2b71a4b962e5accfcff0276c79
  $tYieldArg :: Data.Data.DataType
  {- Strictness: m -}
8798617b67e945bbbc4813359b501993
  $tc'And :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3850656168029425255##
                   1783068783844985268##
                   Language.Python.Common.AST.$trModule
                   Language.Python.Common.AST.$tc'And2
                   1#
                   Language.Python.Common.AST.$tc'And1) -}
badc4dcb645564e1c0318776038b3f92
  $tc'And1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
a26f5a8a0e306ad0f5c16469afa4cca1
  $tc'And2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.Python.Common.AST.$tc'And3) -}
071e4f65539598647994762e8af86484
  $tc'And3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'And"#) -}
76a2b5ab928ea4ce18eb64fe8cb325e0
  $tc'AnnotatedAssign :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8329651290638978773##
                   4814861399495581053##
                   Language.Python.Common.AST.$trModule
                   Language.Python.Common.AST.$tc'AnnotatedAssign2
                   1#
                   Language.Python.Common.AST.$tc'AnnotatedAssign1) -}
f6a77734ebb0ba72e1750b65328ba588
  $tc'AnnotatedAssign1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
c25e0fe8ff658cd0cc16248477b42f3e
  $tc'AnnotatedAssign2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.Python.Common.AST.$tc'AnnotatedAssign3) -}
479b2c5f729268f87766bf57232f19e1
  $tc'AnnotatedAssign3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'AnnotatedAssign"#) -}
0950398b0301a3889a4f85cccb475eb7
  $tc'ArgExpr :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2106998785573704913##
                   12933455182444537991##
                   Language.Python.Common.AST.$trModule
                   Language.Python.Common.AST.$tc'ArgExpr2
                   1#
                   Language.Python.Common.AST.$tc'ArgExpr1) -}
23739ee9d814ffc53b5c704d5bffaeab
  $tc'ArgExpr1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
d95f45edce5544653e7d3d258696dc97
  $tc'ArgExpr2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.Python.Common.AST.$tc'ArgExpr3) -}
128fdf8368b55052090e0430f553eba1
  $tc'ArgExpr3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ArgExpr"#) -}
4dc37cf1962612a4c8a1c439a87b6fd8
  $tc'ArgKeyword :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16579137494033760162##
                   9568199316979687203##
                   Language.Python.Common.AST.$trModule
                   Language.Python.Common.AST.$tc'ArgKeyword2
                   1#
                   Language.Python.Common.AST.$tc'ArgKeyword1) -}
b60b87383895d88869d82816fd48bf9a
  $tc'ArgKeyword1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
13300b6b8a9f915da32581f97a96ae95
  $tc'ArgKeyword2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.Python.Common.AST.$tc'ArgKeyword3) -}
20d26b8a339b349b858c07a44965111c
  $tc'ArgKeyword3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ArgKeyword"#) -}
bf712cb358705c8054d3e6d47faec374
  $tc'ArgVarArgsKeyword :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13799432315366871659##
                   10489864405577831202##
                   Language.Python.Common.AST.$trModule
                   Language.Python.Common.AST.$tc'ArgVarArgsKeyword1
                   1#
                   Language.Python.Common.AST.$tc'ArgExpr1) -}
b92fd99d0387eeb791533d7fbe4491a2
  $tc'ArgVarArgsKeyword1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.Python.Common.AST.$tc'ArgVarArgsKeyword2) -}
b362e439c9381bc147971267b4324803
  $tc'ArgVarArgsKeyword2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ArgVarArgsKeyword"#) -}
9b708169e707e96e15ae0172ee73c0bc
  $tc'ArgVarArgsPos :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   403602022133907302##
                   13035604981584991526##
                   Language.Python.Common.AST.$trModule
                   Language.Python.Common.AST.$tc'ArgVarArgsPos1
                   1#
                   Language.Python.Common.AST.$tc'ArgExpr1) -}
45310d489d6bee71361103f25e98bb9e
  $tc'ArgVarArgsPos1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.Python.Common.AST.$tc'ArgVarArgsPos2) -}
adcf40aeb621a2e4c2adbea6e3efa772
  $tc'ArgVarArgsPos2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ArgVarArgsPos"#) -}
af5b54303e9709efb5af37c7da3698f1
  $tc'Assert :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15043805579348952124##
                   8536048699219734034##
                   Language.Python.Common.AST.$trModule
                   Language.Python.Common.AST.$tc'Assert2
                   1#
                   Language.Python.Common.AST.$tc'Assert1) -}
4a3ef537acc2f3e2ee7d336439d100b6
  $tc'Assert1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
e00424535f6fe9b347f2d80a41a0667d
  $tc'Assert2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.Python.Common.AST.$tc'Assert3) -}
9530ddfbcbf6eff073778f452ff46bd1
  $tc'Assert3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Assert"#) -}
9598949b0cfbe56f1efac84348d4bb6c
  $tc'Assign :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5723485793619484306##
                   535952903893340433##
                   Language.Python.Common.AST.$trModule
                   Language.Python.Common.AST.$tc'Assign2
                   1#
                   Language.Python.Common.AST.$tc'Assign1) -}
eb5d998057e86b9b4ee5e269df9207de
  $tc'Assign1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
f5e0443ac3edab54ed24e19f05a1c642
  $tc'Assign2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.Python.Common.AST.$tc'Assign3) -}
92c4ee6ea6355f1eb642de6d87c62ca2
  $tc'Assign3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Assign"#) -}
ccb21014f05b054cc28b90ddd3006dce
  $tc'AsyncFor :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11539217174273479665##
                   16463220470453341414##
                   Language.Python.Common.AST.$trModule
                   Language.Python.Common.AST.$tc'AsyncFor2
                   1#
                   Language.Python.Common.AST.$tc'AsyncFor1) -}
4d7a850c232f0e52779c3a56e5e339d1
  $tc'AsyncFor1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
e8b58e7e8751a91ed45e91a03b5fd537
  $tc'AsyncFor2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.Python.Common.AST.$tc'AsyncFor3) -}
0ecb1b97ac2081babac056dbe23f9fcc
  $tc'AsyncFor3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'AsyncFor"#) -}
2abc5a976a463aec762f5738a585e11c
  $tc'AsyncFun :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8974028734914508198##
                   6423309966121792763##
                   Language.Python.Common.AST.$trModule
                   Language.Python.Common.AST.$tc'AsyncFun1
                   1#
                   Language.Python.Common.AST.$tc'AsyncFor1) -}
ff74e5eff9b2dae248e03cf0ed232607
  $tc'AsyncFun1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.Python.Common.AST.$tc'AsyncFun2) -}
b1a31aff54970d740403d384234f6d78
  $tc'AsyncFun2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'AsyncFun"#) -}
f9ea492408f322f0d7f69b09e09b29d0
  $tc'AsyncWith :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14868626472238342507##
                   3140799515362290406##
                   Language.Python.Common.AST.$trModule
                   Language.Python.Common.AST.$tc'AsyncWith1
                   1#
                   Language.Python.Common.AST.$tc'AsyncFor1) -}
9dc392f5fe519818391f9e4ba2e57826
  $tc'AsyncWith1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.Python.Common.AST.$tc'AsyncWith2) -}
878a84f31d4aa195b42d04865d0bb1b4
  $tc'AsyncWith2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'AsyncWith"#) -}
29fe3cc4b59d4b4fe2cbbcaafcb475f6
  $tc'AugmentedAssign :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12083649349286769918##
                   736617691250193341##
                   Language.Python.Common.AST.$trModule
                   Language.Python.Common.AST.$tc'AugmentedAssign2
                   1#
                   Language.Python.Common.AST.$tc'AugmentedAssign1) -}
d3be6869fe76eeb39853f58fe4a201b3
  $tc'AugmentedAssign1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
899f79af69082fbceb1ba40c6683eb39
  $tc'AugmentedAssign2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.Python.Common.AST.$tc'AugmentedAssign3) -}
f28d7832bf479c5d02c94a1c29476f13
  $tc'AugmentedAssign3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'AugmentedAssign"#) -}
e5f2760715f0b5e1c0555818193589d2
  $tc'Await :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8210226203137276621##
                   17248445593314202916##
                   Language.Python.Common.AST.$trModule
                   Language.Python.Common.AST.$tc'Await2
                   1#
                   Language.Python.Common.AST.$tc'Await1) -}
3d3863959dda19caf68fc3823cbfb928
  $tc'Await1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
c32bd926b72ffaea0304e11fc3c17780
  $tc'Await2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.Python.Common.AST.$tc'Await3) -}
455e74d8d431cdcf2805d6ef3e98a17e
  $tc'Await3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Await"#) -}
05ea492e6a612a0a1a2d25bc3c9fbc4d
  $tc'BinAndAssign :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7962891640536824333##
                   4140412504414152091##
                   Language.Python.Common.AST.$trModule
                   Language.Python.Common.AST.$tc'BinAndAssign2
                   1#
                   Language.Python.Common.AST.$tc'BinAndAssign1) -}
aab36d82eaa9163aba5bbeba6a750ee3
  $tc'BinAndAssign1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
a5046264b358685d7a9fe1c2b0dba677
  $tc'BinAndAssign2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.Python.Common.AST.$tc'BinAndAssign3) -}
16b951bcc836e448ac28b8550b1470d7
  $tc'BinAndAssign3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'BinAndAssign"#) -}
361847611f2a5ef92879c8e2a4dbb2d4
  $tc'BinOrAssign :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17277896419593257616##
                   1778487931192309683##
                   Language.Python.Common.AST.$trModule
                   Language.Python.Common.AST.$tc'BinOrAssign1
                   1#
                   Language.Python.Common.AST.$tc'BinAndAssign1) -}
98014f6ad808234c6a726ad7ef3e440d
  $tc'BinOrAssign1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.Python.Common.AST.$tc'BinOrAssign2) -}
01e76c8f764e5bfb996f6ebcd45dd318
  $tc'BinOrAssign2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'BinOrAssign"#) -}
6e7ddc5c793b3a3300ac69f31e96e88b
  $tc'BinXorAssign :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8261739733226260985##
                   17035287986833475548##
                   Language.Python.Common.AST.$trModule
                   Language.Python.Common.AST.$tc'BinXorAssign1
                   1#
                   Language.Python.Common.AST.$tc'BinAndAssign1) -}
37df3bd97fac74f96edd822fb6165bcb
  $tc'BinXorAssign1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.Python.Common.AST.$tc'BinXorAssign2) -}
80dc5fea4474d16d8f151596985a6524
  $tc'BinXorAssign2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'BinXorAssign"#) -}
0e4735eccf6babd6650deab987f2ae0d
  $tc'BinaryAnd :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11304916054600984470##
                   18114591661374234281##
                   Language.Python.Common.AST.$trModule
                   Language.Python.Common.AST.$tc'BinaryAnd1
                   1#
                   Language.Python.Common.AST.$tc'And1) -}
38507d0c6233e19b9af18c2a33a46805
  $tc'BinaryAnd1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.Python.Common.AST.$tc'BinaryAnd2) -}
ed7f31c25c801c029f54379ad24cf907
  $tc'BinaryAnd2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'BinaryAnd"#) -}
4796932f5faee7ab2dad64fa93ab7e66
  $tc'BinaryOp :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13852449346002523074##
                   17083078643497420503##
                   Language.Python.Common.AST.$trModule
                   Language.Python.Common.AST.$tc'BinaryOp2
                   1#
                   Language.Python.Common.AST.$tc'BinaryOp1) -}
8e60859b30a28b865dd791373cce38f4
  $tc'BinaryOp1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
ab26eb2d8c090f6a3088c96b9b4c8588
  $tc'BinaryOp2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.Python.Common.AST.$tc'BinaryOp3) -}
dd17b37f0de2d47198e2a66d486e992d
  $tc'BinaryOp3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'BinaryOp"#) -}
09e3d5b8cc843d3f313f004429c2fe1f
  $tc'BinaryOr :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6377074384803554123##
                   8312612557170210154##
                   Language.Python.Common.AST.$trModule
                   Language.Python.Common.AST.$tc'BinaryOr1
                   1#
                   Language.Python.Common.AST.$tc'And1) -}
2ccc0a87d278e8e124cca1049bc55a26
  $tc'BinaryOr1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.Python.Common.AST.$tc'BinaryOr2) -}
d4b98ef37dccd32c31c09bbc1327ed44
  $tc'BinaryOr2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'BinaryOr"#) -}
d9f31540f96d1b070978aacdd47b2f11
  $tc'Bool :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2417669419844447220##
                   15414081552072983832##
                   Language.Python.Common.AST.$trModule
                   Language.Python.Common.AST.$tc'Bool2
                   1#
                   Language.Python.Common.AST.$tc'Bool1) -}
9136627814a09b4a980fe87fc8f9463b
  $tc'Bool1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
6f61d7540f0e8f783d97d6cd4d81fda6
  $tc'Bool2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.Python.Common.AST.$tc'Bool3) -}
aff3847d195c9c8da027cec2b6c452c4
  $tc'Bool3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Bool"#) -}
eaf60ece0b60991d25e76ae506df8609
  $tc'Break :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14381123363641553253##
                   5972071442940811835##
                   Language.Python.Common.AST.$trModule
                   Language.Python.Common.AST.$tc'Break2
                   1#
                   Language.Python.Common.AST.$tc'Break1) -}
51654a37aff1d914e348a8c92ca420a0
  $tc'Break1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
98d0a5471958c58cb40e865969c2fdd6
  $tc'Break2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.Python.Common.AST.$tc'Break3) -}
f00c19d39c65e161a51b1584e451dcd5
  $tc'Break3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Break"#) -}
8db8f9eb340c07bd7848a5bb4ea48c74
  $tc'ByteStrings :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3700113734503376589##
                   11670531572885619974##
                   Language.Python.Common.AST.$trModule
                   Language.Python.Common.AST.$tc'ByteStrings2
                   1#
                   Language.Python.Common.AST.$tc'ByteStrings1) -}
ce3dbaff2410280c1f2ea77391bf20db
  $tc'ByteStrings1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
e5e20b21c16f3684f552ce5113b788a8
  $tc'ByteStrings2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.Python.Common.AST.$tc'ByteStrings3) -}
37e19f9dedf5b711f1e76d4083de9969
  $tc'ByteStrings3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ByteStrings"#) -}
9698d2efba2fd9d4790aaa94c6eba794
  $tc'Call :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4837268906646377602##
                   4731129605416366793##
                   Language.Python.Common.AST.$trModule
                   Language.Python.Common.AST.$tc'Call2
                   1#
                   Language.Python.Common.AST.$tc'Call1) -}
b22df5d0a7f4c3b57c080ae992d0a2c0
  $tc'Call1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
d44f983b94b01dd356d1e5b58980535e
  $tc'Call2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.Python.Common.AST.$tc'Call3) -}
fc523d48ffb28355e0b14fa24d8f5a4b
  $tc'Call3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Call"#) -}
cf5a7a0785bc51621726673f73ee8fc2
  $tc'Class :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7384864871177648707##
                   15129942795419360454##
                   Language.Python.Common.AST.$trModule
                   Language.Python.Common.AST.$tc'Class2
                   1#
                   Language.Python.Common.AST.$tc'Class1) -}
7c6080a8f41a0fafb39e92ba85a62c99
  $tc'Class1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
4a0b7cc2090c178bd031103b77898ac4
  $tc'Class2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.Python.Common.AST.$tc'Class3) -}
aedf62ed4ee45a3dce527e0f9ce1e41e
  $tc'Class3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Class"#) -}
4828ee32c78125a09263743c1cfb2c4b
  $tc'CompFor :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16538377617916184988##
                   2837231426295636551##
                   Language.Python.Common.AST.$trModule
                   Language.Python.Common.AST.$tc'CompFor2
                   1#
                   Language.Python.Common.AST.$tc'CompFor1) -}
4570ba3c638aeacb33e99bf7f5387e4b
  $tc'CompFor1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
1f80d6b3b1bba5409bd7e594e6ce4710
  $tc'CompFor2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.Python.Common.AST.$tc'CompFor3) -}
a4ad0aba2558480bff87047968b114d6
  $tc'CompFor3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'CompFor"#) -}
853c6849a3411887bbd51a5132643acf
  $tc'CompIf :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3183879897918837315##
                   6974450316097273428##
                   Language.Python.Common.AST.$trModule
                   Language.Python.Common.AST.$tc'CompIf2
                   1#
                   Language.Python.Common.AST.$tc'CompIf1) -}
f1467cecb9d97bf5c510f6c972fa9f4f
  $tc'CompIf1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
3ae66543ffe2e36495460bb16f1f528f
  $tc'CompIf2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.Python.Common.AST.$tc'CompIf3) -}
5f1c5afde473cabd3d89372809ce7ba7
  $tc'CompIf3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'CompIf"#) -}
0705f3bcf58c90a62ee1bdbf2eba868d
  $tc'Comprehension :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2623693000120850983##
                   8757188404744978893##
                   Language.Python.Common.AST.$trModule
                   Language.Python.Common.AST.$tc'Comprehension2
                   1#
                   Language.Python.Common.AST.$tc'Comprehension1) -}
7aa14c7f67b5b1dd18de6501f95b31af
  $tc'Comprehension1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
30469cb824ebf25b63b4ab96dcbf2618
  $tc'Comprehension2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.Python.Common.AST.$tc'Comprehension3) -}
57e7b5701a21560f52c27ce579fa369e
  $tc'Comprehension3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Comprehension"#) -}
5ad0a1d184741d8bddbce11c4c51198e
  $tc'ComprehensionDict :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16027426535815774636##
                   1028840346141653558##
                   Language.Python.Common.AST.$trModule
                   Language.Python.Common.AST.$tc'ComprehensionDict2
                   1#
                   Language.Python.Common.AST.$tc'ComprehensionDict1) -}
112f8a348ba72bfb0c926cbb861c717b
  $tc'ComprehensionDict1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
3cd635a9b4790bbc20d87f77e091d354
  $tc'ComprehensionDict2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.Python.Common.AST.$tc'ComprehensionDict3) -}
bf6bb9fe5885d99407096ae7b89237ca
  $tc'ComprehensionDict3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ComprehensionDict"#) -}
9aaec4e4214c6a8d7b72a29074558344
  $tc'ComprehensionExpr :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5339724730766610843##
                   8878543156366006617##
                   Language.Python.Common.AST.$trModule
                   Language.Python.Common.AST.$tc'ComprehensionExpr2
                   1#
                   Language.Python.Common.AST.$tc'ComprehensionExpr1) -}
5b983e65f206780b0fbc2569afb92b12
  $tc'ComprehensionExpr1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
a999f1d3302c73acecb1814e463766e0
  $tc'ComprehensionExpr2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.Python.Common.AST.$tc'ComprehensionExpr3) -}
1184172cf2824c638880fc3f9b22cc60
  $tc'ComprehensionExpr3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ComprehensionExpr"#) -}
7e330a36c370d54b42812699f20260ca
  $tc'CondExpr :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6213250237908196777##
                   6979668676921007510##
                   Language.Python.Common.AST.$trModule
                   Language.Python.Common.AST.$tc'CondExpr2
                   1#
                   Language.Python.Common.AST.$tc'CondExpr1) -}
bd034867ae548aa27ffc3d749083e635
  $tc'CondExpr1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
5426ae39e1f23f1a905872bc933522e9
  $tc'CondExpr2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.Python.Common.AST.$tc'CondExpr3) -}
67b07e412f96983bc0587d6abda98f25
  $tc'CondExpr3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'CondExpr"#) -}
a225271f3e3b7af7c1c6ba60cfd10eef
  $tc'Conditional :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2627974594418973094##
                   11492005831103774083##
                   Language.Python.Common.AST.$trModule
                   Language.Python.Common.AST.$tc'Conditional2
                   1#
                   Language.Python.Common.AST.$tc'Conditional1) -}
cc5382488f091347b58905916db20930
  $tc'Conditional1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
6bb4c170e87b53c0110971866b42616b
  $tc'Conditional2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.Python.Common.AST.$tc'Conditional3) -}
6c6e4acd84b552ec09f8900ad58a91a4
  $tc'Conditional3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Conditional"#) -}
aa9235683e4d5d6c0d1f85b34b194fb8
  $tc'Continue :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12009022415923844870##
                   193297622043234241##
                   Language.Python.Common.AST.$trModule
                   Language.Python.Common.AST.$tc'Continue1
                   1#
                   Language.Python.Common.AST.$tc'Break1) -}
c03b433bcc23c174f5b0c4c47f7005c5
  $tc'Continue1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.Python.Common.AST.$tc'Continue2) -}
4de44cc40d06ae36ea17db2c9769a496
  $tc'Continue2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Continue"#) -}
0486691a0986edaa050ff2016a063e58
  $tc'Decorated :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8774602368809032881##
                   4433594772306537502##
                   Language.Python.Common.AST.$trModule
                   Language.Python.Common.AST.$tc'Decorated2
                   1#
                   Language.Python.Common.AST.$tc'Decorated1) -}
117bf9da1d004db4b798b530e881c7b1
  $tc'Decorated1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
967f5a5f01a0b2807387a8b82557ad53
  $tc'Decorated2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.Python.Common.AST.$tc'Decorated3) -}
5e90fe04e6d35963e5bc5e1ef25beb7d
  $tc'Decorated3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Decorated"#) -}
6a72af59ac8a9ba410529ad3c07574be
  $tc'Decorator :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8050023134474788425##
                   14463993538064636085##
                   Language.Python.Common.AST.$trModule
                   Language.Python.Common.AST.$tc'Decorator2
                   1#
                   Language.Python.Common.AST.$tc'Decorator1) -}
07dcd69d51abdfaba0927baee8f983ca
  $tc'Decorator1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
ce985b0f638a35cbffc3fb1f6510e7e7
  $tc'Decorator2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.Python.Common.AST.$tc'Decorator3) -}
57351a132d877c60144b58437dcca9bf
  $tc'Decorator3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Decorator"#) -}
9079922b0562c8c0c20500994ed66d44
  $tc'Delete :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16073056259438441287##
                   6437284723782223988##
                   Language.Python.Common.AST.$trModule
                   Language.Python.Common.AST.$tc'Delete1
                   1#
                   Language.Python.Common.AST.$tc'Assert1) -}
4428d21d6cd820f58169cd54f818cfa4
  $tc'Delete1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.Python.Common.AST.$tc'Delete2) -}
8210e1d59740754e15f3726226143801
  $tc'Delete2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Delete"#) -}
060a72576d1caf935052737e5ec0638c
  $tc'DictComp :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2299989516221014997##
                   6176757378267320785##
                   Language.Python.Common.AST.$trModule
                   Language.Python.Common.AST.$tc'DictComp2
                   1#
                   Language.Python.Common.AST.$tc'DictComp1) -}
54d1fa67cfdd53dbfe8df8d29add2154
  $tc'DictComp1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
c2b293c742bd4f913a9339b687ffcec0
  $tc'DictComp2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.Python.Common.AST.$tc'DictComp3) -}
2c182cf47dfda869707e598fde72cec3
  $tc'DictComp3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'DictComp"#) -}
d7828a9162c53d658f5eba8ef9a7b2db
  $tc'DictMappingPair :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3845510285407384543##
                   16050458392208471408##
                   Language.Python.Common.AST.$trModule
                   Language.Python.Common.AST.$tc'DictMappingPair2
                   1#
                   Language.Python.Common.AST.$tc'DictMappingPair1) -}
7b492051ab563505350068e9fd7106a8
  $tc'DictMappingPair1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
13519b256958fc584bfbf7a626f527b0
  $tc'DictMappingPair2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.Python.Common.AST.$tc'DictMappingPair3) -}
9ffb6e599600e8ea5265f448967f7660
  $tc'DictMappingPair3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'DictMappingPair"#) -}
a3c695df9832f819de7979ca003d15a0
  $tc'DictUnpacking :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5224492059816375665##
                   11707300602721008315##
                   Language.Python.Common.AST.$trModule
                   Language.Python.Common.AST.$tc'DictUnpacking2
                   1#
                   Language.Python.Common.AST.$tc'DictUnpacking1) -}
3af7795de610deb7ff6eba7796e97173
  $tc'DictUnpacking1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
41365c07bb9ad6b88f5212a101ec5606
  $tc'DictUnpacking2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.Python.Common.AST.$tc'DictUnpacking3) -}
0539ce3de1147c3b7c768114f5239914
  $tc'DictUnpacking3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'DictUnpacking"#) -}
82d2f9ba0aaae257b04760fcf2d01e7c
  $tc'Dictionary :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5638036605345468610##
                   1222042232432574731##
                   Language.Python.Common.AST.$trModule
                   Language.Python.Common.AST.$tc'Dictionary2
                   1#
                   Language.Python.Common.AST.$tc'Dictionary1) -}
9c61c59643bbfd0edbf780a6bb5c24e8
  $tc'Dictionary1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
638d0e0be15f3d9080faa8f8474c8000
  $tc'Dictionary2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.Python.Common.AST.$tc'Dictionary3) -}
7bbde24aa94640ee288734bf8e206c31
  $tc'Dictionary3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Dictionary"#) -}
f559b3c27e51c214b655ff107794b7e3
  $tc'DivAssign :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12125951957618350356##
                   4762496019876589209##
                   Language.Python.Common.AST.$trModule
                   Language.Python.Common.AST.$tc'DivAssign1
                   1#
                   Language.Python.Common.AST.$tc'BinAndAssign1) -}
764dad1738db805cc90e3de57e13cdb1
  $tc'DivAssign1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.Python.Common.AST.$tc'DivAssign2) -}
32f9efb1639f6df22ab7f92c43b54c88
  $tc'DivAssign2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'DivAssign"#) -}
cffdacd96311d17c2a625f886e2ff87c
  $tc'Divide :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5540063367501313940##
                   8302795571284527562##
                   Language.Python.Common.AST.$trModule
                   Language.Python.Common.AST.$tc'Divide1
                   1#
                   Language.Python.Common.AST.$tc'And1) -}
f02abee383622817d009684036cbba95
  $tc'Divide1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.Python.Common.AST.$tc'Divide2) -}
1be19914d02cda21582374d8488b6c41
  $tc'Divide2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Divide"#) -}
5a0f59eb0e4d90c09cfa8c058ba49595
  $tc'Dot :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12887070901987867448##
                   7314084708048951362##
                   Language.Python.Common.AST.$trModule
                   Language.Python.Common.AST.$tc'Dot2
                   1#
                   Language.Python.Common.AST.$tc'Dot1) -}
0237032b3794b9172575ac0a057b6f80
  $tc'Dot1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
e4fe6d35f0aa228d625e1226be04c1d9
  $tc'Dot2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.Python.Common.AST.$tc'Dot3) -}
664583769f49bfc3a309a23b6031cf48
  $tc'Dot3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Dot"#) -}
984e89b3e11b8958b62e63a1326848bb
  $tc'Ellipsis :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7883962889435545477##
                   10209875479441794071##
                   Language.Python.Common.AST.$trModule
                   Language.Python.Common.AST.$tc'Ellipsis2
                   1#
                   Language.Python.Common.AST.$tc'Ellipsis1) -}
49633d36cead2320c90aad6cc08dd39f
  $tc'Ellipsis1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
3e75bb4369f0dc8f89ad617bef7f5c48
  $tc'Ellipsis2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.Python.Common.AST.$tc'Ellipsis3) -}
cfb6fcefb5490ab33952e3b93557a5bc
  $tc'Ellipsis3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Ellipsis"#) -}
bfe5c2755526b3cb00c9e70000d91438
  $tc'EndPositional :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6117182683289212328##
                   8087988724792701293##
                   Language.Python.Common.AST.$trModule
                   Language.Python.Common.AST.$tc'EndPositional2
                   1#
                   Language.Python.Common.AST.$tc'EndPositional1) -}
ca68e5a5a4ac696e0466f1f94249ebfe
  $tc'EndPositional1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
c1734fef03fb1c96d7b8568bb533ee48
  $tc'EndPositional2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.Python.Common.AST.$tc'EndPositional3) -}
48da07a868c71cf440a3bdba666cd72b
  $tc'EndPositional3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'EndPositional"#) -}
47e5cc399d34e09737f79bc04047ec08
  $tc'Equality :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2584208757862195373##
                   1032472258437638600##
                   Language.Python.Common.AST.$trModule
                   Language.Python.Common.AST.$tc'Equality1
                   1#
                   Language.Python.Common.AST.$tc'And1) -}
508edf3e1e93deda5d78efebc794394d
  $tc'Equality1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.Python.Common.AST.$tc'Equality2) -}
c32b1ac37680c1047e8b2ed407ed8642
  $tc'Equality2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Equality"#) -}
90b947dfad2d14663390cb10bf467f6c
  $tc'ExceptClause :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12037351824395176697##
                   12128072174880294514##
                   Language.Python.Common.AST.$trModule
                   Language.Python.Common.AST.$tc'ExceptClause2
                   1#
                   Language.Python.Common.AST.$tc'ExceptClause1) -}
4b181c0ae527ccf4a0201dca86929c29
  $tc'ExceptClause1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
83b1513012a495989a5e7174cf1999a9
  $tc'ExceptClause2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.Python.Common.AST.$tc'ExceptClause3) -}
0ab4b3166e05e1d299eb46959abc87da
  $tc'ExceptClause3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ExceptClause"#) -}
a76e8aa3a301f37a317100c7d3662adb
  $tc'Exec :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9362607194364718853##
                   11774054498968793188##
                   Language.Python.Common.AST.$trModule
                   Language.Python.Common.AST.$tc'Exec2
                   1#
                   Language.Python.Common.AST.$tc'Exec1) -}
6e707cc7fc925e2f1126a5e8e3d3893e
  $tc'Exec1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
8e9f2b88bde8a09488ef6304e7298c65
  $tc'Exec2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.Python.Common.AST.$tc'Exec3) -}
8c598fecccb64f92a23db99bd77758cd
  $tc'Exec3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Exec"#) -}
9d957204c5e27b6fef51465db0b93222
  $tc'Exponent :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15268411783947999650##
                   11956479971206668035##
                   Language.Python.Common.AST.$trModule
                   Language.Python.Common.AST.$tc'Exponent1
                   1#
                   Language.Python.Common.AST.$tc'And1) -}
d8e69e7a9a56bf86479491a5b69bfba0
  $tc'Exponent1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.Python.Common.AST.$tc'Exponent2) -}
60bc07709be8119826e97c51659f9750
  $tc'Exponent2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Exponent"#) -}
1d63c8940be88f9423561f011bf4506f
  $tc'Float :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8904210035092962206##
                   1874172894714285769##
                   Language.Python.Common.AST.$trModule
                   Language.Python.Common.AST.$tc'Float2
                   1#
                   Language.Python.Common.AST.$tc'Float1) -}
0a181ae027c9dac71295eeeb755170fc
  $tc'Float1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
44d0d94c4fb716563b27f3438f191d5a
  $tc'Float2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.Python.Common.AST.$tc'Float3) -}
e127d871b44477bbe05756d1959b28e9
  $tc'Float3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Float"#) -}
9b53ec30217c35d2f7538cd9ecc7068c
  $tc'FloorDivAssign :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9621031183291089188##
                   3437658987251732843##
                   Language.Python.Common.AST.$trModule
                   Language.Python.Common.AST.$tc'FloorDivAssign1
                   1#
                   Language.Python.Common.AST.$tc'BinAndAssign1) -}
bacb2fff7b4cd5f5f228c4b98d94aee5
  $tc'FloorDivAssign1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.Python.Common.AST.$tc'FloorDivAssign2) -}
501ae7e58c5d6203dafa38f981095e4f
  $tc'FloorDivAssign2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'FloorDivAssign"#) -}
9536bbffc0e314bfa1f8c2063bb1ec83
  $tc'FloorDivide :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   590572026518321189##
                   4061403344506582557##
                   Language.Python.Common.AST.$trModule
                   Language.Python.Common.AST.$tc'FloorDivide1
                   1#
                   Language.Python.Common.AST.$tc'And1) -}
2ff5ded8b6bedd2c7c9df53cc1e19bdc
  $tc'FloorDivide1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.Python.Common.AST.$tc'FloorDivide2) -}
69ffec93776139c12cce0e5e0a0e268e
  $tc'FloorDivide2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'FloorDivide"#) -}
ce7819d55845c78f546b22a6ecfbe377
  $tc'For :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16445577443958891026##
                   1680555233507282340##
                   Language.Python.Common.AST.$trModule
                   Language.Python.Common.AST.$tc'For2
                   1#
                   Language.Python.Common.AST.$tc'For1) -}
2787607e9144f03f58826793335d35ff
  $tc'For1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
ba94afa9640fd88fc5b9889f5d959c3c
  $tc'For2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.Python.Common.AST.$tc'For3) -}
9abf9297db1525c082e5e55f5b71a01f
  $tc'For3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'For"#) -}
013c67bcfba5cdd40403ffae1f3d9406
  $tc'FromImport :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10946418272936230136##
                   15988377732971250391##
                   Language.Python.Common.AST.$trModule
                   Language.Python.Common.AST.$tc'FromImport2
                   1#
                   Language.Python.Common.AST.$tc'FromImport1) -}
cc24306457d7b67a9390b02e73298fed
  $tc'FromImport1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
5e746dd0ec768021b60342f532b460e4
  $tc'FromImport2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.Python.Common.AST.$tc'FromImport3) -}
baaa2d5b82b458cdb9c3025c552b1538
  $tc'FromImport3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'FromImport"#) -}
9947f96af135ac482dda1f07bf52bd87
  $tc'FromItem :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14929278557744142961##
                   12787849802658786171##
                   Language.Python.Common.AST.$trModule
                   Language.Python.Common.AST.$tc'FromItem2
                   1#
                   Language.Python.Common.AST.$tc'FromItem1) -}
6e348a2b9d70a001804aac19b16be81b
  $tc'FromItem1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
eb86cb8c8f95e18239a5e38b48c29cf1
  $tc'FromItem2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.Python.Common.AST.$tc'FromItem3) -}
c00b2c504534979f187261cff34d0d2a
  $tc'FromItem3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'FromItem"#) -}
b92be1145a9db8d00811e2a7540810fe
  $tc'FromItems :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13536105590610601084##
                   13791163723478891752##
                   Language.Python.Common.AST.$trModule
                   Language.Python.Common.AST.$tc'FromItems2
                   1#
                   Language.Python.Common.AST.$tc'FromItems1) -}
b81cab2677db1d66deb6ebe5dda10f61
  $tc'FromItems1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
1800f9139204c3912a1bbede9741a6dd
  $tc'FromItems2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.Python.Common.AST.$tc'FromItems3) -}
32861bc39078052eef2ade66dde9b56e
  $tc'FromItems3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'FromItems"#) -}
6345dfa921b5e74dbb70f6052957231b
  $tc'Fun :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16930125188727507161##
                   3129929615310314133##
                   Language.Python.Common.AST.$trModule
                   Language.Python.Common.AST.$tc'Fun2
                   1#
                   Language.Python.Common.AST.$tc'Fun1) -}
cdf5ab36a405ce520846622d6acaf6ba
  $tc'Fun1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
4e276e12fe61acd8c7f36d520806280e
  $tc'Fun2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.Python.Common.AST.$tc'Fun3) -}
2ebc0eac62983d9c86826f704e05e824
  $tc'Fun3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Fun"#) -}
b2063d5577bd2e1b42cc76ce56bcd7e4
  $tc'Generator :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10259935550392293418##
                   17141859634525482502##
                   Language.Python.Common.AST.$trModule
                   Language.Python.Common.AST.$tc'Generator1
                   1#
                   Language.Python.Common.AST.$tc'DictComp1) -}
b039744ae90f85d2f73c857592d468bd
  $tc'Generator1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.Python.Common.AST.$tc'Generator2) -}
bd91c68d32c2d7082b280c1392b2cd4b
  $tc'Generator2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Generator"#) -}
f4fb8a0b7d9ac69bcd9b4f893559de11
  $tc'Global :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6722823900096942069##
                   8150452689706108620##
                   Language.Python.Common.AST.$trModule
                   Language.Python.Common.AST.$tc'Global2
                   1#
                   Language.Python.Common.AST.$tc'Global1) -}
4ceb10628fa66a03827c961676d730cd
  $tc'Global1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
3ccce69f3d5716f7b6710eeacb14cddf
  $tc'Global2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.Python.Common.AST.$tc'Global3) -}
70d47d1ad2c4211e29a51ca48528e154
  $tc'Global3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Global"#) -}
ab916934ded04d494e85844f8d10df54
  $tc'GreaterThan :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3208787623246597614##
                   9778620126049415358##
                   Language.Python.Common.AST.$trModule
                   Language.Python.Common.AST.$tc'GreaterThan1
                   1#
                   Language.Python.Common.AST.$tc'And1) -}
9404382f3b6d33fe8800e2b4aa01c06e
  $tc'GreaterThan1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.Python.Common.AST.$tc'GreaterThan2) -}
9c0f09e0378f9994048df7c9157ad7d3
  $tc'GreaterThan2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'GreaterThan"#) -}
128e54a2fb39656a36f1972f92522a49
  $tc'GreaterThanEquals :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14947130105957105161##
                   14644259018344616120##
                   Language.Python.Common.AST.$trModule
                   Language.Python.Common.AST.$tc'GreaterThanEquals1
                   1#
                   Language.Python.Common.AST.$tc'And1) -}
e0bfda91e9fdefa1478b90f899be2e57
  $tc'GreaterThanEquals1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.Python.Common.AST.$tc'GreaterThanEquals2) -}
dfa2e50d6d02f4cc5100793b9e08aff3
  $tc'GreaterThanEquals2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'GreaterThanEquals"#) -}
938204ae45d0b36c6c6c1672f0b395ba
  $tc'Handler :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11604783661355177909##
                   3845339147903760904##
                   Language.Python.Common.AST.$trModule
                   Language.Python.Common.AST.$tc'Handler2
                   1#
                   Language.Python.Common.AST.$tc'Handler1) -}
0487c734a1689b819c6ac440ab767773
  $tc'Handler1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
38bb6a43e229cdb9d54c616e52b05bc1
  $tc'Handler2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.Python.Common.AST.$tc'Handler3) -}
b542c1c17fd75319d245c55cf7b404c8
  $tc'Handler3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Handler"#) -}
42a6f44e1226b6f6d67fa55408f3ad65
  $tc'Ident :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15954957297569068159##
                   16935966525167502097##
                   Language.Python.Common.AST.$trModule
                   Language.Python.Common.AST.$tc'Ident2
                   1#
                   Language.Python.Common.AST.$tc'Ident1) -}
eff85803c12f1ecae92ba0b7831b3107
  $tc'Ident1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
afd052a4e93ff5b6b7f7c0f2e40c188b
  $tc'Ident2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.Python.Common.AST.$tc'Ident3) -}
47638d414dd25f20a3908a113c2e7ec8
  $tc'Ident3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Ident"#) -}
5e4c6b1a30c9c856007dc07d1128d1f9
  $tc'Imaginary :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11402201248947764770##
                   14197089967892826127##
                   Language.Python.Common.AST.$trModule
                   Language.Python.Common.AST.$tc'Imaginary1
                   1#
                   Language.Python.Common.AST.$tc'Float1) -}
fc330d13d5623f2c63b8767055989782
  $tc'Imaginary1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.Python.Common.AST.$tc'Imaginary2) -}
e170a74d7c22ec1df89d5244f62962f0
  $tc'Imaginary2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Imaginary"#) -}
17441a192ade3981e983396e14921342
  $tc'Import :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   266842161753750506##
                   11395118932995377934##
                   Language.Python.Common.AST.$trModule
                   Language.Python.Common.AST.$tc'Import2
                   1#
                   Language.Python.Common.AST.$tc'Import1) -}
3acc1478dbeccc3fa9ea4ba1947b455c
  $tc'Import1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
05f73bb250649ccb9b06f48e519270ca
  $tc'Import2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.Python.Common.AST.$tc'Import3) -}
3201dbfad67a2d203544abe4619af714
  $tc'Import3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Import"#) -}
2c7d90094d637436d2f9c51472b8d640
  $tc'ImportEverything :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13105224171210522442##
                   4732845628502463865##
                   Language.Python.Common.AST.$trModule
                   Language.Python.Common.AST.$tc'ImportEverything2
                   1#
                   Language.Python.Common.AST.$tc'ImportEverything1) -}
e95c667c4dbe7e2a536bbd6a6b77338d
  $tc'ImportEverything1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
852429e4e87fba70519b5b5a9c8d174a
  $tc'ImportEverything2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.Python.Common.AST.$tc'ImportEverything3) -}
91f25bd6ad4f44dfaa1b8084ec49e596
  $tc'ImportEverything3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ImportEverything"#) -}
d9eb13dcaf1426d60f7267a537ce0820
  $tc'ImportItem :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11021431453398202042##
                   1045278159943254662##
                   Language.Python.Common.AST.$trModule
                   Language.Python.Common.AST.$tc'ImportItem2
                   1#
                   Language.Python.Common.AST.$tc'ImportItem1) -}
7d148a87c6272804eb44be8071c98042
  $tc'ImportItem1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
e1378c8fdf956708b5d90bd7031e9493
  $tc'ImportItem2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.Python.Common.AST.$tc'ImportItem3) -}
a854133e92ab30a9ba0f3f84a2d68c56
  $tc'ImportItem3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ImportItem"#) -}
567d52cbe03afab3ee3d85160113f4a1
  $tc'ImportRelative :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11598245735220861272##
                   16469726799149719780##
                   Language.Python.Common.AST.$trModule
                   Language.Python.Common.AST.$tc'ImportRelative2
                   1#
                   Language.Python.Common.AST.$tc'ImportRelative1) -}
391a64d60bbbfb4d19ef5d9560294977
  $tc'ImportRelative1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
ce1204b66b39301551a4a471aa51f503
  $tc'ImportRelative2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.Python.Common.AST.$tc'ImportRelative3) -}
d9671131acec6f14c0488e5a96bd1c92
  $tc'ImportRelative3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ImportRelative"#) -}
4d1c31147042af91ea5f74e97f9b0042
  $tc'In :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12142446955434461567##
                   14284293990071110027##
                   Language.Python.Common.AST.$trModule
                   Language.Python.Common.AST.$tc'In1
                   1#
                   Language.Python.Common.AST.$tc'And1) -}
ecc972f9c883cba8f18b175772cbbbb3
  $tc'In1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.Python.Common.AST.$tc'In2) -}
4172bfd1893a7d0b26332de6dc4516b2
  $tc'In2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'In"#) -}
2c566262b22f0b3a3fa76a8cbc3d4db1
  $tc'Int :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4550299133112084380##
                   10842934742411644125##
                   Language.Python.Common.AST.$trModule
                   Language.Python.Common.AST.$tc'Int2
                   1#
                   Language.Python.Common.AST.$tc'Int1) -}
22e227b9e2507d3cf0affbca03066e58
  $tc'Int1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
b7572becfcdccd10a0af8af5aaac0ce6
  $tc'Int2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.Python.Common.AST.$tc'Int3) -}
f7720dd496c9d21bb42370997de88650
  $tc'Int3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Int"#) -}
70462b8b66c96dbdf91390c2d40faac4
  $tc'Invert :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4052248118213404441##
                   7333639380452050352##
                   Language.Python.Common.AST.$trModule
                   Language.Python.Common.AST.$tc'Invert1
                   1#
                   Language.Python.Common.AST.$tc'And1) -}
593951bc3f12cfb888bd9bc6a47b5e6c
  $tc'Invert1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.Python.Common.AST.$tc'Invert2) -}
e6779b0a2174d7b28b9f072528bf4aa1
  $tc'Invert2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Invert"#) -}
7157ce4bf5ca6b48502bbf12d79e5d17
  $tc'Is :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8442515936953505320##
                   16889450084266034705##
                   Language.Python.Common.AST.$trModule
                   Language.Python.Common.AST.$tc'Is1
                   1#
                   Language.Python.Common.AST.$tc'And1) -}
d1697951e982e8419b011d55b4290b20
  $tc'Is1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.Python.Common.AST.$tc'Is2) -}
81a4f0e9ec7a33452245d4dc4d4ef320
  $tc'Is2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Is"#) -}
11efcb79a27cfae1cf9010641c5fbc43
  $tc'IsNot :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   409912744821879526##
                   6283833239574060251##
                   Language.Python.Common.AST.$trModule
                   Language.Python.Common.AST.$tc'IsNot1
                   1#
                   Language.Python.Common.AST.$tc'And1) -}
0f4ead8979b3bd380115d2e47aa532e9
  $tc'IsNot1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.Python.Common.AST.$tc'IsNot2) -}
e20fe3eabeb67f9079456f18219d7c52
  $tc'IsNot2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'IsNot"#) -}
d94e910db7e49efc972ebce491be1496
  $tc'IterFor :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9730970390038797220##
                   3318140265788476589##
                   Language.Python.Common.AST.$trModule
                   Language.Python.Common.AST.$tc'IterFor2
                   1#
                   Language.Python.Common.AST.$tc'IterFor1) -}
36b3fee6f32b24f2d9ba1ed15e247440
  $tc'IterFor1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
e782a30b3e724f1f4177d34a25c589fd
  $tc'IterFor2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.Python.Common.AST.$tc'IterFor3) -}
4d9b8f95d3c63f88070282a8e324a846
  $tc'IterFor3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'IterFor"#) -}
e3cb05212812cd066f22a37743146e04
  $tc'IterIf :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4531960406758664775##
                   12606490021172965394##
                   Language.Python.Common.AST.$trModule
                   Language.Python.Common.AST.$tc'IterIf2
                   1#
                   Language.Python.Common.AST.$tc'IterIf1) -}
a7756ca63db67ecd7e6da6100238beb6
  $tc'IterIf1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
e97afe1793f5ae05cb16471b7bb93676
  $tc'IterIf2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.Python.Common.AST.$tc'IterIf3) -}
1c28b2e228085db57d4dde50490f6345
  $tc'IterIf3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'IterIf"#) -}
bf3166995f30e10157ce4f8495e31d1d
  $tc'Lambda :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5349209409966129906##
                   10617945956327100925##
                   Language.Python.Common.AST.$trModule
                   Language.Python.Common.AST.$tc'Lambda2
                   1#
                   Language.Python.Common.AST.$tc'Lambda1) -}
a42a43742181b8d27e27d464bac920c8
  $tc'Lambda1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
fe23538c73335a6dcdcb58e9371ea46b
  $tc'Lambda2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.Python.Common.AST.$tc'Lambda3) -}
3142e5b2b57f65b4c56f0b7dd4a8cda4
  $tc'Lambda3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Lambda"#) -}
683d8e5422146d5d36fa18948f280e91
  $tc'LeftShiftAssign :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4991681076542857037##
                   1826533650945144767##
                   Language.Python.Common.AST.$trModule
                   Language.Python.Common.AST.$tc'LeftShiftAssign1
                   1#
                   Language.Python.Common.AST.$tc'BinAndAssign1) -}
a12c51a35f28381f7b4b66fbe1de4b76
  $tc'LeftShiftAssign1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.Python.Common.AST.$tc'LeftShiftAssign2) -}
4af933af7b84e740a4a5a336ffabedfe
  $tc'LeftShiftAssign2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'LeftShiftAssign"#) -}
d3a04364166cc148dda7b1b7fd37f6ea
  $tc'LessThan :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14836023316974620566##
                   1574582600140280135##
                   Language.Python.Common.AST.$trModule
                   Language.Python.Common.AST.$tc'LessThan1
                   1#
                   Language.Python.Common.AST.$tc'And1) -}
cb19158871b5c5f36672ab9fa396f2a6
  $tc'LessThan1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.Python.Common.AST.$tc'LessThan2) -}
298379d4e5d2740ec49df3ffb309b408
  $tc'LessThan2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'LessThan"#) -}
609847897c89192bec33201c63956712
  $tc'LessThanEquals :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13400626292673660773##
                   12341413212168144677##
                   Language.Python.Common.AST.$trModule
                   Language.Python.Common.AST.$tc'LessThanEquals1
                   1#
                   Language.Python.Common.AST.$tc'And1) -}
178f2482be111ed1608d20478132dc90
  $tc'LessThanEquals1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.Python.Common.AST.$tc'LessThanEquals2) -}
a7e423c8bda7015f455815fea4f1fe1b
  $tc'LessThanEquals2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'LessThanEquals"#) -}
be1e89c6ac6e1b5c9211cc46ccdd232a
  $tc'List :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8380806994077271769##
                   16206666253419519378##
                   Language.Python.Common.AST.$trModule
                   Language.Python.Common.AST.$tc'List2
                   1#
                   Language.Python.Common.AST.$tc'List1) -}
3493e2271f6ab23414a5b5c1a122e79f
  $tc'List1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
945d83712d0b9b8c614300f3b3d11768
  $tc'List2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.Python.Common.AST.$tc'List3) -}
135952f67e3cee10c9571bfcec2075a3
  $tc'List3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'List"#) -}
6aab039b13d21aa808b0582e4dcc7753
  $tc'ListComp :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16672501566180956155##
                   6752928414979805797##
                   Language.Python.Common.AST.$trModule
                   Language.Python.Common.AST.$tc'ListComp1
                   1#
                   Language.Python.Common.AST.$tc'DictComp1) -}
306c8cd31f6133b9cbaab43d7b5d36cb
  $tc'ListComp1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.Python.Common.AST.$tc'ListComp2) -}
6237e46701b4880c732c53666f75225b
  $tc'ListComp2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ListComp"#) -}
8bdbf8806974ec7e321d8f0f025f126b
  $tc'LongInt :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13474199891619786150##
                   15503781841593460939##
                   Language.Python.Common.AST.$trModule
                   Language.Python.Common.AST.$tc'LongInt1
                   1#
                   Language.Python.Common.AST.$tc'Int1) -}
3c85f89fa07676432c72dc86aaaa6e99
  $tc'LongInt1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.Python.Common.AST.$tc'LongInt2) -}
dc3b44a3efbadfcef9eb0c2e2b458983
  $tc'LongInt2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'LongInt"#) -}
ccf6c0ec3476cc63d21ab64c1cdab8e6
  $tc'MatrixMult :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13932776691602826390##
                   14652327353841156978##
                   Language.Python.Common.AST.$trModule
                   Language.Python.Common.AST.$tc'MatrixMult1
                   1#
                   Language.Python.Common.AST.$tc'And1) -}
4fc4ee2b229df1611b897b303c12eb4e
  $tc'MatrixMult1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.Python.Common.AST.$tc'MatrixMult2) -}
3e7da50cd94c05aaf4eb858b57570507
  $tc'MatrixMult2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'MatrixMult"#) -}
4e524d7ba389e687a75f2f2c2f5d5997
  $tc'MatrixMultAssign :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3926579360182119075##
                   13709559887412589962##
                   Language.Python.Common.AST.$trModule
                   Language.Python.Common.AST.$tc'MatrixMultAssign1
                   1#
                   Language.Python.Common.AST.$tc'BinAndAssign1) -}
2ce6e8c507ddbca360a071ef16d4df8c
  $tc'MatrixMultAssign1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.Python.Common.AST.$tc'MatrixMultAssign2) -}
3d3493020fa840d8c2bbbc32aa18b718
  $tc'MatrixMultAssign2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'MatrixMultAssign"#) -}
a914c262f801483ce8cf4cc00910bb80
  $tc'Minus :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17130991406266143366##
                   10354961600491917234##
                   Language.Python.Common.AST.$trModule
                   Language.Python.Common.AST.$tc'Minus1
                   1#
                   Language.Python.Common.AST.$tc'And1) -}
961d549ce3d7f898a412907baaa39215
  $tc'Minus1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.Python.Common.AST.$tc'Minus2) -}
814385414864d2130bc3297946d0d201
  $tc'Minus2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Minus"#) -}
4d5f7a655df320f8f7a3bcba35ed25f7
  $tc'MinusAssign :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   18358842989902018958##
                   17372201417115742830##
                   Language.Python.Common.AST.$trModule
                   Language.Python.Common.AST.$tc'MinusAssign1
                   1#
                   Language.Python.Common.AST.$tc'BinAndAssign1) -}
68b0c6af30d5b42063e4c6fb4f7048e3
  $tc'MinusAssign1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.Python.Common.AST.$tc'MinusAssign2) -}
46d85b25f681ff8a5470c311b6d6edd1
  $tc'MinusAssign2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'MinusAssign"#) -}
9bd76d5381af6af20a82190576b853a6
  $tc'ModAssign :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10073155533612057762##
                   12714674048523920469##
                   Language.Python.Common.AST.$trModule
                   Language.Python.Common.AST.$tc'ModAssign1
                   1#
                   Language.Python.Common.AST.$tc'BinAndAssign1) -}
5ad5d0fa98248c0b1aca36167818430e
  $tc'ModAssign1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.Python.Common.AST.$tc'ModAssign2) -}
756ed01a5edb362b3196d573ba5bdf80
  $tc'ModAssign2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ModAssign"#) -}
377573d6e07f95bfa7fb7f35fee84dc3
  $tc'Module :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7020293805284629955##
                   12216454884973079271##
                   Language.Python.Common.AST.$trModule
                   Language.Python.Common.AST.$tc'Module2
                   1#
                   Language.Python.Common.AST.$tc'Module1) -}
a276c2744e430ad15e206a0b58853ce8
  $tc'Module1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
42c0e6ad897d2e23333510d0d5850a6d
  $tc'Module2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.Python.Common.AST.$tc'Module3) -}
f0b02dccf591d61f390510e598760474
  $tc'Module3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Module"#) -}
6088c2315c864409c638ff4529a280a6
  $tc'Modulo :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14723425376172931286##
                   8399369569350591426##
                   Language.Python.Common.AST.$trModule
                   Language.Python.Common.AST.$tc'Modulo1
                   1#
                   Language.Python.Common.AST.$tc'And1) -}
f5f2d594c920e50b9cd4b825d2b6cfad
  $tc'Modulo1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.Python.Common.AST.$tc'Modulo2) -}
d400d8bc2e9ec08e842a62253fce7926
  $tc'Modulo2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Modulo"#) -}
3442538e7dbcfcb5b909ce715c5418dc
  $tc'MultAssign :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8255765241186180737##
                   16647306427078154717##
                   Language.Python.Common.AST.$trModule
                   Language.Python.Common.AST.$tc'MultAssign1
                   1#
                   Language.Python.Common.AST.$tc'BinAndAssign1) -}
6cc59519376d0ee3fde73ec25435ae83
  $tc'MultAssign1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.Python.Common.AST.$tc'MultAssign2) -}
2a46c828ddeb3abbb30c28b424d497e1
  $tc'MultAssign2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'MultAssign"#) -}
25bb2c3297178d9fb7650fb293eb9950
  $tc'Multiply :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2287711128107053538##
                   1817110507461026577##
                   Language.Python.Common.AST.$trModule
                   Language.Python.Common.AST.$tc'Multiply1
                   1#
                   Language.Python.Common.AST.$tc'And1) -}
ff89ebbc6c917cd284fc53a829421c63
  $tc'Multiply1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.Python.Common.AST.$tc'Multiply2) -}
6e3c1ddfe3a86dd838106d199f344c48
  $tc'Multiply2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Multiply"#) -}
9a879c3967c4670e239ca7e756869625
  $tc'NonLocal :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15480494467969962720##
                   6420339744396062850##
                   Language.Python.Common.AST.$trModule
                   Language.Python.Common.AST.$tc'NonLocal1
                   1#
                   Language.Python.Common.AST.$tc'Global1) -}
9ef9389cf7ff1c8ffeb15d460e30c929
  $tc'NonLocal1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.Python.Common.AST.$tc'NonLocal2) -}
2d84af24c4991240e3e77f8d9a466d3f
  $tc'NonLocal2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'NonLocal"#) -}
c876684170fcbd41da2113df1309a180
  $tc'None :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6221903460183761158##
                   16204173006165232545##
                   Language.Python.Common.AST.$trModule
                   Language.Python.Common.AST.$tc'None1
                   1#
                   Language.Python.Common.AST.$tc'Ellipsis1) -}
c7488977f2f9ff29e45ff7cc6a800a18
  $tc'None1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.Python.Common.AST.$tc'None2) -}
caa246cb5b0c3f59dfe1b42941cf5191
  $tc'None2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'None"#) -}
0120baa5edfb971eeb6f237e57d40978
  $tc'Not :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7501076649900413630##
                   15827549028179369587##
                   Language.Python.Common.AST.$trModule
                   Language.Python.Common.AST.$tc'Not1
                   1#
                   Language.Python.Common.AST.$tc'And1) -}
4bcac7fadf27382d03222acbf2c1dd0f
  $tc'Not1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.Python.Common.AST.$tc'Not2) -}
4881d24e08b06c1ff0e1bda630737b5b
  $tc'Not2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Not"#) -}
ce064a9de448a5693473792da42676d2
  $tc'NotEquals :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16285836639634312633##
                   6752166327455314714##
                   Language.Python.Common.AST.$trModule
                   Language.Python.Common.AST.$tc'NotEquals1
                   1#
                   Language.Python.Common.AST.$tc'And1) -}
315cbbb4cece99e036e94b267ac35059
  $tc'NotEquals1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.Python.Common.AST.$tc'NotEquals2) -}
54febb19bef03db1884dc0a6b552ea68
  $tc'NotEquals2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'NotEquals"#) -}
e840aebd3b740cd41a9a602744fcbe5f
  $tc'NotEqualsV1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.Python.Common.AST.$tc'NotEqualsV3) -}
4eb6778065284c3d67844ee93320914c
  $tc'NotEqualsV2 :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12604168390338594522##
                   4618024685282555151##
                   Language.Python.Common.AST.$trModule
                   Language.Python.Common.AST.$tc'NotEqualsV1
                   1#
                   Language.Python.Common.AST.$tc'And1) -}
0211aef23a89c8f1b043ad72ec8c4a3a
  $tc'NotEqualsV3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'NotEqualsV2"#) -}
f68a78f9e748b1ef2aea1fd9b8425ba6
  $tc'NotIn :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2770889956338450479##
                   8615526041086746029##
                   Language.Python.Common.AST.$trModule
                   Language.Python.Common.AST.$tc'NotIn1
                   1#
                   Language.Python.Common.AST.$tc'And1) -}
77b62b9117701afd38c803f3f6dc346d
  $tc'NotIn1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.Python.Common.AST.$tc'NotIn2) -}
26943e5115a04fee6858806f3f0c06d1
  $tc'NotIn2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'NotIn"#) -}
4720c4c496aa79bd236b482f0f3a588a
  $tc'Or :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15427825582916954780##
                   6147817565795441522##
                   Language.Python.Common.AST.$trModule
                   Language.Python.Common.AST.$tc'Or1
                   1#
                   Language.Python.Common.AST.$tc'And1) -}
d4f89b430baa06388550416b8dd7fecb
  $tc'Or1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.Python.Common.AST.$tc'Or2) -}
c8ed75d814c2a3abd7be161f0cf85b74
  $tc'Or2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Or"#) -}
6f5e650cca76c34cbc7b76123e505dde
  $tc'Param :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8634461054507477904##
                   14044928104143071787##
                   Language.Python.Common.AST.$trModule
                   Language.Python.Common.AST.$tc'Param2
                   1#
                   Language.Python.Common.AST.$tc'Param1) -}
8745f0e855b5899ce41adebd5b022dec
  $tc'Param1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
62dffaeacfde03785d6f0814a7349c19
  $tc'Param2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.Python.Common.AST.$tc'Param3) -}
3c7dae886475cf32d3817bb5d122b1d3
  $tc'Param3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Param"#) -}
70720d67c734afb1836d2fa10b54c389
  $tc'ParamTuple :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   678265754710699189##
                   16994009995723562587##
                   Language.Python.Common.AST.$trModule
                   Language.Python.Common.AST.$tc'ParamTuple2
                   1#
                   Language.Python.Common.AST.$tc'ParamTuple1) -}
a859252170b2cb1c52df86ff9fa1a96d
  $tc'ParamTuple1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
84b2ae30c855078850d6263cdcbf3cfd
  $tc'ParamTuple2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.Python.Common.AST.$tc'ParamTuple3) -}
d44e8f8ac15938f45975acf66446bc87
  $tc'ParamTuple3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ParamTuple"#) -}
eba29c057bd6e887018be7d0a0a9dcf9
  $tc'ParamTupleName :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   696394020788210309##
                   5816724673580246886##
                   Language.Python.Common.AST.$trModule
                   Language.Python.Common.AST.$tc'ParamTupleName2
                   1#
                   Language.Python.Common.AST.$tc'ParamTupleName1) -}
ca9f3ec360a9dd6f5e7d6aa339088755
  $tc'ParamTupleName1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
c831759f69334c47beb6f6ebd6760274
  $tc'ParamTupleName2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.Python.Common.AST.$tc'ParamTupleName3) -}
7ad5c3225e2d205189d2ae727fe377ee
  $tc'ParamTupleName3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ParamTupleName"#) -}
40f0b41788ea2d6975775e63559dea5f
  $tc'Paren :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1897678347976033665##
                   11848602940750503471##
                   Language.Python.Common.AST.$trModule
                   Language.Python.Common.AST.$tc'Paren1
                   1#
                   Language.Python.Common.AST.$tc'Await1) -}
42a10d5bca30d4accd3d688f817ddd90
  $tc'Paren1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.Python.Common.AST.$tc'Paren2) -}
37a345583e9208236c1f49db04979b88
  $tc'Paren2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Paren"#) -}
f4a731d9c5784104e617b42029bc1e5b
  $tc'Pass :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4633656369173806861##
                   10458149239238902428##
                   Language.Python.Common.AST.$trModule
                   Language.Python.Common.AST.$tc'Pass1
                   1#
                   Language.Python.Common.AST.$tc'Break1) -}
df3abb1424ca01390ec05c67ad696fb2
  $tc'Pass1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.Python.Common.AST.$tc'Pass2) -}
7c68442b976dffd5f7702fecfc5c52cc
  $tc'Pass2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Pass"#) -}
1f98f05fc9b2d551fdf70b74faadb5c7
  $tc'Plus :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15805300781277262627##
                   3176151726234171312##
                   Language.Python.Common.AST.$trModule
                   Language.Python.Common.AST.$tc'Plus1
                   1#
                   Language.Python.Common.AST.$tc'And1) -}
d9186ea165d72755aee19283977a61d1
  $tc'Plus1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.Python.Common.AST.$tc'Plus2) -}
30973fc19c3daded4f8ba2186e6bb52c
  $tc'Plus2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Plus"#) -}
a51a1cf72d644ff58fbff9eca1db26aa
  $tc'PlusAssign :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   893129570753058576##
                   2142006771699111717##
                   Language.Python.Common.AST.$trModule
                   Language.Python.Common.AST.$tc'PlusAssign1
                   1#
                   Language.Python.Common.AST.$tc'BinAndAssign1) -}
e7d306c5404c07772b4ed0d480c0383b
  $tc'PlusAssign1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.Python.Common.AST.$tc'PlusAssign2) -}
64fdfba19df06c10b35f06b698f6e706
  $tc'PlusAssign2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'PlusAssign"#) -}
690821511cd2a2419502c3c286687982
  $tc'PowAssign :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10373365566799719863##
                   16544736992448479901##
                   Language.Python.Common.AST.$trModule
                   Language.Python.Common.AST.$tc'PowAssign1
                   1#
                   Language.Python.Common.AST.$tc'BinAndAssign1) -}
77e9db5c9e6da726c7bb22266b3c2331
  $tc'PowAssign1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.Python.Common.AST.$tc'PowAssign2) -}
b04558690a8a3d5cfe92851812f9c9c7
  $tc'PowAssign2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'PowAssign"#) -}
646cd4c601b78c215ddc0c432ab4d84e
  $tc'Print :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2223242392590143699##
                   13592523101863788384##
                   Language.Python.Common.AST.$trModule
                   Language.Python.Common.AST.$tc'Print2
                   1#
                   Language.Python.Common.AST.$tc'Print1) -}
018adc576955d4688bbe1ceea8e210c8
  $tc'Print1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
73d04cd55f6a20853b2fd433165f778e
  $tc'Print2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.Python.Common.AST.$tc'Print3) -}
45169275e11ef99b667271c657124ece
  $tc'Print3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Print"#) -}
249ec2d09d77f4eb92abf49fe6ecf0dd
  $tc'Raise :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8050374556870867609##
                   8271505935005125758##
                   Language.Python.Common.AST.$trModule
                   Language.Python.Common.AST.$tc'Raise2
                   1#
                   Language.Python.Common.AST.$tc'Raise1) -}
e6112bfc0875b14e5cdb7c3afa50f6db
  $tc'Raise1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
0b9179c22a59f9add79a5894b94bd8d4
  $tc'Raise2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.Python.Common.AST.$tc'Raise3) -}
76fb67aef1f9684e353cb6f69470699c
  $tc'Raise3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Raise"#) -}
5112d3f49dbb73b62dcce9c877fe52cf
  $tc'RaiseV1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
cffcdc1b051c4db91f8299c7eec02cef
  $tc'RaiseV2 :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13362826326517686774##
                   11639226814167346283##
                   Language.Python.Common.AST.$trModule
                   Language.Python.Common.AST.$tc'RaiseV5
                   1#
                   Language.Python.Common.AST.$tc'RaiseV1) -}
7cf06b0fe2476b68bf8a64688afe599a
  $tc'RaiseV3 :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6476241143127471754##
                   7378155450621617211##
                   Language.Python.Common.AST.$trModule
                   Language.Python.Common.AST.$tc'RaiseV8
                   1#
                   Language.Python.Common.AST.$tc'RaiseV7) -}
b14fe555c8e7b14762962e0ebd12ab4f
  $tc'RaiseV5 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.Python.Common.AST.$tc'RaiseV6) -}
7dd4315e2ef7aec3217a9a980f06bb66
  $tc'RaiseV6 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'RaiseV2"#) -}
3005758f877025f4c91c734e5adbbdd7
  $tc'RaiseV7 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
a4006ffa38e03c2dab5f69fabbe7bce6
  $tc'RaiseV8 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.Python.Common.AST.$tc'RaiseV9) -}
8c62269099964ad5ce1cfd022faa297c
  $tc'RaiseV9 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'RaiseV3"#) -}
11b32def5d6f663dc4a05e4f5286ba8a
  $tc'Return :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   219670558718742119##
                   11571933772651456586##
                   Language.Python.Common.AST.$trModule
                   Language.Python.Common.AST.$tc'Return2
                   1#
                   Language.Python.Common.AST.$tc'Return1) -}
4604c40319817173d9548b5564c9c06d
  $tc'Return1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
662d279ff068c88d3b009d073d419404
  $tc'Return2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.Python.Common.AST.$tc'Return3) -}
376157dd52c3f92834c3ba40498aa60c
  $tc'Return3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Return"#) -}
ba4efa987e44129436f745cfcea6776c
  $tc'RightShiftAssign :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11949560879739658368##
                   13122581242417447418##
                   Language.Python.Common.AST.$trModule
                   Language.Python.Common.AST.$tc'RightShiftAssign1
                   1#
                   Language.Python.Common.AST.$tc'BinAndAssign1) -}
26e27273e9a6d082a1ac27609a526779
  $tc'RightShiftAssign1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.Python.Common.AST.$tc'RightShiftAssign2) -}
5d70d4f70975a0432a04cfb99771b16c
  $tc'RightShiftAssign2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'RightShiftAssign"#) -}
43a7f30fea9d0b37d995f75c02a8193c
  $tc'Set :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8789651702867210680##
                   12704493351193275142##
                   Language.Python.Common.AST.$trModule
                   Language.Python.Common.AST.$tc'Set1
                   1#
                   Language.Python.Common.AST.$tc'List1) -}
69304ba25bc739758a8a149846583c40
  $tc'Set1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.Python.Common.AST.$tc'Set2) -}
0edac4e88f13144836e7661097aa591c
  $tc'Set2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Set"#) -}
9d063dcedcdb431e39b5e3c6b5c25f40
  $tc'SetComp :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17268390530629946972##
                   1020912603296425465##
                   Language.Python.Common.AST.$trModule
                   Language.Python.Common.AST.$tc'SetComp1
                   1#
                   Language.Python.Common.AST.$tc'DictComp1) -}
8294dd35756b989a69e80ed1ee36e50b
  $tc'SetComp1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.Python.Common.AST.$tc'SetComp2) -}
2772d9e607df588a349065acd1584ae7
  $tc'SetComp2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'SetComp"#) -}
8e7035bf81f4132a2d8c9849863dcfd9
  $tc'ShiftLeft :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13863252232384511317##
                   17391433093028817960##
                   Language.Python.Common.AST.$trModule
                   Language.Python.Common.AST.$tc'ShiftLeft1
                   1#
                   Language.Python.Common.AST.$tc'And1) -}
a23648b8d3f3428493d6d68c6f9b6d53
  $tc'ShiftLeft1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.Python.Common.AST.$tc'ShiftLeft2) -}
64f5ee336ed980270ed1a6c0bbed58e6
  $tc'ShiftLeft2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ShiftLeft"#) -}
defe3ba5de065ba81a052ae480e5f267
  $tc'ShiftRight :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10490498313522759766##
                   12148764052300129092##
                   Language.Python.Common.AST.$trModule
                   Language.Python.Common.AST.$tc'ShiftRight1
                   1#
                   Language.Python.Common.AST.$tc'And1) -}
3bec28b2a29466a3a72c624894fde5c6
  $tc'ShiftRight1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.Python.Common.AST.$tc'ShiftRight2) -}
37e2b9fa9ffd08b8db6a6b33d613bf84
  $tc'ShiftRight2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ShiftRight"#) -}
46d1a7401cf9d9ff4b5edecfc81c6afc
  $tc'SliceEllipsis :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1386404478643100725##
                   4083833105255494875##
                   Language.Python.Common.AST.$trModule
                   Language.Python.Common.AST.$tc'SliceEllipsis2
                   1#
                   Language.Python.Common.AST.$tc'SliceEllipsis1) -}
8f7b28369eed8ee6966a4d0cb7dd1c42
  $tc'SliceEllipsis1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
6ae01e151377e8fcd7657213e8e5a176
  $tc'SliceEllipsis2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.Python.Common.AST.$tc'SliceEllipsis3) -}
808d6d74e04b3f42a4097e90f14b5b70
  $tc'SliceEllipsis3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'SliceEllipsis"#) -}
244b888ad9e01ebc3cf1b99ee05b68c8
  $tc'SliceExpr :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5436810716061442959##
                   11453608833525600196##
                   Language.Python.Common.AST.$trModule
                   Language.Python.Common.AST.$tc'SliceExpr2
                   1#
                   Language.Python.Common.AST.$tc'SliceExpr1) -}
66ce55318e2b2e34ca7f771c546011fb
  $tc'SliceExpr1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
a1b6c182bd4e47cbc1fac5964a4336c0
  $tc'SliceExpr2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.Python.Common.AST.$tc'SliceExpr3) -}
fcd3cc4f2a5a5ebaa6ab4e20c530fb77
  $tc'SliceExpr3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'SliceExpr"#) -}
9a92d8959f9d8656ddc1f358a7a22fe9
  $tc'SliceProper :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9879089390958559540##
                   45855828575907891##
                   Language.Python.Common.AST.$trModule
                   Language.Python.Common.AST.$tc'SliceProper2
                   1#
                   Language.Python.Common.AST.$tc'SliceProper1) -}
934719c4bca0f1e5f147397d8b3b44ee
  $tc'SliceProper1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
8de0f5461e0dc02e18abe94c4b49941e
  $tc'SliceProper2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.Python.Common.AST.$tc'SliceProper3) -}
163d5f4b73baf1333019bbf4c04663aa
  $tc'SliceProper3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'SliceProper"#) -}
2a375cfd3bf8eb559266b8a2a427d937
  $tc'SlicedExpr :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6966738241243673887##
                   8699753570965308592##
                   Language.Python.Common.AST.$trModule
                   Language.Python.Common.AST.$tc'SlicedExpr2
                   1#
                   Language.Python.Common.AST.$tc'SlicedExpr1) -}
00e4bdafb851d0d168a3f2aee050cbf0
  $tc'SlicedExpr1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
cfd5659c075e3949cc8a83e00d15d119
  $tc'SlicedExpr2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.Python.Common.AST.$tc'SlicedExpr3) -}
ce0a4b07950763531bd65b3a18cf150a
  $tc'SlicedExpr3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'SlicedExpr"#) -}
6b59fe2f0d3ca7861ddc276882e9861e
  $tc'Starred :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10680204272103412810##
                   3330339529424455668##
                   Language.Python.Common.AST.$trModule
                   Language.Python.Common.AST.$tc'Starred1
                   1#
                   Language.Python.Common.AST.$tc'Await1) -}
d2e4ba866722aee4ae47f5059a3bf624
  $tc'Starred1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.Python.Common.AST.$tc'Starred2) -}
13b5622316857ded5eb97241b7d415f7
  $tc'Starred2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Starred"#) -}
eca6c0391395ef0b5158f589aa1bc103
  $tc'StmtExpr :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10895898766766332000##
                   9182135825834454506##
                   Language.Python.Common.AST.$trModule
                   Language.Python.Common.AST.$tc'StmtExpr2
                   1#
                   Language.Python.Common.AST.$tc'StmtExpr1) -}
f45264e7fbaf70055a2a929062f5f68b
  $tc'StmtExpr1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
602edd6e4dc715c22cce1c3e04003577
  $tc'StmtExpr2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.Python.Common.AST.$tc'StmtExpr3) -}
e8316de95b476fea2854bf72631898f4
  $tc'StmtExpr3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'StmtExpr"#) -}
2929cbf78e79d6f25f040922314cc26e
  $tc'StringConversion :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15320883804760666340##
                   14623882379997340324##
                   Language.Python.Common.AST.$trModule
                   Language.Python.Common.AST.$tc'StringConversion1
                   1#
                   Language.Python.Common.AST.$tc'Await1) -}
ac83bdabbe6071eec7e5f497ed4c2b4a
  $tc'StringConversion1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.Python.Common.AST.$tc'StringConversion2) -}
2577d7d4f7804b8abc37aa5e62a7aeeb
  $tc'StringConversion2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'StringConversion"#) -}
be2365851e4f488db8e607ac3b2e2a44
  $tc'Strings :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9636481579552722628##
                   16196575928070696729##
                   Language.Python.Common.AST.$trModule
                   Language.Python.Common.AST.$tc'Strings1
                   1#
                   Language.Python.Common.AST.$tc'ByteStrings1) -}
4315b01b4f08a84d42ee55cdd9b35998
  $tc'Strings1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.Python.Common.AST.$tc'Strings2) -}
1a2664aa3e3c581b307e5419a0127327
  $tc'Strings2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Strings"#) -}
d5cce79199df40a35400898ed5682fbd
  $tc'Subscript :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   104160924573796644##
                   11412995323037181465##
                   Language.Python.Common.AST.$trModule
                   Language.Python.Common.AST.$tc'Subscript2
                   1#
                   Language.Python.Common.AST.$tc'Subscript1) -}
94a184ef1ad03c338c90650d5ca34a78
  $tc'Subscript1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
9cb57d8df0bc77d97c72c56d7bffcd23
  $tc'Subscript2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.Python.Common.AST.$tc'Subscript3) -}
ebf1e6a5ae42d239f9cd0c5c0167ead8
  $tc'Subscript3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Subscript"#) -}
2724175b4a610fd9f3ee40b310168ee3
  $tc'Try :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11068796907441316431##
                   2542811054864367882##
                   Language.Python.Common.AST.$trModule
                   Language.Python.Common.AST.$tc'Try2
                   1#
                   Language.Python.Common.AST.$tc'Try1) -}
9cdd046cf24ece4af5e48a885c37c977
  $tc'Try1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
5094981a753adbec41c4825cfd0ff1e7
  $tc'Try2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.Python.Common.AST.$tc'Try3) -}
9847041261bed808be16cde352e4f6c2
  $tc'Try3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Try"#) -}
ce319a67381e2508d352413a520dfac5
  $tc'Tuple :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6813967220943826866##
                   14794160187912406906##
                   Language.Python.Common.AST.$trModule
                   Language.Python.Common.AST.$tc'Tuple1
                   1#
                   Language.Python.Common.AST.$tc'List1) -}
deff9ae44af8d0be15478bf2d101123d
  $tc'Tuple1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.Python.Common.AST.$tc'Tuple2) -}
de012415df2ea1f772152a7c55f6721b
  $tc'Tuple2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Tuple"#) -}
3e13716da6edce81f14c2c4b07a038d9
  $tc'UnPackTuple :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1401826216541444285##
                   3909255666769248464##
                   Language.Python.Common.AST.$trModule
                   Language.Python.Common.AST.$tc'UnPackTuple2
                   1#
                   Language.Python.Common.AST.$tc'UnPackTuple1) -}
765690e87ef7a519eb2f3b1ff2af4548
  $tc'UnPackTuple1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
892ff5438ebfb28bf015a4193bfd5491
  $tc'UnPackTuple2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.Python.Common.AST.$tc'UnPackTuple3) -}
988df27636610be09f964c9aca0426f5
  $tc'UnPackTuple3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'UnPackTuple"#) -}
0e998df238f765d8df70ed9fbf815bb6
  $tc'UnaryOp :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   256834618768364060##
                   13695681076046339623##
                   Language.Python.Common.AST.$trModule
                   Language.Python.Common.AST.$tc'UnaryOp2
                   1#
                   Language.Python.Common.AST.$tc'UnaryOp1) -}
256021480183fac68ec404acab542cfc
  $tc'UnaryOp1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
720b0e572ed9478179029c5c47f4ce7b
  $tc'UnaryOp2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.Python.Common.AST.$tc'UnaryOp3) -}
3d6ad007043c4f0663504f1b2f4c1e08
  $tc'UnaryOp3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'UnaryOp"#) -}
6fcff4c44bd67459089709cd7065bb1a
  $tc'UnicodeStrings :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8156277181869189476##
                   10195999054481074254##
                   Language.Python.Common.AST.$trModule
                   Language.Python.Common.AST.$tc'UnicodeStrings1
                   1#
                   Language.Python.Common.AST.$tc'ByteStrings1) -}
d4f9b2431eb9a8cca707d54a28630a21
  $tc'UnicodeStrings1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.Python.Common.AST.$tc'UnicodeStrings2) -}
e99ffb218f146a54c641c59bd8932309
  $tc'UnicodeStrings2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'UnicodeStrings"#) -}
edca4e536b56777183454e2f8d15c373
  $tc'Var :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17769448390472215766##
                   13850137013922225013##
                   Language.Python.Common.AST.$trModule
                   Language.Python.Common.AST.$tc'Var2
                   1#
                   Language.Python.Common.AST.$tc'Var1) -}
a193309ed234be58f2492ce3575ccde6
  $tc'Var1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
fa2406f736f4fd766d5dd52dd08c17ed
  $tc'Var2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.Python.Common.AST.$tc'Var3) -}
2f9a37df26bf28def14babb5a979d7a2
  $tc'Var3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Var"#) -}
05255983b96659c384a1d69eb0b214c7
  $tc'VarArgsKeyword :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17364711783933400483##
                   6653503361639601726##
                   Language.Python.Common.AST.$trModule
                   Language.Python.Common.AST.$tc'VarArgsKeyword2
                   1#
                   Language.Python.Common.AST.$tc'VarArgsKeyword1) -}
9d6548996d994d69417777bf3d9b15ed
  $tc'VarArgsKeyword1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
e974ad9187d0c394832fcc79c2b098f5
  $tc'VarArgsKeyword2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.Python.Common.AST.$tc'VarArgsKeyword3) -}
c91bed933d1ea25aee49a61ad7559f94
  $tc'VarArgsKeyword3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'VarArgsKeyword"#) -}
49f9fda7fc9566edeb886ac8170a31b1
  $tc'VarArgsPos :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3197254746954003848##
                   7474680466064754532##
                   Language.Python.Common.AST.$trModule
                   Language.Python.Common.AST.$tc'VarArgsPos1
                   1#
                   Language.Python.Common.AST.$tc'VarArgsKeyword1) -}
fc33fceb988e7a66155b819244c4c2dc
  $tc'VarArgsPos1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.Python.Common.AST.$tc'VarArgsPos2) -}
dff3ace4ad55825b0762876810f6f7a4
  $tc'VarArgsPos2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'VarArgsPos"#) -}
6623502793541af878e2532ec86c4d78
  $tc'While :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1079862613009702363##
                   17444179874396195725##
                   Language.Python.Common.AST.$trModule
                   Language.Python.Common.AST.$tc'While2
                   1#
                   Language.Python.Common.AST.$tc'While1) -}
62b21561908c9c1cfc8de9e63d48849b
  $tc'While1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
268bf3295add30660595973b8bd4f55a
  $tc'While2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.Python.Common.AST.$tc'While3) -}
d6c8377465ad70ba72b9ff7542f0d586
  $tc'While3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'While"#) -}
3f6d7dbd0177050971f6a5979f9f8db4
  $tc'With :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16964640978854502118##
                   18115220595547084764##
                   Language.Python.Common.AST.$trModule
                   Language.Python.Common.AST.$tc'With2
                   1#
                   Language.Python.Common.AST.$tc'With1) -}
a7182b5e1a9071e44ec801b8d0a3fc2d
  $tc'With1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
5dfcd38eb07849796f4ad456f18f12ff
  $tc'With2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.Python.Common.AST.$tc'With3) -}
9b4ef67145686f15901521b0b472a0e6
  $tc'With3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'With"#) -}
202af01e603560a0395572fb7b3c7711
  $tc'Xor :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   81165221513559746##
                   7873254153280666220##
                   Language.Python.Common.AST.$trModule
                   Language.Python.Common.AST.$tc'Xor1
                   1#
                   Language.Python.Common.AST.$tc'And1) -}
06cc487f94ff5a059abf55018a97327d
  $tc'Xor1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.Python.Common.AST.$tc'Xor2) -}
5d41b0e22f757fa3376dff4d88ce37c0
  $tc'Xor2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Xor"#) -}
85c14e73a812ac5386639f47ceba612f
  $tc'Yield :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5612871828477594473##
                   7797723885424697817##
                   Language.Python.Common.AST.$trModule
                   Language.Python.Common.AST.$tc'Yield2
                   1#
                   Language.Python.Common.AST.$tc'Yield1) -}
d8e6cc8a657b6d2ae9caf0877f5b0326
  $tc'Yield1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
1312b45682021a798071134169728c5a
  $tc'Yield2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.Python.Common.AST.$tc'Yield3) -}
ac8433eecbbe514dbeeceeed2c4a0685
  $tc'Yield3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Yield"#) -}
0cc05fbbbc6abfbb2832ddf1f4b3bd6a
  $tc'YieldExpr :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8042160887502975297##
                   16778728770383634957##
                   Language.Python.Common.AST.$trModule
                   Language.Python.Common.AST.$tc'YieldExpr2
                   1#
                   Language.Python.Common.AST.$tc'YieldExpr1) -}
4d9820a93589043bff39ff2de6961c48
  $tc'YieldExpr1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
f3ecb1794dcf11ee630565519e2e2e8c
  $tc'YieldExpr2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.Python.Common.AST.$tc'YieldExpr3) -}
bc2262f0b9ac2be16417366f47f2a0e7
  $tc'YieldExpr3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'YieldExpr"#) -}
9b190e18937487425e03d965cc8433e0
  $tc'YieldFrom :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   18158677474818038813##
                   9941781025715253631##
                   Language.Python.Common.AST.$trModule
                   Language.Python.Common.AST.$tc'YieldFrom2
                   1#
                   Language.Python.Common.AST.$tc'YieldFrom1) -}
961873f531042ed160f21e498a384bb2
  $tc'YieldFrom1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
3b3a018028ab5656fabb648395e14f6c
  $tc'YieldFrom2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.Python.Common.AST.$tc'YieldFrom3) -}
a9ec6a4052c54928974a6fd6cf1865aa
  $tc'YieldFrom3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'YieldFrom"#) -}
545ec3f3e66660e256fe5f4f5a90d3d0
  $tcAnnotated :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17202372292511142127##
                   4628832022866281690##
                   Language.Python.Common.AST.$trModule
                   Language.Python.Common.AST.$tcAnnotated2
                   0#
                   Language.Python.Common.AST.$tcAnnotated1) -}
9a0de3e0caf4a3d343ce992113cdbe57
  $tcAnnotated1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
409ef701ff2b5b9a896c378d14baff46
  $tcAnnotated2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.Python.Common.AST.$tcAnnotated3) -}
5be8185364ea36e3559d09184acc3b19
  $tcAnnotated3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Annotated"#) -}
0865897f68131cc7497cff63f714acb1
  $tcArgument :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12122609781692249436##
                   11889333535317683462##
                   Language.Python.Common.AST.$trModule
                   Language.Python.Common.AST.$tcArgument1
                   0#
                   GHC.Types.krep$*Arr*) -}
dfe4bedf634cc71b17e0f5cbf8ba60fe
  $tcArgument1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.Python.Common.AST.$tcArgument2) -}
1307af937cde19853dd2212e4edc281a
  $tcArgument2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Argument"#) -}
3247835100947abd46da44681de5a77d
  $tcAssignOp :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13764614873011673546##
                   12021813562253942580##
                   Language.Python.Common.AST.$trModule
                   Language.Python.Common.AST.$tcAssignOp1
                   0#
                   GHC.Types.krep$*Arr*) -}
170e337b712ec93d9ccbaa672de6ce38
  $tcAssignOp1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.Python.Common.AST.$tcAssignOp2) -}
e2acf95703cbaab3dbb945fe22c14eee
  $tcAssignOp2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("AssignOp"#) -}
15f2b807069acac00ef27abe6cb75489
  $tcCompFor :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6080231020298658597##
                   11894485551313816511##
                   Language.Python.Common.AST.$trModule
                   Language.Python.Common.AST.$tcCompFor1
                   0#
                   GHC.Types.krep$*Arr*) -}
23a77476e2ce1656d01991f21e682572
  $tcCompFor1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.Python.Common.AST.$tcCompFor2) -}
2828feb39b2c9f19296ba21ec62ef6d3
  $tcCompFor2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("CompFor"#) -}
3448da03dcd71b8ee7284059b4fa7311
  $tcCompIf :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11440816723277832960##
                   3727855433885124127##
                   Language.Python.Common.AST.$trModule
                   Language.Python.Common.AST.$tcCompIf1
                   0#
                   GHC.Types.krep$*Arr*) -}
73866a1e7fe0d6c4ffc56c3f80493021
  $tcCompIf1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.Python.Common.AST.$tcCompIf2) -}
e5d555fd09d0af0eed6fd01de04adbc9
  $tcCompIf2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("CompIf"#) -}
e945d77c10f243d25cb56eb6ffd9210a
  $tcCompIter :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8911918354333159942##
                   2320376509614388691##
                   Language.Python.Common.AST.$trModule
                   Language.Python.Common.AST.$tcCompIter1
                   0#
                   GHC.Types.krep$*Arr*) -}
16f7fc541ee8bf2b7c4e553225c2aaf1
  $tcCompIter1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.Python.Common.AST.$tcCompIter2) -}
1afe6aef86335d5a257fb71bf0532256
  $tcCompIter2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("CompIter"#) -}
90b48e1b14a07647fc5fa4d692e3c8f4
  $tcComprehension :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15394765488342463681##
                   8649136258008378970##
                   Language.Python.Common.AST.$trModule
                   Language.Python.Common.AST.$tcComprehension1
                   0#
                   GHC.Types.krep$*Arr*) -}
6f3b8f6909b887d4fe0f6302b7645d89
  $tcComprehension1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.Python.Common.AST.$tcComprehension2) -}
f8872dd82d0f99a63084110b19382078
  $tcComprehension2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Comprehension"#) -}
1debe696dcd9d0de73726a4280b55445
  $tcComprehensionExpr :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2088448333609907069##
                   6154448672430212656##
                   Language.Python.Common.AST.$trModule
                   Language.Python.Common.AST.$tcComprehensionExpr1
                   0#
                   GHC.Types.krep$*Arr*) -}
4c0b242427b181ff61c81cde2cf7aa16
  $tcComprehensionExpr1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.Python.Common.AST.$tcComprehensionExpr2) -}
54e732249621c457c406d8e457302e36
  $tcComprehensionExpr2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ComprehensionExpr"#) -}
04d1ef227ce24dd36b41d3218741532f
  $tcDecorator :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13246240914903781432##
                   13356469711918197383##
                   Language.Python.Common.AST.$trModule
                   Language.Python.Common.AST.$tcDecorator1
                   0#
                   GHC.Types.krep$*Arr*) -}
eb4de23a2609b9fc31510bd7ac671070
  $tcDecorator1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.Python.Common.AST.$tcDecorator2) -}
45123b1428444379ff6e617aca898562
  $tcDecorator2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Decorator"#) -}
c03275dbdf06f832caa9b003ba323d7e
  $tcDictKeyDatumList :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16153218616785896642##
                   5440022984144751669##
                   Language.Python.Common.AST.$trModule
                   Language.Python.Common.AST.$tcDictKeyDatumList1
                   0#
                   GHC.Types.krep$*Arr*) -}
56e4cc43f12d5a74852c7ae219588d4c
  $tcDictKeyDatumList1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.Python.Common.AST.$tcDictKeyDatumList2) -}
e4489aca618ac3b75a1526f517233d15
  $tcDictKeyDatumList2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("DictKeyDatumList"#) -}
48050025268ffd3c42f4d6c6a9c8dcd4
  $tcExceptClause :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2721824131768232338##
                   10605195192644708219##
                   Language.Python.Common.AST.$trModule
                   Language.Python.Common.AST.$tcExceptClause1
                   0#
                   GHC.Types.krep$*Arr*) -}
9714d6acdeb1d11a681c70a8b31747ba
  $tcExceptClause1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.Python.Common.AST.$tcExceptClause2) -}
9da11ffa90587a0e37ba53476aa1c8dd
  $tcExceptClause2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ExceptClause"#) -}
b68649ff0c8561d5bbab5c7a6a08c4bf
  $tcExpr :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1147406964965894738##
                   11316846573964050704##
                   Language.Python.Common.AST.$trModule
                   Language.Python.Common.AST.$tcExpr1
                   0#
                   GHC.Types.krep$*Arr*) -}
55cdfa68ca90c811e710b6bdbc1c2b6c
  $tcExpr1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.Python.Common.AST.$tcExpr2) -}
2acdf55960401ceea5466f3e9000a875
  $tcExpr2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Expr"#) -}
9b18fb88f386af0e0735d8592363f93d
  $tcFromItem :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10135331783013307780##
                   4299251386509738820##
                   Language.Python.Common.AST.$trModule
                   Language.Python.Common.AST.$tcFromItem1
                   0#
                   GHC.Types.krep$*Arr*) -}
6ac0311be695f6cea327a5a3ddfa061b
  $tcFromItem1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.Python.Common.AST.$tcFromItem2) -}
6d15decf89bfdb7253ae14164eec7f82
  $tcFromItem2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("FromItem"#) -}
de2ea9f6a9bbb7e352a65cec7c0374d4
  $tcFromItems :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4465927397584623256##
                   16038499195478416996##
                   Language.Python.Common.AST.$trModule
                   Language.Python.Common.AST.$tcFromItems1
                   0#
                   GHC.Types.krep$*Arr*) -}
f609188d3b44f1a0f2a7be6a68585fe8
  $tcFromItems1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.Python.Common.AST.$tcFromItems2) -}
5f83182f2dd31c2a02db1705d50cb26a
  $tcFromItems2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("FromItems"#) -}
50ed594b1a0748ebc30be22441035394
  $tcHandler :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4549164774891116280##
                   11149423908520546248##
                   Language.Python.Common.AST.$trModule
                   Language.Python.Common.AST.$tcHandler1
                   0#
                   GHC.Types.krep$*Arr*) -}
2fefee63455e6b66c810cb183aedb031
  $tcHandler1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.Python.Common.AST.$tcHandler2) -}
b7f8b91dfc00b3030fbcf39d8a9c89c3
  $tcHandler2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Handler"#) -}
db847eeea15bb85115cfb59784859c15
  $tcIdent :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4178918868776072306##
                   7904093417031114094##
                   Language.Python.Common.AST.$trModule
                   Language.Python.Common.AST.$tcIdent1
                   0#
                   GHC.Types.krep$*Arr*) -}
99831534095cf62e57a39cf6f4586135
  $tcIdent1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.Python.Common.AST.$tcIdent2) -}
f78858c87a2a89976d0671c63003305f
  $tcIdent2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Ident"#) -}
ffc0c9c5ca9dd4a31b81a77d8b137836
  $tcImportItem :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12057246179526076655##
                   11074786652000555012##
                   Language.Python.Common.AST.$trModule
                   Language.Python.Common.AST.$tcImportItem1
                   0#
                   GHC.Types.krep$*Arr*) -}
2d3900a3727e3a05641156018421c836
  $tcImportItem1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.Python.Common.AST.$tcImportItem2) -}
f519ceb0f961d446ebcf2e585be26776
  $tcImportItem2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ImportItem"#) -}
73cea23c8e0f086e19160b6c962008e1
  $tcImportRelative :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6804850529258658464##
                   18227307076689424416##
                   Language.Python.Common.AST.$trModule
                   Language.Python.Common.AST.$tcImportRelative1
                   0#
                   GHC.Types.krep$*Arr*) -}
adc56d92048e295bc778d1525e07fc99
  $tcImportRelative1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.Python.Common.AST.$tcImportRelative2) -}
f5772e8fce98cc0157ceb93deba66346
  $tcImportRelative2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ImportRelative"#) -}
39c8bf2b838c49541761d9210e309c16
  $tcModule :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2398960698968220578##
                   16185381389637862158##
                   Language.Python.Common.AST.$trModule
                   Language.Python.Common.AST.$tcModule1
                   0#
                   GHC.Types.krep$*Arr*) -}
37c03f7248b3c07894fdb4e04cf2885b
  $tcModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.Python.Common.AST.$tcModule2) -}
fd13ebb787bed6486d433a1e698a3ee8
  $tcModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Module"#) -}
ca564822ea2f8d655905c0d8fbf4f881
  $tcOp :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3990261431762444287##
                   16954653035293550001##
                   Language.Python.Common.AST.$trModule
                   Language.Python.Common.AST.$tcOp1
                   0#
                   GHC.Types.krep$*Arr*) -}
6fc507c124d3eb494749370b09480a36
  $tcOp1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Language.Python.Common.AST.$tcOp2) -}
805529b0944221d6cb2e45b628863d69
  $tcOp2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Op"#) -}
5edf20a1ba88b6d7861416935bb5a42b
  $tcParamTuple :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17012758104538018182##
                   7406008632732611318##
                   Language.Python.Common.AST.$trModule
                   Language.Python.Common.AST.$tcParamTuple1
                   0#
                   GHC.Types.krep$*Arr*) -}
544509035b2f3b98478726fdcff2117a
  $tcParamTuple1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.Python.Common.AST.$tcParamTuple2) -}
9dce86e53ea41d9562fa1deaac0792fc
  $tcParamTuple2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ParamTuple"#) -}
7e94d50d4e446a76b6151c4008def58f
  $tcParameter :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3688376214353372634##
                   18105998702967587122##
                   Language.Python.Common.AST.$trModule
                   Language.Python.Common.AST.$tcParameter1
                   0#
                   GHC.Types.krep$*Arr*) -}
a0942a51e1cfdfb1b059cd3a9b4fa813
  $tcParameter1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.Python.Common.AST.$tcParameter2) -}
a535c34cb3d64b29b66ccba47f9c9bfc
  $tcParameter2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Parameter"#) -}
8ecfd6d3780cf3c11923eaf178739ede
  $tcRaiseExpr :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8912218851552818799##
                   12005689890530845372##
                   Language.Python.Common.AST.$trModule
                   Language.Python.Common.AST.$tcRaiseExpr1
                   0#
                   GHC.Types.krep$*Arr*) -}
f9b735a191a8140c0a9683ccc28206a7
  $tcRaiseExpr1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.Python.Common.AST.$tcRaiseExpr2) -}
602d6b581a17b369e16cb592d1721d72
  $tcRaiseExpr2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("RaiseExpr"#) -}
bd3b81e6623f9cced0ab508c7f6020ab
  $tcSlice :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10517644633188245717##
                   5192320171370186527##
                   Language.Python.Common.AST.$trModule
                   Language.Python.Common.AST.$tcSlice1
                   0#
                   GHC.Types.krep$*Arr*) -}
bc8e103914d8bea9f0381621f5b6e22e
  $tcSlice1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.Python.Common.AST.$tcSlice2) -}
d4e7fc396651bf6c732bc872795bbb21
  $tcSlice2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Slice"#) -}
b1a2bf4498820fce78a9d475ffad1a35
  $tcStatement :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9577790383485871097##
                   10693021544823291074##
                   Language.Python.Common.AST.$trModule
                   Language.Python.Common.AST.$tcStatement1
                   0#
                   GHC.Types.krep$*Arr*) -}
c09915e8931ac4e7fac339bc2818bd9f
  $tcStatement1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.Python.Common.AST.$tcStatement2) -}
953d7c1d98c12380ebdcfd03830fef58
  $tcStatement2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Statement"#) -}
700ed0b31106abc7fcff4d48178f0959
  $tcYieldArg :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14231717463824147329##
                   2523457981428365377##
                   Language.Python.Common.AST.$trModule
                   Language.Python.Common.AST.$tcYieldArg1
                   0#
                   GHC.Types.krep$*Arr*) -}
1cf8d639bd103c57a91a95c798b89bd5
  $tcYieldArg1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.Python.Common.AST.$tcYieldArg2) -}
23a97a7fb2936a4dabff613083e48167
  $tcYieldArg2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("YieldArg"#) -}
72d6d26a9358c264bef951ab0440d48f
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Language.Python.Common.AST.$trModule3
                   Language.Python.Common.AST.$trModule1) -}
a9aa4b2ac54b21dcfa50c4b57f9e8600
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.Python.Common.AST.$trModule2) -}
a1ae910de863f5fe0f73fa77e75b52fe
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Language.Python.Common.AST"#) -}
c4b214dc087943e353f3b6a2f49e01d0
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.Python.Common.AST.$trModule4) -}
6a60b532f7cd4a7f45338158cffc1b19
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("language-python-0.5.5-551ZWmiBNZ181NDEMfok7Y"#) -}
94dde4ffceed0a2a13daed020b6576e1
  $w$c< ::
    GHC.Classes.Ord annot =>
    Language.Python.Common.AST.Expr annot
    -> GHC.Base.Maybe (Language.Python.Common.AST.CompIter annot)
    -> annot
    -> Language.Python.Common.AST.Expr annot
    -> GHC.Base.Maybe (Language.Python.Common.AST.CompIter annot)
    -> annot
    -> GHC.Types.Bool
  {- Arity: 7, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)><L,U><L,1*U><L,U><L,U><L,1*U><L,U>,
     Inline: [0],
     Unfolding: (\ @ annot1
                   (w :: GHC.Classes.Ord annot1)
                   (ww :: Language.Python.Common.AST.Expr annot1)
                   (ww1 :: GHC.Base.Maybe
                             (Language.Python.Common.AST.CompIter annot1))
                   (ww2 :: annot1)
                   (ww3 :: Language.Python.Common.AST.Expr annot1)
                   (ww4 :: GHC.Base.Maybe
                             (Language.Python.Common.AST.CompIter annot1))
                   (ww5 :: annot1) ->
                 case Language.Python.Common.AST.$fOrdArgument_$ccompare1
                        @ annot1
                        w
                        ww
                        ww3 of wild {
                   GHC.Types.LT -> GHC.Types.True
                   GHC.Types.EQ
                   -> case ww1 of wild1 {
                        GHC.Base.Nothing
                        -> case ww4 of wild2 {
                             GHC.Base.Nothing -> GHC.Classes.< @ annot1 w ww2 ww5
                             GHC.Base.Just ipv -> GHC.Types.True }
                        GHC.Base.Just a2
                        -> case ww4 of wild2 {
                             GHC.Base.Nothing -> GHC.Types.False
                             GHC.Base.Just b1
                             -> case Language.Python.Common.AST.$fOrdCompFor_$ccompare
                                       @ annot1
                                       w
                                       a2
                                       b1 of wild3 {
                                  GHC.Types.LT -> GHC.Types.True
                                  GHC.Types.EQ -> GHC.Classes.< @ annot1 w ww2 ww5
                                  GHC.Types.GT -> GHC.Types.False } } }
                   GHC.Types.GT -> GHC.Types.False }) -}
0e95cab9b6b2e2586f16974d15b4ad2b
  $w$c<$ ::
    a
    -> GHC.Base.Maybe
         (Language.Python.Common.AST.Expr b,
          GHC.Base.Maybe (Language.Python.Common.AST.Expr b))
    -> (# GHC.Base.Maybe
            (Language.Python.Common.AST.Expr a,
             GHC.Base.Maybe (Language.Python.Common.AST.Expr a)),
          a #)
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,1*U>, Inline: [0],
     Unfolding: (\ @ a
                   @ b
                   (w :: a)
                   (ww :: GHC.Base.Maybe
                            (Language.Python.Common.AST.Expr b,
                             GHC.Base.Maybe (Language.Python.Common.AST.Expr b))) ->
                 (# case ww of wild {
                      GHC.Base.Nothing
                      -> GHC.Base.Nothing
                           @ (Language.Python.Common.AST.Expr a,
                              GHC.Base.Maybe (Language.Python.Common.AST.Expr a))
                      GHC.Base.Just a1
                      -> GHC.Base.Just
                           @ (Language.Python.Common.AST.Expr a,
                              GHC.Base.Maybe (Language.Python.Common.AST.Expr a))
                           (case a1 of wild1 { (,) a2 a3 ->
                            (Language.Python.Common.AST.$fFunctorArgument_$c<$1 @ a @ b w a2,
                             case a3 of wild2 {
                               GHC.Base.Nothing
                               -> GHC.Base.Nothing @ (Language.Python.Common.AST.Expr a)
                               GHC.Base.Just a4
                               -> GHC.Base.Just
                                    @ (Language.Python.Common.AST.Expr a)
                                    (Language.Python.Common.AST.$fFunctorArgument_$c<$1
                                       @ a
                                       @ b
                                       w
                                       a4) }) }) },
                    w #)) -}
94dde4ffceed0a2a13daed020b6576e1
  $w$c<1 ::
    GHC.Classes.Ord annot =>
    Language.Python.Common.AST.ComprehensionExpr annot
    -> Language.Python.Common.AST.CompFor annot
    -> annot
    -> Language.Python.Common.AST.ComprehensionExpr annot
    -> Language.Python.Common.AST.CompFor annot
    -> annot
    -> GHC.Types.Bool
  {- Arity: 7, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)><S,1*U><L,U><L,U><S,1*U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ annot1
                   (w :: GHC.Classes.Ord annot1)
                   (ww :: Language.Python.Common.AST.ComprehensionExpr annot1)
                   (ww1 :: Language.Python.Common.AST.CompFor annot1)
                   (ww2 :: annot1)
                   (ww3 :: Language.Python.Common.AST.ComprehensionExpr annot1)
                   (ww4 :: Language.Python.Common.AST.CompFor annot1)
                   (ww5 :: annot1) ->
                 case Language.Python.Common.AST.$fOrdComprehension_$ccompare
                        @ annot1
                        w
                        ww
                        ww3 of wild {
                   GHC.Types.LT -> GHC.Types.True
                   GHC.Types.EQ
                   -> case Language.Python.Common.AST.$fOrdCompFor_$ccompare1
                             @ annot1
                             w
                             ww1
                             ww4 of wild1 {
                        GHC.Types.LT -> GHC.Types.True
                        GHC.Types.EQ -> GHC.Classes.< @ annot1 w ww2 ww5
                        GHC.Types.GT -> GHC.Types.False }
                   GHC.Types.GT -> GHC.Types.False }) -}
1894483f79ad0aa5874fd6dd2cf05813
  $w$c<2 ::
    GHC.Classes.Ord annot =>
    GHC.Base.Maybe
      (Language.Python.Common.AST.Expr annot,
       GHC.Base.Maybe (Language.Python.Common.AST.Expr annot))
    -> annot
    -> GHC.Base.Maybe
         (Language.Python.Common.AST.Expr annot,
          GHC.Base.Maybe (Language.Python.Common.AST.Expr annot))
    -> annot
    -> GHC.Types.Bool
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)><S,1*U><L,U><S,1*U><L,U>,
     Inline: [0],
     Unfolding: (\ @ annot1
                   (w :: GHC.Classes.Ord annot1)
                   (ww :: GHC.Base.Maybe
                            (Language.Python.Common.AST.Expr annot1,
                             GHC.Base.Maybe (Language.Python.Common.AST.Expr annot1)))
                   (ww1 :: annot1)
                   (ww2 :: GHC.Base.Maybe
                             (Language.Python.Common.AST.Expr annot1,
                              GHC.Base.Maybe (Language.Python.Common.AST.Expr annot1)))
                   (ww3 :: annot1) ->
                 case ww of wild {
                   GHC.Base.Nothing
                   -> case ww2 of wild1 {
                        GHC.Base.Nothing -> GHC.Classes.< @ annot1 w ww1 ww3
                        GHC.Base.Just ipv -> GHC.Types.True }
                   GHC.Base.Just a2
                   -> case ww2 of wild1 {
                        GHC.Base.Nothing -> GHC.Types.False
                        GHC.Base.Just b1
                        -> case a2 of ww4 { (,) ww5 ww6 ->
                           case b1 of ww7 { (,) ww8 ww9 ->
                           case Language.Python.Common.AST.$fOrdArgument_$ccompare1
                                  @ annot1
                                  w
                                  ww5
                                  ww8 of wild2 {
                             GHC.Types.LT -> GHC.Types.True
                             GHC.Types.EQ
                             -> case ww6 of wild3 {
                                  GHC.Base.Nothing
                                  -> case ww9 of wild4 {
                                       GHC.Base.Nothing -> GHC.Classes.< @ annot1 w ww1 ww3
                                       GHC.Base.Just ipv -> GHC.Types.True }
                                  GHC.Base.Just a1
                                  -> case ww9 of wild4 {
                                       GHC.Base.Nothing -> GHC.Types.False
                                       GHC.Base.Just b4
                                       -> case Language.Python.Common.AST.$fOrdArgument_$ccompare1
                                                 @ annot1
                                                 w
                                                 a1
                                                 b4 of wild5 {
                                            GHC.Types.LT -> GHC.Types.True
                                            GHC.Types.EQ -> GHC.Classes.< @ annot1 w ww1 ww3
                                            GHC.Types.GT -> GHC.Types.False } } }
                             GHC.Types.GT -> GHC.Types.False } } } } }) -}
486a4f136f817ad398fe648b64b7d3e8
  $w$c<3 ::
    GHC.Classes.Ord annot =>
    GHC.Base.String
    -> annot
    -> GHC.Base.Maybe (Language.Python.Common.AST.Ident annot)
    -> annot
    -> GHC.Base.String
    -> annot
    -> GHC.Base.Maybe (Language.Python.Common.AST.Ident annot)
    -> annot
    -> GHC.Types.Bool
  {- Arity: 9, HasNoCafRefs,
     Strictness: <L,U(A,C(C1(U)),1*C1(C1(U)),A,A,A,A,A)><S,1*U><L,U><L,1*U><L,U><S,1*U><L,U><L,1*U><L,U>,
     Inline: [0],
     Unfolding: (\ @ annot1
                   (w :: GHC.Classes.Ord annot1)
                   (ww :: GHC.Base.String)
                   (ww1 :: annot1)
                   (ww2 :: GHC.Base.Maybe (Language.Python.Common.AST.Ident annot1))
                   (ww3 :: annot1)
                   (ww4 :: GHC.Base.String)
                   (ww5 :: annot1)
                   (ww6 :: GHC.Base.Maybe (Language.Python.Common.AST.Ident annot1))
                   (ww7 :: annot1) ->
                 case GHC.Classes.$fOrd[]_$s$ccompare1 ww ww4 of wild {
                   GHC.Types.LT -> GHC.Types.True
                   GHC.Types.EQ
                   -> case GHC.Classes.compare @ annot1 w ww1 ww5 of wild1 {
                        GHC.Types.LT -> GHC.Types.True
                        GHC.Types.EQ
                        -> case ww2 of wild2 {
                             GHC.Base.Nothing
                             -> case ww6 of wild3 {
                                  GHC.Base.Nothing -> GHC.Classes.< @ annot1 w ww3 ww7
                                  GHC.Base.Just ipv -> GHC.Types.True }
                             GHC.Base.Just a2
                             -> case ww6 of wild3 {
                                  GHC.Base.Nothing -> GHC.Types.False
                                  GHC.Base.Just b1
                                  -> case a2 of wild4 { Language.Python.Common.AST.Ident a1 a4 ->
                                     case b1 of wild5 { Language.Python.Common.AST.Ident b4 b5 ->
                                     case GHC.Classes.$fOrd[]_$s$ccompare1 a1 b4 of wild6 {
                                       GHC.Types.LT -> GHC.Types.True
                                       GHC.Types.EQ
                                       -> case GHC.Classes.compare @ annot1 w a4 b5 of wild7 {
                                            GHC.Types.LT -> GHC.Types.True
                                            GHC.Types.EQ -> GHC.Classes.< @ annot1 w ww3 ww7
                                            GHC.Types.GT -> GHC.Types.False }
                                       GHC.Types.GT -> GHC.Types.False } } } } }
                        GHC.Types.GT -> GHC.Types.False }
                   GHC.Types.GT -> GHC.Types.False }) -}
94dde4ffceed0a2a13daed020b6576e1
  $w$c== ::
    GHC.Classes.Eq annot =>
    Language.Python.Common.AST.Expr annot
    -> GHC.Base.Maybe (Language.Python.Common.AST.CompIter annot)
    -> annot
    -> Language.Python.Common.AST.Expr annot
    -> GHC.Base.Maybe (Language.Python.Common.AST.CompIter annot)
    -> annot
    -> GHC.Types.Bool
  {- Arity: 7, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A)><L,U><L,1*U><L,U><L,U><L,1*U><L,U>,
     Inline: [0] -}
94dde4ffceed0a2a13daed020b6576e1
  $w$c==1 ::
    GHC.Classes.Eq annot =>
    Language.Python.Common.AST.ComprehensionExpr annot
    -> Language.Python.Common.AST.CompFor annot
    -> annot
    -> Language.Python.Common.AST.ComprehensionExpr annot
    -> Language.Python.Common.AST.CompFor annot
    -> annot
    -> GHC.Types.Bool
  {- Arity: 7, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A)><S,1*U><L,U><L,U><S,1*U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ annot1
                   (w :: GHC.Classes.Eq annot1)
                   (ww :: Language.Python.Common.AST.ComprehensionExpr annot1)
                   (ww1 :: Language.Python.Common.AST.CompFor annot1)
                   (ww2 :: annot1)
                   (ww3 :: Language.Python.Common.AST.ComprehensionExpr annot1)
                   (ww4 :: Language.Python.Common.AST.CompFor annot1)
                   (ww5 :: annot1) ->
                 case Language.Python.Common.AST.$fEqComprehension_$c==1
                        @ annot1
                        w
                        ww
                        ww3 of wild {
                   GHC.Types.False -> GHC.Types.False
                   GHC.Types.True
                   -> case Language.Python.Common.AST.$fEqCompFor_$c==
                             @ annot1
                             w
                             ww1
                             ww4 of wild1 {
                        GHC.Types.False -> GHC.Types.False
                        GHC.Types.True -> GHC.Classes.== @ annot1 w ww2 ww5 } }) -}
b33bca29cd3c5b7b3ac189e01be72c1c
  $w$c==2 ::
    GHC.Classes.Eq annot =>
    GHC.Base.Maybe
      (Language.Python.Common.AST.Expr annot,
       GHC.Base.Maybe (Language.Python.Common.AST.Expr annot))
    -> annot
    -> GHC.Base.Maybe
         (Language.Python.Common.AST.Expr annot,
          GHC.Base.Maybe (Language.Python.Common.AST.Expr annot))
    -> annot
    -> GHC.Types.Bool
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A)><S,1*U><L,U><S,1*U><L,U>, Inline: [0],
     Unfolding: (\ @ annot1
                   (w :: GHC.Classes.Eq annot1)
                   (ww :: GHC.Base.Maybe
                            (Language.Python.Common.AST.Expr annot1,
                             GHC.Base.Maybe (Language.Python.Common.AST.Expr annot1)))
                   (ww1 :: annot1)
                   (ww2 :: GHC.Base.Maybe
                             (Language.Python.Common.AST.Expr annot1,
                              GHC.Base.Maybe (Language.Python.Common.AST.Expr annot1)))
                   (ww3 :: annot1) ->
                 case ww of wild {
                   GHC.Base.Nothing
                   -> case ww2 of wild1 {
                        GHC.Base.Nothing -> GHC.Classes.== @ annot1 w ww1 ww3
                        GHC.Base.Just ipv -> GHC.Types.False }
                   GHC.Base.Just a1
                   -> case ww2 of wild1 {
                        GHC.Base.Nothing -> GHC.Types.False
                        GHC.Base.Just b1
                        -> case a1 of ww4 { (,) ww5 ww6 ->
                           case b1 of ww7 { (,) ww8 ww9 ->
                           case Language.Python.Common.AST.$fEqArgument_$c==1
                                  @ annot1
                                  w
                                  ww5
                                  ww8 of wild2 {
                             GHC.Types.False -> GHC.Types.False
                             GHC.Types.True
                             -> case ww6 of wild3 {
                                  GHC.Base.Nothing
                                  -> case ww9 of wild4 {
                                       GHC.Base.Nothing -> GHC.Classes.== @ annot1 w ww1 ww3
                                       GHC.Base.Just ipv -> GHC.Types.False }
                                  GHC.Base.Just a2
                                  -> case ww9 of wild4 {
                                       GHC.Base.Nothing -> GHC.Types.False
                                       GHC.Base.Just b4
                                       -> case Language.Python.Common.AST.$fEqArgument_$c==1
                                                 @ annot1
                                                 w
                                                 a2
                                                 b4 of wild5 {
                                            GHC.Types.False -> GHC.Types.False
                                            GHC.Types.True
                                            -> GHC.Classes.== @ annot1 w ww1 ww3 } } } } } } } }) -}
b2ba6a3c7117acd0883f87f6d7739722
  $w$c==3 ::
    GHC.Classes.Eq annot =>
    GHC.Base.String
    -> annot
    -> GHC.Base.Maybe (Language.Python.Common.AST.Ident annot)
    -> annot
    -> GHC.Base.String
    -> annot
    -> GHC.Base.Maybe (Language.Python.Common.AST.Ident annot)
    -> annot
    -> GHC.Types.Bool
  {- Arity: 9, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A)><S,1*U><L,U><L,1*U><L,U><S,1*U><L,U><L,1*U><L,U>,
     Inline: [0],
     Unfolding: (\ @ annot1
                   (w :: GHC.Classes.Eq annot1)
                   (ww :: GHC.Base.String)
                   (ww1 :: annot1)
                   (ww2 :: GHC.Base.Maybe (Language.Python.Common.AST.Ident annot1))
                   (ww3 :: annot1)
                   (ww4 :: GHC.Base.String)
                   (ww5 :: annot1)
                   (ww6 :: GHC.Base.Maybe (Language.Python.Common.AST.Ident annot1))
                   (ww7 :: annot1) ->
                 case GHC.Base.eqString ww ww4 of wild {
                   GHC.Types.False -> GHC.Types.False
                   GHC.Types.True
                   -> case GHC.Classes.== @ annot1 w ww1 ww5 of wild1 {
                        GHC.Types.False -> GHC.Types.False
                        GHC.Types.True
                        -> case ww2 of wild2 {
                             GHC.Base.Nothing
                             -> case ww6 of wild3 {
                                  GHC.Base.Nothing -> GHC.Classes.== @ annot1 w ww3 ww7
                                  GHC.Base.Just ipv -> GHC.Types.False }
                             GHC.Base.Just a1
                             -> case ww6 of wild3 {
                                  GHC.Base.Nothing -> GHC.Types.False
                                  GHC.Base.Just b1
                                  -> case a1 of wild4 { Language.Python.Common.AST.Ident a2 a3 ->
                                     case b1 of wild5 { Language.Python.Common.AST.Ident b4 b5 ->
                                     case GHC.Base.eqString a2 b4 of wild6 {
                                       GHC.Types.False -> GHC.Types.False
                                       GHC.Types.True
                                       -> case GHC.Classes.== @ annot1 w a3 b5 of wild7 {
                                            GHC.Types.False -> GHC.Types.False
                                            GHC.Types.True
                                            -> GHC.Classes.== @ annot1 w ww3 ww7 } } } } } } } }) -}
94dde4ffceed0a2a13daed020b6576e1
  $w$ccompare ::
    GHC.Classes.Ord annot =>
    Language.Python.Common.AST.Expr annot
    -> GHC.Base.Maybe (Language.Python.Common.AST.CompIter annot)
    -> annot
    -> Language.Python.Common.AST.Expr annot
    -> GHC.Base.Maybe (Language.Python.Common.AST.CompIter annot)
    -> annot
    -> GHC.Types.Ordering
  {- Arity: 7, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)><L,U><L,1*U><L,U><L,U><L,1*U><L,U>,
     Inline: [0] -}
94dde4ffceed0a2a13daed020b6576e1
  $w$ccompare1 ::
    GHC.Classes.Ord annot =>
    Language.Python.Common.AST.ComprehensionExpr annot
    -> Language.Python.Common.AST.CompFor annot
    -> annot
    -> Language.Python.Common.AST.ComprehensionExpr annot
    -> Language.Python.Common.AST.CompFor annot
    -> annot
    -> GHC.Types.Ordering
  {- Arity: 7, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)><S,1*U><L,U><L,U><S,1*U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ annot1
                   (w :: GHC.Classes.Ord annot1)
                   (ww :: Language.Python.Common.AST.ComprehensionExpr annot1)
                   (ww1 :: Language.Python.Common.AST.CompFor annot1)
                   (ww2 :: annot1)
                   (ww3 :: Language.Python.Common.AST.ComprehensionExpr annot1)
                   (ww4 :: Language.Python.Common.AST.CompFor annot1)
                   (ww5 :: annot1) ->
                 case Language.Python.Common.AST.$fOrdComprehension_$ccompare
                        @ annot1
                        w
                        ww
                        ww3 of wild {
                   GHC.Types.LT -> GHC.Types.LT
                   GHC.Types.EQ
                   -> case Language.Python.Common.AST.$fOrdCompFor_$ccompare1
                             @ annot1
                             w
                             ww1
                             ww4 of wild1 {
                        GHC.Types.LT -> GHC.Types.LT
                        GHC.Types.EQ -> GHC.Classes.compare @ annot1 w ww2 ww5
                        GHC.Types.GT -> GHC.Types.GT }
                   GHC.Types.GT -> GHC.Types.GT }) -}
5c32f9dcce3492b4c5143ae86dbe0fc2
  $w$ccompare2 ::
    GHC.Classes.Ord annot =>
    GHC.Base.Maybe
      (Language.Python.Common.AST.Expr annot,
       GHC.Base.Maybe (Language.Python.Common.AST.Expr annot))
    -> annot
    -> GHC.Base.Maybe
         (Language.Python.Common.AST.Expr annot,
          GHC.Base.Maybe (Language.Python.Common.AST.Expr annot))
    -> annot
    -> GHC.Types.Ordering
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)><S,1*U><L,U><S,1*U><L,U>,
     Inline: [0],
     Unfolding: (\ @ annot1
                   (w :: GHC.Classes.Ord annot1)
                   (ww :: GHC.Base.Maybe
                            (Language.Python.Common.AST.Expr annot1,
                             GHC.Base.Maybe (Language.Python.Common.AST.Expr annot1)))
                   (ww1 :: annot1)
                   (ww2 :: GHC.Base.Maybe
                             (Language.Python.Common.AST.Expr annot1,
                              GHC.Base.Maybe (Language.Python.Common.AST.Expr annot1)))
                   (ww3 :: annot1) ->
                 case ww of wild {
                   GHC.Base.Nothing
                   -> case ww2 of wild1 {
                        GHC.Base.Nothing -> GHC.Classes.compare @ annot1 w ww1 ww3
                        GHC.Base.Just ipv -> GHC.Types.LT }
                   GHC.Base.Just a2
                   -> case ww2 of wild1 {
                        GHC.Base.Nothing -> GHC.Types.GT
                        GHC.Base.Just b1
                        -> case a2 of ww4 { (,) ww5 ww6 ->
                           case b1 of ww7 { (,) ww8 ww9 ->
                           case Language.Python.Common.AST.$fOrdArgument_$ccompare1
                                  @ annot1
                                  w
                                  ww5
                                  ww8 of wild2 {
                             GHC.Types.LT -> GHC.Types.LT
                             GHC.Types.EQ
                             -> case ww6 of wild3 {
                                  GHC.Base.Nothing
                                  -> case ww9 of wild4 {
                                       GHC.Base.Nothing -> GHC.Classes.compare @ annot1 w ww1 ww3
                                       GHC.Base.Just ipv -> GHC.Types.LT }
                                  GHC.Base.Just a1
                                  -> case ww9 of wild4 {
                                       GHC.Base.Nothing -> GHC.Types.GT
                                       GHC.Base.Just b4
                                       -> case Language.Python.Common.AST.$fOrdArgument_$ccompare1
                                                 @ annot1
                                                 w
                                                 a1
                                                 b4 of wild5 {
                                            GHC.Types.LT -> GHC.Types.LT
                                            GHC.Types.EQ -> GHC.Classes.compare @ annot1 w ww1 ww3
                                            GHC.Types.GT -> GHC.Types.GT } } }
                             GHC.Types.GT -> GHC.Types.GT } } } } }) -}
4c4b0a3e699a3bf436aaa6ab7d7ccf06
  $w$ccompare3 ::
    GHC.Classes.Ord annot =>
    GHC.Base.String
    -> annot
    -> GHC.Base.Maybe (Language.Python.Common.AST.Ident annot)
    -> annot
    -> GHC.Base.String
    -> annot
    -> GHC.Base.Maybe (Language.Python.Common.AST.Ident annot)
    -> annot
    -> GHC.Types.Ordering
  {- Arity: 9, HasNoCafRefs,
     Strictness: <L,U(A,C(C1(U)),A,A,A,A,A,A)><S,1*U><L,U><L,1*U><L,U><S,1*U><L,U><L,1*U><L,U>,
     Inline: [0],
     Unfolding: (\ @ annot1
                   (w :: GHC.Classes.Ord annot1)
                   (ww :: GHC.Base.String)
                   (ww1 :: annot1)
                   (ww2 :: GHC.Base.Maybe (Language.Python.Common.AST.Ident annot1))
                   (ww3 :: annot1)
                   (ww4 :: GHC.Base.String)
                   (ww5 :: annot1)
                   (ww6 :: GHC.Base.Maybe (Language.Python.Common.AST.Ident annot1))
                   (ww7 :: annot1) ->
                 case GHC.Classes.$fOrd[]_$s$ccompare1 ww ww4 of wild {
                   GHC.Types.LT -> GHC.Types.LT
                   GHC.Types.EQ
                   -> case GHC.Classes.compare @ annot1 w ww1 ww5 of wild1 {
                        GHC.Types.LT -> GHC.Types.LT
                        GHC.Types.EQ
                        -> case ww2 of wild2 {
                             GHC.Base.Nothing
                             -> case ww6 of wild3 {
                                  GHC.Base.Nothing -> GHC.Classes.compare @ annot1 w ww3 ww7
                                  GHC.Base.Just ipv -> GHC.Types.LT }
                             GHC.Base.Just a2
                             -> case ww6 of wild3 {
                                  GHC.Base.Nothing -> GHC.Types.GT
                                  GHC.Base.Just b1
                                  -> case a2 of wild4 { Language.Python.Common.AST.Ident a1 a4 ->
                                     case b1 of wild5 { Language.Python.Common.AST.Ident b4 b5 ->
                                     case GHC.Classes.$fOrd[]_$s$ccompare1 a1 b4 of wild6 {
                                       GHC.Types.LT -> GHC.Types.LT
                                       GHC.Types.EQ
                                       -> case GHC.Classes.compare @ annot1 w a4 b5 of wild7 {
                                            GHC.Types.LT -> GHC.Types.LT
                                            GHC.Types.EQ -> GHC.Classes.compare @ annot1 w ww3 ww7
                                            GHC.Types.GT -> GHC.Types.GT }
                                       GHC.Types.GT -> GHC.Types.GT } } } } }
                        GHC.Types.GT -> GHC.Types.GT }
                   GHC.Types.GT -> GHC.Types.GT }) -}
4064b6fc340a9d5fe14eb37a24726267
  $w$cfmap ::
    (a -> b)
    -> GHC.Base.Maybe
         (Language.Python.Common.AST.Expr a,
          GHC.Base.Maybe (Language.Python.Common.AST.Expr a))
    -> a
    -> (# GHC.Base.Maybe
            (Language.Python.Common.AST.Expr b,
             GHC.Base.Maybe (Language.Python.Common.AST.Expr b)),
          b #)
  {- Arity: 3, HasNoCafRefs, Strictness: <L,C(U)><L,1*U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   @ b
                   (w :: a -> b)
                   (ww :: GHC.Base.Maybe
                            (Language.Python.Common.AST.Expr a,
                             GHC.Base.Maybe (Language.Python.Common.AST.Expr a)))
                   (ww1 :: a) ->
                 (# case ww of wild {
                      GHC.Base.Nothing
                      -> GHC.Base.Nothing
                           @ (Language.Python.Common.AST.Expr b,
                              GHC.Base.Maybe (Language.Python.Common.AST.Expr b))
                      GHC.Base.Just a1
                      -> GHC.Base.Just
                           @ (Language.Python.Common.AST.Expr b,
                              GHC.Base.Maybe (Language.Python.Common.AST.Expr b))
                           (case a1 of wild1 { (,) a2 a3 ->
                            (Language.Python.Common.AST.$fFunctorArgument_$cfmap2 @ a @ b w a2,
                             case a3 of wild2 {
                               GHC.Base.Nothing
                               -> GHC.Base.Nothing @ (Language.Python.Common.AST.Expr b)
                               GHC.Base.Just a4
                               -> GHC.Base.Just
                                    @ (Language.Python.Common.AST.Expr b)
                                    (Language.Python.Common.AST.$fFunctorArgument_$cfmap2
                                       @ a
                                       @ b
                                       w
                                       a4) }) }) },
                    w ww1 #)) -}
6aab1d6f902c3e0dbc09c99c8605e197
  $w$cgmapM ::
    Data.Data.Data annot =>
    forall (m :: * -> *).
    GHC.Base.Monad m =>
    (forall d. Data.Data.Data d => d -> m d)
    -> GHC.Base.String
    -> annot
    -> m (Language.Python.Common.AST.Ident annot)
  {- Arity: 5,
     Strictness: <L,U><S(LC(C(S))LLL),U(A,C(C1(U)),A,C(U),A)><L,C(C1(U))><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ annot1
                   (w :: Data.Data.Data annot1)
                   @ m :: * -> *
                   (w249 :: GHC.Base.Monad m)
                   (w250 :: forall d. Data.Data.Data d => d -> m d)
                   (ww :: GHC.Base.String)
                   (ww1 :: annot1) ->
                 let {
                   lvl447 :: m annot1 = w250 @ annot1 w ww1
                 } in
                 GHC.Base.>>=
                   @ m
                   w249
                   @ (annot1 -> Language.Python.Common.AST.Ident annot1)
                   @ (Language.Python.Common.AST.Ident annot1)
                   (let {
                      lvl448 :: m GHC.Base.String
                      = w250 @ GHC.Base.String Data.Data.$fData[]_$s$fData[] ww
                    } in
                    GHC.Base.>>=
                      @ m
                      w249
                      @ (GHC.Base.String
                         -> annot1 -> Language.Python.Common.AST.Ident annot1)
                      @ (annot1 -> Language.Python.Common.AST.Ident annot1)
                      (GHC.Base.return
                         @ m
                         w249
                         @ (GHC.Base.String
                            -> annot1 -> Language.Python.Common.AST.Ident annot1)
                         (Language.Python.Common.AST.$WIdent @ annot1))
                      (\ (c' :: GHC.Base.String
                                -> annot1 -> Language.Python.Common.AST.Ident annot1) ->
                       GHC.Base.>>=
                         @ m
                         w249
                         @ GHC.Base.String
                         @ (annot1 -> Language.Python.Common.AST.Ident annot1)
                         lvl448
                         (\ (x' :: GHC.Base.String) ->
                          GHC.Base.return
                            @ m
                            w249
                            @ (annot1 -> Language.Python.Common.AST.Ident annot1)
                            (c' x'))))
                   (\ (c' :: annot1 -> Language.Python.Common.AST.Ident annot1) ->
                    GHC.Base.>>=
                      @ m
                      w249
                      @ annot1
                      @ (Language.Python.Common.AST.Ident annot1)
                      lvl447
                      (\ (x' :: annot1) ->
                       GHC.Base.return
                         @ m
                         w249
                         @ (Language.Python.Common.AST.Ident annot1)
                         (c' x')))) -}
f55a81e56367dca5b5d86dd1548fd97f
  $w$cgunfold ::
    Data.Data.Data annot =>
    forall (c :: * -> *).
    (forall b r. Data.Data.Data b => c (b -> r) -> c r)
    -> (forall r. r -> c r)
    -> Data.Data.ConstrRep
    -> Data.Data.DataType
    -> c (Language.Python.Common.AST.AssignOp annot)
  {- Arity: 5,
     Strictness: <L,U><C(C(S)),1*C1(C1(U))><L,1*C1(U)><S,1*U><L,1*U(1*U,A)>,
     Inline: [0] -}
3e80c1212dbae482ce637a5dc72042ac
  $w$cgunfold1 ::
    Data.Data.Data annot =>
    forall (c :: * -> *).
    (forall b r. Data.Data.Data b => c (b -> r) -> c r)
    -> (forall r. r -> c r)
    -> Data.Data.ConstrRep
    -> Data.Data.DataType
    -> c (Language.Python.Common.AST.Op annot)
  {- Arity: 5,
     Strictness: <L,U><C(C(S)),1*C1(C1(U))><L,1*C1(U)><S,1*U><L,1*U(1*U,A)>,
     Inline: [0] -}
94dde4ffceed0a2a13daed020b6576e1
  $w$cshowsPrec ::
    GHC.Show.Show annot =>
    GHC.Prim.Int#
    -> Language.Python.Common.AST.Argument annot -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U(C(C1(C(U))),A,A)><S,U><S,1*U>,
     Inline: [0] -}
f55a81e56367dca5b5d86dd1548fd97f
  $w$cshowsPrec1 ::
    GHC.Show.Show annot =>
    GHC.Prim.Int#
    -> Language.Python.Common.AST.AssignOp annot -> GHC.Show.ShowS
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(C(U))),A,A)><S,U><S,1*U>, Inline: [0] -}
789db2a4b3c023a9cf43afdd1f0c3249
  $w$cshowsPrec10 ::
    GHC.Show.Show annot =>
    GHC.Prim.Int#
    -> Language.Python.Common.AST.Module annot -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U(C(C1(C(U))),A,A)><S,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ annot1
                   (w :: GHC.Show.Show annot1)
                   (ww :: GHC.Prim.Int#)
                   (w249 :: Language.Python.Common.AST.Module annot1) ->
                 let {
                   g :: Language.Python.Common.AST.Statement annot1 -> GHC.Show.ShowS
                   = Language.Python.Common.AST.$fShowHandler_$cshowsPrec1
                       @ annot1
                       w
                       Language.Python.Common.AST.$fDataExpr3
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11#) of wild {
                   GHC.Types.False
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Base.++
                        @ GHC.Types.Char
                        Language.Python.Common.AST.$fShowModule1
                        (GHC.Show.showList__
                           @ (Language.Python.Common.AST.Statement annot1)
                           g
                           w249 `cast` (Language.Python.Common.AST.N:Module[0] <annot1>_R)
                           x)
                   GHC.Types.True
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (GHC.Base.++
                           @ GHC.Types.Char
                           Language.Python.Common.AST.$fShowModule1
                           (GHC.Show.showList__
                              @ (Language.Python.Common.AST.Statement annot1)
                              g
                              w249 `cast` (Language.Python.Common.AST.N:Module[0] <annot1>_R)
                              (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x))) }) -}
3e80c1212dbae482ce637a5dc72042ac
  $w$cshowsPrec11 ::
    GHC.Show.Show annot =>
    GHC.Prim.Int#
    -> Language.Python.Common.AST.Op annot -> GHC.Show.ShowS
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(C(U))),A,A)><S,U><S,1*U>, Inline: [0] -}
77aacf63ade2d28a10031365ad257b9f
  $w$cshowsPrec12 ::
    GHC.Show.Show annot =>
    GHC.Prim.Int#
    -> Language.Python.Common.AST.ParamTuple annot -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U(C(C1(C(U))),A,A)><S,U><S,1*U>,
     Inline: [0] -}
94dde4ffceed0a2a13daed020b6576e1
  $w$cshowsPrec13 ::
    GHC.Show.Show annot =>
    GHC.Prim.Int#
    -> Language.Python.Common.AST.YieldArg annot -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U(C(C1(C(U))),A,A)><S,U><S,1*U>,
     Inline: [0],
     Unfolding: (\ @ annot1
                   (w :: GHC.Show.Show annot1)
                   (ww :: GHC.Prim.Int#)
                   (w249 :: Language.Python.Common.AST.YieldArg annot1) ->
                 case w249 of wild {
                   Language.Python.Common.AST.YieldFrom b1 b4
                   -> let {
                        f12 :: GHC.Base.String -> GHC.Base.String
                        = Language.Python.Common.AST.$fShowComprehension_$cshowsPrec1
                            @ annot1
                            w
                            Language.Python.Common.AST.$fShowComprehension11
                            b1
                      } in
                      let {
                        g :: GHC.Base.String -> GHC.Base.String
                        = GHC.Show.showsPrec
                            @ annot1
                            w
                            Language.Python.Common.AST.$fShowComprehension11
                            b4
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# ww 11#) of wild1 {
                        GHC.Types.False
                        -> \ (x :: GHC.Base.String) ->
                           GHC.CString.unpackAppendCString#
                             Language.Python.Common.AST.$fShowYieldArg3
                             (f12 (GHC.Types.: @ GHC.Types.Char GHC.Show.showSpace1 (g x)))
                        GHC.Types.True
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.$fShow(,)4
                             (GHC.CString.unpackAppendCString#
                                Language.Python.Common.AST.$fShowYieldArg3
                                (f12
                                   (GHC.Types.:
                                      @ GHC.Types.Char
                                      GHC.Show.showSpace1
                                      (g (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x))))) }
                   Language.Python.Common.AST.YieldExpr b1
                   -> let {
                        g :: GHC.Base.String -> GHC.Base.String
                        = Language.Python.Common.AST.$fShowComprehension_$cshowsPrec1
                            @ annot1
                            w
                            Language.Python.Common.AST.$fShowComprehension11
                            b1
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# ww 11#) of wild1 {
                        GHC.Types.False
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Base.++
                             @ GHC.Types.Char
                             Language.Python.Common.AST.$fShowYieldArg1
                             (g x)
                        GHC.Types.True
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.$fShow(,)4
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Language.Python.Common.AST.$fShowYieldArg1
                                (g (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x))) } }) -}
94dde4ffceed0a2a13daed020b6576e1
  $w$cshowsPrec2 ::
    GHC.Show.Show annot =>
    GHC.Prim.Int#
    -> Language.Python.Common.AST.CompIter annot -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U(C(C1(C(U))),A,A)><S,U><S,1*U>,
     Inline: [0] -}
94dde4ffceed0a2a13daed020b6576e1
  $w$cshowsPrec3 ::
    GHC.Show.Show annot =>
    GHC.Prim.Int#
    -> Language.Python.Common.AST.ComprehensionExpr annot
    -> Language.Python.Common.AST.CompFor annot
    -> annot
    -> GHC.Show.ShowS
  {- Arity: 5,
     Strictness: <L,U(C(C1(C(U))),A,A)><S,U><L,1*U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ annot1
                   (w :: GHC.Show.Show annot1)
                   (ww :: GHC.Prim.Int#)
                   (ww1 :: Language.Python.Common.AST.ComprehensionExpr annot1)
                   (ww2 :: Language.Python.Common.AST.CompFor annot1)
                   (ww3 :: annot1) ->
                 let {
                   f12 :: GHC.Base.String -> GHC.Base.String
                   = Language.Python.Common.AST.$w$cshowsPrec4 @ annot1 w 0# ww1
                 } in
                 let {
                   f13 :: GHC.Base.String -> GHC.Base.String
                   = Language.Python.Common.AST.$fShowCompFor_$cshowsPrec
                       @ annot1
                       w
                       Language.Python.Common.AST.$fDataExpr3
                       ww2
                 } in
                 let {
                   f14 :: GHC.Base.String -> GHC.Base.String
                   = GHC.Show.showsPrec
                       @ annot1
                       w
                       Language.Python.Common.AST.$fDataExpr3
                       ww3
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11#) of wild {
                   GHC.Types.False
                   -> \ (x :: GHC.Base.String) ->
                      GHC.CString.unpackAppendCString#
                        Language.Python.Common.AST.$fShowComprehension5
                        (GHC.CString.unpackAppendCString#
                           Language.Python.Common.AST.$fShowComprehension4
                           (f12
                              (GHC.Base.++
                                 @ GHC.Types.Char
                                 GHC.Show.showCommaSpace1
                                 (GHC.CString.unpackAppendCString#
                                    Language.Python.Common.AST.$fShowComprehension3
                                    (f13
                                       (GHC.Base.++
                                          @ GHC.Types.Char
                                          GHC.Show.showCommaSpace1
                                          (GHC.CString.unpackAppendCString#
                                             Language.Python.Common.AST.$fShowComprehension2
                                             (f14
                                                (GHC.CString.unpackAppendCString#
                                                   Language.Python.Common.AST.$fShowComprehension1
                                                   x)))))))))
                   GHC.Types.True
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (GHC.CString.unpackAppendCString#
                           Language.Python.Common.AST.$fShowComprehension5
                           (GHC.CString.unpackAppendCString#
                              Language.Python.Common.AST.$fShowComprehension4
                              (f12
                                 (GHC.Base.++
                                    @ GHC.Types.Char
                                    GHC.Show.showCommaSpace1
                                    (GHC.CString.unpackAppendCString#
                                       Language.Python.Common.AST.$fShowComprehension3
                                       (f13
                                          (GHC.Base.++
                                             @ GHC.Types.Char
                                             GHC.Show.showCommaSpace1
                                             (GHC.CString.unpackAppendCString#
                                                Language.Python.Common.AST.$fShowComprehension2
                                                (f14
                                                   (GHC.CString.unpackAppendCString#
                                                      Language.Python.Common.AST.$fShowComprehension1
                                                      (GHC.Types.:
                                                         @ GHC.Types.Char
                                                         GHC.Show.$fShow(,)2
                                                         x))))))))))) }) -}
94dde4ffceed0a2a13daed020b6576e1
  $w$cshowsPrec4 ::
    GHC.Show.Show annot =>
    GHC.Prim.Int#
    -> Language.Python.Common.AST.ComprehensionExpr annot
    -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U(C(C1(C(U))),A,A)><S,U><S,1*U>,
     Inline: [0],
     Unfolding: (\ @ annot1
                   (w :: GHC.Show.Show annot1)
                   (ww :: GHC.Prim.Int#)
                   (w249 :: Language.Python.Common.AST.ComprehensionExpr annot1) ->
                 case w249 of wild {
                   Language.Python.Common.AST.ComprehensionExpr b1
                   -> let {
                        g :: GHC.Base.String -> GHC.Base.String
                        = Language.Python.Common.AST.$fShowComprehension_$cshowsPrec1
                            @ annot1
                            w
                            Language.Python.Common.AST.$fShowComprehension11
                            b1
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# ww 11#) of wild1 {
                        GHC.Types.False
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Base.++
                             @ GHC.Types.Char
                             Language.Python.Common.AST.$fShowComprehension12
                             (g x)
                        GHC.Types.True
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.$fShow(,)4
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Language.Python.Common.AST.$fShowComprehension12
                                (g (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x))) }
                   Language.Python.Common.AST.ComprehensionDict b1
                   -> let {
                        g :: GHC.Base.String -> GHC.Base.String
                        = Language.Python.Common.AST.$w$cshowsPrec5 @ annot1 w 11# b1
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# ww 11#) of wild1 {
                        GHC.Types.False
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Base.++
                             @ GHC.Types.Char
                             Language.Python.Common.AST.$fShowComprehension6
                             (g x)
                        GHC.Types.True
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.$fShow(,)4
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Language.Python.Common.AST.$fShowComprehension6
                                (g (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x))) } }) -}
94dde4ffceed0a2a13daed020b6576e1
  $w$cshowsPrec5 ::
    GHC.Show.Show annot =>
    GHC.Prim.Int#
    -> Language.Python.Common.AST.DictKeyDatumList annot
    -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U(C(C1(C(U))),A,A)><S,U><S,1*U>,
     Inline: [0],
     Unfolding: (\ @ annot1
                   (w :: GHC.Show.Show annot1)
                   (ww :: GHC.Prim.Int#)
                   (w249 :: Language.Python.Common.AST.DictKeyDatumList annot1) ->
                 case w249 of wild {
                   Language.Python.Common.AST.DictMappingPair b1 b4
                   -> let {
                        f12 :: GHC.Base.String -> GHC.Base.String
                        = Language.Python.Common.AST.$fShowComprehension_$cshowsPrec1
                            @ annot1
                            w
                            Language.Python.Common.AST.$fShowComprehension11
                            b1
                      } in
                      let {
                        g :: GHC.Base.String -> GHC.Base.String
                        = Language.Python.Common.AST.$fShowComprehension_$cshowsPrec1
                            @ annot1
                            w
                            Language.Python.Common.AST.$fShowComprehension11
                            b4
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# ww 11#) of wild1 {
                        GHC.Types.False
                        -> \ (x :: GHC.Base.String) ->
                           GHC.CString.unpackAppendCString#
                             Language.Python.Common.AST.$fShowComprehension10
                             (f12 (GHC.Types.: @ GHC.Types.Char GHC.Show.showSpace1 (g x)))
                        GHC.Types.True
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.$fShow(,)4
                             (GHC.CString.unpackAppendCString#
                                Language.Python.Common.AST.$fShowComprehension10
                                (f12
                                   (GHC.Types.:
                                      @ GHC.Types.Char
                                      GHC.Show.showSpace1
                                      (g (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x))))) }
                   Language.Python.Common.AST.DictUnpacking b1
                   -> let {
                        g :: GHC.Base.String -> GHC.Base.String
                        = Language.Python.Common.AST.$fShowComprehension_$cshowsPrec1
                            @ annot1
                            w
                            Language.Python.Common.AST.$fShowComprehension11
                            b1
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# ww 11#) of wild1 {
                        GHC.Types.False
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Base.++
                             @ GHC.Types.Char
                             Language.Python.Common.AST.$fShowComprehension8
                             (g x)
                        GHC.Types.True
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.$fShow(,)4
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Language.Python.Common.AST.$fShowComprehension8
                                (g (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x))) } }) -}
d096b6b1d05398c8f61825220d23e587
  $w$cshowsPrec6 ::
    GHC.Show.Show annot =>
    GHC.Prim.Int#
    -> Language.Python.Common.AST.DottedName annot
    -> [Language.Python.Common.AST.Argument annot]
    -> annot
    -> GHC.Show.ShowS
  {- Arity: 5,
     Strictness: <L,U(C(C1(C(U))),A,A)><S,U><L,U><L,U><L,U>,
     Inline: [0] -}
e3cd8a0dc8214c8f5ef60ed5a9ac11ef
  $w$cshowsPrec7 ::
    GHC.Show.Show annot =>
    GHC.Prim.Int#
    -> Language.Python.Common.AST.FromItems annot -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U(C(C1(C(U))),A,A)><S,U><S,1*U>,
     Inline: [0],
     Unfolding: (\ @ annot1
                   (w :: GHC.Show.Show annot1)
                   (ww :: GHC.Prim.Int#)
                   (w249 :: Language.Python.Common.AST.FromItems annot1) ->
                 case w249 of wild {
                   Language.Python.Common.AST.ImportEverything b1
                   -> let {
                        f12 :: GHC.Base.String -> GHC.Base.String
                        = GHC.Show.showsPrec
                            @ annot1
                            w
                            Language.Python.Common.AST.$fDataExpr3
                            b1
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# ww 11#) of wild1 {
                        GHC.Types.False
                        -> \ (x :: GHC.Base.String) ->
                           GHC.CString.unpackAppendCString#
                             Language.Python.Common.AST.$fShowFromItems4
                             (GHC.CString.unpackAppendCString#
                                Language.Python.Common.AST.$fShowFromItems3
                                (f12
                                   (GHC.CString.unpackAppendCString#
                                      Language.Python.Common.AST.$fShowComprehension1
                                      x)))
                        GHC.Types.True
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.$fShow(,)4
                             (GHC.CString.unpackAppendCString#
                                Language.Python.Common.AST.$fShowFromItems4
                                (GHC.CString.unpackAppendCString#
                                   Language.Python.Common.AST.$fShowFromItems3
                                   (f12
                                      (GHC.CString.unpackAppendCString#
                                         Language.Python.Common.AST.$fShowComprehension1
                                         (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x))))) }
                   Language.Python.Common.AST.FromItems b1 b4
                   -> let {
                        f12 :: Language.Python.Common.AST.FromItem annot1 -> GHC.Show.ShowS
                        = Language.Python.Common.AST.$fShowFromItem_$cshowsPrec
                            @ annot1
                            w
                            Language.Python.Common.AST.$fDataExpr3
                      } in
                      let {
                        f13 :: GHC.Base.String -> GHC.Base.String
                        = GHC.Show.showsPrec
                            @ annot1
                            w
                            Language.Python.Common.AST.$fDataExpr3
                            b4
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# ww 11#) of wild1 {
                        GHC.Types.False
                        -> \ (x :: GHC.Base.String) ->
                           GHC.CString.unpackAppendCString#
                             Language.Python.Common.AST.$fShowFromItems2
                             (GHC.CString.unpackAppendCString#
                                Language.Python.Common.AST.$fShowFromItems1
                                (GHC.Show.showList__
                                   @ (Language.Python.Common.AST.FromItem annot1)
                                   f12
                                   b1
                                   (GHC.Base.++
                                      @ GHC.Types.Char
                                      GHC.Show.showCommaSpace1
                                      (GHC.CString.unpackAppendCString#
                                         Language.Python.Common.AST.$fShowFromItems3
                                         (f13
                                            (GHC.CString.unpackAppendCString#
                                               Language.Python.Common.AST.$fShowComprehension1
                                               x))))))
                        GHC.Types.True
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.$fShow(,)4
                             (GHC.CString.unpackAppendCString#
                                Language.Python.Common.AST.$fShowFromItems2
                                (GHC.CString.unpackAppendCString#
                                   Language.Python.Common.AST.$fShowFromItems1
                                   (GHC.Show.showList__
                                      @ (Language.Python.Common.AST.FromItem annot1)
                                      f12
                                      b1
                                      (GHC.Base.++
                                         @ GHC.Types.Char
                                         GHC.Show.showCommaSpace1
                                         (GHC.CString.unpackAppendCString#
                                            Language.Python.Common.AST.$fShowFromItems3
                                            (f13
                                               (GHC.CString.unpackAppendCString#
                                                  Language.Python.Common.AST.$fShowComprehension1
                                                  (GHC.Types.:
                                                     @ GHC.Types.Char
                                                     GHC.Show.$fShow(,)2
                                                     x)))))))) } }) -}
cf431e64d114ff48b3a5eb8fda819c32
  $w$cshowsPrec8 ::
    GHC.Show.Show annot =>
    GHC.Prim.Int#
    -> Language.Python.Common.AST.ExceptClause annot
    -> Language.Python.Common.AST.Suite annot
    -> annot
    -> GHC.Show.ShowS
  {- Arity: 5,
     Strictness: <L,U(C(C1(C(U))),A,A)><S,U><L,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ annot1
                   (w :: GHC.Show.Show annot1)
                   (ww :: GHC.Prim.Int#)
                   (ww1 :: Language.Python.Common.AST.ExceptClause annot1)
                   (ww2 :: Language.Python.Common.AST.Suite annot1)
                   (ww3 :: annot1) ->
                 let {
                   f12 :: GHC.Base.String -> GHC.Base.String
                   = Language.Python.Common.AST.$fShowExceptClause_$cshowsPrec
                       @ annot1
                       w
                       Language.Python.Common.AST.$fDataExpr3
                       ww1
                 } in
                 let {
                   f13 :: Language.Python.Common.AST.Statement annot1
                          -> GHC.Show.ShowS
                   = Language.Python.Common.AST.$fShowHandler_$cshowsPrec1
                       @ annot1
                       w
                       Language.Python.Common.AST.$fDataExpr3
                 } in
                 let {
                   f14 :: GHC.Base.String -> GHC.Base.String
                   = GHC.Show.showsPrec
                       @ annot1
                       w
                       Language.Python.Common.AST.$fDataExpr3
                       ww3
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11#) of wild {
                   GHC.Types.False
                   -> \ (x :: GHC.Base.String) ->
                      GHC.CString.unpackAppendCString#
                        Language.Python.Common.AST.$fShowHandler4
                        (GHC.CString.unpackAppendCString#
                           Language.Python.Common.AST.$fShowHandler3
                           (f12
                              (GHC.Base.++
                                 @ GHC.Types.Char
                                 GHC.Show.showCommaSpace1
                                 (GHC.CString.unpackAppendCString#
                                    Language.Python.Common.AST.$fShowHandler2
                                    (GHC.Show.showList__
                                       @ (Language.Python.Common.AST.Statement annot1)
                                       f13
                                       ww2
                                       (GHC.Base.++
                                          @ GHC.Types.Char
                                          GHC.Show.showCommaSpace1
                                          (GHC.CString.unpackAppendCString#
                                             Language.Python.Common.AST.$fShowHandler1
                                             (f14
                                                (GHC.CString.unpackAppendCString#
                                                   Language.Python.Common.AST.$fShowComprehension1
                                                   x)))))))))
                   GHC.Types.True
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (GHC.CString.unpackAppendCString#
                           Language.Python.Common.AST.$fShowHandler4
                           (GHC.CString.unpackAppendCString#
                              Language.Python.Common.AST.$fShowHandler3
                              (f12
                                 (GHC.Base.++
                                    @ GHC.Types.Char
                                    GHC.Show.showCommaSpace1
                                    (GHC.CString.unpackAppendCString#
                                       Language.Python.Common.AST.$fShowHandler2
                                       (GHC.Show.showList__
                                          @ (Language.Python.Common.AST.Statement annot1)
                                          f13
                                          ww2
                                          (GHC.Base.++
                                             @ GHC.Types.Char
                                             GHC.Show.showCommaSpace1
                                             (GHC.CString.unpackAppendCString#
                                                Language.Python.Common.AST.$fShowHandler1
                                                (f14
                                                   (GHC.CString.unpackAppendCString#
                                                      Language.Python.Common.AST.$fShowComprehension1
                                                      (GHC.Types.:
                                                         @ GHC.Types.Char
                                                         GHC.Show.$fShow(,)2
                                                         x))))))))))) }) -}
c7c0533ea1d69275259860921c488f98
  $w$cshowsPrec9 ::
    GHC.Show.Show annot =>
    GHC.Prim.Int# -> GHC.Base.String -> annot -> GHC.Show.ShowS
  {- Arity: 4,
     Strictness: <L,1*U(1*C1(C1(C(U))),A,A)><S,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ annot1
                   (w :: GHC.Show.Show annot1)
                   (ww :: GHC.Prim.Int#)
                   (ww1 :: GHC.Base.String)
                   (ww2 :: annot1) ->
                 let {
                   f12 :: GHC.Base.String -> GHC.Base.String
                   = GHC.Show.showsPrec
                       @ annot1
                       w
                       Language.Python.Common.AST.$fDataExpr3
                       ww2
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11#) of wild {
                   GHC.Types.False
                   -> \ (x :: GHC.Base.String) ->
                      GHC.CString.unpackAppendCString#
                        Language.Python.Common.AST.$fShowIdent3
                        (GHC.CString.unpackAppendCString#
                           Language.Python.Common.AST.$fShowIdent2
                           (GHC.Types.:
                              @ GHC.Types.Char
                              GHC.Show.$fShow(,)3
                              (GHC.Show.showLitString
                                 ww1
                                 (GHC.Types.:
                                    @ GHC.Types.Char
                                    GHC.Show.$fShow(,)3
                                    (GHC.Base.++
                                       @ GHC.Types.Char
                                       GHC.Show.showCommaSpace1
                                       (GHC.CString.unpackAppendCString#
                                          Language.Python.Common.AST.$fShowIdent1
                                          (f12
                                             (GHC.CString.unpackAppendCString#
                                                Language.Python.Common.AST.$fShowComprehension1
                                                x))))))))
                   GHC.Types.True
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (GHC.CString.unpackAppendCString#
                           Language.Python.Common.AST.$fShowIdent3
                           (GHC.CString.unpackAppendCString#
                              Language.Python.Common.AST.$fShowIdent2
                              (GHC.Types.:
                                 @ GHC.Types.Char
                                 GHC.Show.$fShow(,)3
                                 (GHC.Show.showLitString
                                    ww1
                                    (GHC.Types.:
                                       @ GHC.Types.Char
                                       GHC.Show.$fShow(,)3
                                       (GHC.Base.++
                                          @ GHC.Types.Char
                                          GHC.Show.showCommaSpace1
                                          (GHC.CString.unpackAppendCString#
                                             Language.Python.Common.AST.$fShowIdent1
                                             (f12
                                                (GHC.CString.unpackAppendCString#
                                                   Language.Python.Common.AST.$fShowComprehension1
                                                   (GHC.Types.:
                                                      @ GHC.Types.Char
                                                      GHC.Show.$fShow(,)2
                                                      x)))))))))) }) -}
ca5b475912faba16480ea09a8091760b
  class Annotated (t :: * -> *) where
    annot :: t annot -> annot
    {-# MINIMAL annot #-}
94dde4ffceed0a2a13daed020b6576e1
  data Argument annot
    = ArgExpr {arg_expr :: Language.Python.Common.AST.Expr annot,
               arg_annot :: annot}
    | ArgVarArgsPos {arg_expr :: Language.Python.Common.AST.Expr annot,
                     arg_annot :: annot}
    | ArgVarArgsKeyword {arg_expr :: Language.Python.Common.AST.Expr
                                       annot,
                         arg_annot :: annot}
    | ArgKeyword {arg_keyword :: Language.Python.Common.AST.Ident
                                   annot,
                  arg_expr :: Language.Python.Common.AST.Expr annot,
                  arg_annot :: annot}
94dde4ffceed0a2a13daed020b6576e1
  type ArgumentSpan =
    Language.Python.Common.AST.Argument
      Language.Python.Common.SrcLocation.SrcSpan
f55a81e56367dca5b5d86dd1548fd97f
  data AssignOp annot
    = PlusAssign {assignOp_annot :: annot}
    | MinusAssign {assignOp_annot :: annot}
    | MultAssign {assignOp_annot :: annot}
    | DivAssign {assignOp_annot :: annot}
    | ModAssign {assignOp_annot :: annot}
    | PowAssign {assignOp_annot :: annot}
    | BinAndAssign {assignOp_annot :: annot}
    | BinOrAssign {assignOp_annot :: annot}
    | BinXorAssign {assignOp_annot :: annot}
    | LeftShiftAssign {assignOp_annot :: annot}
    | RightShiftAssign {assignOp_annot :: annot}
    | FloorDivAssign {assignOp_annot :: annot}
    | MatrixMultAssign {assignOp_annot :: annot}
f55a81e56367dca5b5d86dd1548fd97f
  type AssignOpSpan =
    Language.Python.Common.AST.AssignOp
      Language.Python.Common.SrcLocation.SrcSpan
94dde4ffceed0a2a13daed020b6576e1
  data CompFor annot
    = CompFor {comp_for_async :: GHC.Types.Bool,
               comp_for_exprs :: [Language.Python.Common.AST.Expr annot],
               comp_in_expr :: Language.Python.Common.AST.Expr annot,
               comp_for_iter :: GHC.Base.Maybe
                                  (Language.Python.Common.AST.CompIter annot),
               comp_for_annot :: annot}
94dde4ffceed0a2a13daed020b6576e1
  type CompForSpan =
    Language.Python.Common.AST.CompFor
      Language.Python.Common.SrcLocation.SrcSpan
94dde4ffceed0a2a13daed020b6576e1
  data CompIf annot
    = CompIf {comp_if :: Language.Python.Common.AST.Expr annot,
              comp_if_iter :: GHC.Base.Maybe
                                (Language.Python.Common.AST.CompIter annot),
              comp_if_annot :: annot}
94dde4ffceed0a2a13daed020b6576e1
  type CompIfSpan =
    Language.Python.Common.AST.CompIf
      Language.Python.Common.SrcLocation.SrcSpan
94dde4ffceed0a2a13daed020b6576e1
  data CompIter annot
    = IterFor {comp_iter_for :: Language.Python.Common.AST.CompFor
                                  annot,
               comp_iter_annot :: annot}
    | IterIf {comp_iter_if :: Language.Python.Common.AST.CompIf annot,
              comp_iter_annot :: annot}
94dde4ffceed0a2a13daed020b6576e1
  type CompIterSpan =
    Language.Python.Common.AST.CompIter
      Language.Python.Common.SrcLocation.SrcSpan
94dde4ffceed0a2a13daed020b6576e1
  data Comprehension annot
    = Comprehension {comprehension_expr :: Language.Python.Common.AST.ComprehensionExpr
                                             annot,
                     comprehension_for :: Language.Python.Common.AST.CompFor annot,
                     comprehension_annot :: annot}
94dde4ffceed0a2a13daed020b6576e1
  data ComprehensionExpr annot
    = ComprehensionExpr (Language.Python.Common.AST.Expr annot)
    | ComprehensionDict (Language.Python.Common.AST.DictKeyDatumList
                           annot)
94dde4ffceed0a2a13daed020b6576e1
  type ComprehensionExprSpan =
    Language.Python.Common.AST.ComprehensionExpr
      Language.Python.Common.SrcLocation.SrcSpan
94dde4ffceed0a2a13daed020b6576e1
  type ComprehensionSpan =
    Language.Python.Common.AST.Comprehension
      Language.Python.Common.SrcLocation.SrcSpan
6e1ab2fb537d2522edcf9b3f967431ea
  data Decorator annot
    = Decorator {decorator_name :: Language.Python.Common.AST.DottedName
                                     annot,
                 decorator_args :: [Language.Python.Common.AST.Argument annot],
                 decorator_annot :: annot}
6e1ab2fb537d2522edcf9b3f967431ea
  type DecoratorSpan =
    Language.Python.Common.AST.Decorator
      Language.Python.Common.SrcLocation.SrcSpan
94dde4ffceed0a2a13daed020b6576e1
  data DictKeyDatumList annot
    = DictMappingPair (Language.Python.Common.AST.Expr annot)
                      (Language.Python.Common.AST.Expr annot)
    | DictUnpacking (Language.Python.Common.AST.Expr annot)
94dde4ffceed0a2a13daed020b6576e1
  type DictKeyDatumListSpan =
    Language.Python.Common.AST.DictKeyDatumList
      Language.Python.Common.SrcLocation.SrcSpan
7a1fdcb56d2427503fddeab61367bbc5
  type DottedName annot = [Language.Python.Common.AST.Ident annot]
a5e20e92d1dd22978ba34ba5b6e7214b
  type DottedNameSpan =
    Language.Python.Common.AST.DottedName
      Language.Python.Common.SrcLocation.SrcSpan
54ad83b54b9c0dd8bf180da8d82f4195
  data ExceptClause annot
    = ExceptClause {except_clause :: GHC.Base.Maybe
                                       (Language.Python.Common.AST.Expr annot,
                                        GHC.Base.Maybe (Language.Python.Common.AST.Expr annot)),
                    except_clause_annot :: annot}
54ad83b54b9c0dd8bf180da8d82f4195
  type ExceptClauseSpan =
    Language.Python.Common.AST.ExceptClause
      Language.Python.Common.SrcLocation.SrcSpan
94dde4ffceed0a2a13daed020b6576e1
  data Expr annot
    = Var {var_ident :: Language.Python.Common.AST.Ident annot,
           expr_annot :: annot}
    | Int {int_value :: GHC.Integer.Type.Integer,
           expr_literal :: GHC.Base.String,
           expr_annot :: annot}
    | LongInt {int_value :: GHC.Integer.Type.Integer,
               expr_literal :: GHC.Base.String,
               expr_annot :: annot}
    | Float {float_value :: GHC.Types.Double,
             expr_literal :: GHC.Base.String,
             expr_annot :: annot}
    | Imaginary {imaginary_value :: GHC.Types.Double,
                 expr_literal :: GHC.Base.String,
                 expr_annot :: annot}
    | Bool {bool_value :: GHC.Types.Bool, expr_annot :: annot}
    | None {expr_annot :: annot}
    | Ellipsis {expr_annot :: annot}
    | ByteStrings {byte_string_strings :: [GHC.Base.String],
                   expr_annot :: annot}
    | Strings {strings_strings :: [GHC.Base.String],
               expr_annot :: annot}
    | UnicodeStrings {unicodestrings_strings :: [GHC.Base.String],
                      expr_annot :: annot}
    | Call {call_fun :: Language.Python.Common.AST.Expr annot,
            call_args :: [Language.Python.Common.AST.Argument annot],
            expr_annot :: annot}
    | Subscript {subscriptee :: Language.Python.Common.AST.Expr annot,
                 subscript_expr :: Language.Python.Common.AST.Expr annot,
                 expr_annot :: annot}
    | SlicedExpr {slicee :: Language.Python.Common.AST.Expr annot,
                  slices :: [Language.Python.Common.AST.Slice annot],
                  expr_annot :: annot}
    | CondExpr {ce_true_branch :: Language.Python.Common.AST.Expr
                                    annot,
                ce_condition :: Language.Python.Common.AST.Expr annot,
                ce_false_branch :: Language.Python.Common.AST.Expr annot,
                expr_annot :: annot}
    | BinaryOp {operator :: Language.Python.Common.AST.Op annot,
                left_op_arg :: Language.Python.Common.AST.Expr annot,
                right_op_arg :: Language.Python.Common.AST.Expr annot,
                expr_annot :: annot}
    | UnaryOp {operator :: Language.Python.Common.AST.Op annot,
               op_arg :: Language.Python.Common.AST.Expr annot,
               expr_annot :: annot}
    | Dot {dot_expr :: Language.Python.Common.AST.Expr annot,
           dot_attribute :: Language.Python.Common.AST.Ident annot,
           expr_annot :: annot}
    | Lambda {lambda_args :: [Language.Python.Common.AST.Parameter
                                annot],
              lambda_body :: Language.Python.Common.AST.Expr annot,
              expr_annot :: annot}
    | Tuple {tuple_exprs :: [Language.Python.Common.AST.Expr annot],
             expr_annot :: annot}
    | Yield {yield_arg :: GHC.Base.Maybe
                            (Language.Python.Common.AST.YieldArg annot),
             expr_annot :: annot}
    | Generator {gen_comprehension :: Language.Python.Common.AST.Comprehension
                                        annot,
                 expr_annot :: annot}
    | Await {await_expr :: Language.Python.Common.AST.Expr annot,
             expr_annot :: annot}
    | ListComp {list_comprehension :: Language.Python.Common.AST.Comprehension
                                        annot,
                expr_annot :: annot}
    | List {list_exprs :: [Language.Python.Common.AST.Expr annot],
            expr_annot :: annot}
    | Dictionary {dict_mappings :: [Language.Python.Common.AST.DictKeyDatumList
                                      annot],
                  expr_annot :: annot}
    | DictComp {dict_comprehension :: Language.Python.Common.AST.Comprehension
                                        annot,
                expr_annot :: annot}
    | Set {set_exprs :: [Language.Python.Common.AST.Expr annot],
           expr_annot :: annot}
    | SetComp {set_comprehension :: Language.Python.Common.AST.Comprehension
                                      annot,
               expr_annot :: annot}
    | Starred {starred_expr :: Language.Python.Common.AST.Expr annot,
               expr_annot :: annot}
    | Paren {paren_expr :: Language.Python.Common.AST.Expr annot,
             expr_annot :: annot}
    | StringConversion {backquoted_expr :: Language.Python.Common.AST.Expr
                                             annot,
                        expr_anot :: annot}
94dde4ffceed0a2a13daed020b6576e1
  type ExprSpan =
    Language.Python.Common.AST.Expr
      Language.Python.Common.SrcLocation.SrcSpan
73d811e85ab4018f7789c4c4421a9fde
  data FromItem annot
    = FromItem {from_item_name :: Language.Python.Common.AST.Ident
                                    annot,
                from_as_name :: GHC.Base.Maybe
                                  (Language.Python.Common.AST.Ident annot),
                from_item_annot :: annot}
73d811e85ab4018f7789c4c4421a9fde
  type FromItemSpan =
    Language.Python.Common.AST.FromItem
      Language.Python.Common.SrcLocation.SrcSpan
e3cd8a0dc8214c8f5ef60ed5a9ac11ef
  data FromItems annot
    = ImportEverything {from_items_annot :: annot}
    | FromItems {from_items_items :: [Language.Python.Common.AST.FromItem
                                        annot],
                 from_items_annot :: annot}
e3cd8a0dc8214c8f5ef60ed5a9ac11ef
  type FromItemsSpan =
    Language.Python.Common.AST.FromItems
      Language.Python.Common.SrcLocation.SrcSpan
cf431e64d114ff48b3a5eb8fda819c32
  data Handler annot
    = Handler {handler_clause :: Language.Python.Common.AST.ExceptClause
                                   annot,
               handler_suite :: Language.Python.Common.AST.Suite annot,
               handler_annot :: annot}
cf431e64d114ff48b3a5eb8fda819c32
  type HandlerSpan =
    Language.Python.Common.AST.Handler
      Language.Python.Common.SrcLocation.SrcSpan
6aab1d6f902c3e0dbc09c99c8605e197
  data Ident annot
    = Ident {ident_string :: !GHC.Base.String, ident_annot :: annot}
6aab1d6f902c3e0dbc09c99c8605e197
  type IdentSpan =
    Language.Python.Common.AST.Ident
      Language.Python.Common.SrcLocation.SrcSpan
283607fc44cb0ad26a76914defc72d00
  data ImportItem annot
    = ImportItem {import_item_name :: Language.Python.Common.AST.DottedName
                                        annot,
                  import_as_name :: GHC.Base.Maybe
                                      (Language.Python.Common.AST.Ident annot),
                  import_item_annot :: annot}
283607fc44cb0ad26a76914defc72d00
  type ImportItemSpan =
    Language.Python.Common.AST.ImportItem
      Language.Python.Common.SrcLocation.SrcSpan
01a50092e1f9a1aefabdff796e5265a4
  data ImportRelative annot
    = ImportRelative {import_relative_dots :: GHC.Types.Int,
                      import_relative_module :: GHC.Base.Maybe
                                                  (Language.Python.Common.AST.DottedName annot),
                      import_relative_annot :: annot}
01a50092e1f9a1aefabdff796e5265a4
  type ImportRelativeSpan =
    Language.Python.Common.AST.ImportRelative
      Language.Python.Common.SrcLocation.SrcSpan
789db2a4b3c023a9cf43afdd1f0c3249
  newtype Module annot
    = Module [Language.Python.Common.AST.Statement annot]
86810320d90325ede6ee77588677d73d
  type ModuleSpan =
    Language.Python.Common.AST.Module
      Language.Python.Common.SrcLocation.SrcSpan
3e80c1212dbae482ce637a5dc72042ac
  data Op annot
    = And {op_annot :: annot}
    | Or {op_annot :: annot}
    | Not {op_annot :: annot}
    | Exponent {op_annot :: annot}
    | LessThan {op_annot :: annot}
    | GreaterThan {op_annot :: annot}
    | Equality {op_annot :: annot}
    | GreaterThanEquals {op_annot :: annot}
    | LessThanEquals {op_annot :: annot}
    | NotEquals {op_annot :: annot}
    | NotEqualsV2 {op_annot :: annot}
    | In {op_annot :: annot}
    | Is {op_annot :: annot}
    | IsNot {op_annot :: annot}
    | NotIn {op_annot :: annot}
    | BinaryOr {op_annot :: annot}
    | Xor {op_annot :: annot}
    | BinaryAnd {op_annot :: annot}
    | ShiftLeft {op_annot :: annot}
    | ShiftRight {op_annot :: annot}
    | Multiply {op_annot :: annot}
    | Plus {op_annot :: annot}
    | Minus {op_annot :: annot}
    | Divide {op_annot :: annot}
    | FloorDivide {op_annot :: annot}
    | MatrixMult {op_annot :: annot}
    | Invert {op_annot :: annot}
    | Modulo {op_annot :: annot}
3e80c1212dbae482ce637a5dc72042ac
  type OpSpan =
    Language.Python.Common.AST.Op
      Language.Python.Common.SrcLocation.SrcSpan
77aacf63ade2d28a10031365ad257b9f
  data ParamTuple annot
    = ParamTupleName {param_tuple_name :: Language.Python.Common.AST.Ident
                                            annot,
                      param_tuple_annot :: annot}
    | ParamTuple {param_tuple :: [Language.Python.Common.AST.ParamTuple
                                    annot],
                  param_tuple_annot :: annot}
77aacf63ade2d28a10031365ad257b9f
  type ParamTupleSpan =
    Language.Python.Common.AST.ParamTuple
      Language.Python.Common.SrcLocation.SrcSpan
94dde4ffceed0a2a13daed020b6576e1
  data Parameter annot
    = Param {param_name :: Language.Python.Common.AST.Ident annot,
             param_py_annotation :: GHC.Base.Maybe
                                      (Language.Python.Common.AST.Expr annot),
             param_default :: GHC.Base.Maybe
                                (Language.Python.Common.AST.Expr annot),
             param_annot :: annot}
    | VarArgsPos {param_name :: Language.Python.Common.AST.Ident annot,
                  param_py_annotation :: GHC.Base.Maybe
                                           (Language.Python.Common.AST.Expr annot),
                  param_annot :: annot}
    | VarArgsKeyword {param_name :: Language.Python.Common.AST.Ident
                                      annot,
                      param_py_annotation :: GHC.Base.Maybe
                                               (Language.Python.Common.AST.Expr annot),
                      param_annot :: annot}
    | EndPositional {param_annot :: annot}
    | UnPackTuple {param_unpack_tuple :: Language.Python.Common.AST.ParamTuple
                                           annot,
                   param_default :: GHC.Base.Maybe
                                      (Language.Python.Common.AST.Expr annot),
                   param_annot :: annot}
94dde4ffceed0a2a13daed020b6576e1
  type ParameterSpan =
    Language.Python.Common.AST.Parameter
      Language.Python.Common.SrcLocation.SrcSpan
40b646133484efeda0b61064c970b83c
  data RaiseExpr annot
    = RaiseV3 (GHC.Base.Maybe
                 (Language.Python.Common.AST.Expr annot,
                  GHC.Base.Maybe (Language.Python.Common.AST.Expr annot)))
    | RaiseV2 (GHC.Base.Maybe
                 (Language.Python.Common.AST.Expr annot,
                  GHC.Base.Maybe
                    (Language.Python.Common.AST.Expr annot,
                     GHC.Base.Maybe (Language.Python.Common.AST.Expr annot))))
5f5f18aa546c3a3c5fc67ab98425ccd8
  type RaiseExprSpan =
    Language.Python.Common.AST.RaiseExpr
      Language.Python.Common.SrcLocation.SrcSpan
94dde4ffceed0a2a13daed020b6576e1
  data Slice annot
    = SliceProper {slice_lower :: GHC.Base.Maybe
                                    (Language.Python.Common.AST.Expr annot),
                   slice_upper :: GHC.Base.Maybe
                                    (Language.Python.Common.AST.Expr annot),
                   slice_stride :: GHC.Base.Maybe
                                     (GHC.Base.Maybe (Language.Python.Common.AST.Expr annot)),
                   slice_annot :: annot}
    | SliceExpr {slice_expr :: Language.Python.Common.AST.Expr annot,
                 slice_annot :: annot}
    | SliceEllipsis {slice_annot :: annot}
94dde4ffceed0a2a13daed020b6576e1
  type SliceSpan =
    Language.Python.Common.AST.Slice
      Language.Python.Common.SrcLocation.SrcSpan
cf431e64d114ff48b3a5eb8fda819c32
  data Statement annot
    = Import {import_items :: [Language.Python.Common.AST.ImportItem
                                 annot],
              stmt_annot :: annot}
    | FromImport {from_module :: Language.Python.Common.AST.ImportRelative
                                   annot,
                  from_items :: Language.Python.Common.AST.FromItems annot,
                  stmt_annot :: annot}
    | While {while_cond :: Language.Python.Common.AST.Expr annot,
             while_body :: Language.Python.Common.AST.Suite annot,
             while_else :: Language.Python.Common.AST.Suite annot,
             stmt_annot :: annot}
    | For {for_targets :: [Language.Python.Common.AST.Expr annot],
           for_generator :: Language.Python.Common.AST.Expr annot,
           for_body :: Language.Python.Common.AST.Suite annot,
           for_else :: Language.Python.Common.AST.Suite annot,
           stmt_annot :: annot}
    | AsyncFor {for_stmt :: Language.Python.Common.AST.Statement annot,
                stmt_annot :: annot}
    | Fun {fun_name :: Language.Python.Common.AST.Ident annot,
           fun_args :: [Language.Python.Common.AST.Parameter annot],
           fun_result_annotation :: GHC.Base.Maybe
                                      (Language.Python.Common.AST.Expr annot),
           fun_body :: Language.Python.Common.AST.Suite annot,
           stmt_annot :: annot}
    | AsyncFun {fun_def :: Language.Python.Common.AST.Statement annot,
                stmt_annot :: annot}
    | Class {class_name :: Language.Python.Common.AST.Ident annot,
             class_args :: [Language.Python.Common.AST.Argument annot],
             class_body :: Language.Python.Common.AST.Suite annot,
             stmt_annot :: annot}
    | Conditional {cond_guards :: [(Language.Python.Common.AST.Expr
                                      annot,
                                    Language.Python.Common.AST.Suite annot)],
                   cond_else :: Language.Python.Common.AST.Suite annot,
                   stmt_annot :: annot}
    | Assign {assign_to :: [Language.Python.Common.AST.Expr annot],
              assign_expr :: Language.Python.Common.AST.Expr annot,
              stmt_annot :: annot}
    | AugmentedAssign {aug_assign_to :: Language.Python.Common.AST.Expr
                                          annot,
                       aug_assign_op :: Language.Python.Common.AST.AssignOp annot,
                       aug_assign_expr :: Language.Python.Common.AST.Expr annot,
                       stmt_annot :: annot}
    | AnnotatedAssign {ann_assign_annotation :: Language.Python.Common.AST.Expr
                                                  annot,
                       ann_assign_to :: Language.Python.Common.AST.Expr annot,
                       ann_assign_expr :: GHC.Base.Maybe
                                            (Language.Python.Common.AST.Expr annot),
                       stmt_annot :: annot}
    | Decorated {decorated_decorators :: [Language.Python.Common.AST.Decorator
                                            annot],
                 decorated_def :: Language.Python.Common.AST.Statement annot,
                 stmt_annot :: annot}
    | Return {return_expr :: GHC.Base.Maybe
                               (Language.Python.Common.AST.Expr annot),
              stmt_annot :: annot}
    | Try {try_body :: Language.Python.Common.AST.Suite annot,
           try_excepts :: [Language.Python.Common.AST.Handler annot],
           try_else :: Language.Python.Common.AST.Suite annot,
           try_finally :: Language.Python.Common.AST.Suite annot,
           stmt_annot :: annot}
    | Raise {raise_expr :: Language.Python.Common.AST.RaiseExpr annot,
             stmt_annot :: annot}
    | With {with_context :: [(Language.Python.Common.AST.Expr annot,
                              GHC.Base.Maybe (Language.Python.Common.AST.Expr annot))],
            with_body :: Language.Python.Common.AST.Suite annot,
            stmt_annot :: annot}
    | AsyncWith {with_stmt :: Language.Python.Common.AST.Statement
                                annot,
                 stmt_annot :: annot}
    | Pass {stmt_annot :: annot}
    | Break {stmt_annot :: annot}
    | Continue {stmt_annot :: annot}
    | Delete {del_exprs :: [Language.Python.Common.AST.Expr annot],
              stmt_annot :: annot}
    | StmtExpr {stmt_expr :: Language.Python.Common.AST.Expr annot,
                stmt_annot :: annot}
    | Global {global_vars :: [Language.Python.Common.AST.Ident annot],
              stmt_annot :: annot}
    | NonLocal {nonLocal_vars :: [Language.Python.Common.AST.Ident
                                    annot],
                stmt_annot :: annot}
    | Assert {assert_exprs :: [Language.Python.Common.AST.Expr annot],
              stmt_annot :: annot}
    | Print {print_chevron :: GHC.Types.Bool,
             print_exprs :: [Language.Python.Common.AST.Expr annot],
             print_trailing_comma :: GHC.Types.Bool,
             stmt_annot :: annot}
    | Exec {exec_expr :: Language.Python.Common.AST.Expr annot,
            exec_globals_locals :: GHC.Base.Maybe
                                     (Language.Python.Common.AST.Expr annot,
                                      GHC.Base.Maybe (Language.Python.Common.AST.Expr annot)),
            stmt_annot :: annot}
cf431e64d114ff48b3a5eb8fda819c32
  type StatementSpan =
    Language.Python.Common.AST.Statement
      Language.Python.Common.SrcLocation.SrcSpan
cf431e64d114ff48b3a5eb8fda819c32
  type Suite annot = [Language.Python.Common.AST.Statement annot]
cd84fbfdee57b86021f0a7b1524fc007
  type SuiteSpan =
    Language.Python.Common.AST.Suite
      Language.Python.Common.SrcLocation.SrcSpan
94dde4ffceed0a2a13daed020b6576e1
  data YieldArg annot
    = YieldFrom (Language.Python.Common.AST.Expr annot) annot
    | YieldExpr (Language.Python.Common.AST.Expr annot)
94dde4ffceed0a2a13daed020b6576e1
  type YieldArgSpan =
    Language.Python.Common.AST.YieldArg
      Language.Python.Common.SrcLocation.SrcSpan
cf431e64d114ff48b3a5eb8fda819c32
  ann_assign_annotation ::
    Language.Python.Common.AST.Statement annot
    -> Language.Python.Common.AST.Expr annot
  RecSel Left Language.Python.Common.AST.Statement
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ annot1 (ds :: Language.Python.Common.AST.Statement annot1) ->
                 case ds of wild {
                   DEFAULT
                   -> Language.Python.Common.AST.ann_assign_annotation1 @ annot1
                   Language.Python.Common.AST.AnnotatedAssign ds1 ds2 ds3 ds4
                   -> ds1 }) -}
bd555d7f57ae20a210f5945b5f1e9bf6
  ann_assign_annotation1 :: Language.Python.Common.AST.Expr annot
  {- Strictness: x -}
cf431e64d114ff48b3a5eb8fda819c32
  ann_assign_expr ::
    Language.Python.Common.AST.Statement annot
    -> GHC.Base.Maybe (Language.Python.Common.AST.Expr annot)
  RecSel Left Language.Python.Common.AST.Statement
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ annot1 (ds :: Language.Python.Common.AST.Statement annot1) ->
                 case ds of wild {
                   DEFAULT -> Language.Python.Common.AST.ann_assign_expr1 @ annot1
                   Language.Python.Common.AST.AnnotatedAssign ds1 ds2 ds3 ds4
                   -> ds3 }) -}
dec234a09821e32b6ad8a45bdb303a37
  ann_assign_expr1 ::
    GHC.Base.Maybe (Language.Python.Common.AST.Expr annot)
  {- Strictness: x -}
cf431e64d114ff48b3a5eb8fda819c32
  ann_assign_to ::
    Language.Python.Common.AST.Statement annot
    -> Language.Python.Common.AST.Expr annot
  RecSel Left Language.Python.Common.AST.Statement
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ annot1 (ds :: Language.Python.Common.AST.Statement annot1) ->
                 case ds of wild {
                   DEFAULT -> Language.Python.Common.AST.ann_assign_to1 @ annot1
                   Language.Python.Common.AST.AnnotatedAssign ds1 ds2 ds3 ds4
                   -> ds2 }) -}
02866a91ed897feb9d9246b6de09ffca
  ann_assign_to1 :: Language.Python.Common.AST.Expr annot
  {- Strictness: x -}
94dde4ffceed0a2a13daed020b6576e1
  arg_annot :: Language.Python.Common.AST.Argument annot -> annot
  RecSel Left Language.Python.Common.AST.Argument
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ annot1 (ds :: Language.Python.Common.AST.Argument annot1) ->
                 case ds of wild {
                   Language.Python.Common.AST.ArgExpr ds1 ds2 -> ds2
                   Language.Python.Common.AST.ArgVarArgsPos ds1 ds2 -> ds2
                   Language.Python.Common.AST.ArgVarArgsKeyword ds1 ds2 -> ds2
                   Language.Python.Common.AST.ArgKeyword ds1 ds2 ds3 -> ds3 }) -}
94dde4ffceed0a2a13daed020b6576e1
  arg_expr ::
    Language.Python.Common.AST.Argument annot
    -> Language.Python.Common.AST.Expr annot
  RecSel Left Language.Python.Common.AST.Argument
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ annot1 (ds :: Language.Python.Common.AST.Argument annot1) ->
                 case ds of wild {
                   Language.Python.Common.AST.ArgExpr ds1 ds2 -> ds1
                   Language.Python.Common.AST.ArgVarArgsPos ds1 ds2 -> ds1
                   Language.Python.Common.AST.ArgVarArgsKeyword ds1 ds2 -> ds1
                   Language.Python.Common.AST.ArgKeyword ds1 ds2 ds3 -> ds2 }) -}
94dde4ffceed0a2a13daed020b6576e1
  arg_keyword ::
    Language.Python.Common.AST.Argument annot
    -> Language.Python.Common.AST.Ident annot
  RecSel Left Language.Python.Common.AST.Argument
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ annot1 (ds :: Language.Python.Common.AST.Argument annot1) ->
                 case ds of wild {
                   DEFAULT -> Language.Python.Common.AST.arg_keyword1 @ annot1
                   Language.Python.Common.AST.ArgKeyword ds1 ds2 ds3 -> ds1 }) -}
5f49e8d58a68b8ae6e9a136762b08d7a
  arg_keyword1 :: Language.Python.Common.AST.Ident annot
  {- Strictness: x -}
cf431e64d114ff48b3a5eb8fda819c32
  assert_exprs ::
    Language.Python.Common.AST.Statement annot
    -> [Language.Python.Common.AST.Expr annot]
  RecSel Left Language.Python.Common.AST.Statement
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ annot1 (ds :: Language.Python.Common.AST.Statement annot1) ->
                 case ds of wild {
                   DEFAULT -> Language.Python.Common.AST.assert_exprs1 @ annot1
                   Language.Python.Common.AST.Assert ds1 ds2 -> ds1 }) -}
b87c438d8b40de6c9af96ce13816f1b6
  assert_exprs1 :: [Language.Python.Common.AST.Expr annot]
  {- Strictness: x -}
f55a81e56367dca5b5d86dd1548fd97f
  assignOp_annot ::
    Language.Python.Common.AST.AssignOp annot -> annot
  RecSel Left Language.Python.Common.AST.AssignOp
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: (\ @ annot1
                   (ds :: Language.Python.Common.AST.AssignOp annot1) ->
                 case ds of wild {
                   Language.Python.Common.AST.PlusAssign ds1 -> ds1
                   Language.Python.Common.AST.MinusAssign ds1 -> ds1
                   Language.Python.Common.AST.MultAssign ds1 -> ds1
                   Language.Python.Common.AST.DivAssign ds1 -> ds1
                   Language.Python.Common.AST.ModAssign ds1 -> ds1
                   Language.Python.Common.AST.PowAssign ds1 -> ds1
                   Language.Python.Common.AST.BinAndAssign ds1 -> ds1
                   Language.Python.Common.AST.BinOrAssign ds1 -> ds1
                   Language.Python.Common.AST.BinXorAssign ds1 -> ds1
                   Language.Python.Common.AST.LeftShiftAssign ds1 -> ds1
                   Language.Python.Common.AST.RightShiftAssign ds1 -> ds1
                   Language.Python.Common.AST.FloorDivAssign ds1 -> ds1
                   Language.Python.Common.AST.MatrixMultAssign ds1 -> ds1 }) -}
cf431e64d114ff48b3a5eb8fda819c32
  assign_expr ::
    Language.Python.Common.AST.Statement annot
    -> Language.Python.Common.AST.Expr annot
  RecSel Left Language.Python.Common.AST.Statement
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ annot1 (ds :: Language.Python.Common.AST.Statement annot1) ->
                 case ds of wild {
                   DEFAULT -> Language.Python.Common.AST.assign_expr1 @ annot1
                   Language.Python.Common.AST.Assign ds1 ds2 ds3 -> ds2 }) -}
0982a379c21716cfbe455bb3b4745534
  assign_expr1 :: Language.Python.Common.AST.Expr annot
  {- Strictness: x -}
cf431e64d114ff48b3a5eb8fda819c32
  assign_to ::
    Language.Python.Common.AST.Statement annot
    -> [Language.Python.Common.AST.Expr annot]
  RecSel Left Language.Python.Common.AST.Statement
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ annot1 (ds :: Language.Python.Common.AST.Statement annot1) ->
                 case ds of wild {
                   DEFAULT -> Language.Python.Common.AST.assign_to1 @ annot1
                   Language.Python.Common.AST.Assign ds1 ds2 ds3 -> ds1 }) -}
2b26e22121bb46075a2f51ba94dfe69d
  assign_to1 :: [Language.Python.Common.AST.Expr annot]
  {- Strictness: x -}
cf431e64d114ff48b3a5eb8fda819c32
  aug_assign_expr ::
    Language.Python.Common.AST.Statement annot
    -> Language.Python.Common.AST.Expr annot
  RecSel Left Language.Python.Common.AST.Statement
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ annot1 (ds :: Language.Python.Common.AST.Statement annot1) ->
                 case ds of wild {
                   DEFAULT -> Language.Python.Common.AST.aug_assign_expr1 @ annot1
                   Language.Python.Common.AST.AugmentedAssign ds1 ds2 ds3 ds4
                   -> ds3 }) -}
795e3806555acacf798c3fd033f4d301
  aug_assign_expr1 :: Language.Python.Common.AST.Expr annot
  {- Strictness: x -}
cf431e64d114ff48b3a5eb8fda819c32
  aug_assign_op ::
    Language.Python.Common.AST.Statement annot
    -> Language.Python.Common.AST.AssignOp annot
  RecSel Left Language.Python.Common.AST.Statement
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ annot1 (ds :: Language.Python.Common.AST.Statement annot1) ->
                 case ds of wild {
                   DEFAULT -> Language.Python.Common.AST.aug_assign_op1 @ annot1
                   Language.Python.Common.AST.AugmentedAssign ds1 ds2 ds3 ds4
                   -> ds2 }) -}
9be764703230bf28dc6340aa0147b95c
  aug_assign_op1 :: Language.Python.Common.AST.AssignOp annot
  {- Strictness: x -}
cf431e64d114ff48b3a5eb8fda819c32
  aug_assign_to ::
    Language.Python.Common.AST.Statement annot
    -> Language.Python.Common.AST.Expr annot
  RecSel Left Language.Python.Common.AST.Statement
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ annot1 (ds :: Language.Python.Common.AST.Statement annot1) ->
                 case ds of wild {
                   DEFAULT -> Language.Python.Common.AST.aug_assign_to1 @ annot1
                   Language.Python.Common.AST.AugmentedAssign ds1 ds2 ds3 ds4
                   -> ds1 }) -}
9492b101bd84ed922931d3c9fb90f259
  aug_assign_to1 :: Language.Python.Common.AST.Expr annot
  {- Strictness: x -}
94dde4ffceed0a2a13daed020b6576e1
  await_expr ::
    Language.Python.Common.AST.Expr annot
    -> Language.Python.Common.AST.Expr annot
  RecSel Left Language.Python.Common.AST.Expr
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ annot1 (ds :: Language.Python.Common.AST.Expr annot1) ->
                 case ds of wild {
                   DEFAULT -> Language.Python.Common.AST.await_expr1 @ annot1
                   Language.Python.Common.AST.Await ds1 ds2 -> ds1 }) -}
94dde4ffceed0a2a13daed020b6576e1
  await_expr1 :: Language.Python.Common.AST.Expr annot
  {- Strictness: x -}
94dde4ffceed0a2a13daed020b6576e1
  backquoted_expr ::
    Language.Python.Common.AST.Expr annot
    -> Language.Python.Common.AST.Expr annot
  RecSel Left Language.Python.Common.AST.Expr
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ annot1 (ds :: Language.Python.Common.AST.Expr annot1) ->
                 case ds of wild {
                   DEFAULT -> Language.Python.Common.AST.backquoted_expr1 @ annot1
                   Language.Python.Common.AST.StringConversion ds1 ds2 -> ds1 }) -}
94dde4ffceed0a2a13daed020b6576e1
  backquoted_expr1 :: Language.Python.Common.AST.Expr annot
  {- Strictness: x -}
94dde4ffceed0a2a13daed020b6576e1
  bool_value ::
    Language.Python.Common.AST.Expr annot -> GHC.Types.Bool
  RecSel Left Language.Python.Common.AST.Expr
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ annot1 (ds :: Language.Python.Common.AST.Expr annot1) ->
                 case ds of wild {
                   DEFAULT -> Language.Python.Common.AST.bool_value1
                   Language.Python.Common.AST.Bool ds1 ds2 -> ds1 }) -}
6bb16ad47caba43b9e23bacfaad600cb
  bool_value1 :: GHC.Types.Bool
  {- Strictness: x -}
94dde4ffceed0a2a13daed020b6576e1
  byte_string_strings ::
    Language.Python.Common.AST.Expr annot -> [GHC.Base.String]
  RecSel Left Language.Python.Common.AST.Expr
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ annot1 (ds :: Language.Python.Common.AST.Expr annot1) ->
                 case ds of wild {
                   DEFAULT -> Language.Python.Common.AST.byte_string_strings1
                   Language.Python.Common.AST.ByteStrings ds1 ds2 -> ds1 }) -}
6c98100df1430521ace7278ae5548ad1
  byte_string_strings1 :: [GHC.Base.String]
  {- Strictness: x -}
94dde4ffceed0a2a13daed020b6576e1
  call_args ::
    Language.Python.Common.AST.Expr annot
    -> [Language.Python.Common.AST.Argument annot]
  RecSel Left Language.Python.Common.AST.Expr
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ annot1 (ds :: Language.Python.Common.AST.Expr annot1) ->
                 case ds of wild {
                   DEFAULT -> Language.Python.Common.AST.call_args1 @ annot1
                   Language.Python.Common.AST.Call ds1 ds2 ds3 -> ds2 }) -}
94dde4ffceed0a2a13daed020b6576e1
  call_args1 :: [Language.Python.Common.AST.Argument annot]
  {- Strictness: x -}
94dde4ffceed0a2a13daed020b6576e1
  call_fun ::
    Language.Python.Common.AST.Expr annot
    -> Language.Python.Common.AST.Expr annot
  RecSel Left Language.Python.Common.AST.Expr
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ annot1 (ds :: Language.Python.Common.AST.Expr annot1) ->
                 case ds of wild {
                   DEFAULT -> Language.Python.Common.AST.call_fun1 @ annot1
                   Language.Python.Common.AST.Call ds1 ds2 ds3 -> ds1 }) -}
94dde4ffceed0a2a13daed020b6576e1
  call_fun1 :: Language.Python.Common.AST.Expr annot
  {- Strictness: x -}
94dde4ffceed0a2a13daed020b6576e1
  ce_condition ::
    Language.Python.Common.AST.Expr annot
    -> Language.Python.Common.AST.Expr annot
  RecSel Left Language.Python.Common.AST.Expr
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ annot1 (ds :: Language.Python.Common.AST.Expr annot1) ->
                 case ds of wild {
                   DEFAULT -> Language.Python.Common.AST.ce_condition1 @ annot1
                   Language.Python.Common.AST.CondExpr ds1 ds2 ds3 ds4 -> ds2 }) -}
94dde4ffceed0a2a13daed020b6576e1
  ce_condition1 :: Language.Python.Common.AST.Expr annot
  {- Strictness: x -}
94dde4ffceed0a2a13daed020b6576e1
  ce_false_branch ::
    Language.Python.Common.AST.Expr annot
    -> Language.Python.Common.AST.Expr annot
  RecSel Left Language.Python.Common.AST.Expr
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ annot1 (ds :: Language.Python.Common.AST.Expr annot1) ->
                 case ds of wild {
                   DEFAULT -> Language.Python.Common.AST.ce_false_branch1 @ annot1
                   Language.Python.Common.AST.CondExpr ds1 ds2 ds3 ds4 -> ds3 }) -}
94dde4ffceed0a2a13daed020b6576e1
  ce_false_branch1 :: Language.Python.Common.AST.Expr annot
  {- Strictness: x -}
94dde4ffceed0a2a13daed020b6576e1
  ce_true_branch ::
    Language.Python.Common.AST.Expr annot
    -> Language.Python.Common.AST.Expr annot
  RecSel Left Language.Python.Common.AST.Expr
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ annot1 (ds :: Language.Python.Common.AST.Expr annot1) ->
                 case ds of wild {
                   DEFAULT -> Language.Python.Common.AST.ce_true_branch1 @ annot1
                   Language.Python.Common.AST.CondExpr ds1 ds2 ds3 ds4 -> ds1 }) -}
94dde4ffceed0a2a13daed020b6576e1
  ce_true_branch1 :: Language.Python.Common.AST.Expr annot
  {- Strictness: x -}
cf431e64d114ff48b3a5eb8fda819c32
  class_args ::
    Language.Python.Common.AST.Statement annot
    -> [Language.Python.Common.AST.Argument annot]
  RecSel Left Language.Python.Common.AST.Statement
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ annot1 (ds :: Language.Python.Common.AST.Statement annot1) ->
                 case ds of wild {
                   DEFAULT -> Language.Python.Common.AST.class_args1 @ annot1
                   Language.Python.Common.AST.Class ds1 ds2 ds3 ds4 -> ds2 }) -}
e49a89ca0d2397b34a4d4c2a967a1481
  class_args1 :: [Language.Python.Common.AST.Argument annot]
  {- Strictness: x -}
cf431e64d114ff48b3a5eb8fda819c32
  class_body ::
    Language.Python.Common.AST.Statement annot
    -> Language.Python.Common.AST.Suite annot
  RecSel Left Language.Python.Common.AST.Statement
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ annot1 (ds :: Language.Python.Common.AST.Statement annot1) ->
                 case ds of wild {
                   DEFAULT -> Language.Python.Common.AST.class_body1 @ annot1
                   Language.Python.Common.AST.Class ds1 ds2 ds3 ds4 -> ds3 }) -}
cf431e64d114ff48b3a5eb8fda819c32
  class_body1 :: Language.Python.Common.AST.Suite annot
  {- Strictness: x -}
cf431e64d114ff48b3a5eb8fda819c32
  class_name ::
    Language.Python.Common.AST.Statement annot
    -> Language.Python.Common.AST.Ident annot
  RecSel Left Language.Python.Common.AST.Statement
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ annot1 (ds :: Language.Python.Common.AST.Statement annot1) ->
                 case ds of wild {
                   DEFAULT -> Language.Python.Common.AST.class_name1 @ annot1
                   Language.Python.Common.AST.Class ds1 ds2 ds3 ds4 -> ds1 }) -}
d50b47b8d0ab58fd8ccdc0ea7f180812
  class_name1 :: Language.Python.Common.AST.Ident annot
  {- Strictness: x -}
94dde4ffceed0a2a13daed020b6576e1
  comp_for_annot :: Language.Python.Common.AST.CompFor annot -> annot
  RecSel Left Language.Python.Common.AST.CompFor
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLLLS),1*U(A,A,A,A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ annot1 (ds :: Language.Python.Common.AST.CompFor annot1) ->
                 case ds of wild { Language.Python.Common.AST.CompFor ds1 ds2 ds3 ds4 ds5 ->
                 ds5 }) -}
94dde4ffceed0a2a13daed020b6576e1
  comp_for_async ::
    Language.Python.Common.AST.CompFor annot -> GHC.Types.Bool
  RecSel Left Language.Python.Common.AST.CompFor
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SLLLL),1*U(1*U,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ annot1 (ds :: Language.Python.Common.AST.CompFor annot1) ->
                 case ds of wild { Language.Python.Common.AST.CompFor ds1 ds2 ds3 ds4 ds5 ->
                 ds1 }) -}
94dde4ffceed0a2a13daed020b6576e1
  comp_for_exprs ::
    Language.Python.Common.AST.CompFor annot
    -> [Language.Python.Common.AST.Expr annot]
  RecSel Left Language.Python.Common.AST.CompFor
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSLLL),1*U(A,1*U,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ annot1 (ds :: Language.Python.Common.AST.CompFor annot1) ->
                 case ds of wild { Language.Python.Common.AST.CompFor ds1 ds2 ds3 ds4 ds5 ->
                 ds2 }) -}
94dde4ffceed0a2a13daed020b6576e1
  comp_for_iter ::
    Language.Python.Common.AST.CompFor annot
    -> GHC.Base.Maybe (Language.Python.Common.AST.CompIter annot)
  RecSel Left Language.Python.Common.AST.CompFor
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLLSL),1*U(A,A,A,1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ annot1 (ds :: Language.Python.Common.AST.CompFor annot1) ->
                 case ds of wild { Language.Python.Common.AST.CompFor ds1 ds2 ds3 ds4 ds5 ->
                 ds4 }) -}
94dde4ffceed0a2a13daed020b6576e1
  comp_if ::
    Language.Python.Common.AST.CompIf annot
    -> Language.Python.Common.AST.Expr annot
  RecSel Left Language.Python.Common.AST.CompIf
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SLL),1*U(1*U,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ annot1 (ds :: Language.Python.Common.AST.CompIf annot1) ->
                 case ds of wild { Language.Python.Common.AST.CompIf ds1 ds2 ds3 ->
                 ds1 }) -}
94dde4ffceed0a2a13daed020b6576e1
  comp_if_annot :: Language.Python.Common.AST.CompIf annot -> annot
  RecSel Left Language.Python.Common.AST.CompIf
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLS),1*U(A,A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ annot1 (ds :: Language.Python.Common.AST.CompIf annot1) ->
                 case ds of wild { Language.Python.Common.AST.CompIf ds1 ds2 ds3 ->
                 ds3 }) -}
94dde4ffceed0a2a13daed020b6576e1
  comp_if_iter ::
    Language.Python.Common.AST.CompIf annot
    -> GHC.Base.Maybe (Language.Python.Common.AST.CompIter annot)
  RecSel Left Language.Python.Common.AST.CompIf
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSL),1*U(A,1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ annot1 (ds :: Language.Python.Common.AST.CompIf annot1) ->
                 case ds of wild { Language.Python.Common.AST.CompIf ds1 ds2 ds3 ->
                 ds2 }) -}
94dde4ffceed0a2a13daed020b6576e1
  comp_in_expr ::
    Language.Python.Common.AST.CompFor annot
    -> Language.Python.Common.AST.Expr annot
  RecSel Left Language.Python.Common.AST.CompFor
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLSLL),1*U(A,A,1*U,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ annot1 (ds :: Language.Python.Common.AST.CompFor annot1) ->
                 case ds of wild { Language.Python.Common.AST.CompFor ds1 ds2 ds3 ds4 ds5 ->
                 ds3 }) -}
94dde4ffceed0a2a13daed020b6576e1
  comp_iter_annot ::
    Language.Python.Common.AST.CompIter annot -> annot
  RecSel Left Language.Python.Common.AST.CompIter
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ annot1 (ds :: Language.Python.Common.AST.CompIter annot1) ->
                 case ds of wild {
                   Language.Python.Common.AST.IterFor ds1 ds2 -> ds2
                   Language.Python.Common.AST.IterIf ds1 ds2 -> ds2 }) -}
94dde4ffceed0a2a13daed020b6576e1
  comp_iter_for ::
    Language.Python.Common.AST.CompIter annot
    -> Language.Python.Common.AST.CompFor annot
  RecSel Left Language.Python.Common.AST.CompIter
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ annot1 (ds :: Language.Python.Common.AST.CompIter annot1) ->
                 case ds of wild {
                   Language.Python.Common.AST.IterFor ds1 ds2 -> ds1
                   Language.Python.Common.AST.IterIf ipv ipv1
                   -> Language.Python.Common.AST.comp_iter_for1 @ annot1 }) -}
94dde4ffceed0a2a13daed020b6576e1
  comp_iter_for1 :: Language.Python.Common.AST.CompFor annot
  {- Strictness: x -}
94dde4ffceed0a2a13daed020b6576e1
  comp_iter_if ::
    Language.Python.Common.AST.CompIter annot
    -> Language.Python.Common.AST.CompIf annot
  RecSel Left Language.Python.Common.AST.CompIter
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ annot1 (ds :: Language.Python.Common.AST.CompIter annot1) ->
                 case ds of wild {
                   Language.Python.Common.AST.IterFor ipv ipv1
                   -> Language.Python.Common.AST.comp_iter_if1 @ annot1
                   Language.Python.Common.AST.IterIf ds1 ds2 -> ds1 }) -}
94dde4ffceed0a2a13daed020b6576e1
  comp_iter_if1 :: Language.Python.Common.AST.CompIf annot
  {- Strictness: x -}
94dde4ffceed0a2a13daed020b6576e1
  comprehension_annot ::
    Language.Python.Common.AST.Comprehension annot -> annot
  RecSel Left Language.Python.Common.AST.Comprehension
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLS),1*U(A,A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ annot1
                   (ds :: Language.Python.Common.AST.Comprehension annot1) ->
                 case ds of wild { Language.Python.Common.AST.Comprehension ds1 ds2 ds3 ->
                 ds3 }) -}
94dde4ffceed0a2a13daed020b6576e1
  comprehension_expr ::
    Language.Python.Common.AST.Comprehension annot
    -> Language.Python.Common.AST.ComprehensionExpr annot
  RecSel Left Language.Python.Common.AST.Comprehension
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SLL),1*U(1*U,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ annot1
                   (ds :: Language.Python.Common.AST.Comprehension annot1) ->
                 case ds of wild { Language.Python.Common.AST.Comprehension ds1 ds2 ds3 ->
                 ds1 }) -}
94dde4ffceed0a2a13daed020b6576e1
  comprehension_for ::
    Language.Python.Common.AST.Comprehension annot
    -> Language.Python.Common.AST.CompFor annot
  RecSel Left Language.Python.Common.AST.Comprehension
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LSL),1*U(A,1*U(U,U,U,U,U),A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ annot1
                   (ds :: Language.Python.Common.AST.Comprehension annot1) ->
                 case ds of wild { Language.Python.Common.AST.Comprehension ds1 ds2 ds3 ->
                 ds2 }) -}
cf431e64d114ff48b3a5eb8fda819c32
  cond_else ::
    Language.Python.Common.AST.Statement annot
    -> Language.Python.Common.AST.Suite annot
  RecSel Left Language.Python.Common.AST.Statement
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ annot1 (ds :: Language.Python.Common.AST.Statement annot1) ->
                 case ds of wild {
                   DEFAULT -> Language.Python.Common.AST.cond_else1 @ annot1
                   Language.Python.Common.AST.Conditional ds1 ds2 ds3 -> ds2 }) -}
cf431e64d114ff48b3a5eb8fda819c32
  cond_else1 :: Language.Python.Common.AST.Suite annot
  {- Strictness: x -}
cf431e64d114ff48b3a5eb8fda819c32
  cond_guards ::
    Language.Python.Common.AST.Statement annot
    -> [(Language.Python.Common.AST.Expr annot,
         Language.Python.Common.AST.Suite annot)]
  RecSel Left Language.Python.Common.AST.Statement
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ annot1 (ds :: Language.Python.Common.AST.Statement annot1) ->
                 case ds of wild {
                   DEFAULT -> Language.Python.Common.AST.cond_guards1 @ annot1
                   Language.Python.Common.AST.Conditional ds1 ds2 ds3 -> ds1 }) -}
cf431e64d114ff48b3a5eb8fda819c32
  cond_guards1 ::
    [(Language.Python.Common.AST.Expr annot,
      Language.Python.Common.AST.Suite annot)]
  {- Strictness: x -}
cf431e64d114ff48b3a5eb8fda819c32
  decorated_decorators ::
    Language.Python.Common.AST.Statement annot
    -> [Language.Python.Common.AST.Decorator annot]
  RecSel Left Language.Python.Common.AST.Statement
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ annot1 (ds :: Language.Python.Common.AST.Statement annot1) ->
                 case ds of wild {
                   DEFAULT
                   -> Language.Python.Common.AST.decorated_decorators1 @ annot1
                   Language.Python.Common.AST.Decorated ds1 ds2 ds3 -> ds1 }) -}
7c7400df73b92baf9c1e14b22e33becc
  decorated_decorators1 ::
    [Language.Python.Common.AST.Decorator annot]
  {- Strictness: x -}
cf431e64d114ff48b3a5eb8fda819c32
  decorated_def ::
    Language.Python.Common.AST.Statement annot
    -> Language.Python.Common.AST.Statement annot
  RecSel Left Language.Python.Common.AST.Statement
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ annot1 (ds :: Language.Python.Common.AST.Statement annot1) ->
                 case ds of wild {
                   DEFAULT -> Language.Python.Common.AST.decorated_def1 @ annot1
                   Language.Python.Common.AST.Decorated ds1 ds2 ds3 -> ds2 }) -}
cf431e64d114ff48b3a5eb8fda819c32
  decorated_def1 :: Language.Python.Common.AST.Statement annot
  {- Strictness: x -}
6e1ab2fb537d2522edcf9b3f967431ea
  decorator_annot ::
    Language.Python.Common.AST.Decorator annot -> annot
  RecSel Left Language.Python.Common.AST.Decorator
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLS),1*U(A,A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ annot1 (ds :: Language.Python.Common.AST.Decorator annot1) ->
                 case ds of wild { Language.Python.Common.AST.Decorator ds1 ds2 ds3 ->
                 ds3 }) -}
6e1ab2fb537d2522edcf9b3f967431ea
  decorator_args ::
    Language.Python.Common.AST.Decorator annot
    -> [Language.Python.Common.AST.Argument annot]
  RecSel Left Language.Python.Common.AST.Decorator
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSL),1*U(A,1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ annot1 (ds :: Language.Python.Common.AST.Decorator annot1) ->
                 case ds of wild { Language.Python.Common.AST.Decorator ds1 ds2 ds3 ->
                 ds2 }) -}
6e1ab2fb537d2522edcf9b3f967431ea
  decorator_name ::
    Language.Python.Common.AST.Decorator annot
    -> Language.Python.Common.AST.DottedName annot
  RecSel Left Language.Python.Common.AST.Decorator
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SLL),1*U(1*U,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ annot1 (ds :: Language.Python.Common.AST.Decorator annot1) ->
                 case ds of wild { Language.Python.Common.AST.Decorator ds1 ds2 ds3 ->
                 ds1 }) -}
cf431e64d114ff48b3a5eb8fda819c32
  del_exprs ::
    Language.Python.Common.AST.Statement annot
    -> [Language.Python.Common.AST.Expr annot]
  RecSel Left Language.Python.Common.AST.Statement
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ annot1 (ds :: Language.Python.Common.AST.Statement annot1) ->
                 case ds of wild {
                   DEFAULT -> Language.Python.Common.AST.del_exprs1 @ annot1
                   Language.Python.Common.AST.Delete ds1 ds2 -> ds1 }) -}
fafb220c85d3a232349d3c719a6cb2c9
  del_exprs1 :: [Language.Python.Common.AST.Expr annot]
  {- Strictness: x -}
94dde4ffceed0a2a13daed020b6576e1
  dict_comprehension ::
    Language.Python.Common.AST.Expr annot
    -> Language.Python.Common.AST.Comprehension annot
  RecSel Left Language.Python.Common.AST.Expr
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ annot1 (ds :: Language.Python.Common.AST.Expr annot1) ->
                 case ds of wild {
                   DEFAULT -> Language.Python.Common.AST.dict_comprehension1 @ annot1
                   Language.Python.Common.AST.DictComp ds1 ds2 -> ds1 }) -}
94dde4ffceed0a2a13daed020b6576e1
  dict_comprehension1 ::
    Language.Python.Common.AST.Comprehension annot
  {- Strictness: x -}
94dde4ffceed0a2a13daed020b6576e1
  dict_mappings ::
    Language.Python.Common.AST.Expr annot
    -> [Language.Python.Common.AST.DictKeyDatumList annot]
  RecSel Left Language.Python.Common.AST.Expr
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ annot1 (ds :: Language.Python.Common.AST.Expr annot1) ->
                 case ds of wild {
                   DEFAULT -> Language.Python.Common.AST.dict_mappings1 @ annot1
                   Language.Python.Common.AST.Dictionary ds1 ds2 -> ds1 }) -}
94dde4ffceed0a2a13daed020b6576e1
  dict_mappings1 ::
    [Language.Python.Common.AST.DictKeyDatumList annot]
  {- Strictness: x -}
94dde4ffceed0a2a13daed020b6576e1
  dot_attribute ::
    Language.Python.Common.AST.Expr annot
    -> Language.Python.Common.AST.Ident annot
  RecSel Left Language.Python.Common.AST.Expr
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ annot1 (ds :: Language.Python.Common.AST.Expr annot1) ->
                 case ds of wild {
                   DEFAULT -> Language.Python.Common.AST.dot_attribute1 @ annot1
                   Language.Python.Common.AST.Dot ds1 ds2 ds3 -> ds2 }) -}
f0cea8e9a8b957a9a662637b378f29a6
  dot_attribute1 :: Language.Python.Common.AST.Ident annot
  {- Strictness: x -}
94dde4ffceed0a2a13daed020b6576e1
  dot_expr ::
    Language.Python.Common.AST.Expr annot
    -> Language.Python.Common.AST.Expr annot
  RecSel Left Language.Python.Common.AST.Expr
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ annot1 (ds :: Language.Python.Common.AST.Expr annot1) ->
                 case ds of wild {
                   DEFAULT -> Language.Python.Common.AST.dot_expr1 @ annot1
                   Language.Python.Common.AST.Dot ds1 ds2 ds3 -> ds1 }) -}
94dde4ffceed0a2a13daed020b6576e1
  dot_expr1 :: Language.Python.Common.AST.Expr annot
  {- Strictness: x -}
54ad83b54b9c0dd8bf180da8d82f4195
  except_clause ::
    Language.Python.Common.AST.ExceptClause annot
    -> GHC.Base.Maybe
         (Language.Python.Common.AST.Expr annot,
          GHC.Base.Maybe (Language.Python.Common.AST.Expr annot))
  RecSel Left Language.Python.Common.AST.ExceptClause
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SL),1*U(1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ annot1
                   (ds :: Language.Python.Common.AST.ExceptClause annot1) ->
                 case ds of wild { Language.Python.Common.AST.ExceptClause ds1 ds2 ->
                 ds1 }) -}
54ad83b54b9c0dd8bf180da8d82f4195
  except_clause_annot ::
    Language.Python.Common.AST.ExceptClause annot -> annot
  RecSel Left Language.Python.Common.AST.ExceptClause
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LS),1*U(A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ annot1
                   (ds :: Language.Python.Common.AST.ExceptClause annot1) ->
                 case ds of wild { Language.Python.Common.AST.ExceptClause ds1 ds2 ->
                 ds2 }) -}
cf431e64d114ff48b3a5eb8fda819c32
  exec_expr ::
    Language.Python.Common.AST.Statement annot
    -> Language.Python.Common.AST.Expr annot
  RecSel Left Language.Python.Common.AST.Statement
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ annot1 (ds :: Language.Python.Common.AST.Statement annot1) ->
                 case ds of wild {
                   DEFAULT -> Language.Python.Common.AST.exec_expr1 @ annot1
                   Language.Python.Common.AST.Exec ds1 ds2 ds3 -> ds1 }) -}
03c1ba6ce154add653d6f5d530a8e37b
  exec_expr1 :: Language.Python.Common.AST.Expr annot
  {- Strictness: x -}
cf431e64d114ff48b3a5eb8fda819c32
  exec_globals_locals ::
    Language.Python.Common.AST.Statement annot
    -> GHC.Base.Maybe
         (Language.Python.Common.AST.Expr annot,
          GHC.Base.Maybe (Language.Python.Common.AST.Expr annot))
  RecSel Left Language.Python.Common.AST.Statement
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ annot1 (ds :: Language.Python.Common.AST.Statement annot1) ->
                 case ds of wild {
                   DEFAULT -> Language.Python.Common.AST.exec_globals_locals1 @ annot1
                   Language.Python.Common.AST.Exec ds1 ds2 ds3 -> ds2 }) -}
1900faeded2595c2de4e96b29cad5f93
  exec_globals_locals1 ::
    GHC.Base.Maybe
      (Language.Python.Common.AST.Expr annot,
       GHC.Base.Maybe (Language.Python.Common.AST.Expr annot))
  {- Strictness: x -}
94dde4ffceed0a2a13daed020b6576e1
  expr_annot :: Language.Python.Common.AST.Expr annot -> annot
  RecSel Left Language.Python.Common.AST.Expr
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ @ annot1
                   (ds :: Language.Python.Common.AST.Expr annot1) ->
                 case ds of wild {
                   Language.Python.Common.AST.Var ds1 ds2 -> ds2
                   Language.Python.Common.AST.Int ds1 ds2 ds3 -> ds3
                   Language.Python.Common.AST.LongInt ds1 ds2 ds3 -> ds3
                   Language.Python.Common.AST.Float ds1 ds2 ds3 -> ds3
                   Language.Python.Common.AST.Imaginary ds1 ds2 ds3 -> ds3
                   Language.Python.Common.AST.Bool ds1 ds2 -> ds2
                   Language.Python.Common.AST.None ds1 -> ds1
                   Language.Python.Common.AST.Ellipsis ds1 -> ds1
                   Language.Python.Common.AST.ByteStrings ds1 ds2 -> ds2
                   Language.Python.Common.AST.Strings ds1 ds2 -> ds2
                   Language.Python.Common.AST.UnicodeStrings ds1 ds2 -> ds2
                   Language.Python.Common.AST.Call ds1 ds2 ds3 -> ds3
                   Language.Python.Common.AST.Subscript ds1 ds2 ds3 -> ds3
                   Language.Python.Common.AST.SlicedExpr ds1 ds2 ds3 -> ds3
                   Language.Python.Common.AST.CondExpr ds1 ds2 ds3 ds4 -> ds4
                   Language.Python.Common.AST.BinaryOp ds1 ds2 ds3 ds4 -> ds4
                   Language.Python.Common.AST.UnaryOp ds1 ds2 ds3 -> ds3
                   Language.Python.Common.AST.Dot ds1 ds2 ds3 -> ds3
                   Language.Python.Common.AST.Lambda ds1 ds2 ds3 -> ds3
                   Language.Python.Common.AST.Tuple ds1 ds2 -> ds2
                   Language.Python.Common.AST.Yield ds1 ds2 -> ds2
                   Language.Python.Common.AST.Generator ds1 ds2 -> ds2
                   Language.Python.Common.AST.Await ds1 ds2 -> ds2
                   Language.Python.Common.AST.ListComp ds1 ds2 -> ds2
                   Language.Python.Common.AST.List ds1 ds2 -> ds2
                   Language.Python.Common.AST.Dictionary ds1 ds2 -> ds2
                   Language.Python.Common.AST.DictComp ds1 ds2 -> ds2
                   Language.Python.Common.AST.Set ds1 ds2 -> ds2
                   Language.Python.Common.AST.SetComp ds1 ds2 -> ds2
                   Language.Python.Common.AST.Starred ds1 ds2 -> ds2
                   Language.Python.Common.AST.Paren ds1 ds2 -> ds2
                   Language.Python.Common.AST.StringConversion ipv ipv1
                   -> Language.Python.Common.AST.expr_annot1 @ annot1 }) -}
bdb992741a7e8f9dbcf2debd482fe547
  expr_annot1 :: annot
  {- Strictness: x -}
94dde4ffceed0a2a13daed020b6576e1
  expr_anot :: Language.Python.Common.AST.Expr annot -> annot
  RecSel Left Language.Python.Common.AST.Expr
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ annot1 (ds :: Language.Python.Common.AST.Expr annot1) ->
                 case ds of wild {
                   DEFAULT -> Language.Python.Common.AST.expr_anot1 @ annot1
                   Language.Python.Common.AST.StringConversion ds1 ds2 -> ds2 }) -}
0207e07a02cff41a1e40b01f72a6eb6b
  expr_anot1 :: annot
  {- Strictness: x -}
94dde4ffceed0a2a13daed020b6576e1
  expr_literal ::
    Language.Python.Common.AST.Expr annot -> GHC.Base.String
  RecSel Left Language.Python.Common.AST.Expr
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ annot1 (ds :: Language.Python.Common.AST.Expr annot1) ->
                 case ds of wild {
                   DEFAULT -> Language.Python.Common.AST.expr_literal1
                   Language.Python.Common.AST.Int ds1 ds2 ds3 -> ds2
                   Language.Python.Common.AST.LongInt ds1 ds2 ds3 -> ds2
                   Language.Python.Common.AST.Float ds1 ds2 ds3 -> ds2
                   Language.Python.Common.AST.Imaginary ds1 ds2 ds3 -> ds2 }) -}
4d0a1a67886639c6cb278c226cf82d54
  expr_literal1 :: GHC.Base.String
  {- Strictness: x -}
94dde4ffceed0a2a13daed020b6576e1
  float_value ::
    Language.Python.Common.AST.Expr annot -> GHC.Types.Double
  RecSel Left Language.Python.Common.AST.Expr
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ annot1 (ds :: Language.Python.Common.AST.Expr annot1) ->
                 case ds of wild {
                   DEFAULT -> Language.Python.Common.AST.float_value1
                   Language.Python.Common.AST.Float ds1 ds2 ds3 -> ds1 }) -}
0dd02c2f25eeb59e3ac26181ea00e86f
  float_value1 :: GHC.Types.Double
  {- Strictness: x -}
cf431e64d114ff48b3a5eb8fda819c32
  for_body ::
    Language.Python.Common.AST.Statement annot
    -> Language.Python.Common.AST.Suite annot
  RecSel Left Language.Python.Common.AST.Statement
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ annot1 (ds :: Language.Python.Common.AST.Statement annot1) ->
                 case ds of wild {
                   DEFAULT -> Language.Python.Common.AST.for_body1 @ annot1
                   Language.Python.Common.AST.For ds1 ds2 ds3 ds4 ds5 -> ds3 }) -}
cf431e64d114ff48b3a5eb8fda819c32
  for_body1 :: Language.Python.Common.AST.Suite annot
  {- Strictness: x -}
cf431e64d114ff48b3a5eb8fda819c32
  for_else ::
    Language.Python.Common.AST.Statement annot
    -> Language.Python.Common.AST.Suite annot
  RecSel Left Language.Python.Common.AST.Statement
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ annot1 (ds :: Language.Python.Common.AST.Statement annot1) ->
                 case ds of wild {
                   DEFAULT -> Language.Python.Common.AST.for_else1 @ annot1
                   Language.Python.Common.AST.For ds1 ds2 ds3 ds4 ds5 -> ds4 }) -}
cf431e64d114ff48b3a5eb8fda819c32
  for_else1 :: Language.Python.Common.AST.Suite annot
  {- Strictness: x -}
cf431e64d114ff48b3a5eb8fda819c32
  for_generator ::
    Language.Python.Common.AST.Statement annot
    -> Language.Python.Common.AST.Expr annot
  RecSel Left Language.Python.Common.AST.Statement
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ annot1 (ds :: Language.Python.Common.AST.Statement annot1) ->
                 case ds of wild {
                   DEFAULT -> Language.Python.Common.AST.for_generator1 @ annot1
                   Language.Python.Common.AST.For ds1 ds2 ds3 ds4 ds5 -> ds2 }) -}
92ea8c44ea959e76bfc767a2b0e32b88
  for_generator1 :: Language.Python.Common.AST.Expr annot
  {- Strictness: x -}
cf431e64d114ff48b3a5eb8fda819c32
  for_stmt ::
    Language.Python.Common.AST.Statement annot
    -> Language.Python.Common.AST.Statement annot
  RecSel Left Language.Python.Common.AST.Statement
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ annot1 (ds :: Language.Python.Common.AST.Statement annot1) ->
                 case ds of wild {
                   DEFAULT -> Language.Python.Common.AST.for_stmt1 @ annot1
                   Language.Python.Common.AST.AsyncFor ds1 ds2 -> ds1 }) -}
cf431e64d114ff48b3a5eb8fda819c32
  for_stmt1 :: Language.Python.Common.AST.Statement annot
  {- Strictness: x -}
cf431e64d114ff48b3a5eb8fda819c32
  for_targets ::
    Language.Python.Common.AST.Statement annot
    -> [Language.Python.Common.AST.Expr annot]
  RecSel Left Language.Python.Common.AST.Statement
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ annot1 (ds :: Language.Python.Common.AST.Statement annot1) ->
                 case ds of wild {
                   DEFAULT -> Language.Python.Common.AST.for_targets1 @ annot1
                   Language.Python.Common.AST.For ds1 ds2 ds3 ds4 ds5 -> ds1 }) -}
2b6c591be5087093c1f96d7332785db5
  for_targets1 :: [Language.Python.Common.AST.Expr annot]
  {- Strictness: x -}
73d811e85ab4018f7789c4c4421a9fde
  from_as_name ::
    Language.Python.Common.AST.FromItem annot
    -> GHC.Base.Maybe (Language.Python.Common.AST.Ident annot)
  RecSel Left Language.Python.Common.AST.FromItem
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSL),1*U(A,1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ annot1 (ds :: Language.Python.Common.AST.FromItem annot1) ->
                 case ds of wild { Language.Python.Common.AST.FromItem ds1 ds2 ds3 ->
                 ds2 }) -}
73d811e85ab4018f7789c4c4421a9fde
  from_item_annot ::
    Language.Python.Common.AST.FromItem annot -> annot
  RecSel Left Language.Python.Common.AST.FromItem
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLS),1*U(A,A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ annot1 (ds :: Language.Python.Common.AST.FromItem annot1) ->
                 case ds of wild { Language.Python.Common.AST.FromItem ds1 ds2 ds3 ->
                 ds3 }) -}
73d811e85ab4018f7789c4c4421a9fde
  from_item_name ::
    Language.Python.Common.AST.FromItem annot
    -> Language.Python.Common.AST.Ident annot
  RecSel Left Language.Python.Common.AST.FromItem
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SLL),1*U(1*U(U,U),A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ annot1 (ds :: Language.Python.Common.AST.FromItem annot1) ->
                 case ds of wild { Language.Python.Common.AST.FromItem ds1 ds2 ds3 ->
                 ds1 }) -}
cf431e64d114ff48b3a5eb8fda819c32
  from_items ::
    Language.Python.Common.AST.Statement annot
    -> Language.Python.Common.AST.FromItems annot
  RecSel Left Language.Python.Common.AST.Statement
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ annot1 (ds :: Language.Python.Common.AST.Statement annot1) ->
                 case ds of wild {
                   DEFAULT -> Language.Python.Common.AST.from_items1 @ annot1
                   Language.Python.Common.AST.FromImport ds1 ds2 ds3 -> ds2 }) -}
99fc54c6a293a34372f5464728b0a789
  from_items1 :: Language.Python.Common.AST.FromItems annot
  {- Strictness: x -}
e3cd8a0dc8214c8f5ef60ed5a9ac11ef
  from_items_annot ::
    Language.Python.Common.AST.FromItems annot -> annot
  RecSel Left Language.Python.Common.AST.FromItems
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ annot1 (ds :: Language.Python.Common.AST.FromItems annot1) ->
                 case ds of wild {
                   Language.Python.Common.AST.ImportEverything ds1 -> ds1
                   Language.Python.Common.AST.FromItems ds1 ds2 -> ds2 }) -}
e3cd8a0dc8214c8f5ef60ed5a9ac11ef
  from_items_items ::
    Language.Python.Common.AST.FromItems annot
    -> [Language.Python.Common.AST.FromItem annot]
  RecSel Left Language.Python.Common.AST.FromItems
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ annot1 (ds :: Language.Python.Common.AST.FromItems annot1) ->
                 case ds of wild {
                   Language.Python.Common.AST.ImportEverything ipv
                   -> Language.Python.Common.AST.from_items_items1 @ annot1
                   Language.Python.Common.AST.FromItems ds1 ds2 -> ds1 }) -}
9d7ac81ca8c11bbdcd7a3063c01e008d
  from_items_items1 :: [Language.Python.Common.AST.FromItem annot]
  {- Strictness: x -}
cf431e64d114ff48b3a5eb8fda819c32
  from_module ::
    Language.Python.Common.AST.Statement annot
    -> Language.Python.Common.AST.ImportRelative annot
  RecSel Left Language.Python.Common.AST.Statement
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ annot1 (ds :: Language.Python.Common.AST.Statement annot1) ->
                 case ds of wild {
                   DEFAULT -> Language.Python.Common.AST.from_module1 @ annot1
                   Language.Python.Common.AST.FromImport ds1 ds2 ds3 -> ds1 }) -}
2700a2a3ca69f606814764c3d3191a87
  from_module1 :: Language.Python.Common.AST.ImportRelative annot
  {- Strictness: x -}
cf431e64d114ff48b3a5eb8fda819c32
  fun_args ::
    Language.Python.Common.AST.Statement annot
    -> [Language.Python.Common.AST.Parameter annot]
  RecSel Left Language.Python.Common.AST.Statement
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ annot1 (ds :: Language.Python.Common.AST.Statement annot1) ->
                 case ds of wild {
                   DEFAULT -> Language.Python.Common.AST.fun_args1 @ annot1
                   Language.Python.Common.AST.Fun ds1 ds2 ds3 ds4 ds5 -> ds2 }) -}
318be0ad6fb4f6021cfdcc394f13e3c8
  fun_args1 :: [Language.Python.Common.AST.Parameter annot]
  {- Strictness: x -}
cf431e64d114ff48b3a5eb8fda819c32
  fun_body ::
    Language.Python.Common.AST.Statement annot
    -> Language.Python.Common.AST.Suite annot
  RecSel Left Language.Python.Common.AST.Statement
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ annot1 (ds :: Language.Python.Common.AST.Statement annot1) ->
                 case ds of wild {
                   DEFAULT -> Language.Python.Common.AST.fun_body1 @ annot1
                   Language.Python.Common.AST.Fun ds1 ds2 ds3 ds4 ds5 -> ds4 }) -}
cf431e64d114ff48b3a5eb8fda819c32
  fun_body1 :: Language.Python.Common.AST.Suite annot
  {- Strictness: x -}
cf431e64d114ff48b3a5eb8fda819c32
  fun_def ::
    Language.Python.Common.AST.Statement annot
    -> Language.Python.Common.AST.Statement annot
  RecSel Left Language.Python.Common.AST.Statement
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ annot1 (ds :: Language.Python.Common.AST.Statement annot1) ->
                 case ds of wild {
                   DEFAULT -> Language.Python.Common.AST.fun_def1 @ annot1
                   Language.Python.Common.AST.AsyncFun ds1 ds2 -> ds1 }) -}
cf431e64d114ff48b3a5eb8fda819c32
  fun_def1 :: Language.Python.Common.AST.Statement annot
  {- Strictness: x -}
cf431e64d114ff48b3a5eb8fda819c32
  fun_name ::
    Language.Python.Common.AST.Statement annot
    -> Language.Python.Common.AST.Ident annot
  RecSel Left Language.Python.Common.AST.Statement
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ annot1 (ds :: Language.Python.Common.AST.Statement annot1) ->
                 case ds of wild {
                   DEFAULT -> Language.Python.Common.AST.fun_name1 @ annot1
                   Language.Python.Common.AST.Fun ds1 ds2 ds3 ds4 ds5 -> ds1 }) -}
9d452f4cae08e4712bdfcb6c47d169fa
  fun_name1 :: Language.Python.Common.AST.Ident annot
  {- Strictness: x -}
cf431e64d114ff48b3a5eb8fda819c32
  fun_result_annotation ::
    Language.Python.Common.AST.Statement annot
    -> GHC.Base.Maybe (Language.Python.Common.AST.Expr annot)
  RecSel Left Language.Python.Common.AST.Statement
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ annot1 (ds :: Language.Python.Common.AST.Statement annot1) ->
                 case ds of wild {
                   DEFAULT
                   -> Language.Python.Common.AST.fun_result_annotation1 @ annot1
                   Language.Python.Common.AST.Fun ds1 ds2 ds3 ds4 ds5 -> ds3 }) -}
7ff504b35e83b32f9527f5edd18a0804
  fun_result_annotation1 ::
    GHC.Base.Maybe (Language.Python.Common.AST.Expr annot)
  {- Strictness: x -}
94dde4ffceed0a2a13daed020b6576e1
  gen_comprehension ::
    Language.Python.Common.AST.Expr annot
    -> Language.Python.Common.AST.Comprehension annot
  RecSel Left Language.Python.Common.AST.Expr
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ annot1 (ds :: Language.Python.Common.AST.Expr annot1) ->
                 case ds of wild {
                   DEFAULT -> Language.Python.Common.AST.gen_comprehension1 @ annot1
                   Language.Python.Common.AST.Generator ds1 ds2 -> ds1 }) -}
94dde4ffceed0a2a13daed020b6576e1
  gen_comprehension1 ::
    Language.Python.Common.AST.Comprehension annot
  {- Strictness: x -}
cf431e64d114ff48b3a5eb8fda819c32
  global_vars ::
    Language.Python.Common.AST.Statement annot
    -> [Language.Python.Common.AST.Ident annot]
  RecSel Left Language.Python.Common.AST.Statement
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ annot1 (ds :: Language.Python.Common.AST.Statement annot1) ->
                 case ds of wild {
                   DEFAULT -> Language.Python.Common.AST.global_vars1 @ annot1
                   Language.Python.Common.AST.Global ds1 ds2 -> ds1 }) -}
26a720694a18aea97896eb5ab6854ead
  global_vars1 :: [Language.Python.Common.AST.Ident annot]
  {- Strictness: x -}
cf431e64d114ff48b3a5eb8fda819c32
  handler_annot :: Language.Python.Common.AST.Handler annot -> annot
  RecSel Left Language.Python.Common.AST.Handler
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLS),1*U(A,A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ annot1 (ds :: Language.Python.Common.AST.Handler annot1) ->
                 case ds of wild { Language.Python.Common.AST.Handler ds1 ds2 ds3 ->
                 ds3 }) -}
cf431e64d114ff48b3a5eb8fda819c32
  handler_clause ::
    Language.Python.Common.AST.Handler annot
    -> Language.Python.Common.AST.ExceptClause annot
  RecSel Left Language.Python.Common.AST.Handler
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SLL),1*U(1*U(U,U),A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ annot1 (ds :: Language.Python.Common.AST.Handler annot1) ->
                 case ds of wild { Language.Python.Common.AST.Handler ds1 ds2 ds3 ->
                 ds1 }) -}
cf431e64d114ff48b3a5eb8fda819c32
  handler_suite ::
    Language.Python.Common.AST.Handler annot
    -> Language.Python.Common.AST.Suite annot
  RecSel Left Language.Python.Common.AST.Handler
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSL),1*U(A,1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ annot1 (ds :: Language.Python.Common.AST.Handler annot1) ->
                 case ds of wild { Language.Python.Common.AST.Handler ds1 ds2 ds3 ->
                 ds2 }) -}
6aab1d6f902c3e0dbc09c99c8605e197
  ident_annot :: Language.Python.Common.AST.Ident annot -> annot
  RecSel Left Language.Python.Common.AST.Ident
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LS),1*U(A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ annot1 (ds :: Language.Python.Common.AST.Ident annot1) ->
                 case ds of wild { Language.Python.Common.AST.Ident ds1 ds2 ->
                 ds2 }) -}
6aab1d6f902c3e0dbc09c99c8605e197
  ident_string ::
    Language.Python.Common.AST.Ident annot -> GHC.Base.String
  RecSel Left Language.Python.Common.AST.Ident
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SL),1*U(U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ annot1 (ds :: Language.Python.Common.AST.Ident annot1) ->
                 case ds of wild { Language.Python.Common.AST.Ident ds1 ds2 ->
                 ds1 }) -}
94dde4ffceed0a2a13daed020b6576e1
  imaginary_value ::
    Language.Python.Common.AST.Expr annot -> GHC.Types.Double
  RecSel Left Language.Python.Common.AST.Expr
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ annot1 (ds :: Language.Python.Common.AST.Expr annot1) ->
                 case ds of wild {
                   DEFAULT -> Language.Python.Common.AST.imaginary_value1
                   Language.Python.Common.AST.Imaginary ds1 ds2 ds3 -> ds1 }) -}
3832a984ebba5ba06c7ae8f970979534
  imaginary_value1 :: GHC.Types.Double
  {- Strictness: x -}
283607fc44cb0ad26a76914defc72d00
  import_as_name ::
    Language.Python.Common.AST.ImportItem annot
    -> GHC.Base.Maybe (Language.Python.Common.AST.Ident annot)
  RecSel Left Language.Python.Common.AST.ImportItem
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSL),1*U(A,1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ annot1 (ds :: Language.Python.Common.AST.ImportItem annot1) ->
                 case ds of wild { Language.Python.Common.AST.ImportItem ds1 ds2 ds3 ->
                 ds2 }) -}
283607fc44cb0ad26a76914defc72d00
  import_item_annot ::
    Language.Python.Common.AST.ImportItem annot -> annot
  RecSel Left Language.Python.Common.AST.ImportItem
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLS),1*U(A,A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ annot1 (ds :: Language.Python.Common.AST.ImportItem annot1) ->
                 case ds of wild { Language.Python.Common.AST.ImportItem ds1 ds2 ds3 ->
                 ds3 }) -}
283607fc44cb0ad26a76914defc72d00
  import_item_name ::
    Language.Python.Common.AST.ImportItem annot
    -> Language.Python.Common.AST.DottedName annot
  RecSel Left Language.Python.Common.AST.ImportItem
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SLL),1*U(1*U,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ annot1 (ds :: Language.Python.Common.AST.ImportItem annot1) ->
                 case ds of wild { Language.Python.Common.AST.ImportItem ds1 ds2 ds3 ->
                 ds1 }) -}
cf431e64d114ff48b3a5eb8fda819c32
  import_items ::
    Language.Python.Common.AST.Statement annot
    -> [Language.Python.Common.AST.ImportItem annot]
  RecSel Left Language.Python.Common.AST.Statement
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ annot1 (ds :: Language.Python.Common.AST.Statement annot1) ->
                 case ds of wild {
                   DEFAULT -> Language.Python.Common.AST.import_items1 @ annot1
                   Language.Python.Common.AST.Import ds1 ds2 -> ds1 }) -}
b87b779262b0d6a2e30053185ec57ab5
  import_items1 :: [Language.Python.Common.AST.ImportItem annot]
  {- Strictness: x -}
01a50092e1f9a1aefabdff796e5265a4
  import_relative_annot ::
    Language.Python.Common.AST.ImportRelative annot -> annot
  RecSel Left Language.Python.Common.AST.ImportRelative
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLS),1*U(A,A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ annot1
                   (ds :: Language.Python.Common.AST.ImportRelative annot1) ->
                 case ds of wild { Language.Python.Common.AST.ImportRelative ds1 ds2 ds3 ->
                 ds3 }) -}
01a50092e1f9a1aefabdff796e5265a4
  import_relative_dots ::
    Language.Python.Common.AST.ImportRelative annot -> GHC.Types.Int
  RecSel Left Language.Python.Common.AST.ImportRelative
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SLL),1*U(1*U(U),A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ annot1
                   (ds :: Language.Python.Common.AST.ImportRelative annot1) ->
                 case ds of wild { Language.Python.Common.AST.ImportRelative ds1 ds2 ds3 ->
                 ds1 }) -}
01a50092e1f9a1aefabdff796e5265a4
  import_relative_module ::
    Language.Python.Common.AST.ImportRelative annot
    -> GHC.Base.Maybe (Language.Python.Common.AST.DottedName annot)
  RecSel Left Language.Python.Common.AST.ImportRelative
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSL),1*U(A,1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ annot1
                   (ds :: Language.Python.Common.AST.ImportRelative annot1) ->
                 case ds of wild { Language.Python.Common.AST.ImportRelative ds1 ds2 ds3 ->
                 ds2 }) -}
94dde4ffceed0a2a13daed020b6576e1
  int_value ::
    Language.Python.Common.AST.Expr annot -> GHC.Integer.Type.Integer
  RecSel Left Language.Python.Common.AST.Expr
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ annot1 (ds :: Language.Python.Common.AST.Expr annot1) ->
                 case ds of wild {
                   DEFAULT -> Language.Python.Common.AST.int_value1
                   Language.Python.Common.AST.Int ds1 ds2 ds3 -> ds1
                   Language.Python.Common.AST.LongInt ds1 ds2 ds3 -> ds1 }) -}
6730063403383a55cd1a0ea154b3f450
  int_value1 :: GHC.Integer.Type.Integer
  {- Strictness: x -}
94dde4ffceed0a2a13daed020b6576e1
  lambda_args ::
    Language.Python.Common.AST.Expr annot
    -> [Language.Python.Common.AST.Parameter annot]
  RecSel Left Language.Python.Common.AST.Expr
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ annot1 (ds :: Language.Python.Common.AST.Expr annot1) ->
                 case ds of wild {
                   DEFAULT -> Language.Python.Common.AST.lambda_args1 @ annot1
                   Language.Python.Common.AST.Lambda ds1 ds2 ds3 -> ds1 }) -}
94dde4ffceed0a2a13daed020b6576e1
  lambda_args1 :: [Language.Python.Common.AST.Parameter annot]
  {- Strictness: x -}
94dde4ffceed0a2a13daed020b6576e1
  lambda_body ::
    Language.Python.Common.AST.Expr annot
    -> Language.Python.Common.AST.Expr annot
  RecSel Left Language.Python.Common.AST.Expr
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ annot1 (ds :: Language.Python.Common.AST.Expr annot1) ->
                 case ds of wild {
                   DEFAULT -> Language.Python.Common.AST.lambda_body1 @ annot1
                   Language.Python.Common.AST.Lambda ds1 ds2 ds3 -> ds2 }) -}
94dde4ffceed0a2a13daed020b6576e1
  lambda_body1 :: Language.Python.Common.AST.Expr annot
  {- Strictness: x -}
94dde4ffceed0a2a13daed020b6576e1
  left_op_arg ::
    Language.Python.Common.AST.Expr annot
    -> Language.Python.Common.AST.Expr annot
  RecSel Left Language.Python.Common.AST.Expr
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ annot1 (ds :: Language.Python.Common.AST.Expr annot1) ->
                 case ds of wild {
                   DEFAULT -> Language.Python.Common.AST.left_op_arg1 @ annot1
                   Language.Python.Common.AST.BinaryOp ds1 ds2 ds3 ds4 -> ds2 }) -}
94dde4ffceed0a2a13daed020b6576e1
  left_op_arg1 :: Language.Python.Common.AST.Expr annot
  {- Strictness: x -}
94dde4ffceed0a2a13daed020b6576e1
  list_comprehension ::
    Language.Python.Common.AST.Expr annot
    -> Language.Python.Common.AST.Comprehension annot
  RecSel Left Language.Python.Common.AST.Expr
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ annot1 (ds :: Language.Python.Common.AST.Expr annot1) ->
                 case ds of wild {
                   DEFAULT -> Language.Python.Common.AST.list_comprehension1 @ annot1
                   Language.Python.Common.AST.ListComp ds1 ds2 -> ds1 }) -}
94dde4ffceed0a2a13daed020b6576e1
  list_comprehension1 ::
    Language.Python.Common.AST.Comprehension annot
  {- Strictness: x -}
94dde4ffceed0a2a13daed020b6576e1
  list_exprs ::
    Language.Python.Common.AST.Expr annot
    -> [Language.Python.Common.AST.Expr annot]
  RecSel Left Language.Python.Common.AST.Expr
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ annot1 (ds :: Language.Python.Common.AST.Expr annot1) ->
                 case ds of wild {
                   DEFAULT -> Language.Python.Common.AST.list_exprs1 @ annot1
                   Language.Python.Common.AST.List ds1 ds2 -> ds1 }) -}
94dde4ffceed0a2a13daed020b6576e1
  list_exprs1 :: [Language.Python.Common.AST.Expr annot]
  {- Strictness: x -}
cf431e64d114ff48b3a5eb8fda819c32
  nonLocal_vars ::
    Language.Python.Common.AST.Statement annot
    -> [Language.Python.Common.AST.Ident annot]
  RecSel Left Language.Python.Common.AST.Statement
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ annot1 (ds :: Language.Python.Common.AST.Statement annot1) ->
                 case ds of wild {
                   DEFAULT -> Language.Python.Common.AST.nonLocal_vars1 @ annot1
                   Language.Python.Common.AST.NonLocal ds1 ds2 -> ds1 }) -}
551d03def5d4454afd70886adc7d4281
  nonLocal_vars1 :: [Language.Python.Common.AST.Ident annot]
  {- Strictness: x -}
3e80c1212dbae482ce637a5dc72042ac
  op_annot :: Language.Python.Common.AST.Op annot -> annot
  RecSel Left Language.Python.Common.AST.Op
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: (\ @ annot1
                   (ds :: Language.Python.Common.AST.Op annot1) ->
                 case ds of wild {
                   Language.Python.Common.AST.And ds1 -> ds1
                   Language.Python.Common.AST.Or ds1 -> ds1
                   Language.Python.Common.AST.Not ds1 -> ds1
                   Language.Python.Common.AST.Exponent ds1 -> ds1
                   Language.Python.Common.AST.LessThan ds1 -> ds1
                   Language.Python.Common.AST.GreaterThan ds1 -> ds1
                   Language.Python.Common.AST.Equality ds1 -> ds1
                   Language.Python.Common.AST.GreaterThanEquals ds1 -> ds1
                   Language.Python.Common.AST.LessThanEquals ds1 -> ds1
                   Language.Python.Common.AST.NotEquals ds1 -> ds1
                   Language.Python.Common.AST.NotEqualsV2 ds1 -> ds1
                   Language.Python.Common.AST.In ds1 -> ds1
                   Language.Python.Common.AST.Is ds1 -> ds1
                   Language.Python.Common.AST.IsNot ds1 -> ds1
                   Language.Python.Common.AST.NotIn ds1 -> ds1
                   Language.Python.Common.AST.BinaryOr ds1 -> ds1
                   Language.Python.Common.AST.Xor ds1 -> ds1
                   Language.Python.Common.AST.BinaryAnd ds1 -> ds1
                   Language.Python.Common.AST.ShiftLeft ds1 -> ds1
                   Language.Python.Common.AST.ShiftRight ds1 -> ds1
                   Language.Python.Common.AST.Multiply ds1 -> ds1
                   Language.Python.Common.AST.Plus ds1 -> ds1
                   Language.Python.Common.AST.Minus ds1 -> ds1
                   Language.Python.Common.AST.Divide ds1 -> ds1
                   Language.Python.Common.AST.FloorDivide ds1 -> ds1
                   Language.Python.Common.AST.MatrixMult ds1 -> ds1
                   Language.Python.Common.AST.Invert ds1 -> ds1
                   Language.Python.Common.AST.Modulo ds1 -> ds1 }) -}
94dde4ffceed0a2a13daed020b6576e1
  op_arg ::
    Language.Python.Common.AST.Expr annot
    -> Language.Python.Common.AST.Expr annot
  RecSel Left Language.Python.Common.AST.Expr
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ annot1 (ds :: Language.Python.Common.AST.Expr annot1) ->
                 case ds of wild {
                   DEFAULT -> Language.Python.Common.AST.op_arg1 @ annot1
                   Language.Python.Common.AST.UnaryOp ds1 ds2 ds3 -> ds2 }) -}
94dde4ffceed0a2a13daed020b6576e1
  op_arg1 :: Language.Python.Common.AST.Expr annot
  {- Strictness: x -}
94dde4ffceed0a2a13daed020b6576e1
  operator ::
    Language.Python.Common.AST.Expr annot
    -> Language.Python.Common.AST.Op annot
  RecSel Left Language.Python.Common.AST.Expr
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ annot1 (ds :: Language.Python.Common.AST.Expr annot1) ->
                 case ds of wild {
                   DEFAULT -> Language.Python.Common.AST.operator1 @ annot1
                   Language.Python.Common.AST.BinaryOp ds1 ds2 ds3 ds4 -> ds1
                   Language.Python.Common.AST.UnaryOp ds1 ds2 ds3 -> ds1 }) -}
c23b15bf80e7073ec9470e0afbb4c80f
  operator1 :: Language.Python.Common.AST.Op annot
  {- Strictness: x -}
94dde4ffceed0a2a13daed020b6576e1
  param_annot :: Language.Python.Common.AST.Parameter annot -> annot
  RecSel Left Language.Python.Common.AST.Parameter
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ annot1 (ds :: Language.Python.Common.AST.Parameter annot1) ->
                 case ds of wild {
                   Language.Python.Common.AST.Param ds1 ds2 ds3 ds4 -> ds4
                   Language.Python.Common.AST.VarArgsPos ds1 ds2 ds3 -> ds3
                   Language.Python.Common.AST.VarArgsKeyword ds1 ds2 ds3 -> ds3
                   Language.Python.Common.AST.EndPositional ds1 -> ds1
                   Language.Python.Common.AST.UnPackTuple ds1 ds2 ds3 -> ds3 }) -}
94dde4ffceed0a2a13daed020b6576e1
  param_default ::
    Language.Python.Common.AST.Parameter annot
    -> GHC.Base.Maybe (Language.Python.Common.AST.Expr annot)
  RecSel Left Language.Python.Common.AST.Parameter
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ annot1 (ds :: Language.Python.Common.AST.Parameter annot1) ->
                 case ds of wild {
                   DEFAULT -> Language.Python.Common.AST.param_default1 @ annot1
                   Language.Python.Common.AST.Param ds1 ds2 ds3 ds4 -> ds3
                   Language.Python.Common.AST.UnPackTuple ds1 ds2 ds3 -> ds2 }) -}
94dde4ffceed0a2a13daed020b6576e1
  param_default1 ::
    GHC.Base.Maybe (Language.Python.Common.AST.Expr annot)
  {- Strictness: x -}
94dde4ffceed0a2a13daed020b6576e1
  param_name ::
    Language.Python.Common.AST.Parameter annot
    -> Language.Python.Common.AST.Ident annot
  RecSel Left Language.Python.Common.AST.Parameter
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ annot1 (ds :: Language.Python.Common.AST.Parameter annot1) ->
                 case ds of wild {
                   DEFAULT -> Language.Python.Common.AST.param_name1 @ annot1
                   Language.Python.Common.AST.Param ds1 ds2 ds3 ds4 -> ds1
                   Language.Python.Common.AST.VarArgsPos ds1 ds2 ds3 -> ds1
                   Language.Python.Common.AST.VarArgsKeyword ds1 ds2 ds3 -> ds1 }) -}
6f61a2944660035fdcfaf9be0e3f0e33
  param_name1 :: Language.Python.Common.AST.Ident annot
  {- Strictness: x -}
94dde4ffceed0a2a13daed020b6576e1
  param_py_annotation ::
    Language.Python.Common.AST.Parameter annot
    -> GHC.Base.Maybe (Language.Python.Common.AST.Expr annot)
  RecSel Left Language.Python.Common.AST.Parameter
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ annot1 (ds :: Language.Python.Common.AST.Parameter annot1) ->
                 case ds of wild {
                   DEFAULT -> Language.Python.Common.AST.param_py_annotation1 @ annot1
                   Language.Python.Common.AST.Param ds1 ds2 ds3 ds4 -> ds2
                   Language.Python.Common.AST.VarArgsPos ds1 ds2 ds3 -> ds2
                   Language.Python.Common.AST.VarArgsKeyword ds1 ds2 ds3 -> ds2 }) -}
94dde4ffceed0a2a13daed020b6576e1
  param_py_annotation1 ::
    GHC.Base.Maybe (Language.Python.Common.AST.Expr annot)
  {- Strictness: x -}
77aacf63ade2d28a10031365ad257b9f
  param_tuple ::
    Language.Python.Common.AST.ParamTuple annot
    -> [Language.Python.Common.AST.ParamTuple annot]
  RecSel Left Language.Python.Common.AST.ParamTuple
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ annot1 (ds :: Language.Python.Common.AST.ParamTuple annot1) ->
                 case ds of wild {
                   Language.Python.Common.AST.ParamTupleName ipv ipv1
                   -> Language.Python.Common.AST.param_tuple1 @ annot1
                   Language.Python.Common.AST.ParamTuple ds1 ds2 -> ds1 }) -}
77aacf63ade2d28a10031365ad257b9f
  param_tuple1 :: [Language.Python.Common.AST.ParamTuple annot]
  {- Strictness: x -}
77aacf63ade2d28a10031365ad257b9f
  param_tuple_annot ::
    Language.Python.Common.AST.ParamTuple annot -> annot
  RecSel Left Language.Python.Common.AST.ParamTuple
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ annot1 (ds :: Language.Python.Common.AST.ParamTuple annot1) ->
                 case ds of wild {
                   Language.Python.Common.AST.ParamTupleName ds1 ds2 -> ds2
                   Language.Python.Common.AST.ParamTuple ds1 ds2 -> ds2 }) -}
77aacf63ade2d28a10031365ad257b9f
  param_tuple_name ::
    Language.Python.Common.AST.ParamTuple annot
    -> Language.Python.Common.AST.Ident annot
  RecSel Left Language.Python.Common.AST.ParamTuple
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ annot1 (ds :: Language.Python.Common.AST.ParamTuple annot1) ->
                 case ds of wild {
                   Language.Python.Common.AST.ParamTupleName ds1 ds2 -> ds1
                   Language.Python.Common.AST.ParamTuple ipv ipv1
                   -> Language.Python.Common.AST.param_tuple_name1 @ annot1 }) -}
ded6450699ef6535a35e9448ef526245
  param_tuple_name1 :: Language.Python.Common.AST.Ident annot
  {- Strictness: x -}
94dde4ffceed0a2a13daed020b6576e1
  param_unpack_tuple ::
    Language.Python.Common.AST.Parameter annot
    -> Language.Python.Common.AST.ParamTuple annot
  RecSel Left Language.Python.Common.AST.Parameter
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ annot1 (ds :: Language.Python.Common.AST.Parameter annot1) ->
                 case ds of wild {
                   DEFAULT -> Language.Python.Common.AST.param_unpack_tuple1 @ annot1
                   Language.Python.Common.AST.UnPackTuple ds1 ds2 ds3 -> ds1 }) -}
0476fa39a4e66d961f6546d1f858a3cc
  param_unpack_tuple1 :: Language.Python.Common.AST.ParamTuple annot
  {- Strictness: x -}
94dde4ffceed0a2a13daed020b6576e1
  paren_expr ::
    Language.Python.Common.AST.Expr annot
    -> Language.Python.Common.AST.Expr annot
  RecSel Left Language.Python.Common.AST.Expr
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ annot1 (ds :: Language.Python.Common.AST.Expr annot1) ->
                 case ds of wild {
                   DEFAULT -> Language.Python.Common.AST.paren_expr1 @ annot1
                   Language.Python.Common.AST.Paren ds1 ds2 -> ds1 }) -}
94dde4ffceed0a2a13daed020b6576e1
  paren_expr1 :: Language.Python.Common.AST.Expr annot
  {- Strictness: x -}
cf431e64d114ff48b3a5eb8fda819c32
  print_chevron ::
    Language.Python.Common.AST.Statement annot -> GHC.Types.Bool
  RecSel Left Language.Python.Common.AST.Statement
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ annot1 (ds :: Language.Python.Common.AST.Statement annot1) ->
                 case ds of wild {
                   DEFAULT -> Language.Python.Common.AST.print_chevron1
                   Language.Python.Common.AST.Print ds1 ds2 ds3 ds4 -> ds1 }) -}
d1c723d52a130457471a8838e1533c01
  print_chevron1 :: GHC.Types.Bool
  {- Strictness: x -}
cf431e64d114ff48b3a5eb8fda819c32
  print_exprs ::
    Language.Python.Common.AST.Statement annot
    -> [Language.Python.Common.AST.Expr annot]
  RecSel Left Language.Python.Common.AST.Statement
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ annot1 (ds :: Language.Python.Common.AST.Statement annot1) ->
                 case ds of wild {
                   DEFAULT -> Language.Python.Common.AST.print_exprs1 @ annot1
                   Language.Python.Common.AST.Print ds1 ds2 ds3 ds4 -> ds2 }) -}
8bf83aa3d44bc6d6958742ce65db137f
  print_exprs1 :: [Language.Python.Common.AST.Expr annot]
  {- Strictness: x -}
cf431e64d114ff48b3a5eb8fda819c32
  print_trailing_comma ::
    Language.Python.Common.AST.Statement annot -> GHC.Types.Bool
  RecSel Left Language.Python.Common.AST.Statement
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ annot1 (ds :: Language.Python.Common.AST.Statement annot1) ->
                 case ds of wild {
                   DEFAULT -> Language.Python.Common.AST.print_trailing_comma1
                   Language.Python.Common.AST.Print ds1 ds2 ds3 ds4 -> ds3 }) -}
b65699cae56872a3754be7a49ce49d27
  print_trailing_comma1 :: GHC.Types.Bool
  {- Strictness: x -}
cf431e64d114ff48b3a5eb8fda819c32
  raise_expr ::
    Language.Python.Common.AST.Statement annot
    -> Language.Python.Common.AST.RaiseExpr annot
  RecSel Left Language.Python.Common.AST.Statement
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ annot1 (ds :: Language.Python.Common.AST.Statement annot1) ->
                 case ds of wild {
                   DEFAULT -> Language.Python.Common.AST.raise_expr1 @ annot1
                   Language.Python.Common.AST.Raise ds1 ds2 -> ds1 }) -}
cfa9ff097589282c500ffd5f98ac903f
  raise_expr1 :: Language.Python.Common.AST.RaiseExpr annot
  {- Strictness: x -}
cf431e64d114ff48b3a5eb8fda819c32
  return_expr ::
    Language.Python.Common.AST.Statement annot
    -> GHC.Base.Maybe (Language.Python.Common.AST.Expr annot)
  RecSel Left Language.Python.Common.AST.Statement
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ annot1 (ds :: Language.Python.Common.AST.Statement annot1) ->
                 case ds of wild {
                   DEFAULT -> Language.Python.Common.AST.return_expr1 @ annot1
                   Language.Python.Common.AST.Return ds1 ds2 -> ds1 }) -}
96a9da1d91c37b781c787e854a733129
  return_expr1 ::
    GHC.Base.Maybe (Language.Python.Common.AST.Expr annot)
  {- Strictness: x -}
94dde4ffceed0a2a13daed020b6576e1
  right_op_arg ::
    Language.Python.Common.AST.Expr annot
    -> Language.Python.Common.AST.Expr annot
  RecSel Left Language.Python.Common.AST.Expr
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ annot1 (ds :: Language.Python.Common.AST.Expr annot1) ->
                 case ds of wild {
                   DEFAULT -> Language.Python.Common.AST.right_op_arg1 @ annot1
                   Language.Python.Common.AST.BinaryOp ds1 ds2 ds3 ds4 -> ds3 }) -}
94dde4ffceed0a2a13daed020b6576e1
  right_op_arg1 :: Language.Python.Common.AST.Expr annot
  {- Strictness: x -}
94dde4ffceed0a2a13daed020b6576e1
  set_comprehension ::
    Language.Python.Common.AST.Expr annot
    -> Language.Python.Common.AST.Comprehension annot
  RecSel Left Language.Python.Common.AST.Expr
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ annot1 (ds :: Language.Python.Common.AST.Expr annot1) ->
                 case ds of wild {
                   DEFAULT -> Language.Python.Common.AST.set_comprehension1 @ annot1
                   Language.Python.Common.AST.SetComp ds1 ds2 -> ds1 }) -}
94dde4ffceed0a2a13daed020b6576e1
  set_comprehension1 ::
    Language.Python.Common.AST.Comprehension annot
  {- Strictness: x -}
94dde4ffceed0a2a13daed020b6576e1
  set_exprs ::
    Language.Python.Common.AST.Expr annot
    -> [Language.Python.Common.AST.Expr annot]
  RecSel Left Language.Python.Common.AST.Expr
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ annot1 (ds :: Language.Python.Common.AST.Expr annot1) ->
                 case ds of wild {
                   DEFAULT -> Language.Python.Common.AST.set_exprs1 @ annot1
                   Language.Python.Common.AST.Set ds1 ds2 -> ds1 }) -}
94dde4ffceed0a2a13daed020b6576e1
  set_exprs1 :: [Language.Python.Common.AST.Expr annot]
  {- Strictness: x -}
94dde4ffceed0a2a13daed020b6576e1
  slice_annot :: Language.Python.Common.AST.Slice annot -> annot
  RecSel Left Language.Python.Common.AST.Slice
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ annot1 (ds :: Language.Python.Common.AST.Slice annot1) ->
                 case ds of wild {
                   Language.Python.Common.AST.SliceProper ds1 ds2 ds3 ds4 -> ds4
                   Language.Python.Common.AST.SliceExpr ds1 ds2 -> ds2
                   Language.Python.Common.AST.SliceEllipsis ds1 -> ds1 }) -}
94dde4ffceed0a2a13daed020b6576e1
  slice_expr ::
    Language.Python.Common.AST.Slice annot
    -> Language.Python.Common.AST.Expr annot
  RecSel Left Language.Python.Common.AST.Slice
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ annot1 (ds :: Language.Python.Common.AST.Slice annot1) ->
                 case ds of wild {
                   DEFAULT -> Language.Python.Common.AST.slice_expr1 @ annot1
                   Language.Python.Common.AST.SliceExpr ds1 ds2 -> ds1 }) -}
94dde4ffceed0a2a13daed020b6576e1
  slice_expr1 :: Language.Python.Common.AST.Expr annot
  {- Strictness: x -}
94dde4ffceed0a2a13daed020b6576e1
  slice_lower ::
    Language.Python.Common.AST.Slice annot
    -> GHC.Base.Maybe (Language.Python.Common.AST.Expr annot)
  RecSel Left Language.Python.Common.AST.Slice
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ annot1 (ds :: Language.Python.Common.AST.Slice annot1) ->
                 case ds of wild {
                   DEFAULT -> Language.Python.Common.AST.slice_lower1 @ annot1
                   Language.Python.Common.AST.SliceProper ds1 ds2 ds3 ds4 -> ds1 }) -}
94dde4ffceed0a2a13daed020b6576e1
  slice_lower1 ::
    GHC.Base.Maybe (Language.Python.Common.AST.Expr annot)
  {- Strictness: x -}
94dde4ffceed0a2a13daed020b6576e1
  slice_stride ::
    Language.Python.Common.AST.Slice annot
    -> GHC.Base.Maybe
         (GHC.Base.Maybe (Language.Python.Common.AST.Expr annot))
  RecSel Left Language.Python.Common.AST.Slice
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ annot1 (ds :: Language.Python.Common.AST.Slice annot1) ->
                 case ds of wild {
                   DEFAULT -> Language.Python.Common.AST.slice_stride1 @ annot1
                   Language.Python.Common.AST.SliceProper ds1 ds2 ds3 ds4 -> ds3 }) -}
94dde4ffceed0a2a13daed020b6576e1
  slice_stride1 ::
    GHC.Base.Maybe
      (GHC.Base.Maybe (Language.Python.Common.AST.Expr annot))
  {- Strictness: x -}
94dde4ffceed0a2a13daed020b6576e1
  slice_upper ::
    Language.Python.Common.AST.Slice annot
    -> GHC.Base.Maybe (Language.Python.Common.AST.Expr annot)
  RecSel Left Language.Python.Common.AST.Slice
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ annot1 (ds :: Language.Python.Common.AST.Slice annot1) ->
                 case ds of wild {
                   DEFAULT -> Language.Python.Common.AST.slice_upper1 @ annot1
                   Language.Python.Common.AST.SliceProper ds1 ds2 ds3 ds4 -> ds2 }) -}
94dde4ffceed0a2a13daed020b6576e1
  slice_upper1 ::
    GHC.Base.Maybe (Language.Python.Common.AST.Expr annot)
  {- Strictness: x -}
94dde4ffceed0a2a13daed020b6576e1
  slicee ::
    Language.Python.Common.AST.Expr annot
    -> Language.Python.Common.AST.Expr annot
  RecSel Left Language.Python.Common.AST.Expr
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ annot1 (ds :: Language.Python.Common.AST.Expr annot1) ->
                 case ds of wild {
                   DEFAULT -> Language.Python.Common.AST.slicee1 @ annot1
                   Language.Python.Common.AST.SlicedExpr ds1 ds2 ds3 -> ds1 }) -}
94dde4ffceed0a2a13daed020b6576e1
  slicee1 :: Language.Python.Common.AST.Expr annot
  {- Strictness: x -}
94dde4ffceed0a2a13daed020b6576e1
  slices ::
    Language.Python.Common.AST.Expr annot
    -> [Language.Python.Common.AST.Slice annot]
  RecSel Left Language.Python.Common.AST.Expr
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ annot1 (ds :: Language.Python.Common.AST.Expr annot1) ->
                 case ds of wild {
                   DEFAULT -> Language.Python.Common.AST.slices1 @ annot1
                   Language.Python.Common.AST.SlicedExpr ds1 ds2 ds3 -> ds2 }) -}
94dde4ffceed0a2a13daed020b6576e1
  slices1 :: [Language.Python.Common.AST.Slice annot]
  {- Strictness: x -}
94dde4ffceed0a2a13daed020b6576e1
  starred_expr ::
    Language.Python.Common.AST.Expr annot
    -> Language.Python.Common.AST.Expr annot
  RecSel Left Language.Python.Common.AST.Expr
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ annot1 (ds :: Language.Python.Common.AST.Expr annot1) ->
                 case ds of wild {
                   DEFAULT -> Language.Python.Common.AST.starred_expr1 @ annot1
                   Language.Python.Common.AST.Starred ds1 ds2 -> ds1 }) -}
94dde4ffceed0a2a13daed020b6576e1
  starred_expr1 :: Language.Python.Common.AST.Expr annot
  {- Strictness: x -}
cf431e64d114ff48b3a5eb8fda819c32
  stmt_annot :: Language.Python.Common.AST.Statement annot -> annot
  RecSel Left Language.Python.Common.AST.Statement
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: (\ @ annot1
                   (ds :: Language.Python.Common.AST.Statement annot1) ->
                 case ds of wild {
                   Language.Python.Common.AST.Import ds1 ds2 -> ds2
                   Language.Python.Common.AST.FromImport ds1 ds2 ds3 -> ds3
                   Language.Python.Common.AST.While ds1 ds2 ds3 ds4 -> ds4
                   Language.Python.Common.AST.For ds1 ds2 ds3 ds4 ds5 -> ds5
                   Language.Python.Common.AST.AsyncFor ds1 ds2 -> ds2
                   Language.Python.Common.AST.Fun ds1 ds2 ds3 ds4 ds5 -> ds5
                   Language.Python.Common.AST.AsyncFun ds1 ds2 -> ds2
                   Language.Python.Common.AST.Class ds1 ds2 ds3 ds4 -> ds4
                   Language.Python.Common.AST.Conditional ds1 ds2 ds3 -> ds3
                   Language.Python.Common.AST.Assign ds1 ds2 ds3 -> ds3
                   Language.Python.Common.AST.AugmentedAssign ds1 ds2 ds3 ds4 -> ds4
                   Language.Python.Common.AST.AnnotatedAssign ds1 ds2 ds3 ds4 -> ds4
                   Language.Python.Common.AST.Decorated ds1 ds2 ds3 -> ds3
                   Language.Python.Common.AST.Return ds1 ds2 -> ds2
                   Language.Python.Common.AST.Try ds1 ds2 ds3 ds4 ds5 -> ds5
                   Language.Python.Common.AST.Raise ds1 ds2 -> ds2
                   Language.Python.Common.AST.With ds1 ds2 ds3 -> ds3
                   Language.Python.Common.AST.AsyncWith ds1 ds2 -> ds2
                   Language.Python.Common.AST.Pass ds1 -> ds1
                   Language.Python.Common.AST.Break ds1 -> ds1
                   Language.Python.Common.AST.Continue ds1 -> ds1
                   Language.Python.Common.AST.Delete ds1 ds2 -> ds2
                   Language.Python.Common.AST.StmtExpr ds1 ds2 -> ds2
                   Language.Python.Common.AST.Global ds1 ds2 -> ds2
                   Language.Python.Common.AST.NonLocal ds1 ds2 -> ds2
                   Language.Python.Common.AST.Assert ds1 ds2 -> ds2
                   Language.Python.Common.AST.Print ds1 ds2 ds3 ds4 -> ds4
                   Language.Python.Common.AST.Exec ds1 ds2 ds3 -> ds3 }) -}
cf431e64d114ff48b3a5eb8fda819c32
  stmt_expr ::
    Language.Python.Common.AST.Statement annot
    -> Language.Python.Common.AST.Expr annot
  RecSel Left Language.Python.Common.AST.Statement
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ annot1 (ds :: Language.Python.Common.AST.Statement annot1) ->
                 case ds of wild {
                   DEFAULT -> Language.Python.Common.AST.stmt_expr1 @ annot1
                   Language.Python.Common.AST.StmtExpr ds1 ds2 -> ds1 }) -}
841c62c0cffdf2f216bdeefb2d7e6047
  stmt_expr1 :: Language.Python.Common.AST.Expr annot
  {- Strictness: x -}
94dde4ffceed0a2a13daed020b6576e1
  strings_strings ::
    Language.Python.Common.AST.Expr annot -> [GHC.Base.String]
  RecSel Left Language.Python.Common.AST.Expr
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ annot1 (ds :: Language.Python.Common.AST.Expr annot1) ->
                 case ds of wild {
                   DEFAULT -> Language.Python.Common.AST.strings_strings1
                   Language.Python.Common.AST.Strings ds1 ds2 -> ds1 }) -}
d65a979ca85aff1fafc5ff84e981a49e
  strings_strings1 :: [GHC.Base.String]
  {- Strictness: x -}
94dde4ffceed0a2a13daed020b6576e1
  subscript_expr ::
    Language.Python.Common.AST.Expr annot
    -> Language.Python.Common.AST.Expr annot
  RecSel Left Language.Python.Common.AST.Expr
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ annot1 (ds :: Language.Python.Common.AST.Expr annot1) ->
                 case ds of wild {
                   DEFAULT -> Language.Python.Common.AST.subscript_expr1 @ annot1
                   Language.Python.Common.AST.Subscript ds1 ds2 ds3 -> ds2 }) -}
94dde4ffceed0a2a13daed020b6576e1
  subscript_expr1 :: Language.Python.Common.AST.Expr annot
  {- Strictness: x -}
94dde4ffceed0a2a13daed020b6576e1
  subscriptee ::
    Language.Python.Common.AST.Expr annot
    -> Language.Python.Common.AST.Expr annot
  RecSel Left Language.Python.Common.AST.Expr
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ annot1 (ds :: Language.Python.Common.AST.Expr annot1) ->
                 case ds of wild {
                   DEFAULT -> Language.Python.Common.AST.subscriptee1 @ annot1
                   Language.Python.Common.AST.Subscript ds1 ds2 ds3 -> ds1 }) -}
94dde4ffceed0a2a13daed020b6576e1
  subscriptee1 :: Language.Python.Common.AST.Expr annot
  {- Strictness: x -}
cf431e64d114ff48b3a5eb8fda819c32
  try_body ::
    Language.Python.Common.AST.Statement annot
    -> Language.Python.Common.AST.Suite annot
  RecSel Left Language.Python.Common.AST.Statement
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ annot1 (ds :: Language.Python.Common.AST.Statement annot1) ->
                 case ds of wild {
                   DEFAULT -> Language.Python.Common.AST.try_body1 @ annot1
                   Language.Python.Common.AST.Try ds1 ds2 ds3 ds4 ds5 -> ds1 }) -}
cf431e64d114ff48b3a5eb8fda819c32
  try_body1 :: Language.Python.Common.AST.Suite annot
  {- Strictness: x -}
cf431e64d114ff48b3a5eb8fda819c32
  try_else ::
    Language.Python.Common.AST.Statement annot
    -> Language.Python.Common.AST.Suite annot
  RecSel Left Language.Python.Common.AST.Statement
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ annot1 (ds :: Language.Python.Common.AST.Statement annot1) ->
                 case ds of wild {
                   DEFAULT -> Language.Python.Common.AST.try_else1 @ annot1
                   Language.Python.Common.AST.Try ds1 ds2 ds3 ds4 ds5 -> ds3 }) -}
cf431e64d114ff48b3a5eb8fda819c32
  try_else1 :: Language.Python.Common.AST.Suite annot
  {- Strictness: x -}
cf431e64d114ff48b3a5eb8fda819c32
  try_excepts ::
    Language.Python.Common.AST.Statement annot
    -> [Language.Python.Common.AST.Handler annot]
  RecSel Left Language.Python.Common.AST.Statement
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ annot1 (ds :: Language.Python.Common.AST.Statement annot1) ->
                 case ds of wild {
                   DEFAULT -> Language.Python.Common.AST.try_excepts1 @ annot1
                   Language.Python.Common.AST.Try ds1 ds2 ds3 ds4 ds5 -> ds2 }) -}
cf431e64d114ff48b3a5eb8fda819c32
  try_excepts1 :: [Language.Python.Common.AST.Handler annot]
  {- Strictness: x -}
cf431e64d114ff48b3a5eb8fda819c32
  try_finally ::
    Language.Python.Common.AST.Statement annot
    -> Language.Python.Common.AST.Suite annot
  RecSel Left Language.Python.Common.AST.Statement
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ annot1 (ds :: Language.Python.Common.AST.Statement annot1) ->
                 case ds of wild {
                   DEFAULT -> Language.Python.Common.AST.try_finally1 @ annot1
                   Language.Python.Common.AST.Try ds1 ds2 ds3 ds4 ds5 -> ds4 }) -}
cf431e64d114ff48b3a5eb8fda819c32
  try_finally1 :: Language.Python.Common.AST.Suite annot
  {- Strictness: x -}
94dde4ffceed0a2a13daed020b6576e1
  tuple_exprs ::
    Language.Python.Common.AST.Expr annot
    -> [Language.Python.Common.AST.Expr annot]
  RecSel Left Language.Python.Common.AST.Expr
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ annot1 (ds :: Language.Python.Common.AST.Expr annot1) ->
                 case ds of wild {
                   DEFAULT -> Language.Python.Common.AST.tuple_exprs1 @ annot1
                   Language.Python.Common.AST.Tuple ds1 ds2 -> ds1 }) -}
94dde4ffceed0a2a13daed020b6576e1
  tuple_exprs1 :: [Language.Python.Common.AST.Expr annot]
  {- Strictness: x -}
94dde4ffceed0a2a13daed020b6576e1
  unicodestrings_strings ::
    Language.Python.Common.AST.Expr annot -> [GHC.Base.String]
  RecSel Left Language.Python.Common.AST.Expr
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ annot1 (ds :: Language.Python.Common.AST.Expr annot1) ->
                 case ds of wild {
                   DEFAULT -> Language.Python.Common.AST.unicodestrings_strings1
                   Language.Python.Common.AST.UnicodeStrings ds1 ds2 -> ds1 }) -}
e3d71076488ae0513d6c942535ab939b
  unicodestrings_strings1 :: [GHC.Base.String]
  {- Strictness: x -}
94dde4ffceed0a2a13daed020b6576e1
  var_ident ::
    Language.Python.Common.AST.Expr annot
    -> Language.Python.Common.AST.Ident annot
  RecSel Left Language.Python.Common.AST.Expr
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ annot1 (ds :: Language.Python.Common.AST.Expr annot1) ->
                 case ds of wild {
                   DEFAULT -> Language.Python.Common.AST.var_ident1 @ annot1
                   Language.Python.Common.AST.Var ds1 ds2 -> ds1 }) -}
0f29a0eb2a2e88870e06bb9a7459a01e
  var_ident1 :: Language.Python.Common.AST.Ident annot
  {- Strictness: x -}
cf431e64d114ff48b3a5eb8fda819c32
  while_body ::
    Language.Python.Common.AST.Statement annot
    -> Language.Python.Common.AST.Suite annot
  RecSel Left Language.Python.Common.AST.Statement
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ annot1 (ds :: Language.Python.Common.AST.Statement annot1) ->
                 case ds of wild {
                   DEFAULT -> Language.Python.Common.AST.while_body1 @ annot1
                   Language.Python.Common.AST.While ds1 ds2 ds3 ds4 -> ds2 }) -}
cf431e64d114ff48b3a5eb8fda819c32
  while_body1 :: Language.Python.Common.AST.Suite annot
  {- Strictness: x -}
cf431e64d114ff48b3a5eb8fda819c32
  while_cond ::
    Language.Python.Common.AST.Statement annot
    -> Language.Python.Common.AST.Expr annot
  RecSel Left Language.Python.Common.AST.Statement
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ annot1 (ds :: Language.Python.Common.AST.Statement annot1) ->
                 case ds of wild {
                   DEFAULT -> Language.Python.Common.AST.while_cond1 @ annot1
                   Language.Python.Common.AST.While ds1 ds2 ds3 ds4 -> ds1 }) -}
878591f73d22de755ce026b15e0aa52e
  while_cond1 :: Language.Python.Common.AST.Expr annot
  {- Strictness: x -}
cf431e64d114ff48b3a5eb8fda819c32
  while_else ::
    Language.Python.Common.AST.Statement annot
    -> Language.Python.Common.AST.Suite annot
  RecSel Left Language.Python.Common.AST.Statement
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ annot1 (ds :: Language.Python.Common.AST.Statement annot1) ->
                 case ds of wild {
                   DEFAULT -> Language.Python.Common.AST.while_else1 @ annot1
                   Language.Python.Common.AST.While ds1 ds2 ds3 ds4 -> ds3 }) -}
cf431e64d114ff48b3a5eb8fda819c32
  while_else1 :: Language.Python.Common.AST.Suite annot
  {- Strictness: x -}
cf431e64d114ff48b3a5eb8fda819c32
  with_body ::
    Language.Python.Common.AST.Statement annot
    -> Language.Python.Common.AST.Suite annot
  RecSel Left Language.Python.Common.AST.Statement
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ annot1 (ds :: Language.Python.Common.AST.Statement annot1) ->
                 case ds of wild {
                   DEFAULT -> Language.Python.Common.AST.with_body1 @ annot1
                   Language.Python.Common.AST.With ds1 ds2 ds3 -> ds2 }) -}
cf431e64d114ff48b3a5eb8fda819c32
  with_body1 :: Language.Python.Common.AST.Suite annot
  {- Strictness: x -}
cf431e64d114ff48b3a5eb8fda819c32
  with_context ::
    Language.Python.Common.AST.Statement annot
    -> [(Language.Python.Common.AST.Expr annot,
         GHC.Base.Maybe (Language.Python.Common.AST.Expr annot))]
  RecSel Left Language.Python.Common.AST.Statement
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ annot1 (ds :: Language.Python.Common.AST.Statement annot1) ->
                 case ds of wild {
                   DEFAULT -> Language.Python.Common.AST.with_context1 @ annot1
                   Language.Python.Common.AST.With ds1 ds2 ds3 -> ds1 }) -}
3740b1c0296f48e1d7a86ed1391686f6
  with_context1 ::
    [(Language.Python.Common.AST.Expr annot,
      GHC.Base.Maybe (Language.Python.Common.AST.Expr annot))]
  {- Strictness: x -}
cf431e64d114ff48b3a5eb8fda819c32
  with_stmt ::
    Language.Python.Common.AST.Statement annot
    -> Language.Python.Common.AST.Statement annot
  RecSel Left Language.Python.Common.AST.Statement
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ annot1 (ds :: Language.Python.Common.AST.Statement annot1) ->
                 case ds of wild {
                   DEFAULT -> Language.Python.Common.AST.with_stmt1 @ annot1
                   Language.Python.Common.AST.AsyncWith ds1 ds2 -> ds1 }) -}
cf431e64d114ff48b3a5eb8fda819c32
  with_stmt1 :: Language.Python.Common.AST.Statement annot
  {- Strictness: x -}
94dde4ffceed0a2a13daed020b6576e1
  yield_arg ::
    Language.Python.Common.AST.Expr annot
    -> GHC.Base.Maybe (Language.Python.Common.AST.YieldArg annot)
  RecSel Left Language.Python.Common.AST.Expr
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ annot1 (ds :: Language.Python.Common.AST.Expr annot1) ->
                 case ds of wild {
                   DEFAULT -> Language.Python.Common.AST.yield_arg1 @ annot1
                   Language.Python.Common.AST.Yield ds1 ds2 -> ds1 }) -}
94dde4ffceed0a2a13daed020b6576e1
  yield_arg1 ::
    GHC.Base.Maybe (Language.Python.Common.AST.YieldArg annot)
  {- Strictness: x -}
instance [safe] Language.Python.Common.AST.Annotated [Language.Python.Common.AST.Argument]
  = Language.Python.Common.AST.$fAnnotatedArgument
instance [safe] Language.Python.Common.AST.Annotated [Language.Python.Common.AST.AssignOp]
  = Language.Python.Common.AST.$fAnnotatedAssignOp
instance [safe] Language.Python.Common.AST.Annotated [Language.Python.Common.AST.CompFor]
  = Language.Python.Common.AST.$fAnnotatedCompFor
instance [safe] Language.Python.Common.AST.Annotated [Language.Python.Common.AST.CompIf]
  = Language.Python.Common.AST.$fAnnotatedCompIf
instance [safe] Language.Python.Common.AST.Annotated [Language.Python.Common.AST.CompIter]
  = Language.Python.Common.AST.$fAnnotatedCompIter
instance [safe] Language.Python.Common.AST.Annotated [Language.Python.Common.AST.Comprehension]
  = Language.Python.Common.AST.$fAnnotatedComprehension
instance [safe] Language.Python.Common.AST.Annotated [Language.Python.Common.AST.Decorator]
  = Language.Python.Common.AST.$fAnnotatedDecorator
instance [safe] Language.Python.Common.AST.Annotated [Language.Python.Common.AST.ExceptClause]
  = Language.Python.Common.AST.$fAnnotatedExceptClause
instance [safe] Language.Python.Common.AST.Annotated [Language.Python.Common.AST.Expr]
  = Language.Python.Common.AST.$fAnnotatedExpr
instance [safe] Language.Python.Common.AST.Annotated [Language.Python.Common.AST.FromItem]
  = Language.Python.Common.AST.$fAnnotatedFromItem
instance [safe] Language.Python.Common.AST.Annotated [Language.Python.Common.AST.FromItems]
  = Language.Python.Common.AST.$fAnnotatedFromItems
instance [safe] Language.Python.Common.AST.Annotated [Language.Python.Common.AST.Handler]
  = Language.Python.Common.AST.$fAnnotatedHandler
instance [safe] Language.Python.Common.AST.Annotated [Language.Python.Common.AST.Ident]
  = Language.Python.Common.AST.$fAnnotatedIdent
instance [safe] Language.Python.Common.AST.Annotated [Language.Python.Common.AST.ImportItem]
  = Language.Python.Common.AST.$fAnnotatedImportItem
instance [safe] Language.Python.Common.AST.Annotated [Language.Python.Common.AST.ImportRelative]
  = Language.Python.Common.AST.$fAnnotatedImportRelative
instance [safe] Language.Python.Common.AST.Annotated [Language.Python.Common.AST.Op]
  = Language.Python.Common.AST.$fAnnotatedOp
instance [safe] Language.Python.Common.AST.Annotated [Language.Python.Common.AST.ParamTuple]
  = Language.Python.Common.AST.$fAnnotatedParamTuple
instance [safe] Language.Python.Common.AST.Annotated [Language.Python.Common.AST.Parameter]
  = Language.Python.Common.AST.$fAnnotatedParameter
instance [safe] Language.Python.Common.AST.Annotated [Language.Python.Common.AST.Slice]
  = Language.Python.Common.AST.$fAnnotatedSlice
instance [safe] Language.Python.Common.AST.Annotated [Language.Python.Common.AST.Statement]
  = Language.Python.Common.AST.$fAnnotatedStatement
instance [safe] Data.Data.Data [Language.Python.Common.AST.Argument]
  = Language.Python.Common.AST.$fDataArgument
instance [safe] Data.Data.Data [Language.Python.Common.AST.AssignOp]
  = Language.Python.Common.AST.$fDataAssignOp
instance [safe] Data.Data.Data [Language.Python.Common.AST.CompFor]
  = Language.Python.Common.AST.$fDataCompFor
instance [safe] Data.Data.Data [Language.Python.Common.AST.CompIf]
  = Language.Python.Common.AST.$fDataCompIf
instance [safe] Data.Data.Data [Language.Python.Common.AST.CompIter]
  = Language.Python.Common.AST.$fDataCompIter
instance [safe] Data.Data.Data [Language.Python.Common.AST.Comprehension]
  = Language.Python.Common.AST.$fDataComprehension
instance [safe] Data.Data.Data [Language.Python.Common.AST.ComprehensionExpr]
  = Language.Python.Common.AST.$fDataComprehensionExpr
instance [safe] Data.Data.Data [Language.Python.Common.AST.Decorator]
  = Language.Python.Common.AST.$fDataDecorator
instance [safe] Data.Data.Data [Language.Python.Common.AST.DictKeyDatumList]
  = Language.Python.Common.AST.$fDataDictKeyDatumList
instance [safe] Data.Data.Data [Language.Python.Common.AST.ExceptClause]
  = Language.Python.Common.AST.$fDataExceptClause
instance [safe] Data.Data.Data [Language.Python.Common.AST.Expr]
  = Language.Python.Common.AST.$fDataExpr
instance [safe] Data.Data.Data [Language.Python.Common.AST.FromItem]
  = Language.Python.Common.AST.$fDataFromItem
instance [safe] Data.Data.Data [Language.Python.Common.AST.FromItems]
  = Language.Python.Common.AST.$fDataFromItems
instance [safe] Data.Data.Data [Language.Python.Common.AST.Handler]
  = Language.Python.Common.AST.$fDataHandler
instance [safe] Data.Data.Data [Language.Python.Common.AST.Ident]
  = Language.Python.Common.AST.$fDataIdent
instance [safe] Data.Data.Data [Language.Python.Common.AST.ImportItem]
  = Language.Python.Common.AST.$fDataImportItem
instance [safe] Data.Data.Data [Language.Python.Common.AST.ImportRelative]
  = Language.Python.Common.AST.$fDataImportRelative
instance [safe] Data.Data.Data [Language.Python.Common.AST.Module]
  = Language.Python.Common.AST.$fDataModule
instance [safe] Data.Data.Data [Language.Python.Common.AST.Op]
  = Language.Python.Common.AST.$fDataOp
instance [safe] Data.Data.Data [Language.Python.Common.AST.ParamTuple]
  = Language.Python.Common.AST.$fDataParamTuple
instance [safe] Data.Data.Data [Language.Python.Common.AST.Parameter]
  = Language.Python.Common.AST.$fDataParameter
instance [safe] Data.Data.Data [Language.Python.Common.AST.RaiseExpr]
  = Language.Python.Common.AST.$fDataRaiseExpr
instance [safe] Data.Data.Data [Language.Python.Common.AST.Slice]
  = Language.Python.Common.AST.$fDataSlice
instance [safe] Data.Data.Data [Language.Python.Common.AST.Statement]
  = Language.Python.Common.AST.$fDataStatement
instance [safe] Data.Data.Data [Language.Python.Common.AST.YieldArg]
  = Language.Python.Common.AST.$fDataYieldArg
instance [safe] GHC.Classes.Eq [Language.Python.Common.AST.Argument]
  = Language.Python.Common.AST.$fEqArgument
instance [safe] GHC.Classes.Eq [Language.Python.Common.AST.AssignOp]
  = Language.Python.Common.AST.$fEqAssignOp
instance [safe] GHC.Classes.Eq [Language.Python.Common.AST.CompFor]
  = Language.Python.Common.AST.$fEqCompFor
instance [safe] GHC.Classes.Eq [Language.Python.Common.AST.CompIf]
  = Language.Python.Common.AST.$fEqCompIf
instance [safe] GHC.Classes.Eq [Language.Python.Common.AST.CompIter]
  = Language.Python.Common.AST.$fEqCompIter
instance [safe] GHC.Classes.Eq [Language.Python.Common.AST.Comprehension]
  = Language.Python.Common.AST.$fEqComprehension
instance [safe] GHC.Classes.Eq [Language.Python.Common.AST.ComprehensionExpr]
  = Language.Python.Common.AST.$fEqComprehensionExpr
instance [safe] GHC.Classes.Eq [Language.Python.Common.AST.Decorator]
  = Language.Python.Common.AST.$fEqDecorator
instance [safe] GHC.Classes.Eq [Language.Python.Common.AST.DictKeyDatumList]
  = Language.Python.Common.AST.$fEqDictKeyDatumList
instance [safe] GHC.Classes.Eq [Language.Python.Common.AST.ExceptClause]
  = Language.Python.Common.AST.$fEqExceptClause
instance [safe] GHC.Classes.Eq [Language.Python.Common.AST.Expr]
  = Language.Python.Common.AST.$fEqExpr
instance [safe] GHC.Classes.Eq [Language.Python.Common.AST.FromItem]
  = Language.Python.Common.AST.$fEqFromItem
instance [safe] GHC.Classes.Eq [Language.Python.Common.AST.FromItems]
  = Language.Python.Common.AST.$fEqFromItems
instance [safe] GHC.Classes.Eq [Language.Python.Common.AST.Handler]
  = Language.Python.Common.AST.$fEqHandler
instance [safe] GHC.Classes.Eq [Language.Python.Common.AST.Ident]
  = Language.Python.Common.AST.$fEqIdent
instance [safe] GHC.Classes.Eq [Language.Python.Common.AST.ImportItem]
  = Language.Python.Common.AST.$fEqImportItem
instance [safe] GHC.Classes.Eq [Language.Python.Common.AST.ImportRelative]
  = Language.Python.Common.AST.$fEqImportRelative
instance [safe] GHC.Classes.Eq [Language.Python.Common.AST.Module]
  = Language.Python.Common.AST.$fEqModule
instance [safe] GHC.Classes.Eq [Language.Python.Common.AST.Op]
  = Language.Python.Common.AST.$fEqOp
instance [safe] GHC.Classes.Eq [Language.Python.Common.AST.ParamTuple]
  = Language.Python.Common.AST.$fEqParamTuple
instance [safe] GHC.Classes.Eq [Language.Python.Common.AST.Parameter]
  = Language.Python.Common.AST.$fEqParameter
instance [safe] GHC.Classes.Eq [Language.Python.Common.AST.RaiseExpr]
  = Language.Python.Common.AST.$fEqRaiseExpr
instance [safe] GHC.Classes.Eq [Language.Python.Common.AST.Slice]
  = Language.Python.Common.AST.$fEqSlice
instance [safe] GHC.Classes.Eq [Language.Python.Common.AST.Statement]
  = Language.Python.Common.AST.$fEqStatement
instance [safe] GHC.Classes.Eq [Language.Python.Common.AST.YieldArg]
  = Language.Python.Common.AST.$fEqYieldArg
instance [safe] GHC.Base.Functor [Language.Python.Common.AST.Argument]
  = Language.Python.Common.AST.$fFunctorArgument
instance [safe] GHC.Base.Functor [Language.Python.Common.AST.AssignOp]
  = Language.Python.Common.AST.$fFunctorAssignOp
instance [safe] GHC.Base.Functor [Language.Python.Common.AST.CompFor]
  = Language.Python.Common.AST.$fFunctorCompFor
instance [safe] GHC.Base.Functor [Language.Python.Common.AST.CompIf]
  = Language.Python.Common.AST.$fFunctorCompIf
instance [safe] GHC.Base.Functor [Language.Python.Common.AST.CompIter]
  = Language.Python.Common.AST.$fFunctorCompIter
instance [safe] GHC.Base.Functor [Language.Python.Common.AST.Comprehension]
  = Language.Python.Common.AST.$fFunctorComprehension
instance [safe] GHC.Base.Functor [Language.Python.Common.AST.ComprehensionExpr]
  = Language.Python.Common.AST.$fFunctorComprehensionExpr
instance [safe] GHC.Base.Functor [Language.Python.Common.AST.Decorator]
  = Language.Python.Common.AST.$fFunctorDecorator
instance [safe] GHC.Base.Functor [Language.Python.Common.AST.DictKeyDatumList]
  = Language.Python.Common.AST.$fFunctorDictKeyDatumList
instance [safe] GHC.Base.Functor [Language.Python.Common.AST.ExceptClause]
  = Language.Python.Common.AST.$fFunctorExceptClause
instance [safe] GHC.Base.Functor [Language.Python.Common.AST.Expr]
  = Language.Python.Common.AST.$fFunctorExpr
instance [safe] GHC.Base.Functor [Language.Python.Common.AST.FromItem]
  = Language.Python.Common.AST.$fFunctorFromItem
instance [safe] GHC.Base.Functor [Language.Python.Common.AST.FromItems]
  = Language.Python.Common.AST.$fFunctorFromItems
instance [safe] GHC.Base.Functor [Language.Python.Common.AST.Handler]
  = Language.Python.Common.AST.$fFunctorHandler
instance [safe] GHC.Base.Functor [Language.Python.Common.AST.Ident]
  = Language.Python.Common.AST.$fFunctorIdent
instance [safe] GHC.Base.Functor [Language.Python.Common.AST.ImportItem]
  = Language.Python.Common.AST.$fFunctorImportItem
instance [safe] GHC.Base.Functor [Language.Python.Common.AST.ImportRelative]
  = Language.Python.Common.AST.$fFunctorImportRelative
instance [safe] GHC.Base.Functor [Language.Python.Common.AST.Module]
  = Language.Python.Common.AST.$fFunctorModule
instance [safe] GHC.Base.Functor [Language.Python.Common.AST.Op]
  = Language.Python.Common.AST.$fFunctorOp
instance [safe] GHC.Base.Functor [Language.Python.Common.AST.ParamTuple]
  = Language.Python.Common.AST.$fFunctorParamTuple
instance [safe] GHC.Base.Functor [Language.Python.Common.AST.Parameter]
  = Language.Python.Common.AST.$fFunctorParameter
instance [safe] GHC.Base.Functor [Language.Python.Common.AST.RaiseExpr]
  = Language.Python.Common.AST.$fFunctorRaiseExpr
instance [safe] GHC.Base.Functor [Language.Python.Common.AST.Slice]
  = Language.Python.Common.AST.$fFunctorSlice
instance [safe] GHC.Base.Functor [Language.Python.Common.AST.Statement]
  = Language.Python.Common.AST.$fFunctorStatement
instance [safe] GHC.Base.Functor [Language.Python.Common.AST.YieldArg]
  = Language.Python.Common.AST.$fFunctorYieldArg
instance [safe] GHC.Classes.Ord [Language.Python.Common.AST.Argument]
  = Language.Python.Common.AST.$fOrdArgument
instance [safe] GHC.Classes.Ord [Language.Python.Common.AST.AssignOp]
  = Language.Python.Common.AST.$fOrdAssignOp
instance [safe] GHC.Classes.Ord [Language.Python.Common.AST.CompFor]
  = Language.Python.Common.AST.$fOrdCompFor
instance [safe] GHC.Classes.Ord [Language.Python.Common.AST.CompIf]
  = Language.Python.Common.AST.$fOrdCompIf
instance [safe] GHC.Classes.Ord [Language.Python.Common.AST.CompIter]
  = Language.Python.Common.AST.$fOrdCompIter
instance [safe] GHC.Classes.Ord [Language.Python.Common.AST.Comprehension]
  = Language.Python.Common.AST.$fOrdComprehension
instance [safe] GHC.Classes.Ord [Language.Python.Common.AST.ComprehensionExpr]
  = Language.Python.Common.AST.$fOrdComprehensionExpr
instance [safe] GHC.Classes.Ord [Language.Python.Common.AST.Decorator]
  = Language.Python.Common.AST.$fOrdDecorator
instance [safe] GHC.Classes.Ord [Language.Python.Common.AST.DictKeyDatumList]
  = Language.Python.Common.AST.$fOrdDictKeyDatumList
instance [safe] GHC.Classes.Ord [Language.Python.Common.AST.ExceptClause]
  = Language.Python.Common.AST.$fOrdExceptClause
instance [safe] GHC.Classes.Ord [Language.Python.Common.AST.Expr]
  = Language.Python.Common.AST.$fOrdExpr
instance [safe] GHC.Classes.Ord [Language.Python.Common.AST.FromItem]
  = Language.Python.Common.AST.$fOrdFromItem
instance [safe] GHC.Classes.Ord [Language.Python.Common.AST.FromItems]
  = Language.Python.Common.AST.$fOrdFromItems
instance [safe] GHC.Classes.Ord [Language.Python.Common.AST.Handler]
  = Language.Python.Common.AST.$fOrdHandler
instance [safe] GHC.Classes.Ord [Language.Python.Common.AST.Ident]
  = Language.Python.Common.AST.$fOrdIdent
instance [safe] GHC.Classes.Ord [Language.Python.Common.AST.ImportItem]
  = Language.Python.Common.AST.$fOrdImportItem
instance [safe] GHC.Classes.Ord [Language.Python.Common.AST.ImportRelative]
  = Language.Python.Common.AST.$fOrdImportRelative
instance [safe] GHC.Classes.Ord [Language.Python.Common.AST.Module]
  = Language.Python.Common.AST.$fOrdModule
instance [safe] GHC.Classes.Ord [Language.Python.Common.AST.Op]
  = Language.Python.Common.AST.$fOrdOp
instance [safe] GHC.Classes.Ord [Language.Python.Common.AST.ParamTuple]
  = Language.Python.Common.AST.$fOrdParamTuple
instance [safe] GHC.Classes.Ord [Language.Python.Common.AST.Parameter]
  = Language.Python.Common.AST.$fOrdParameter
instance [safe] GHC.Classes.Ord [Language.Python.Common.AST.RaiseExpr]
  = Language.Python.Common.AST.$fOrdRaiseExpr
instance [safe] GHC.Classes.Ord [Language.Python.Common.AST.Slice]
  = Language.Python.Common.AST.$fOrdSlice
instance [safe] GHC.Classes.Ord [Language.Python.Common.AST.Statement]
  = Language.Python.Common.AST.$fOrdStatement
instance [safe] GHC.Classes.Ord [Language.Python.Common.AST.YieldArg]
  = Language.Python.Common.AST.$fOrdYieldArg
instance [safe] GHC.Show.Show [Language.Python.Common.AST.Argument]
  = Language.Python.Common.AST.$fShowArgument
instance [safe] GHC.Show.Show [Language.Python.Common.AST.AssignOp]
  = Language.Python.Common.AST.$fShowAssignOp
instance [safe] GHC.Show.Show [Language.Python.Common.AST.CompFor]
  = Language.Python.Common.AST.$fShowCompFor
instance [safe] GHC.Show.Show [Language.Python.Common.AST.CompIf]
  = Language.Python.Common.AST.$fShowCompIf
instance [safe] GHC.Show.Show [Language.Python.Common.AST.CompIter]
  = Language.Python.Common.AST.$fShowCompIter
instance [safe] GHC.Show.Show [Language.Python.Common.AST.Comprehension]
  = Language.Python.Common.AST.$fShowComprehension
instance [safe] GHC.Show.Show [Language.Python.Common.AST.ComprehensionExpr]
  = Language.Python.Common.AST.$fShowComprehensionExpr
instance [safe] GHC.Show.Show [Language.Python.Common.AST.Decorator]
  = Language.Python.Common.AST.$fShowDecorator
instance [safe] GHC.Show.Show [Language.Python.Common.AST.DictKeyDatumList]
  = Language.Python.Common.AST.$fShowDictKeyDatumList
instance [safe] GHC.Show.Show [Language.Python.Common.AST.ExceptClause]
  = Language.Python.Common.AST.$fShowExceptClause
instance [safe] GHC.Show.Show [Language.Python.Common.AST.Expr]
  = Language.Python.Common.AST.$fShowExpr
instance [safe] GHC.Show.Show [Language.Python.Common.AST.FromItem]
  = Language.Python.Common.AST.$fShowFromItem
instance [safe] GHC.Show.Show [Language.Python.Common.AST.FromItems]
  = Language.Python.Common.AST.$fShowFromItems
instance [safe] GHC.Show.Show [Language.Python.Common.AST.Handler]
  = Language.Python.Common.AST.$fShowHandler
instance [safe] GHC.Show.Show [Language.Python.Common.AST.Ident]
  = Language.Python.Common.AST.$fShowIdent
instance [safe] GHC.Show.Show [Language.Python.Common.AST.ImportItem]
  = Language.Python.Common.AST.$fShowImportItem
instance [safe] GHC.Show.Show [Language.Python.Common.AST.ImportRelative]
  = Language.Python.Common.AST.$fShowImportRelative
instance [safe] GHC.Show.Show [Language.Python.Common.AST.Module]
  = Language.Python.Common.AST.$fShowModule
instance [safe] GHC.Show.Show [Language.Python.Common.AST.Op]
  = Language.Python.Common.AST.$fShowOp
instance [safe] GHC.Show.Show [Language.Python.Common.AST.ParamTuple]
  = Language.Python.Common.AST.$fShowParamTuple
instance [safe] GHC.Show.Show [Language.Python.Common.AST.Parameter]
  = Language.Python.Common.AST.$fShowParameter
instance [safe] GHC.Show.Show [Language.Python.Common.AST.RaiseExpr]
  = Language.Python.Common.AST.$fShowRaiseExpr
instance [safe] GHC.Show.Show [Language.Python.Common.AST.Slice]
  = Language.Python.Common.AST.$fShowSlice
instance [safe] GHC.Show.Show [Language.Python.Common.AST.Statement]
  = Language.Python.Common.AST.$fShowStatement
instance [safe] GHC.Show.Show [Language.Python.Common.AST.YieldArg]
  = Language.Python.Common.AST.$fShowYieldArg
instance [safe] Language.Python.Common.SrcLocation.Span [Language.Python.Common.AST.Argument]
  = Language.Python.Common.AST.$fSpanArgument
instance [safe] Language.Python.Common.SrcLocation.Span [Language.Python.Common.AST.AssignOp]
  = Language.Python.Common.AST.$fSpanAssignOp
instance [safe] Language.Python.Common.SrcLocation.Span [Language.Python.Common.AST.CompFor]
  = Language.Python.Common.AST.$fSpanCompFor
instance [safe] Language.Python.Common.SrcLocation.Span [Language.Python.Common.AST.CompIf]
  = Language.Python.Common.AST.$fSpanCompIf
instance [safe] Language.Python.Common.SrcLocation.Span [Language.Python.Common.AST.CompIter]
  = Language.Python.Common.AST.$fSpanCompIter
instance [safe] Language.Python.Common.SrcLocation.Span [Language.Python.Common.AST.Comprehension]
  = Language.Python.Common.AST.$fSpanComprehension
instance [safe] Language.Python.Common.SrcLocation.Span [Language.Python.Common.AST.ComprehensionExpr]
  = Language.Python.Common.AST.$fSpanComprehensionExpr
instance [safe] Language.Python.Common.SrcLocation.Span [Language.Python.Common.AST.Decorator]
  = Language.Python.Common.AST.$fSpanDecorator
instance [safe] Language.Python.Common.SrcLocation.Span [Language.Python.Common.AST.DictKeyDatumList]
  = Language.Python.Common.AST.$fSpanDictKeyDatumList
instance [safe] Language.Python.Common.SrcLocation.Span [Language.Python.Common.AST.ExceptClause]
  = Language.Python.Common.AST.$fSpanExceptClause
instance [safe] Language.Python.Common.SrcLocation.Span [Language.Python.Common.AST.Expr]
  = Language.Python.Common.AST.$fSpanExpr
instance [safe] Language.Python.Common.SrcLocation.Span [Language.Python.Common.AST.FromItem]
  = Language.Python.Common.AST.$fSpanFromItem
instance [safe] Language.Python.Common.SrcLocation.Span [Language.Python.Common.AST.FromItems]
  = Language.Python.Common.AST.$fSpanFromItems
instance [safe] Language.Python.Common.SrcLocation.Span [Language.Python.Common.AST.Handler]
  = Language.Python.Common.AST.$fSpanHandler
instance [safe] Language.Python.Common.SrcLocation.Span [Language.Python.Common.AST.Ident]
  = Language.Python.Common.AST.$fSpanIdent
instance [safe] Language.Python.Common.SrcLocation.Span [Language.Python.Common.AST.ImportItem]
  = Language.Python.Common.AST.$fSpanImportItem
instance [safe] Language.Python.Common.SrcLocation.Span [Language.Python.Common.AST.ImportRelative]
  = Language.Python.Common.AST.$fSpanImportRelative
instance [safe] Language.Python.Common.SrcLocation.Span [Language.Python.Common.AST.Op]
  = Language.Python.Common.AST.$fSpanOp
instance [safe] Language.Python.Common.SrcLocation.Span [Language.Python.Common.AST.ParamTuple]
  = Language.Python.Common.AST.$fSpanParamTuple
instance [safe] Language.Python.Common.SrcLocation.Span [Language.Python.Common.AST.Parameter]
  = Language.Python.Common.AST.$fSpanParameter
instance [safe] Language.Python.Common.SrcLocation.Span [Language.Python.Common.AST.Slice]
  = Language.Python.Common.AST.$fSpanSlice
instance [safe] Language.Python.Common.SrcLocation.Span [Language.Python.Common.AST.Statement]
  = Language.Python.Common.AST.$fSpanStatement
instance [safe] Language.Python.Common.SrcLocation.Span [Language.Python.Common.AST.YieldArg]
  = Language.Python.Common.AST.$fSpanYieldArg
"SPEC/Language.Python.Common.AST $fData[] @ [Char]" [orphan] forall (v :: Data.Data.Data
                                                                            [GHC.Types.Char])
  Data.Data.$fData[] @ [GHC.Types.Char] v
  = Language.Python.Common.AST.$s$fData[]
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

